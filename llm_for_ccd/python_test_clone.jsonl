[{"id": 993, "code1": "import sys\ns = input()\nk = len(s)\nfor i in range(2,len(s),2):\n    s = s[:len(s)-2]\n    if s[:(len(s)//2)] == s[(len(s)//2):]:\n        print(k-i)\n        sys.exit()\n    ", "code2": "while True:\n    t= int(input())\n    if t== 0: break\n    n= int(input())\n    c= [list(map(int, input().split())) for _ in range(n)]\n    sf= sum(c[i][1]-c[i][0] for i in range(n))\n    print(\"OK\" if t<= sf else t-sf)", "label": 0, "name1": "s986303518.py", "name2": "s737311536.py"}, {"id": 133, "code1": "import sys\nread = sys.stdin.buffer.read\nreadline = sys.stdin.buffer.readline\nreadlines = sys.stdin.buffer.readlines\n\nimport numpy as np\n\nN = int(readline())\nS = read().rstrip().decode('utf-8')\n\nMOD = 10**9 + 7\n\n\"\"\"\n\u30fb\u6700\u5f8c\u306b\u4f7f\u3063\u305f\u6570\u306b\u5bfe\u3057\u3066\u3001\u4e0b\u5074\u306b\u6b8b\u3063\u3066\u3044\u308b\u500b\u6570 -> \u6570\u3048\u4e0a\u3052\n\"\"\"\n\ndp = np.ones(N,np.int64) # \u5de6\u7aef\n\nfor s in S:\n    prev = dp\n    if s == '<':\n        # 0,1,...,n\u304cdp[n]\u306b\u9077\u79fb\u3059\u308b\n        dp = prev[:-1].cumsum()\n    else:\n        # n+1,n+2,...\u304cdp[n]\u306b\u9077\u79fb\u3059\u308b\n        dp = prev[1:][::-1].cumsum()[::-1]\n    dp %= MOD\n\nanswer = dp[0]\nprint(answer)", "code2": "from itertools import accumulate\n\nmod = 10 ** 9 + 7\n\nN = int(input())\nS = input()\n\ndp = [1] * N\nfor s in S:\n    if s == \"<\":\n        dp = [a % mod for a in accumulate(dp[:-1])]\n    else:\n        dp = [a % mod for a in accumulate(reversed(dp[1:]))]\n        dp.reverse()\n\nprint(dp[0])", "label": 1, "name1": "s898339720.py", "name2": "s900318425.py"}, {"id": 104, "code1": "import math\na, b, C = map(float, input().split())\nC = C / 180 * math.pi\nprint('%.06f' % (a * b * math.sin(C) / 2))\nprint('%.06f' % ((a**2 + b**2 -2*a*b*math.cos(C))**(1/2) + a + b))\nprint('%.06f' % (b*math.sin(C)))", "code2": "import math\na,b,c = map(float, input().split())\nC = math.radians(c)\nS = a*b*math.sin(C)*0.5\nL = (a**2 + b**2 - 2.0*a*b*math.cos(C))**0.5+a+b\nh = 2*S/a\n\nprint(S)\nprint(L)\nprint(h)\n\n", "label": 1, "name1": "s950542255.py", "name2": "s252034794.py"}, {"id": 832, "code1": "n=int(input())\ns=input()\n\nE=[0 for i in range(n)]\nW=[0 for i in range(n)]\n\ncnt=0\nfor i in range(n):\n    W[i]=cnt\n    if s[i]==\"W\":\n        cnt+=1\n\ncnt=0   \nfor i in range(n):\n    E[n-1-i]=cnt\n    if s[n-1-i]==\"E\":\n        cnt+=1\n\nmini=10**8\nfor i in range(n):\n    mini=min(mini,E[i]+W[i])\n\nprint(mini)", "code2": "N = int(input())\narray = list(map(int, input().split()))\ncnt = 0 \nfor i in range(N):\n\tminij = i \n\tfor j in range(i, N):\n\t\tif array[j] < array[minij]:\n\t\t\tminij = j \n\tif minij != i:\n\t\tarray[i], array[minij] = array[minij], array[i]\n\t\tcnt += 1\n\nprint(' '.join(map(str, array)))\nprint( \"%d\" % (cnt))\n\n", "label": 0, "name1": "s614583596.py", "name2": "s260667176.py"}, {"id": 606, "code1": "import sys\ninput = sys.stdin.readline\nQ = int(input())\n\ndef check(x, a, b):\n  y = (a <= -(-x // 2)) or (b <= -(-x // 2))\n  z = (a <= (x // 2 + 1)) and (b <= (x // 2 + 1))\n  return (-(-x // 2) + y) * ((x // 2 + 1) + z) < a * b\n\nfor _ in range(Q):\n  a, b = map(int, input().split())\n\n  ok = 0\n  ng = a * b\n  while ng - ok > 1:\n    m = (ok + ng) // 2\n    if check(m, a, b): ok = m\n    else: ng = m\n  print(ok)", "code2": "# AOJ 1126: The Secret Number\n# Python3 2018.7.16 bal4u\n\nwhile True:\n\tW, H = map(int, input().split())\n\tif W == 0: break\n\td = [list(input()) for r in range(H)]\n\ta = [[0 for c in range(W)] for r in range(H)]\n\tans = 0\n\tfor r in range(H):\n\t\tfor c in range(W):\n\t\t\tif not d[r][c].isdigit(): continue\n\t\t\ta[r][c] = k = int(d[r][c])\n\t\t\tif c > 0 and d[r][c-1].isdigit():\n\t\t\t\ta[r][c] = a[r][c-1]*10 + k\n\t\t\tif r > 0 and d[r-1][c].isdigit():\n\t\t\t\tt = a[r-1][c]*10 + k\n\t\t\t\ta[r][c] = max(a[r][c], t)\n\t\t\tans = max(ans, a[r][c])\n\tprint(ans);\n\n", "label": 0, "name1": "s809561228.py", "name2": "s855726623.py"}, {"id": 230, "code1": "n=int(raw_input())\ng=[[1000000]*n for _ in xrange(n)]\nfor i in xrange(n):\n    g[i][i]=0\nfor i in xrange(n):\n    r=map(int,raw_input().split())\n    for j in r[2:]:\n        g[r[0]-1][j-1]=1\nfor k in xrange(n):\n    for i in xrange(n):\n        for j in xrange(n):\n            g[i][j]=min(g[i][j],g[i][k]+g[k][j])\nm=int(raw_input())\nfor i in xrange(m):\n    s,d,v=map(int,raw_input().split())\n    s-=1\n    d-=1\n    if g[s][d]<v:\n        print(g[s][d]+1)\n    else:\n        print('NA')", "code2": "def solve(A):\n  s,d,v = A\n  C = [-1 for _ in [0]*(n+1)]\n  c = 1\n  C[s] = c\n  SP = M[s]\n  while 1:\n    if SP==[]: return \"NA\"\n    c += 1\n    X = []\n    for p in SP:\n      if C[p]>0: continue\n      C[p] = c\n      for e in M[p]:\n        if C[e]<0 and e not in SP: X.append(e)\n      if p==d:\n        if C[p]>v: return \"NA\"\n        else: return C[p]\n    SP = X\n\nn = int(raw_input())\nM = {}\n\nfor _ in [0]*n:\n  x = map(int, raw_input().split())\n  M[x[0]]=x[2:]\nfor _ in [0]*int(raw_input()):\n  print solve(map(int,raw_input().split()))", "label": 1, "name1": "s227640621.py", "name2": "s192964997.py"}, {"id": 687, "code1": "deg = [0] * 4\nfor _ in range(3):\n    a, b = map(int, input().split())\n    deg[a - 1] += 1\n    deg[b - 1] += 1\nif all(x <= 2 for x in deg):\n    print(\"YES\")\nelse:\n    print(\"NO\")\n", "code2": "N,M = map(int,(input().split()))\nX = list(map(int,(input().split())))\nX.sort()\nif M > N:\n    dist = [X[i+1]-X[i] for i in range(M - 1)]\n    dist.sort(reverse = True)\n    del dist[0:N-1]\n    print(sum(dist))\nelse:\n print(0)", "label": 0, "name1": "s546079663.py", "name2": "s025338416.py"}, {"id": 618, "code1": "# AOJ 1126: The Secret Number\n# Python3 2018.7.16 bal4u\n\nwhile True:\n\tW, H = map(int, input().split())\n\tif W == 0: break\n\td = [list(input()) for r in range(H)]\n\ta = [[0 for c in range(W)] for r in range(H)]\n\tans = 0\n\tfor r in range(H):\n\t\tfor c in range(W):\n\t\t\tif not d[r][c].isdigit(): continue\n\t\t\ta[r][c] = k = int(d[r][c])\n\t\t\tif c > 0 and d[r][c-1].isdigit():\n\t\t\t\ta[r][c] = a[r][c-1]*10 + k\n\t\t\tif r > 0 and d[r-1][c].isdigit():\n\t\t\t\tt = a[r-1][c]*10 + k\n\t\t\t\ta[r][c] = max(a[r][c], t)\n\t\t\tans = max(ans, a[r][c])\n\tprint(ans);\n\n", "code2": "n = int(input())\nS = list(map(int, input().split()))\ns = sorted(S, reverse=True)\n\nif n %2 ==0:\n  l = n/2\n  m = s[0]\n  s = s[1:int(l)]\n  p = sum(s)\n  o = p*2 + m \n  print(o)\nelse:\n  l = (n+1)/2\n  m = s[0]\n  q = s[int(l)-1]\n  s = s[1:int(l-1)]\n  p = sum(s)\n  o = p*2 + m +q\n  print(o)\n  ", "label": 0, "name1": "s855726623.py", "name2": "s142787879.py"}, {"id": 400, "code1": "n = input()\nfor i in sorted(map(int, raw_input().split())):\n print i ,", "code2": "raw_input()\nx = ' '.join(sorted(raw_input().split(), key =int))\nprint x", "label": 1, "name1": "s740416119.py", "name2": "s024577141.py"}, {"id": 692, "code1": "tree = [ [] for _ in range(4) ]\n\nfor i in range(3):\n    a, b = map(int, input().split())\n    a -= 1; b -= 1;\n    tree[a].append(b)\n    tree[b].append(a)\n\nfor i in range(4):\n    visited = [ False for _ in range(4) ]\n    cur = i\n    visited[cur] = True\n    for j in range(3):\n        for v in tree[cur]:\n            if not visited[v]:\n                next_v = v\n                break\n        visited[next_v] = True\n        cur = next_v\n\nprint ( \"YES\" if all(visited) else \"NO\" )\n", "code2": "class UnionFind():\n    def __init__(self, n):\n        self.n = n\n        self.parents = [-1] * n\n\n    def find(self, x):\n        if self.parents[x] < 0:\n            return x\n        else:\n            self.parents[x] = self.find(self.parents[x])\n            return self.parents[x]\n\n    def union(self, x, y):\n        x = self.find(x)\n        y = self.find(y)\n\n        if x == y:\n            return\n\n        if self.parents[x] > self.parents[y]:\n            x, y = y, x\n\n        self.parents[x] += self.parents[y]\n        self.parents[y] = x\n\n    def size(self, x):\n        return -self.parents[self.find(x)]\n\n    def same(self, x, y):\n        return self.find(x) == self.find(y)\n\n    def members(self, x):\n        root = self.find(x)\n        return [i for i in range(self.n) if self.find(i) == root]\n\n    def roots(self):\n        return [i for i, x in enumerate(self.parents) if x < 0]\n\n    def group_count(self):\n        return len(self.roots())\n\n    def all_group_members(self):\n        return {r: self.members(r) for r in self.roots()}\n\n    def __str__(self):\n        return '\\n'.join('{}: {}'.format(r, self.members(r)) for r in self.roots())\n\nN,M=list(map(int,input().split()))\nNetwork = UnionFind(N)\nfor i in range(M):\n    a,b=list(map(int,input().split()))\n    Network.union(a-1, b-1)\nprint(Network.group_count()-1)", "label": 0, "name1": "s679343249.py", "name2": "s144436411.py"}, {"id": 749, "code1": "I,O,R,J,L,S,Z=map(int,input().split())\na=(I//2+J//2+L//2)*2\nb=0\nif I*J*L!=0:b=(2*((I-1)//2+(J-1)//2+(L-1)//2)+3)\nprint(max(a,b)+O)", "code2": "h, w = map(int, input().split())\na = [list(input()) for i in range(h)]\nta = [[\".\"] * w for i in range(h)]\nao = [[\".\"] * w for i in range(h)]\nfor i in range(h):\n    if i % 2 == 0:\n        for j in range(w - 1):\n            ta[i][j] = \"#\"\n        ao[i][-1] = \"#\"\n    else:\n        for j in range(1, w):\n            ao[i][j] = \"#\"\n        ta[i][0] = \"#\"\nfor i in range(h):\n    for j in range(w):\n        if a[i][j] == \"#\":\n            ta[i][j] = \"#\"\n            ao[i][j] = \"#\"\nfor i in range(h):\n    print(*ta[i], sep=\"\")\nprint()\nfor i in range(h):\n    print(*ao[i], sep=\"\")", "label": 0, "name1": "s966423542.py", "name2": "s319820171.py"}, {"id": 17, "code1": "S = input()\n\nflag = 'Yes'\nfor i in range(len(S)):\n    if i%2 == 0:\n        if S[i] == 'R' or S[i] == 'U' or S[i] == 'D':\n            pass\n        else:\n            flag = 'No'\n            break\n    if i%2 == 1:\n        if S[i] == 'L' or S[i] == 'U' or S[i] == 'D':\n            pass\n        else:\n            flag = 'No'\n            break\n\nprint(flag)\n", "code2": "S = input()\n\nfor i in range(len(S)):\n    if i % 2 == 0:\n        if not (S[i] in ['R', 'U', 'D']):\n            print('No')\n            exit()\n    else:\n        if not (S[i] in ['L', 'U', 'D']):\n            print('No')\n            exit()\n\nprint('Yes')", "label": 1, "name1": "s961835833.py", "name2": "s049903462.py"}, {"id": 226, "code1": "inf = 2**31\n\nn = int(raw_input())\nG = [[inf]*n for _ in range(n)]\nref = {}\ninputs = [map(int,raw_input().split()) for _ in range(n)]\nfor i in range(n): ref[inputs[i][0]] = i\nfor i in range(n):\n    for j in inputs[i][2:]:\n        G[i][ref[j]] = 1\n        \nfor k in range(n):\n    for i in range(n):\n        for j in range(n):\n            G[i][j] = min(G[i][j],G[i][k]+G[k][j])\n            \np = int(raw_input())\nfor loop in range(p):\n    s,d,v = map(int,raw_input().split())\n    dist = G[ref[s]][ref[d]]\n    print dist+1 if dist+1 <= v else \"NA\"", "code2": "# AOJ 0144 Packet Transportation\n# Python3 2018.6.23 bal4u\n\nINF = 0x7fffffff\nn = int(input())\narr = [[INF for j in range(n)] for i in range(n)]\nfor i in range(n):\n\ta = list(map(int, input().split()))\n\tx, k = a[0]-1, a[1]\n\tfor j in range(k):\n\t\ty = a[j+2]-1\n\t\tarr[x][y] = 1\nfor k in range(n):\n\tarr[k][k] = 0\n\tfor i in range(n):\n\t\tif arr[i][k] >= INF: continue\n\t\tfor j in range(n):\n\t\t\tif arr[k][j] >= INF: continue\n\t\t\tarr[i][j] = min(arr[i][j], arr[i][k] + arr[k][j])\np = int(input())\nfor i in range(p):\n\ts, d, v = map(int, input().split())\n\ts,d = s-1, d-1\n\tprint(arr[s][d]+1 if arr[s][d] < v else \"NA\")\n", "label": 1, "name1": "s378122232.py", "name2": "s881383078.py"}, {"id": 878, "code1": "a, b, c, x, y = map(int, input().split())\nc *= 2\nans = min(a+b, c) * min(x, y)\nif x>y:\n    ans += (x-y)*min(a, c)\nelse:\n    ans += (y-x)*min(b, c)\nprint(ans)", "code2": "#!/usr/bin/env python3\nimport sys\nsys.setrecursionlimit(10**8)\nINF = float(\"inf\")\n\n\ndef solve(K: int, A: int, B: int):\n    for s in range(A, B+1):\n        if s % K == 0:\n            print(\"OK\")\n            return\n    print(\"NG\")\n    return\n\n\ndef main():\n\n    def iterate_tokens():\n        for line in sys.stdin:\n            for word in line.split():\n                yield word\n    tokens = iterate_tokens()\n    K = int(next(tokens))  # type: int\n    A = int(next(tokens))  # type: int\n    B = int(next(tokens))  # type: int\n    solve(K, A, B)\n\n\nif __name__ == '__main__':\n    main()\n", "label": 0, "name1": "s327021416.py", "name2": "s658779563.py"}, {"id": 142, "code1": "num = list(map(int, input().split()))\nnum.sort()\n\nx = num[2] * 3 - sum(num)\n\nif x%2 == 0:\n  ans = int(x/2)\nelse:\n  ans = int(x//2 + 2)\n\nprint(ans)\n", "code2": "def main():\n    A, B, C = map(int, input().split())\n    max_num = max(A, B, C)\n    t = 3 * max_num - A - B - C\n    ans = 0\n\n    if t % 2 == 0:\n        ans = int(t / 2)\n    else:\n        ans = int((t + 3) / 2)\n\n    print(ans)\n\n\nif __name__ == \"__main__\":\n    main()\n", "label": 1, "name1": "s512155836.py", "name2": "s458798923.py"}, {"id": 643, "code1": "n = int(input())\nsa,sb=[int(it) for it in input().split()]\nfor i in range(n-1):\n  a,b=[int(it) for it in input().split()]\n  r =  max( sa//a + (1 if sa%a!=0 else 0),sb//b+(1 if sb%b!=0 else 0) )\n  sa = r*a\n  sb = r*b\nprint (sa+sb)", "code2": "n=int(raw_input())\ng=[[1000000]*n for _ in xrange(n)]\nfor i in xrange(n):\n    g[i][i]=0\nfor i in xrange(n):\n    r=map(int,raw_input().split())\n    for j in r[2:]:\n        g[r[0]-1][j-1]=1\nfor k in xrange(n):\n    for i in xrange(n):\n        for j in xrange(n):\n            g[i][j]=min(g[i][j],g[i][k]+g[k][j])\nm=int(raw_input())\nfor i in xrange(m):\n    s,d,v=map(int,raw_input().split())\n    s-=1\n    d-=1\n    if g[s][d]<v:\n        print(g[s][d]+1)\n    else:\n        print('NA')", "label": 0, "name1": "s718859988.py", "name2": "s227640621.py"}, {"id": 986, "code1": "# Aizu Problem 0185: Goldbach Conjecture II\n#\nimport sys, math, os, bisect\n\n# read input:\nPYDEV = os.environ.get('PYDEV')\nif PYDEV==\"True\":\n    sys.stdin = open(\"sample-input.txt\", \"rt\")\n\n\ndef primes2(n):\n    \"\"\" Input n>=6, Returns a list of primes, 2 <= p < n \"\"\"\n    n, correction = n-n%6+6, 2-(n%6>1)\n    sieve = [True] * (n//3)\n    for i in range(1,int(n**0.5)//3+1):\n      if sieve[i]:\n        k=3*i+1|1\n        sieve[      k*k//3      ::2*k] = [False] * ((n//6-k*k//6-1)//k+1)\n        sieve[k*(k-2*(i&1)+4)//3::2*k] = [False] * ((n//6-k*(k-2*(i&1)+4)//6-1)//k+1)\n    return [2,3] + [3*i+1|1 for i in range(1,n//3-correction) if sieve[i]]\n\nprimes = primes2(10**6)\npset = set(primes)\n\nwhile True:\n    n = int(input())\n    if n == 0:\n        break\n    S = 0\n    for p in primes:\n        if p > n // 2:\n            break\n        if n - p in pset:\n            S += 1\n    print(S)", "code2": "S = input()\nlen_S = len(S)\n\nfor i in range(2, len_S+1, 2):\n    check_S = S[:-i]\n    len_check_S = len(check_S)\n    half = len_check_S//2\n    if check_S[:half] == check_S[half:]:\n        print(len_check_S)\n        break\n", "label": 0, "name1": "s372898939.py", "name2": "s421296451.py"}, {"id": 874, "code1": "A,B,C,X,Y=map(int,input().split())\n\nif A+B<=2*C:\n    ans=A*X+B*Y\n\nelif X<=Y:\n    ans=2*X*C\n    Y-=X\n    ans+=min(2*Y*C,Y*B)\n\nelif X>Y:\n    ans=2*Y*C\n    X-=Y\n    ans+=min(2*X*C,X*A)\n\nprint(ans)", "code2": "a,b=input().split()\nif a==\"H\":\n  if b==\"H\":\n    print(\"H\")\n  else:\n    print(\"D\")\nif a==\"D\":\n  if b==\"H\":\n    print(\"D\")\n  else:\n    print(\"H\")", "label": 0, "name1": "s332388641.py", "name2": "s799192785.py"}, {"id": 353, "code1": "x, y = map(int, input().split())\ncnt = 1\nwhile True:\n    if x > y:\n        print(cnt - 1)\n        exit()\n    else:\n        x *= 2\n        cnt += 1\n", "code2": "x, y=map(int, input().split())\nans=[]\n\nwhile x<=y:\n    ans.append(x)\n    x*=2\n\nprint(len(ans))", "label": 1, "name1": "s788055694.py", "name2": "s268106998.py"}, {"id": 660, "code1": "# -*- coding: utf-8 -*-\nimport sys\nfrom sys import stdin\nimport math\n\nn, k = map(int, stdin.readline().split())\nw = list([int(stdin.readline().rstrip()) for i in range(n)])\n\ndef main2():\n  def is_ok():\n    cnt_track = w_tmp = 0\n    for w_i in w:\n      w_tmp += w_i\n      if w_tmp > m:\n        w_tmp = w_i\n        cnt_track += 1\n        if cnt_track >= k:\n          return 0\n    return 1\n\n  r = sum(w)\n  l = max(math.ceil(r/k),max(w))\n  while l < r:\n    m = (l + r) // 2\n    # print(\"%d %d %d \" % (l, r, m))\n    if is_ok():\n      r = m\n    else:\n      l = m + 1\n  print(r)\n\nif __name__ == '__main__':\n  main2()\n\n", "code2": "S = list(input())\nT = list(input())\n\nS.reverse()\nT.reverse()\nflag = False\n\nfor i in range(len(S)-len(T)+1):\n    for j in range(len(T)):\n        if S[j+i] == T[j] or S[j+i] == '?':\n            pass\n        else:\n            break\n\n        if j == len(T)-1:\n            flag = True\n            for k in range(len(T)):\n                if S[k+i] == '?':\n                    S[k+i] = T[k]\n            break\n    if flag:\n        break\n\nif flag:\n    for i in range(len(S)):\n        if S[i] == '?':\n            S[i] = 'a'\n    S.reverse()\n    print(''.join(S))\n\nelse:\n    print('UNRESTORABLE')\n\n\n\n", "label": 0, "name1": "s518389793.py", "name2": "s456382222.py"}, {"id": 974, "code1": "import bisect\nn=int(input())\na=list(map(int,input().split()))\nb=list(map(int,input().split()))\nc=list(map(int,input().split()))\na.sort()\nb.sort()\nc.sort()\nans=0\nfor k in b:\n    i=bisect.bisect_left(a,k)\n    j=bisect.bisect_right(c,k)\n    if 0<i and j!=len(c):\n        ans+=i*(n-j)\nprint(ans)", "code2": "# Aizu Problem 0185: Goldbach Conjecture II\n#\nimport sys, math, os, bisect\n\n# read input:\nPYDEV = os.environ.get('PYDEV')\nif PYDEV==\"True\":\n    sys.stdin = open(\"sample-input.txt\", \"rt\")\n\n\ndef primes2(n):\n    \"\"\" Input n>=6, Returns a list of primes, 2 <= p < n \"\"\"\n    n, correction = n-n%6+6, 2-(n%6>1)\n    sieve = [True] * (n//3)\n    for i in range(1,int(n**0.5)//3+1):\n      if sieve[i]:\n        k=3*i+1|1\n        sieve[      k*k//3      ::2*k] = [False] * ((n//6-k*k//6-1)//k+1)\n        sieve[k*(k-2*(i&1)+4)//3::2*k] = [False] * ((n//6-k*(k-2*(i&1)+4)//6-1)//k+1)\n    return [2,3] + [3*i+1|1 for i in range(1,n//3-correction) if sieve[i]]\n\nprimes = primes2(10**6)\npset = set(primes)\n\nwhile True:\n    n = int(input())\n    if n == 0:\n        break\n    S = 0\n    for p in primes:\n        if p > n // 2:\n            break\n        if n - p in pset:\n            S += 1\n    print(S)", "label": 0, "name1": "s334484624.py", "name2": "s372898939.py"}, {"id": 208, "code1": "def main():\n    n = int(input())\n    x,y = 1,1\n    for _ in range(n):\n        t,a = map(int,input().split())\n        z = -1*min(-x//t,-y//a)\n        x = z*t\n        y = z*a\n        # print(x,y)\n    print(x+y)\n\nmain()", "code2": "n = input()\np, q = [-1, -1]\nfor i in xrange(n):\n    t, a = map(int, raw_input().split())\n    if p == -1 or q == -1:\n        p = t\n        q = a\n        continue\n    if t >= p and a >= q:\n        p = t\n        q = a\n    else:\n        z = max(p / t + (p % t != 0), q / a + (q % a != 0))\n        p = t * z\n        q = a * z\nprint p + q\n\n", "label": 1, "name1": "s902948767.py", "name2": "s412403305.py"}, {"id": 16, "code1": "S = input()\n\nflag = 'Yes'\nfor i in range(len(S)):\n    if i%2 == 0:\n        if S[i] == 'R' or S[i] == 'U' or S[i] == 'D':\n            pass\n        else:\n            flag = 'No'\n            break\n    if i%2 == 1:\n        if S[i] == 'L' or S[i] == 'U' or S[i] == 'D':\n            pass\n        else:\n            flag = 'No'\n            break\n\nprint(flag)\n", "code2": "def inpl():\n    return list(map(int, input().split()))\n\n\nS = input()\n\nflag = True\nfor i in range(len(S)):\n    if i % 2 == 0 and S[i] in 'RUD':\n        continue\n    elif i % 2 == 1 and S[i] in 'LUD':\n        continue\n    flag = False\n\nprint('Yes' if flag is True else 'No')\n", "label": 1, "name1": "s961835833.py", "name2": "s669982187.py"}, {"id": 629, "code1": "import math\nN = int(input())\nA = list(map(int,input().split()))\nA.sort(reverse = True)\n\nans = 0\nfor i in range(1,N):\n  a = math.floor(i/2)\n  ans += A[a]\n    \nprint(ans)", "code2": "N = int(raw_input())\nT_list = map(int, raw_input().split())\nA_list = map(int, raw_input().split())\n\nlow_list = [1]*N\nhigh_list = [1]*N\n\nt_now = 0\nfor i in range(N):\n    if T_list[i] > t_now:\n        t_now = T_list[i]\n        low_list[i] = T_list[i]\n        high_list[i] = T_list[i]\n    else:\n        high_list[i] = T_list[i]\na_now = 0\nfor j in range(N):\n    i = N - 1 - j\n    if A_list[i] > a_now:\n        a_now = A_list[i]\n        low_list[i] = max(A_list[i], low_list[i])\n        high_list[i] = min(A_list[i], high_list[i])\n    else:\n        high_list[i] = min(A_list[i], high_list[i])\n    \nres = 1\nfor i in range(N):\n    if high_list[i] < low_list[i]:\n        res = 0\n        break\n    else:\n        res = res*(high_list[i] - low_list[i] + 1) % 1000000007\n\nprint res", "label": 0, "name1": "s069304778.py", "name2": "s251140241.py"}, {"id": 134, "code1": "import sys\nread = sys.stdin.buffer.read\nreadline = sys.stdin.buffer.readline\nreadlines = sys.stdin.buffer.readlines\n\nimport numpy as np\n\nN = int(readline())\nS = read().rstrip().decode('utf-8')\n\nMOD = 10**9 + 7\n\n\"\"\"\n\u30fb\u6700\u5f8c\u306b\u4f7f\u3063\u305f\u6570\u306b\u5bfe\u3057\u3066\u3001\u4e0b\u5074\u306b\u6b8b\u3063\u3066\u3044\u308b\u500b\u6570 -> \u6570\u3048\u4e0a\u3052\n\"\"\"\n\ndp = np.ones(N,np.int64) # \u5de6\u7aef\n\nfor s in S:\n    prev = dp\n    if s == '<':\n        # 0,1,...,n\u304cdp[n]\u306b\u9077\u79fb\u3059\u308b\n        dp = prev[:-1].cumsum()\n    else:\n        # n+1,n+2,...\u304cdp[n]\u306b\u9077\u79fb\u3059\u308b\n        dp = prev[1:][::-1].cumsum()[::-1]\n    dp %= MOD\n\nanswer = dp[0]\nprint(answer)", "code2": "N = int(input())\ns = input()\nmod = 10**9+7\n\ndp = [[0] * N for _ in range(N)]\ndp[0][0] = 1\nfor i in range(N-1):\n    prev_cs = [0] * (N+1)\n    for j in range(N):\n        prev_cs[j+1] = (prev_cs[j] + dp[i][j]) % mod\n    if s[i] == '>':\n        for j in range(i+2):\n            dp[i+1][j] = (prev_cs[-1] - prev_cs[j]) % mod\n    else:\n        for j in range(i+2):\n            dp[i+1][j] = prev_cs[j]\n\nans = 0\nfor x in dp[-1]:\n    ans = (ans + x) % mod\nprint(ans)\n", "label": 1, "name1": "s898339720.py", "name2": "s333518045.py"}, {"id": 361, "code1": "from heapq import heappush, heappop\nimport sys\nfrom typing import List, Tuple\n\n\nif __name__ == \"__main__\":\n    V, E, r = map(lambda x: int(x), input().split())\n\n    edges: List[List[Tuple[int, int]]] = [[] for _ in range(V)]\n    dists = [sys.maxsize for _ in range(V)]\n    dists[r] = 0\n\n    for _ in range(E):\n        s, t, dist = map(lambda x: int(x), input().split())\n        edges[s].append((t, dist))\n\n    que: List[Tuple[int, int]] = []  # (dist, vertex)\n    heappush(que, (0, r))\n\n    while que:\n        dist, vertex = heappop(que)\n        for to, cost in edges[vertex]:\n            if cost + dist < dists[to]:\n                dists[to] = cost + dist\n                heappush(que, (cost + dist, to))\n\n    for dist in dists:\n        if sys.maxsize == dist:\n            print(\"INF\")\n        else:\n            print(dist)\n\n", "code2": "from heapq import heappush,heappop\nINF=10**18\nn,m,r=map(int,input().split())\ne=[[] for _ in range(n)]\nd=[INF]*n\nfor i in range(m):\n  a,b,c=map(int,input().split())\n  e[a].append((b,c))\nq=[]\nheappush(q,(0,r))\nd[r]=0\nwhile q:\n  dist,node=heappop(q)\n  for to,cost in e[node]:\n    if d[to]>cost+dist:\n      d[to]=cost+dist\n      heappush(q,(d[to],to))\nfor i in d:\n  if i!=INF:print(i)\n  else:print('INF')\n", "label": 1, "name1": "s404691730.py", "name2": "s737089154.py"}, {"id": 531, "code1": "def solve():\n    N = int(input())\n    A = list(map(int, input().split()))\n    b = 0\n    c = 0\n    d = 0\n    for a in A:\n        if a == b:\n            c += 1\n        if a != b:\n            d += c//2\n            b = a\n            c = 1\n    d += c//2\n    b = a\n    c = 0\n    print(d)\n    \n\nif __name__ == '__main__':\n    solve()", "code2": "t =0\nfor a in range(4):\n  y = int(input())\n  t += y\nc = t\ng=0\nwhile True:\n if c <0: break\n else:\n  c-=60\n  g+=1\ng-=1\nprint g\nprint t%60", "label": 0, "name1": "s237957783.py", "name2": "s359341708.py"}, {"id": 409, "code1": "iN = int(input())\naA = [0] + [int(_) for _ in input().split()] + [0]\niAll = sum(map(lambda i :abs(aA[i+1]-aA[i]),range(iN+1)))\nprint(\"\\n\".join(map(lambda i:str( iAll - abs(aA[i-1]-aA[i]) - abs(aA[i]-aA[i+1]) + abs(aA[i-1]-aA[i+1])), range(1,iN+1))))\n", "code2": "# your code goes here\nN = int(input())\npoint = [0]\npoint.extend(list(map(int,input().split())))\npoint.append(0)\n\ntotal = 0\nfor i in range(1,N+2):\n\ttotal += abs(point[i] - point[i-1])\n\nfor i in range(1,N+1):\n\tans = total - abs(point[i]-point[i-1]) - abs(point[i+1]-point[i]) + abs(point[i+1]-point[i-1])\n\tprint(ans)", "label": 1, "name1": "s167602198.py", "name2": "s443227148.py"}, {"id": 650, "code1": "n = int(input())\np = tuple(map(int, input().split()))\nq = tuple(map(int, input().split()))\n\nimport itertools\nr = list(itertools.permutations(range(1, n+1)))\n\np_place = r.index(p)\nq_place = r.index(q)\nanswer = abs(p_place-q_place)\nprint(answer)", "code2": "N, K = map(int, input().split())\nW = [int(input()) for w in range(N)]\n\ndef check(p):\n    i = 0\n    for _ in range(K):\n        s = 0\n        while s + W[i] <= p:\n            s += W[i]\n            i += 1\n            if i == N:\n                return N\n    return i\n\nleft = 0\nright = 100000 * 10000\nmid = 0\nwhile 1 < right - left:\n    mid = (left + right) / 2\n    v = check(mid)\n    if v >= N:\n        right = mid\n    else:\n        left = mid\n\nprint(int(right))\n", "label": 0, "name1": "s558804624.py", "name2": "s152551733.py"}, {"id": 976, "code1": "# coding: utf-8\n# Your code here!\nn,a,b=map(int,input().split())\nh=[]\nfor i in range(n):\n    x=int(input())\n    h.append(x)\n\ndef check(t):\n    c=0\n    for i in range(n):\n        c+=1+(max(0,h[i]-b*t)-1)//(a-b)\n    return t>=c\n\nl=0\nr=3+max(h)//b\nwhile r-l>1:\n    mid=(r-l)//2+l\n    if check(mid):\n        r=mid\n    else:\n        l=mid\nans=l\nif check(r):\n    ans=r\nprint(ans)\n\n", "code2": "MAX = 1000001\nprimes = list()\nfor i in range(MAX):\n    primes.append(True)\nprimes[0] = False\nprimes[1] = False\n\nfor i in range(2, MAX):\n    j = i + i\n    while j < MAX:\n        primes[j] = False\n        j = j + i\n\nwhile True:\n    n = int(input())\n    if n == 0:\n        break\n\n    ans = 0\n    for i in range(1, n // 2 + 1):\n        if primes[i] and primes[n-i]:\n            ans += 1\n    print(ans)\n", "label": 0, "name1": "s031897610.py", "name2": "s246285393.py"}, {"id": 905, "code1": "N = int(input())\n\nM = N -1\nflg = 0\nwhile flg == 0:\n  M += 1\n  flg = 1\n  for n in range(2,M-1):\n    if M%n == 0:\n      flg = 0\n      break\n\nprint(M)", "code2": "from collections import defaultdict\n\nH,W = map(int,input().split())\na = [[] for _ in range(H)]\nfor i in range(H):\n    a[i] = list(input())\n\nd = defaultdict(int)\nfor i in range(H):\n    for j in range(W):\n        d[a[i][j]] += 1\n\nc4,c2 = 0,0\nfor k in d.keys():\n    c4 += d[k]//4\n    c2 += (d[k]%4)//2\n\nif H%2 + W%2 == 0:\n    if c4 == H*W//4:\n        print(\"Yes\")\n    else:\n        print(\"No\")\nelif H%2 + W%2 == 1:\n    if H%2 == 1:\n        if c4 < (H-1)*W//4:\n            print(\"No\")\n        else:\n            c4 -= (H-1)*W//4\n            c2 += c4*2\n            if c2 == W//2:\n                print(\"Yes\")\n            else:\n                print(\"No\")\n    if W%2 == 1:\n        if c4 < H*(W-1)//4:\n            print(\"No\")\n        else:\n            c4 -= H*(W-1)//4\n            c2 += c4*2\n            if c2 == H//2:\n                print(\"Yes\")\n            else:\n                print(\"No\")\nelse:\n    if c4 < (H-1)*(W-1)//4:\n        print(\"No\")\n    else:\n        c4 -= (H-1)*(W-1)//4\n        c2 += c4*2\n        if c2 == (H-1)//2+(W-1)//2:\n            print(\"Yes\")\n        else:\n            print(\"No\")", "label": 0, "name1": "s785657279.py", "name2": "s520771694.py"}, {"id": 512, "code1": "S = input()\n\nflag = 'Yes'\nfor i in range(len(S)):\n    if i%2 == 0:\n        if S[i] == 'R' or S[i] == 'U' or S[i] == 'D':\n            pass\n        else:\n            flag = 'No'\n            break\n    if i%2 == 1:\n        if S[i] == 'L' or S[i] == 'U' or S[i] == 'D':\n            pass\n        else:\n            flag = 'No'\n            break\n\nprint(flag)\n", "code2": "def main():\n    N, A, B = map(int, input().split())\n    X = map(int, input().split())\n\n    ret = 0\n    curr = next(X)\n    for x in X:\n        ret += min((x - curr) * A, B)\n        curr = x\n    print(ret)\n\n\nif __name__ == '__main__':\n    main()\n", "label": 0, "name1": "s961835833.py", "name2": "s627561056.py"}, {"id": 827, "code1": "import sys\nfrom collections import defaultdict, Counter, deque\nfrom itertools import accumulate, permutations, combinations\nfrom operator import itemgetter\nfrom bisect import bisect_left, bisect_right, bisect\nfrom heapq import heappop, heappush\nfrom fractions import gcd\nfrom math import ceil, floor, sqrt, cos, sin, pi\nfrom copy import deepcopy\n\n# If you use recursive call, uncomment this code\n#sys.setrecursionlimit(10**6)\n\ndef main():\n    nums = set(map(int, input().split()))\n    if len(nums) == 2:\n        print(\"Yes\")\n    else:\n        print(\"No\")\n\n\nif __name__ == '__main__':\n    main()\n", "code2": "n = int(input())\ns = input()\nleft = [0]\nright = [0]\nfor i in range(n):\n    if s[i] == 'W':\n        tmp = left[-1] + 1\n        left.append(tmp)\n    else:\n        left.append(left[-1])\n    if s[n-1-i] == 'E':\n        tmp = right[-1] + 1\n        right.append(tmp)\n    else:\n        right.append(right[-1])\nmi = 10**18\nright = right[::-1]\nfor i in range(n+1):\n    if mi > left[i] + right[i]:\n        mi = left[i] + right[i]\nprint(mi)", "label": 0, "name1": "s765543700.py", "name2": "s487064711.py"}, {"id": 701, "code1": "class UnionFind():\n    def __init__(self, n):\n        self.n = n\n        self.parents = [-1] * n\n\n    def find(self, x):\n        if self.parents[x] < 0:\n            return x\n        else:\n            self.parents[x] = self.find(self.parents[x])\n            return self.parents[x]\n\n    def union(self, x, y):\n        x = self.find(x)\n        y = self.find(y)\n\n        if x == y:\n            return\n\n        if self.parents[x] > self.parents[y]:\n            x, y = y, x\n\n        self.parents[x] += self.parents[y]\n        self.parents[y] = x\n\n    def size(self, x):\n        return -self.parents[self.find(x)]\n\n    def same(self, x, y):\n        return self.find(x) == self.find(y)\n\n    def members(self, x):\n        root = self.find(x)\n        return [i for i in range(self.n) if self.find(i) == root]\n\n    def roots(self):\n        return [i for i, x in enumerate(self.parents) if x < 0]\n\n    def group_count(self):\n        return len(self.roots())\n\n    def all_group_members(self):\n        return {r: self.members(r) for r in self.roots()}\n\n    def __str__(self):\n        return '\\n'.join('{}: {}'.format(r, self.members(r)) for r in self.roots())\n\nN,M=list(map(int,input().split()))\nNetwork = UnionFind(N)\nfor i in range(M):\n    a,b=list(map(int,input().split()))\n    Network.union(a-1, b-1)\nprint(Network.group_count()-1)", "code2": "import sys\nsys.setrecursionlimit(10**7) #\u518d\u5e30\u95a2\u6570\u306e\u4e0a\u9650,10**5\u4ee5\u4e0a\u306e\u5834\u5408python\nimport math\nfrom copy import copy, deepcopy\nfrom copy import deepcopy as dcp\nfrom operator import itemgetter\nfrom bisect import bisect_left, bisect, bisect_right#2\u5206\u63a2\u7d22\n#bisect_left(l,x), bisect(l,x)#a\u306f\u30bd\u30fc\u30c8\u6e08\u307f\u3067\u3042\u308b\u5fc5\u8981\u3042\u308a\u3002a\u306e\u4e2d\u304b\u3089x\u672a\u6e80\u306e\u8981\u7d20\u6570\u3092\u8fd4\u3059\u3002right\u3060\u3068\u4ee5\u4e0b\nfrom collections import deque, defaultdict\n#deque(l), pop(), append(x), popleft(), appendleft(x)\n#q.rotate(n)\u3067 \u2192 \u306bn\u56de\u30ed\u30fc\u30c6\u30fc\u30c8\nfrom collections import Counter#\u6587\u5b57\u5217\u3092\u500b\u6570\u30ab\u30a6\u30f3\u30c8\u8f9e\u66f8\u306b\u3001\n#S=Counter(l),S.most_common(x),S.keys(),S.values(),S.items()\nfrom itertools import accumulate,combinations,permutations,product#\u7d2f\u7a4d\u548c\n#list(accumulate(l))\nfrom heapq import heapify,heappop,heappush\n#heapify(q),heappush(q,a),heappop(q) #q=heapify(q)\u3068\u3057\u306a\u3044\u3053\u3068\u3001\u8fd4\u308a\u5024\u306fNone\nfrom functools import reduce,lru_cache#pypy\u3067\u3082\u3046\u3054\u304f\n#@lru_cache(maxsize = None)#maxsize\u306f\u4fdd\u5b58\u3059\u308b\u30c7\u30fc\u30bf\u6570\u306e\u6700\u5927\u5024\u30012**n\u304c\u6700\u3082\u9ad8\u52b9\u7387\nfrom decimal import Decimal\n\ndef input(): \n    x=sys.stdin.readline()\n    return x[:-1] if x[-1]==\"\\n\" else x\ndef printe(*x):print(\"## \",*x,file=sys.stderr)\ndef printl(li): _=print(*li, sep=\"\\n\") if li else None\ndef argsort(s, return_sorted=False): \n    inds=sorted(range(len(s)), key=lambda k: s[k])\n    if return_sorted: return inds, [s[i] for i in inds]\n    return inds\ndef alp2num(c,cap=False): return ord(c)-97 if not cap else ord(c)-65\ndef num2alp(i,cap=False): return chr(i+97) if not cap else chr(i+65)\ndef matmat(A,B):\n    K,N,M=len(B),len(A),len(B[0])\n    return [[sum([(A[i][k]*B[k][j]) for k in range(K)]) for j in range(M)] for i in range(N)]\ndef matvec(M,v):\n    N,size=len(v),len(M)\n    return [sum([M[i][j]*v[j] for j in range(N)]) for i in range(size)]\ndef T(M):\n    n,m=len(M),len(M[0])\n    return [[M[j][i] for j in range(n)] for i in range(m)]\ndef binr(x): return bin(x)[2:]\ndef bitcount(x): #x\u306f64bit\u6574\u6570\n    x= x - ((x >> 1) & 0x5555555555555555)\n    x= (x & 0x3333333333333333) + ((x >> 2) & 0x3333333333333333)\n    x= (x + (x >> 4)) & 0x0f0f0f0f0f0f0f0f \n    x+= (x >> 8); x+= (x >> 16); x+= (x >> 32) \n    return x & 0x7f\n\ndef main():\n    mod = 1000000007\n    #w.sort(key=itemgetter(1),reverse=True)  #\u4e8c\u500b\u76ee\u306e\u8981\u7d20\u3067\u964d\u9806\u4e26\u3073\u66ff\u3048\n\n    #N = int(input())\n    a,b,c = map(int, input().split())\n\n\n    print(max(0,c-(a-b)))\n\n\n\nif __name__ == \"__main__\":\n    main()", "label": 0, "name1": "s144436411.py", "name2": "s948835843.py"}, {"id": 457, "code1": "a=['Wednesday','Thursday','Friday','Saturday','Sunday','Monday','Tuesday',0]\nwhile True:\n    q=map(int,raw_input().split())\n    if sum(q) == 0: break\n    print a[(sum([0,31,29,31,30,31,30,31,31,30,31,30,31][:q[0]])+q[1])%7]", "code2": "import sys\n\ndef zeller(y,m,d):\n  if m==1 or m==2:\n    y-=1\n    m+=12\n  day=(y+int(y/4)-int(y/100)+int(y/400)+int((13*m+8)/5)+d)%7\n  D={0:'Sunday',1:'Monday',2:'Tuesday',3:'Wednesday',4:'Thursday',5:'Friday',6:'Saturday'}\n  return D[day]\n  \n\nfor l in sys.stdin:\n  m,d=list(map(int,l.split()))\n  if m==0:\n    break\n  print(zeller(2004,m,d))\n", "label": 1, "name1": "s388074654.py", "name2": "s675024853.py"}, {"id": 676, "code1": "a,b,c,k=map(int,input().split())\n\nif k <= a:\n    print(k)\nelif k <= a+b:\n    print(a)\nelse:\n    print(a-(k-(a+b)))", "code2": "while 1:\n\tn , x = map(int , raw_input().split())\n\tif n == x == 0:\n\t\tbreak\n\telse :\n\t\tcnt = 0\n\t\tfor i in range(1,n - 1):\n\t\t\tfor j in range(i + 1 , n):\n\t\t\t\tfor k in range(j + 1, n + 1):\n#\t\t\t\t\tprint i,j,k\n\t\t\t\t\tif i + j + k == x:\n#\t\t\t\t\t\tprint i,j,k\n\t\t\t\t\t\tcnt += 1\n\t\tprint cnt", "label": 0, "name1": "s019552488.py", "name2": "s558630368.py"}, {"id": 448, "code1": "m=10**9+7\ni=s=r=0\nf=1\ninput()\na=input().split()\nfor x in a:i+=1;s+=pow(i,m-2,m);r+=int(x)*~-s+int(a[-i])*s;f=f*i%m\nprint(r*f%m)", "code2": "# coding:utf-8\n\nimport sys\n\n\ninput = sys.stdin.readline\nINF = float('inf')\nMOD = 10 ** 9 + 7\n\n\ndef inpl(): return list(map(int, input().split()))\n\n\n# a\u306ep\u4e57\u3092\u6c42\u3081\u308b\u30a2\u30eb\u30b4\u30ea\u30ba\u30e0\n# MOD\u7248\ndef pow_mod(a, p):\n    if p == 0: return 1\n\n    if p % 2 == 0:\n        half_p = p // 2\n        half = pow_mod(a, half_p)\n        return half * half % MOD\n    else:\n        return a * pow_mod(a, p - 1) % MOD\n\n\ndef solve(N, A):\n    # 1/1 + 1/2 + 1/3 + ... + 1/N\u306e\u7d2f\u7a4d\u548c\u3092\u6c42\u3081\u3066\u304a\u304f\n    inv_sum = [0]\n    for i in range(N):\n        inv_sum.append((inv_sum[-1] + pow_mod(i + 1, MOD - 2)) % MOD)\n    del inv_sum[0]\n\n    # \u5404i\u306b\u3064\u3044\u3066\u3001\u03a3(j=1, N) 1/(|j - i| + 1)\u3092\u6c42\u3081\u3066\u3001\n    # \u305d\u308c\u3089\u3092\u4fc2\u6570\u3068\u3057\u3066A[i]\u306b\u639b\u3051\u3001\u52a0\u7b97\u3059\u308b\n    ans = 0\n    for i in range(N):\n        ans += + A[i] * (inv_sum[N - 1 - i] + inv_sum[i] - 1)\n        ans %= MOD\n\n    # \u968e\u4e57N!\u3092\u6c42\u3081\u308b\n    fact = 1\n    for i in range(N):\n        fact *= (i + 1)\n        fact %= MOD\n\n    return ans * fact % MOD\n\n\nN = int(input())\nA = inpl()\nprint(solve(N, A))\n", "label": 1, "name1": "s072063122.py", "name2": "s076241625.py"}, {"id": 656, "code1": "# AOJ 0144 Packet Transportation\n# Python3 2018.6.23 bal4u\n\nINF = 0x7fffffff\nn = int(input())\narr = [[INF for j in range(n)] for i in range(n)]\nfor i in range(n):\n\ta = list(map(int, input().split()))\n\tx, k = a[0]-1, a[1]\n\tfor j in range(k):\n\t\ty = a[j+2]-1\n\t\tarr[x][y] = 1\nfor k in range(n):\n\tarr[k][k] = 0\n\tfor i in range(n):\n\t\tif arr[i][k] >= INF: continue\n\t\tfor j in range(n):\n\t\t\tif arr[k][j] >= INF: continue\n\t\t\tarr[i][j] = min(arr[i][j], arr[i][k] + arr[k][j])\np = int(input())\nfor i in range(p):\n\ts, d, v = map(int, input().split())\n\ts,d = s-1, d-1\n\tprint(arr[s][d]+1 if arr[s][d] < v else \"NA\")\n", "code2": "N = int(input())\nA = [int(_) - 1 for _ in input().split()]\nans = 0\nfor i in range(N):\n    if i < A[i] and A[A[i]] == i:\n        ans += 1\nprint(ans)\n", "label": 0, "name1": "s881383078.py", "name2": "s038697693.py"}, {"id": 740, "code1": "\nX, Y = list(map(int, input().split()))\n\nans = 0\nwhile X <= Y:\n\tX *= 2\n\tans += 1\n\nprint(ans)", "code2": "I,O,R,J,L,S,Z=map(int,input().split())\na=(I//2+J//2+L//2)*2\nb=0\nif I*J*L!=0:b=(2*((I-1)//2+(J-1)//2+(L-1)//2)+3)\nprint(max(a,b)+O)", "label": 0, "name1": "s831535184.py", "name2": "s966423542.py"}, {"id": 347, "code1": "# ABC068C - Cat Snuke and a Voyage (ARC079C)\ndef main():\n    N, M, *AB = map(int, open(0).read().split())\n    from_1, to_N = set(), set()\n    for a, b in zip(*[iter(AB)] * 2):\n        if a == 1:\n            from_1.add(b)\n        if b == N:\n            to_N.add(a)\n    flg = from_1 & to_N  # intermediate point of both 1, N exists?\n    print(\"POSSIBLE\" if flg else \"IMPOSSIBLE\")\n\n\nif __name__ == \"__main__\":\n    main()", "code2": "from collections import defaultdict as dd\ndef main():\n    N, M = map(int, input().split())\n\n    D = dd(list)\n\n    for m in range(M):\n        a, b = map(int, input().split())\n        D[a-1].append(b-1)\n\n    for d in D[0]:\n        if N-1 in D[d]:\n            print('POSSIBLE')\n            return\n\n    print('IMPOSSIBLE')\n        \n\nif __name__ == \"__main__\":\n    # global stime\n    # stime = time.clock()\n    main()", "label": 1, "name1": "s726342129.py", "name2": "s966091942.py"}, {"id": 839, "code1": "N = int(input())\nA = list(map(int, input().split()))\n\ndef selection_sort(A, N):\n    count = 0\n    for i in range(0, N):\n        min_j = i\n        for j in range(i, N):\n            if A[j] < A[min_j]:\n                min_j = j\n        if min_j != i:\n            count += 1\n        A[i], A[min_j] = A[min_j], A[i]\n    return A, count\n\nA, count = selection_sort(A, N)\nprint(' '.join(map(str, A)))\nprint(count)\n", "code2": "N, L, T = map(int, input().split())\nants = []\ntouch = 0  # \u3059\u3079\u3066\u306e\u87fb\u304c0\u3092\u901a\u308b\u5408\u8a08\u6570\n\nfor i in range(N):\n    x, w = map(int, input().split())\n    if w == 1:  # \u6642\u8a08\u56de\u308a\n        touch += (x + T) // L  # 0\u3092\u901a\u308b\u56de\u6570\n        x1 = (x + T) % L       # \u6700\u7d42\u7684\u306a\u5ea7\u6a19\n    else:\n        touch += (x - T) // L  # 0\u3092\u901a\u308b\u56de\u6570\n        x1 = (x - T) % L\n    ants.append(x1)\ntouch = touch % N  # 0\u306b\u3044\u305f\u87fb\u306eindex\nants.sort()\nants = ants[touch:]+ants[:touch]\n\nprint(\" \".join(map(str, ants)))", "label": 0, "name1": "s850451389.py", "name2": "s946619292.py"}, {"id": 250, "code1": "N = int(input())\nA = [int(_) - 1 for _ in input().split()]\nans = 0\nfor i in range(N):\n    if i < A[i] and A[A[i]] == i:\n        ans += 1\nprint(ans)\n", "code2": "N = int(input())\na = list(map(int, input().split()))\nlike = []\ncnt = 0\n\nfor i in range(0, N):\n    like.append([i+1, a[i]])\n\nfor j, k in like:\n    if like[k-1][1] == j:\n        cnt += 1\n\nprint(cnt // 2)", "label": 1, "name1": "s038697693.py", "name2": "s502699980.py"}, {"id": 87, "code1": "import sys\nimport collections as col\nnum = []\nfor line in sys.stdin:\n\ttako = line[:-1].split(\",\")\n\tnum.append(tako[1])\ntako = col.Counter(num)\na = tako[\"O\"]\ntako[\"O\"] = tako[\"AB\"]\ntako[\"AB\"] = a\nfor i in tako.items():\n\tprint i[1]", "code2": "if __name__ == '__main__':\n\n\tans = []\n\twhile True:\n\t\ttry:\n\t\t\tn,b = input().split(\",\")\n\t\t\tans.append(b)\n\t\texcept EOFError:\n\t\t\tbreak\n\n\tprint(ans.count(\"A\"))\n\tprint(ans.count(\"B\"))\n\tprint(ans.count(\"AB\"))\n\tprint(ans.count(\"O\"))\n\n", "label": 1, "name1": "s223119670.py", "name2": "s525017039.py"}, {"id": 155, "code1": "import sys\ninput = sys.stdin.readline\nQ = int(input())\n\ndef check(x, a, b):\n  y = (a <= -(-x // 2)) or (b <= -(-x // 2))\n  z = (a <= (x // 2 + 1)) and (b <= (x // 2 + 1))\n  return (-(-x // 2) + y) * ((x // 2 + 1) + z) < a * b\n\nfor _ in range(Q):\n  a, b = map(int, input().split())\n\n  ok = 0\n  ng = a * b\n  while ng - ok > 1:\n    m = (ok + ng) // 2\n    if check(m, a, b): ok = m\n    else: ng = m\n  print(ok)", "code2": "import math\nq = int(input())\nfor i in range(q):\n  a,b = map(int,input().split())\n  if a == b:\n    print(a*2-2)\n    continue\n  y = max(a,b)\n  z = min(a,b)\n  ind = math.sqrt(a*b)\n  d = int(ind)\n  if ind.is_integer():\n    d -= 1\n  cnt = 0\n  if d*(d+1) < a*b:\n    if d >= z:\n      cnt = 1\n    if d+1 >= y:\n      cnt = 2\n    print(2*d-cnt)\n  else:\n    if d >= z:\n      cnt = 1\n    print(2*d-1-cnt)", "label": 1, "name1": "s809561228.py", "name2": "s038587801.py"}, {"id": 401, "code1": "n = input()\nfor i in sorted(map(int, raw_input().split())):\n print i ,", "code2": "#!/usr/bin/env python\n\ndef q_sort(a):\n        if len(a)==0:\n                return []\n        pivot  = a[0]\n        return q_sort([i for i in a if i < pivot ]) + [i for i in a if i == pivot ] + q_sort([i for i in a if pivot < i])\n\n\n\nn = int( raw_input() )\narray =  [ int(i) for i in raw_input().split(\" \") ]\nfor i in q_sort(array):\n        print i,", "label": 1, "name1": "s740416119.py", "name2": "s289691256.py"}, {"id": 291, "code1": "import sys\ninput = sys.stdin.readline\n\nn, m = map(int, input().split())\nl = list(map(int, input().split()))\n\nif n >= m:\n    print(0)\n    sys.exit()\n    \nl.sort()\nle = len(l) - 1\nnl = [0] * le\nfor i in range(0, len(l) - 1):\n    nl[i] = l[i + 1] - l[i]\n    \nnl.sort()\nprint(sum(nl[:le - n + 1]))", "code2": "import numpy as np\nn,m = map(int, input().split())\nX = sorted(np.array(input().split(), dtype = np.int64))\nX = sorted(np.diff(X))\nif m-n >= 0:\n    ans = sum(X[:m-n])\nelse:\n    ans = 0\nprint(ans)", "label": 1, "name1": "s202166785.py", "name2": "s052852893.py"}, {"id": 300, "code1": "class Unionfind:\n     \n    def __init__(self,n):\n        self.uf = [-1]*n\n \n    def find(self,x):\n        if self.uf[x] < 0:\n            return x\n        else:\n            self.uf[x] = self.find(self.uf[x])\n            return self.uf[x]\n \n    def same(self,x,y):\n        return self.find(x) == self.find(y)\n \n    def union(self,x,y):\n        x = self.find(x)\n        y = self.find(y)\n        if x == y:\n            return False\n        if self.uf[x] > self.uf[y]:\n            x,y = y,x\n        self.uf[x] += self.uf[y]\n        self.uf[y] = x\n        return True\n \n    def size(self,x):\n        x = self.find(x)\n        return -self.uf[x]\n\nn,m = map(int,input().split())\n\nu = Unionfind(n)\ncount = 0\nfor i in range(m):\n    a,b = map(int,input().split())\n    a -= 1\n    b -= 1\n    u.union(a,b)\n\ns = set()\nfor i in range(n):\n    s.add(u.find(i))\nprint(len(s)-1)", "code2": "class UnionFind():\n    def __init__(self, n):\n        self.n = n\n        self.parents = [-1] * n\n\n    def find(self, x):\n        if self.parents[x] < 0:\n            return x\n        else:\n            self.parents[x] = self.find(self.parents[x])\n            return self.parents[x]\n\n    def union(self, x, y):\n        x = self.find(x)\n        y = self.find(y)\n\n        if x == y:\n            return\n\n        if self.parents[x] > self.parents[y]:\n            x, y = y, x\n\n        self.parents[x] += self.parents[y]\n        self.parents[y] = x\n\n    def size(self, x):\n        return -self.parents[self.find(x)]\n\n    def same(self, x, y):\n        return self.find(x) == self.find(y)\n\n    def members(self, x):\n        root = self.find(x)\n        return [i for i in range(self.n) if self.find(i) == root]\n\n    def roots(self):\n        return [i for i, x in enumerate(self.parents) if x < 0]\n\n    def group_count(self):\n        return len(self.roots())\n\n    def all_group_members(self):\n        return {r: self.members(r) for r in self.roots()}\n\n    def __str__(self):\n        return '\\n'.join('{}: {}'.format(r, self.members(r)) for r in self.roots())\n\nN,M=list(map(int,input().split()))\nNetwork = UnionFind(N)\nfor i in range(M):\n    a,b=list(map(int,input().split()))\n    Network.union(a-1, b-1)\nprint(Network.group_count()-1)", "label": 1, "name1": "s213272363.py", "name2": "s144436411.py"}, {"id": 912, "code1": "H,W = map(int,input().split())\nA = [input() for i in range(H)]\nfrom collections import Counter\nctr = Counter()\nfor row in A:\n    ctr.update(row)\n\nif H%2==0 and W%2==0:\n    print('Yes' if all(v%4==0 for v in ctr.values()) else 'No')\n    exit()\n\nif H%2==0 or W%2==0:\n    if H%2: H,W = W,H\n    if any(v%2 for v in ctr.values()):\n        print('No')\n        exit()\n    pair = 0\n    for v in ctr.values():\n        if v%4==2:\n            pair += 1\n    print('Yes' if pair*2 <= H else 'No')\n\nelse:\n    odd = 0\n    for k in ctr.keys():\n        if ctr[k]%2:\n            odd += 1\n            ctr[k] -= 1\n    if odd != 1:\n        print('No')\n        exit()\n    pair = 0\n    for v in ctr.values():\n        if v%4==2:\n            pair += 1\n    print('Yes' if pair*2 <= H+W-2 else 'No')", "code2": "N=int(input())\ns=[]\nfor i in range(N):\n    s.append(int(input()))\ns.sort()\n\nif sum(s)%10!=0:\n    ans=sum(s)\nelse:\n    f=False\n    for si in s:\n        if si%10!=0:\n            ans=sum(s)-si\n            f=True\n            break\n    if not f:\n        ans=0\n\nprint(ans)", "label": 0, "name1": "s065097494.py", "name2": "s777989048.py"}, {"id": 981, "code1": "MN = 1000000\nprime = []\nmem = [False] * 2 + [True] * MN\nfor i in range(2, MN):\n  if not mem[i]:\n    continue\n  prime.append(i)\n  for j in range(i + i, MN, i):\n    mem[j] = False\n\nwhile True:\n  N, ans = input(), 0\n  if not N:\n    break\n\n  for p in prime:\n    if p > N / 2:\n      break\n    if mem[N - p]:\n      ans += 1\n  print(ans)", "code2": "from fractions import gcd\nfrom datetime import date, timedelta\nfrom heapq import*\nimport math\nfrom collections import defaultdict, Counter, deque\nimport sys\nfrom bisect import *\nimport itertools\nimport copy\nsys.setrecursionlimit(10 ** 7)\nMOD = 10 ** 9 + 7\n\n\ndef main():\n    n = int(input())\n    d = list(map(int, input().split()))\n    if n == 1:\n        print(d[0])\n        exit()\n    dc = defaultdict(int)\n    dc[0] = 1\n    for i in range(n):\n        v = d[i]\n        if dc[v] >= 2 or (dc[v] == 1 and (v == 12 or v == 0)):\n            print(0)\n            exit()\n        dc[v] += 1\n    \n    dd = []\n    ddt = []\n    for i in range(0, 13):\n        if (i == 0 or i == 12) and dc[i] == 1:\n            ddt.append(i)\n        elif dc[i] == 1:\n            dd.append(i)\n        elif dc[i] == 2:\n            ddt.append(i)\n            ddt.append(24 - i)\n\n\n    \n    ans = 0\n    for i in range(1 << len(dd)):\n        d3 = []\n        for j in range(len(ddt)):\n            d3.append(ddt[j])\n\n        for j in range(len(dd)):\n            if (i & (1 << j)):\n                d3.append(dd[j])\n            else:\n                d3.append(24 - dd[j])\n        \n        d3 = sorted(d3)\n        t = float(\"inf\")\n        for i in range(len(d3) - 1):\n            t = min(t, d3[i + 1] - d3[i])\n        t = min(t , 24 - d3[-1])\n        ans = max(t, ans)\n    print(ans)\n\n\nif __name__ == '__main__':\n    main()\n", "label": 0, "name1": "s690247182.py", "name2": "s742731060.py"}, {"id": 316, "code1": "import sys\n\n\n#\u4e92\u3044\u306b\u7d20\u306aa,b\u306b\u3064\u3044\u3066\u3001a*x+b*y=1\u306e\u4e00\u3064\u306e\u89e3\ndef extgcd(a, b):\n    r = [1, 0, a]\n    w = [0, 1, b]\n    while w[2] != 1:\n        q = r[2] // w[2]\n        r2 = w\n        w2 = [r[0] - q * w[0], r[1] - q * w[1], r[2] - q * w[2]]\n        r = r2\n        w = w2\n    #[x,y]\n    return [w[0], w[1]]\n\n\n# a\u306e\u9006\u5143(mod m)\u3092\u6c42\u3081\u308b\u3002(a\u3068m\u306f\u4e92\u3044\u306b\u7d20\u3067\u3042\u308b\u3053\u3068\u304c\u524d\u63d0)\ndef mod_inv(a, m):\n    x = extgcd(a, m)[0]\n    return (m + x % m) % m\n\n\nreadline = sys.stdin.readline\nMOD_NUM = 10**6 + 3\n\nQ = int(readline())\nq_array = [list(map(int, readline().split())) for i in range(Q)]\nans_array = []\n\nfactorial = [1] * MOD_NUM\nfactorial_inv = [1] * MOD_NUM\n\ntmp = 1\nfor i in range(2, MOD_NUM):\n    tmp = tmp * i % MOD_NUM\n    factorial[i] = tmp\n    factorial_inv[i] = mod_inv(tmp, MOD_NUM)\n\nfor q in q_array:\n    x, d, n = q\n    # print(x, d, n)\n    if x == 0:\n        ans_array.append(\"0\\n\")\n        continue\n    if d == 0:\n        ans = pow(x, n, MOD_NUM)\n        ans_array.append(str(ans) + \"\\n\")\n    else:\n        x_start = x * mod_inv(d, MOD_NUM) % MOD_NUM\n        if x_start + n > MOD_NUM:\n            ans_array.append(\"0\\n\")\n        else:\n            ans = factorial[x_start + n - 1] * factorial_inv[\n                x_start - 1] * pow(d, n, MOD_NUM) % MOD_NUM\n            ans_array.append(str(ans) + \"\\n\")\n\nsys.stdout.writelines(ans_array)", "code2": "####################\n#  AC:     ms (PyPy)\n####################\n\ndef main():\n    MOD = 10**6+3\n    # preprocess\n    fac = [None] * (MOD+1)\n    fac[0] = fac[1] = 1\n    for i in range(2, MOD+1):\n        fac[i] = (fac[i-1] * i) % MOD\n\n    Q = int(input())\n    for i in range(Q):\n        x, d, n = map(int, input().split())\n\n        if d == 0:\n            print(pow(x, n, MOD))\n            continue\n        \n        xd = (x * pow(d, MOD-2, MOD)) % MOD\n        if xd == 0 or xd + (n-1) >= MOD:\n            print(0)\n            continue\n\n        print(pow(d, n, MOD) * fac[xd+(n-1)] * pow(fac[xd-1], MOD-2, MOD) % MOD)\n\n\nif __name__ == \"__main__\":\n    main()", "label": 1, "name1": "s261991889.py", "name2": "s606450603.py"}, {"id": 965, "code1": "# ABC099D - Good Grid\nimport sys\ninput = sys.stdin.readline\n\nfrom collections import defaultdict\nfrom itertools import product\n\n\ndef main():\n    N, C = map(int, input().split())\n    D = [0] + list([0] + list(map(int, input().split())) for _ in range(C))\n    grid = tuple(tuple(map(int, input().split())) for _ in range(N))\n    cost = {i: defaultdict(int) for i in range(3)}\n    for i, g in enumerate(grid):\n        for j, x in enumerate(g):\n            cost[(i + j) % 3][x] += 1\n    dist = [[] for _ in range(3)]\n    for i, tgt in product(range(3), range(1, C + 1)):\n        cur = sum(D[src][tgt] * cnt for src, cnt in cost[i].items())\n        dist[i].append(cur)\n    ans = 1 << 60\n    for i, j in product(range(C), repeat=2):\n        if i == j:\n            continue\n        cur = dist[0][i] + dist[1][j]\n        cur += min(x for k, x in enumerate(dist[2]) if k not in (i, j))\n        ans = min(ans, cur)\n    print(ans)\n\n\nif __name__ == \"__main__\":\n    main()", "code2": "import bisect\nn=int(input())\na=list(map(int,input().split()))\nb=list(map(int,input().split()))\nc=list(map(int,input().split()))\na.sort()\nb.sort()\nc.sort()\nans=0\nfor k in b:\n    i=bisect.bisect_left(a,k)\n    j=bisect.bisect_right(c,k)\n    if 0<i and j!=len(c):\n        ans+=i*(n-j)\nprint(ans)", "label": 0, "name1": "s120577952.py", "name2": "s334484624.py"}, {"id": 591, "code1": "int_list = list(map(int, input().split(' ')))\n\nmax_int = max(int_list)\n\ncnt = 0\nfor i in range(3):\n    if i < max_int:\n        cnt_tmp = (max_int - int_list[i]) // 2\n        int_list[i] += 2 * cnt_tmp\n        cnt += cnt_tmp\n\nmin_int = min(int_list)\nint_list2 = sorted([i - min_int for i in int_list])\n\nif int_list2 == [0, 0, 0]:\n    print(cnt)\nelif int_list2 == [0, 0, 1]:\n    print(cnt + 1)\nelse:\n    print(cnt + 2)", "code2": "\n\ndef isPrime(n):\n    if n <= 1:\n        return False \n    if n == 2:\n        return True\n    if n % 2 == 0:\n        return False\n\n    i = 3\n    while i * i <= n :\n        if n % i == 0:\n            return False \n        i += 1\n\n    return True        \n# end of isPrime\n\nwhile True:\n    n = input()\n    if n == 0:break\n\n    ans = 0\n    for i in range(n + 1, n * 2 + 1):\n        if isPrime(i):ans += 1\n\n    print ans", "label": 0, "name1": "s608249305.py", "name2": "s415543076.py"}, {"id": 927, "code1": "n=int(input())\nmod=10**9+7\nfra=[1]*(n+2)\ninv=[1]*(n+2)\nt1=1\nt2=1\nfor i in range(1,n+2):\n    t1*=i\n    t1%=mod\n    t2*=pow(i,mod-2,mod)\n    t2%=mod\n    fra[i]=t1\n    inv[i]=t2\nans=fra[n]\nfor i in range((n+1)//2,n):\n    ans-=fra[i-1]*inv[2*i-n]*fra[i]%mod\n    ans%=mod\nprint(ans)", "code2": "def aising19_c():\n    from collections import deque\n\n    h, w = (int(x) for x in input().split())\n    color = [[s == '#' for s in str(input())] for _ in range(h)]\n    used = [[False]*w for _ in range(h)]\n\n    ans = 0\n    for i in range(h):\n        for j in range(w):\n            if used[i][j]: continue\n            bk, wt = 0, 0\n            que = deque()\n            used[i][j] = True\n            que.append((i, j))\n            while que:\n                ci, cj = que.popleft()\n                if color[ci][cj]: bk += 1\n                else: wt += 1\n                for di, dj in ((-1,0),(0,-1),(0,1),(1,0)):\n                    ni, nj = ci+di, cj+dj\n                    if ni < 0 or h <= ni or nj < 0 or w <= nj: continue\n                    if color[ci][cj] == color[ni][nj]: continue\n                    if used[ni][nj]: continue\n                    used[ni][nj] = True\n                    que.append((ni, nj))\n            ans += bk * wt\n    print(ans)\n\nif __name__ == '__main__':\n    aising19_c()", "label": 0, "name1": "s299124610.py", "name2": "s472052550.py"}, {"id": 107, "code1": "import math\na, b, c = map(int, input().split())\nh = b * math.sin(math.radians(c))\nprint(a * h / 2)\nprint(a + b + math.sqrt((a-b*math.cos(math.radians(c)))**2 + h**2))\nprint(h)\n\n", "code2": "import math\na,b,c=map(int,input().split())\ns=a*b*math.sin(math.radians(c))/2\nprint(s)\nc_l=math.sqrt(a**2+b**2-2*a*b*math.cos(math.radians(c)))\nprint(a+b+c_l)\nh=2*s/a\nprint(h)\n", "label": 1, "name1": "s253160566.py", "name2": "s578986960.py"}, {"id": 201, "code1": "n = int(input())\nt = list(map(int, input().split()))\na = list(map(int, input().split()))\nmod = 10 ** 9 + 7\n\nans, frag = 1, 0\nfor i in range(n):\n    if t[i] == a[i] == t[-1] == a[0]:\n        frag = 1\n    if 0 < i < n - 1 and t[i - 1] == t[i] and a[i] == a[i + 1]:\n        ans = ans * min(t[i], a[i]) % mod\nprint(ans * frag)\n", "code2": "N = int(raw_input())\nT_list = map(int, raw_input().split())\nA_list = map(int, raw_input().split())\n\nlow_list = [1]*N\nhigh_list = [1]*N\n\nt_now = 0\nfor i in range(N):\n    if T_list[i] > t_now:\n        t_now = T_list[i]\n        low_list[i] = T_list[i]\n        high_list[i] = T_list[i]\n    else:\n        high_list[i] = T_list[i]\na_now = 0\nfor j in range(N):\n    i = N - 1 - j\n    if A_list[i] > a_now:\n        a_now = A_list[i]\n        low_list[i] = max(A_list[i], low_list[i])\n        high_list[i] = min(A_list[i], high_list[i])\n    else:\n        high_list[i] = min(A_list[i], high_list[i])\n    \nres = 1\nfor i in range(N):\n    if high_list[i] < low_list[i]:\n        res = 0\n        break\n    else:\n        res = res*(high_list[i] - low_list[i] + 1) % 1000000007\n\nprint res", "label": 1, "name1": "s894086979.py", "name2": "s251140241.py"}, {"id": 570, "code1": "from enum import Enum\nimport sys\nimport math\n\n\nA,B,DEGREE = map(int,input().split())\n\nrad = math.radians(DEGREE)\n\nS = A*B*math.sin(rad)/2.0\nC = math.sqrt(A*A+B*B-2*A*B*math.cos(rad))\nh = 2*S/A\n\nprint(\"%.10f %.10f %.10f\"%(S,A+B+C,h))\n\n", "code2": "n, k  = map(int, input().split())\nA = list(map(int, input().split()))\ndp = [0] * (k + 1)\n\nfor i in range(1, k + 1):\n  if all(dp[i - a] == 1 for a in A if i >= a):\n    dp[i] = 0\n  else:\n    dp[i] = 1\n\nprint(\"First\" if dp[k] == 1 else \"Second\")", "label": 0, "name1": "s944812786.py", "name2": "s828667405.py"}, {"id": 900, "code1": "a, b = map(int,input().split())\nc = (a-b) * 100 + b * 1900\nprint(c * 2 ** b)\n", "code2": "H,W = map(int,input().split())\nA = [input() for i in range(H)]\nfrom collections import Counter\nctr = Counter()\nfor row in A:\n    ctr.update(row)\n\nif H%2==0 and W%2==0:\n    print('Yes' if all(v%4==0 for v in ctr.values()) else 'No')\n    exit()\n\nif H%2==0 or W%2==0:\n    if H%2: H,W = W,H\n    if any(v%2 for v in ctr.values()):\n        print('No')\n        exit()\n    pair = 0\n    for v in ctr.values():\n        if v%4==2:\n            pair += 1\n    print('Yes' if pair*2 <= H else 'No')\n\nelse:\n    odd = 0\n    for k in ctr.keys():\n        if ctr[k]%2:\n            odd += 1\n            ctr[k] -= 1\n    if odd != 1:\n        print('No')\n        exit()\n    pair = 0\n    for v in ctr.values():\n        if v%4==2:\n            pair += 1\n    print('Yes' if pair*2 <= H+W-2 else 'No')", "label": 0, "name1": "s630865419.py", "name2": "s065097494.py"}, {"id": 513, "code1": "h, w = map(int, input().split())\n\neven_rows = h // 2\nodd_rows = (h+1) // 2\n\nif w > 1 and h > 1:\n    ans = 0\n    ans += w // 2 * even_rows\n    ans += (w+1) // 2 * odd_rows\n\n    print(ans)\nelse:\n    print(1)", "code2": "\ndef resolve():\n    N, A, B = map(int, input().split())\n    X = list(map(int, input().split()))\n\n    ans = 0\n    for i in range(N - 1):\n        res = min((X[i + 1] - X[i]) * A, B)\n        ans += res\n        \n    print(ans)\n\n\nif __name__ == \"__main__\":\n    resolve()", "label": 0, "name1": "s554703184.py", "name2": "s398154186.py"}, {"id": 58, "code1": "# -*- coding: utf-8 -*-\n'import sys'\n'import math'\ni=int(4)\nt=0\nwhile i:\n    t+=int(input())\n    i-=1\nprint(int(t/60))\nprint(t%60)", "code2": "t=sum([input()for i in range(4)])\nprint \"%d\\n%d\"%(t/60,t%60)", "label": 1, "name1": "s417833494.py", "name2": "s212246504.py"}, {"id": 267, "code1": "a,b,c,k=map(int,input().split())\nc_=max(0,k-a-b)\na_=min(a,k)\nprint(a_-c_)", "code2": "A, B, C, K = list(map(int, input().split()))\nif A <= K:\n  ans = A\nelse:\n  ans = K\nK -= A \nK -= B\nif K > 0:\n  ans -= K\nprint(ans)", "label": 1, "name1": "s535747622.py", "name2": "s691371673.py"}, {"id": 807, "code1": "N = int(input())\nimport sys\nsys.setrecursionlimit(N+10)\n\nes = [[] for _ in range(N)]\nfor i in range(N-1):\n    a,b = map(int, input().split())\n    a,b = a-1, b-1\n    es[a].append(b)\n    es[b].append(a)\n\n\"\"\"\n\u76f8\u624b\u306e\u53d6\u308c\u308b\u30de\u30b9\u76ee\u3092\u6e1b\u3089\u3059\u3088\u3046\u306b\u3068\u308b\u3068\u3088\u3044\n\u76f8\u624b\u3088\u308a\u305d\u306e\u30de\u30b9\u306b\u8fd1\u3051\u308c\u3070\u305d\u306e\u30de\u30b9\u3092\u53d6\u5f97\u3067\u304d\u308b\n\u30d5\u30a7\u30cd\u30c3\u30af\u304f\u3093\u3001\u3059\u306c\u3051\u541b\u306b\u3064\u3044\u3066\u521d\u671f\u5730\u70b9\u304b\u3089\u305d\u308c\u305e\u308c\u3078\u306e\u8ddd\u96e2\u304c\u5fc5\u8981\n\"\"\"\ndef solve(now, depth, depth_list, es, visited):\n    visited[now] = True\n    depth_list[now] = depth\n    for next in es[now]:\n        if visited[next] == False:            \n            solve(next, depth+1, depth_list, es, visited)\n\ndepth_list_F = [0] * N\nvisited_F = [False] * N\nsolve(0, 0, depth_list_F, es, visited_F)\n\ndepth_list_S = [0] * N\nvisited_S = [False] * N\nsolve(N-1, 0, depth_list_S, es, visited_S)\n\ncnt_F = cnt_S = 0\nfor f,s in zip(depth_list_F, depth_list_S):\n    if f <= s:\n        cnt_F += 1 # \u30d5\u30a7\u30cd\u30c3\u30af\u541b\u304b\u3089\u59cb\u3081\u308b\u306e\u3067\u540c\u3058\u8ddd\u96e2\u306a\u3089\u30d5\u30a7\u30cd\u30c3\u30af\u541b\u304c\u3068\u308b\n    else:\n        cnt_S += 1\n\nif cnt_F > cnt_S:\n    print(\"Fennec\")\nelse:\n    print(\"Snuke\")", "code2": "n=int(input())\na=list(map(int,input().split()))\nb=list(map(int,input().split()))\n\nsum1=0\nsum2=0\n\nfor i,j in zip(a,b):\n  if i>j:\n    sum1+=(i-j)\n  elif i<j:\n    sum2+=(j-i)//2\n\nprint('Yes' if sum1<=sum2 else 'No')", "label": 0, "name1": "s940891501.py", "name2": "s390816173.py"}, {"id": 596, "code1": "num = list(map(int, input().split()))\nnum.sort()\n\nx = num[2] * 3 - sum(num)\n\nif x%2 == 0:\n  ans = int(x/2)\nelse:\n  ans = int(x//2 + 2)\n\nprint(ans)\n", "code2": "q = int(input())\nquest = [tuple(map(int, input().split())) for _ in range(q)]\nfor a, b in quest:\n    m = a*b\n    l = int((m - 1) ** (1/2))\n    # check float\n    if l * l >= m:\n        l -= 1\n    elif (l+1) * (l+1) < m:\n        l += 1\n    if a == b:\n        print((a-1) * 2)\n    elif (l+1) * l < m:\n        print(l*2 - 1)\n    else:\n        print(l*2 - 2)\n", "label": 0, "name1": "s512155836.py", "name2": "s200942919.py"}, {"id": 486, "code1": "l = len(set(list(map(int, input().split()))))\nif l == 2:\n  print(\"Yes\")\nelse:\n  print(\"No\")", "code2": "A, B, C = map(int, input().split())\nprint('Yes' if len(set([A, B, C])) == 2 else 'No')", "label": 1, "name1": "s571170465.py", "name2": "s278209661.py"}, {"id": 582, "code1": "n, k  = map(int, input().split())\nA = list(map(int, input().split()))\ndp = [0] * (k + 1)\n\nfor i in range(1, k + 1):\n  if all(dp[i - a] == 1 for a in A if i >= a):\n    dp[i] = 0\n  else:\n    dp[i] = 1\n\nprint(\"First\" if dp[k] == 1 else \"Second\")", "code2": "int_list = list(map(int, input().split(' ')))\n\nmax_int = max(int_list)\n\ncnt = 0\nfor i in range(3):\n    if i < max_int:\n        cnt_tmp = (max_int - int_list[i]) // 2\n        int_list[i] += 2 * cnt_tmp\n        cnt += cnt_tmp\n\nmin_int = min(int_list)\nint_list2 = sorted([i - min_int for i in int_list])\n\nif int_list2 == [0, 0, 0]:\n    print(cnt)\nelif int_list2 == [0, 0, 1]:\n    print(cnt + 1)\nelse:\n    print(cnt + 2)", "label": 0, "name1": "s828667405.py", "name2": "s608249305.py"}, {"id": 252, "code1": "S = list(input())\nT = list(input())\n\nS.reverse()\nT.reverse()\nflag = False\n\nfor i in range(len(S)-len(T)+1):\n    for j in range(len(T)):\n        if S[j+i] == T[j] or S[j+i] == '?':\n            pass\n        else:\n            break\n\n        if j == len(T)-1:\n            flag = True\n            for k in range(len(T)):\n                if S[k+i] == '?':\n                    S[k+i] = T[k]\n            break\n    if flag:\n        break\n\nif flag:\n    for i in range(len(S)):\n        if S[i] == '?':\n            S[i] = 'a'\n    S.reverse()\n    print(''.join(S))\n\nelse:\n    print('UNRESTORABLE')\n\n\n\n", "code2": "s = list(input())\nt = list(input())\nans = [-1, -1]\nif len(t) <= len(s):\n    for i in range(len(s) - len(t) + 1):\n        c = 1\n        for j in range(len(t)):\n            if s[i + j] != \"?\" and t[j] != s[i + j]:\n                c = 0\n                break\n        if c == 1:\n            ans = [i, i + len(t)]\n\nif ans != [-1, -1]:\n    k = []\n    for i in range(len(s)):\n        if ans[0] <= i < ans[1]:\n            k.append(t[i - ans[0]])\n        else:\n            if s[i] == \"?\":\n                k.append(\"a\")\n            else:\n                k.append(s[i])\n    print(\"\".join(k))\nelse:\n    print(\"UNRESTORABLE\")\n", "label": 1, "name1": "s456382222.py", "name2": "s590642866.py"}, {"id": 968, "code1": "# ABC099D - Good Grid\nimport sys\ninput = sys.stdin.readline\n\nfrom collections import defaultdict\nfrom itertools import product\n\n\ndef main():\n    N, C = map(int, input().split())\n    D = [0] + list([0] + list(map(int, input().split())) for _ in range(C))\n    grid = tuple(tuple(map(int, input().split())) for _ in range(N))\n    cost = {i: defaultdict(int) for i in range(3)}\n    for i, g in enumerate(grid):\n        for j, x in enumerate(g):\n            cost[(i + j) % 3][x] += 1\n    dist = [[] for _ in range(3)]\n    for i, tgt in product(range(3), range(1, C + 1)):\n        cur = sum(D[src][tgt] * cnt for src, cnt in cost[i].items())\n        dist[i].append(cur)\n    ans = 1 << 60\n    for i, j in product(range(C), repeat=2):\n        if i == j:\n            continue\n        cur = dist[0][i] + dist[1][j]\n        cur += min(x for k, x in enumerate(dist[2]) if k not in (i, j))\n        ans = min(ans, cur)\n    print(ans)\n\n\nif __name__ == \"__main__\":\n    main()", "code2": "n,a,b= map(int,input().split())\nsh = sorted([int(input()) for i in range(n)],reverse=True)\nsumh = sum(sh)\ndef nibu(t):\n    rt=0\n    for i in range(n):\n        temp = -1*(-1*max(0,sh[i]-t*b)//(a-b))\n        if temp>0:rt+=temp\n        else:break\n        if rt>t:return False\n    return True if t>=rt else False\nl=max(sh)//a\nr=max(sh)//b+1\nwhile r-l!=1:\n    m = (l+r)//2\n    if nibu(m):r=m\n    else:l=m\nprint(r)\n", "label": 0, "name1": "s120577952.py", "name2": "s242197255.py"}, {"id": 220, "code1": "from itertools import permutations\nn = int(input())\np = tuple(map(int, input().split()))\nq = tuple(map(int, input().split()))\n\nfor n, i in enumerate(permutations(sorted(p))):\n    if i == p:\n        pn = n\n\nfor n, i in enumerate(permutations(sorted(q))):\n    if i == q:\n        qn = n\nprint(abs(pn-qn))\n", "code2": "from itertools import permutations\n\nn = int(input())\np = list(map(int, input().split()))\nq = list(map(int, input().split()))\n\nfor i, j in enumerate(permutations(range(1, n + 1))):\n    if list(j) == p:\n        p_index = i\n    if list(j) == q:\n        q_index = i\n\nprint(abs(p_index - q_index))", "label": 1, "name1": "s199679379.py", "name2": "s474633952.py"}, {"id": 472, "code1": "n=int(input())\nA=[int(i) for i in input().split()]\nB=[int(i) for i in input().split()]\nct1,ct2,ct3=0,0,0\nfor i in range(n):\n  ct1+=(B[i]-A[i])\n  ct2+=max(A[i]-B[i],0)\n  if B[i]>A[i]:\n    ct3+=(B[i]-A[i]-1)//2+1\nprint(\"Yes\" if max(ct2,ct3)<=ct1 else \"No\")", "code2": "import sys\nreadline = sys.stdin.readline\nsys.setrecursionlimit(10**8)\nmod = 10**9+7\n#mod = 998244353\nINF = 10**18\neps = 10**-7\n\nN = int(readline())\nA = list(map(int,readline().split()))\nB = list(map(int,readline().split()))\nK = sum(B)-sum(A)\nfor a,b in zip(A,B):\n    if a < b:\n        K -= (b-a+1)//2\nprint('Yes' if K >= 0 else 'No')\n\n\n", "label": 1, "name1": "s862908490.py", "name2": "s897100598.py"}, {"id": 779, "code1": "N = int(input())\n\ndef gcd(a, b):\n    while b:\n        a, b = b, a % b\n    return a\n\ndef lcm(a, b):\n    return a * b // gcd(a, b)\n\ns = int(input())\nfor i in range(N - 1):\n    tmp = int(input())\n    s = lcm(s, tmp)\n\nprint(s)\n", "code2": "# coding: utf-8\ndef addset(args):\n    global a\n    for m in args:\n        if dic[m]==1:\n            a.add(m)\n        else:\n            if m not in used:\n                used.add(m)\n                addset(dc[m])\n \nwhile True:\n    n=int(input())\n    if n==0:\n        break\n    dic={}\n    first=[]\n    dc={}\n    for i in range(n):\n        g,m=input().split(':')\n        m=m.rstrip('.').split(',')\n        dc[g]=m\n        if i==0:\n            first.append(g)\n            first+=m\n        dic[g]=2\n        for mem in m:\n            if mem not in dic:\n                dic[mem]=1\n    a=set()\n    used=set()\n    addset(first[1:])\n    print(len(a))\n", "label": 0, "name1": "s550486741.py", "name2": "s673127686.py"}, {"id": 484, "code1": "#\n# abc054 c\n#\n\nimport sys\nfrom io import StringIO\nimport unittest\nimport itertools\n\n\nclass TestClass(unittest.TestCase):\n    def assertIO(self, input, output):\n        stdout, stdin = sys.stdout, sys.stdin\n        sys.stdout, sys.stdin = StringIO(), StringIO(input)\n        resolve()\n        sys.stdout.seek(0)\n        out = sys.stdout.read()[:-1]\n        sys.stdout, sys.stdin = stdout, stdin\n        self.assertEqual(out, output)\n\n    def test_\u5165\u529b\u4f8b_1(self):\n        input = \"\"\"3 3\n1 2\n1 3\n2 3\"\"\"\n        output = \"\"\"2\"\"\"\n        self.assertIO(input, output)\n\n    def test_\u5165\u529b\u4f8b_2(self):\n        input = \"\"\"7 7\n1 3\n2 7\n3 4\n4 5\n4 6\n5 6\n6 7\"\"\"\n        output = \"\"\"1\"\"\"\n        self.assertIO(input, output)\n\n\ndef resolve():\n    N, M = map(int, input().split())\n    P = [list(map(int, input().split())) for _ in range(M)]\n\n    R = itertools.permutations(range(1, N+1))\n\n    ans = 0\n    for r in R:\n        flag = True\n        r = list(r)\n        if r[0] != 1:\n            break\n        for i in range(1, N):\n            for p in P:\n                if (r[i-1] == p[0] and r[i] == p[1]) or (r[i-1] == p[1] and r[i] == p[0]):\n                    break\n            else:\n                flag = False\n        if flag == True:\n            ans += 1\n\n    print(ans)\n\n\nif __name__ == \"__main__\":\n    # unittest.main()\n    resolve()\n", "code2": "import itertools\nimport numpy as np\n\nN, M = map(int, input().split())\nX = [[] for _ in range(M)]\nfor i in range(M):\n    X[i] = list(map(int, input().split()))\npermutations_list = list(itertools.permutations([i for i in range(N-1)]))\n\ncount = 0\nfor i in range(len(permutations_list)):\n    x = np.argsort(permutations_list[i])\n    if [1, x[0]+2] not in X and [x[0]+2, 1] not in X:\n        count += 1\n        continue\n    for j in range(N-2):\n        pair = [x[j]+2, x[j+1]+2]\n        reverse = list(reversed(pair))\n        if pair not in X and reverse not in X:\n            count += 1\n            break\nprint(len(permutations_list) -count)", "label": 1, "name1": "s851959667.py", "name2": "s078154216.py"}, {"id": 897, "code1": "a, b = map(int,input().split())\nc = (a-b) * 100 + b * 1900\nprint(c * 2 ** b)\n", "code2": "N = int(input())\nanswer = N\nwhile 1:\n    if all([answer%n for n in range(2,answer)]):\n        print(answer)\n        exit()\n    else:\n        answer += 1\n", "label": 0, "name1": "s630865419.py", "name2": "s134494492.py"}, {"id": 359, "code1": "\nX, Y = list(map(int, input().split()))\n\nans = 0\nwhile X <= Y:\n\tX *= 2\n\tans += 1\n\nprint(ans)", "code2": "from collections import deque\n\nl = [int(i) for i in input().split(' ')]\nx, y = l[0], l[1]\n\ncount = 0\nwhile x <= y:\n    x *= 2\n    count += 1\nprint(count)", "label": 1, "name1": "s831535184.py", "name2": "s115921553.py"}, {"id": 731, "code1": "def inpl(): return list(map(int, input().split()))\nN, M = inpl()\nf, n = set(), set()\nfor i in range(M):\n    temp = inpl()\n    if 1 in temp:\n        f.add(temp[1])\n    if N in temp:\n        n.add(temp[0])\nif len(f & n) > 0:\n    print('POSSIBLE')\nelse:\n    print('IMPOSSIBLE')", "code2": "\nX, Y = list(map(int, input().split()))\n\nans = 0\nwhile X <= Y:\n\tX *= 2\n\tans += 1\n\nprint(ans)", "label": 0, "name1": "s278593598.py", "name2": "s831535184.py"}, {"id": 794, "code1": "from collections import defaultdict\n\nclass Unionfind:\n\n    __slots__ = ['parents','sizes']\n\n    def __init__(self, n):\n        self.parents = list(range(n))\n        self.sizes = [1]*n\n\n    def root(self, x):\n        if self.parents[x] == x:\n            return x\n        else:\n            root_x = self.root(self.parents[x])\n            self.parents[x] = root_x\n            return root_x\n\n    def unite(self, x, y):\n        x = self.root(x); y = self.root(y)\n        if x == y:\n            return\n        if self.sizes[x] < self.sizes[y]:\n            x, y = y, x\n        self.sizes[x] += self.sizes[y]\n        self.parents[y] = x\n\n    def same(self, x, y):\n        return self.root(x) == self.root(y)\n\n    # \u96c6\u5408\u81ea\u4f53\u306e\u6570 ({1,2}, {3}, {4} : kind -> 3)\n    def kind(self):\n        for v in range(N):\n            self.root(v)\n        return len(list(set(self.parents)))\n\n    # x\u304c\u5c5e\u3059\u308b\u96c6\u5408\u306e\u8981\u7d20\u306e\u6570\u3000({1,2,3} : size(2) -> 3)\n    def size(self, x):\n        self.sizes[x] = self.sizes[self.root(x)]\n        return self.sizes[x]\n\nN, K, L = map(int,input().split())\nroad = Unionfind(N)\ntrain = Unionfind(N)\n\nfor _ in range(K):\n    p, q = map(int,input().split())\n    p -= 1; q -= 1\n    road.unite(p, q)\n\nfor _ in range(L):\n    r, s = map(int,input().split())\n    r -= 1; s -= 1\n    train.unite(r, s)\n\ncnt = defaultdict(int)\n\nfor i in range(N):\n    key = (road.root(i), train.root(i))\n    cnt[key] += 1\n\nans_list = []\nfor i in range(N):\n    key = (road.root(i), train.root(i))\n    ans = cnt[key]\n    ans_list.append(ans)\n\nprint(*ans_list)", "code2": "a=['Wednesday','Thursday','Friday','Saturday','Sunday','Monday','Tuesday',0]\nwhile True:\n    q=map(int,raw_input().split())\n    if sum(q) == 0: break\n    print a[(sum([0,31,29,31,30,31,30,31,31,30,31,30,31][:q[0]])+q[1])%7]", "label": 0, "name1": "s028456939.py", "name2": "s388074654.py"}, {"id": 117, "code1": "n, k  = map(int, input().split())\nA = list(map(int, input().split()))\ndp = [0] * (k + 1)\n\nfor i in range(1, k + 1):\n  if all(dp[i - a] == 1 for a in A if i >= a):\n    dp[i] = 0\n  else:\n    dp[i] = 1\n\nprint(\"First\" if dp[k] == 1 else \"Second\")", "code2": "\n\ndef main():\n    n, K = map(int, input().split())\n    a = list(map(int, input().split()))\n\n    # dp[i] is true if First player wins with i tiles left\n    dp = [False]*(K+1)\n    for k in range(1, K+1):\n        for i in a:\n            if k >= i and not dp[k-i]:\n                dp[k] = True\n    print(['Second', 'First'][dp[K]])\n\n\nif __name__ == \"__main__\":\n    main()\n", "label": 1, "name1": "s828667405.py", "name2": "s700864010.py"}, {"id": 741, "code1": "from heapq import heappush, heappop\nimport sys\nfrom typing import List, Tuple\n\n\nif __name__ == \"__main__\":\n    V, E, r = map(lambda x: int(x), input().split())\n\n    edges: List[List[Tuple[int, int]]] = [[] for _ in range(V)]\n    dists = [sys.maxsize for _ in range(V)]\n    dists[r] = 0\n\n    for _ in range(E):\n        s, t, dist = map(lambda x: int(x), input().split())\n        edges[s].append((t, dist))\n\n    que: List[Tuple[int, int]] = []  # (dist, vertex)\n    heappush(que, (0, r))\n\n    while que:\n        dist, vertex = heappop(que)\n        for to, cost in edges[vertex]:\n            if cost + dist < dists[to]:\n                dists[to] = cost + dist\n                heappush(que, (cost + dist, to))\n\n    for dist in dists:\n        if sys.maxsize == dist:\n            print(\"INF\")\n        else:\n            print(dist)\n\n", "code2": "i,o,t,j,l,s,z = map(int,input().split())\na = 2*(i//2+j//2+l//2)\nif i>0 and j>0 and l>0:\n    i,j,l = i-1,j-1,l-1\n    b = 2*(i//2+j//2+l//2)\n    print(o+max(a,b+3))\nelse:\n    print(o+a)\n", "label": 0, "name1": "s404691730.py", "name2": "s273049490.py"}, {"id": 350, "code1": "def inpl(): return list(map(int, input().split()))\nN, M = inpl()\nf, n = set(), set()\nfor i in range(M):\n    temp = inpl()\n    if 1 in temp:\n        f.add(temp[1])\n    if N in temp:\n        n.add(temp[0])\nif len(f & n) > 0:\n    print('POSSIBLE')\nelse:\n    print('IMPOSSIBLE')", "code2": "n, m = list(map(int, input().split()))\nfrom collections import defaultdict\nd = defaultdict(set)\nfor i in range(m):\n  a, b = list(map(int, input().split()))\n  d[a].add(b)\n  d[b].add(a)\nif d[1]&d[n]:\n  print(\"POSSIBLE\")\nelse:\n  print(\"IMPOSSIBLE\")", "label": 1, "name1": "s278593598.py", "name2": "s098314354.py"}, {"id": 375, "code1": "I,O,R,J,L,S,Z=map(int,input().split())\na=(I//2+J//2+L//2)*2\nb=0\nif I*J*L!=0:b=(2*((I-1)//2+(J-1)//2+(L-1)//2)+3)\nprint(max(a,b)+O)", "code2": "I,O,T,J,L,S,Z=map(int,input().split())\nA=((I-1)//2)*2+O+((J-1)//2)*2+((L-1)//2)*2+3\nB=(I//2)*2+O+(J//2)*2+(L//2)*2\nif I==0 or J==0 or L==0:\n  print(B)\nelse:\n  print(max(A,B))\n", "label": 1, "name1": "s966423542.py", "name2": "s908614160.py"}, {"id": 394, "code1": "start, end, div = list(map(int, input().strip().split()))\n\ncount = end // div - start //div\n\nif start % div == 0:\n  count += 1\nprint(count)", "code2": "a,b,x = map(int,input().split())\ndef count(c):\n  if c==0:\n    return 0\n  return c//x\nprint(count(b)-count(a-1))", "label": 1, "name1": "s009071418.py", "name2": "s912221426.py"}, {"id": 167, "code1": "X = input()\ns_cnt = 0\nans = 0\nfor s in X:\n    if s=='S':\n        s_cnt += 1\n    else:\n        if s_cnt > 0:\n            ans += 1\n            s_cnt -= 1\n\nprint(len(X) - 2*ans)", "code2": "#\n# \u3000\u3000  \u22c0_\u22c0\u3000 \n#\u3000\u3000  (\uff65\u03c9\uff65)  \n# .\uff0f \uff35 \u223d \uff35\uff3c\n#  \u2502\uff0a\u3000\u5408\u3000\uff0a\u2502\n#  \u2502\uff0a\u3000\u683c\u3000\uff0a\u2502 \n#  \u2502\uff0a\u3000\u7948\u3000\uff0a\u2502 \n#  \u2502\uff0a\u3000\u9858\u3000\uff0a\u2502 \n#  \u2502\uff0a\u3000\u3000\u3000\uff0a\u2502 \n#      \uffe3\n#\nimport sys\nsys.setrecursionlimit(10**6)\ninput=sys.stdin.readline\nfrom math import floor,sqrt,factorial,hypot,log #log2\u306a\u3044\uff59\uff50\nfrom heapq import heappop, heappush, heappushpop\nfrom collections import Counter,defaultdict,deque\nfrom itertools import accumulate,permutations,combinations,product,combinations_with_replacement\nfrom bisect import bisect_left,bisect_right\nfrom copy import deepcopy\nfrom fractions import gcd\nfrom random import randint\ndef ceil(a,b): return (a+b-1)//b\ninf=float('inf')\nmod = 10**9+7\ndef pprint(*A): \n    for a in A:     print(*a,sep='\\n')\ndef INT_(n): return int(n)-1\ndef MI(): return map(int,input().split())\ndef MF(): return map(float, input().split())\ndef MI_(): return map(INT_,input().split())\ndef LI(): return list(MI())\ndef LI_(): return [int(x) - 1 for x in input().split()]\ndef LF(): return list(MF())\ndef LIN(n:int): return [I() for _ in range(n)]\ndef LLIN(n: int): return [LI() for _ in range(n)]\ndef LLIN_(n: int): return [LI_() for _ in range(n)]\ndef LLI(): return [list(map(int, l.split() )) for l in input()]\ndef I(): return int(input())\ndef F(): return float(input())\ndef ST(): return input().replace('\\n', '')\ndef main():\n    X=ST()\n    stack = []\n    for s in X:\n        stack.append(s)\n        if(stack[-2:]==[\"S\",\"T\"]):\n            stack.pop();stack.pop()\n    print(len(stack))\nif __name__ == '__main__':\n    main()", "label": 1, "name1": "s514074837.py", "name2": "s702845370.py"}, {"id": 679, "code1": "a,b,c,k=map(int,input().split())\n\nif k <= a:\n    print(k)\nelif k <= a+b:\n    print(a)\nelse:\n    print(a-(k-(a+b)))", "code2": "a, b = [], []\nappear_count = [0] * 4\nfor _ in range(3):\n    _a, _b = map(int, raw_input().split())\n    appear_count[_a - 1] += 1\n    appear_count[_b - 1] += 1\nif max(appear_count) == 3:\n    print \"NO\"\nelse:\n    print \"YES\"", "label": 0, "name1": "s019552488.py", "name2": "s562629657.py"}, {"id": 454, "code1": "from datetime import date\nwhile 1:\n\tm,d=map(int,raw_input().split())\n\tif m==0:break\n\tprint date(2004,m,d).strftime(\"%A\")", "code2": "import datetime\n\ntry:\n\twhile 1:\n\t\ts = raw_input().split()\n\t\ts[0] = int(s[0])\n\t\ts[1] = int(s[1])\n\t\t\n\t\tif s[0] + s[1] == 0:\n\t\t\texit()\n\t\t\n\t\tn = datetime.date(2004, s[0], s[1]).weekday()\n\t\t\n\t\tif n == 0:\n\t\t\tprint(\"Monday\")\n\t\telif n == 1:\n\t\t\tprint(\"Tuesday\")\n\t\telif n == 2:\n\t\t\tprint(\"Wednesday\")\n\t\telif n == 3:\n\t\t\tprint(\"Thursday\")\n\t\telif n == 4:\n\t\t\tprint(\"Friday\")\n\t\telif n == 5:\n\t\t\tprint(\"Saturday\")\n\t\telif n == 6:\n\t\t\tprint(\"Sunday\")\nexcept:\n\tpass", "label": 1, "name1": "s074010277.py", "name2": "s693168692.py"}, {"id": 649, "code1": "from itertools import permutations\nn = int(input())\np = tuple(map(int, input().split()))\nq = tuple(map(int, input().split()))\n\nfor n, i in enumerate(permutations(sorted(p))):\n    if i == p:\n        pn = n\n\nfor n, i in enumerate(permutations(sorted(q))):\n    if i == q:\n        qn = n\nprint(abs(pn-qn))\n", "code2": "import math, sys\n\ndef loadable(w, n, k, p, wsum):\n    wait = 0\n    for i in range(n):\n        wait += w[i]\n        wsum -= w[i]\n        if wait > p:\n            k -= 1\n            wait = w[i]\n            if k == 0 or p < wsum / k:\n                return False\n    return True\n\nn, k = map(int, sys.stdin.readline().split())\nw = [int(sys.stdin.readline()) for _ in range(n)]\n\nwsum = sum(w)\n\np = max(int(math.ceil(wsum / k)), max(w))\npre_f = p -1\npre_s = None\n\nwhile True:\n    if loadable(w, n, k, p, wsum):\n        pre_s = p\n    else:\n        pre_f = p\n\n    if pre_s != None and pre_s - pre_f == 1:\n            break\n    \n    if pre_s:\n        p = int((pre_s + pre_f) / 2)\n    else:\n        p = math.ceil(p * 1.01)\n    \nprint(pre_s)", "label": 0, "name1": "s199679379.py", "name2": "s671645015.py"}, {"id": 818, "code1": "N = int(input())\nA = list(map(int, input().split()))\nB = list(map(int, input().split()))\n\nplus_2 = 0\nminus = 0\nfor a, b in zip(A, B):\n    if a < b:\n        plus_2 += (b-a)//2\n    else:\n        minus += a-b\n\nif plus_2 >= minus:\n    print('Yes')\nelse:\n    print('No')", "code2": "import sys\nfrom collections import defaultdict, Counter, deque\nfrom itertools import accumulate, permutations, combinations\nfrom operator import itemgetter\nfrom bisect import bisect_left, bisect_right, bisect\nfrom heapq import heappop, heappush\nfrom fractions import gcd\nfrom math import ceil, floor, sqrt, cos, sin, pi\nfrom copy import deepcopy\n\n# If you use recursive call, uncomment this code\n#sys.setrecursionlimit(10**6)\n\ndef main():\n    nums = set(map(int, input().split()))\n    if len(nums) == 2:\n        print(\"Yes\")\n    else:\n        print(\"No\")\n\n\nif __name__ == '__main__':\n    main()\n", "label": 0, "name1": "s301247411.py", "name2": "s765543700.py"}, {"id": 30, "code1": "n,a,b = map(int, input().split())\nXs = list(map(int, input().split()))\n\nds = [0] * (n+10)\nfor i in range(n-1):\n    cost1 = a*(Xs[i+1] - Xs[i])\n    cost2 = b\n    ds[i+1] = ds[i] + min(cost1, cost2)\nprint(ds[n-1])", "code2": "def main():\n    N, A, B = map(int, input().split())\n    X = map(int, input().split())\n\n    ret = 0\n    curr = next(X)\n    for x in X:\n        ret += min((x - curr) * A, B)\n        curr = x\n    print(ret)\n\n\nif __name__ == '__main__':\n    main()\n", "label": 1, "name1": "s039990138.py", "name2": "s627561056.py"}, {"id": 587, "code1": "import sys\nread = sys.stdin.buffer.read\nreadline = sys.stdin.buffer.readline\nreadlines = sys.stdin.buffer.readlines\n\nimport numpy as np\n\nN = int(readline())\nS = read().rstrip().decode('utf-8')\n\nMOD = 10**9 + 7\n\n\"\"\"\n\u30fb\u6700\u5f8c\u306b\u4f7f\u3063\u305f\u6570\u306b\u5bfe\u3057\u3066\u3001\u4e0b\u5074\u306b\u6b8b\u3063\u3066\u3044\u308b\u500b\u6570 -> \u6570\u3048\u4e0a\u3052\n\"\"\"\n\ndp = np.ones(N,np.int64) # \u5de6\u7aef\n\nfor s in S:\n    prev = dp\n    if s == '<':\n        # 0,1,...,n\u304cdp[n]\u306b\u9077\u79fb\u3059\u308b\n        dp = prev[:-1].cumsum()\n    else:\n        # n+1,n+2,...\u304cdp[n]\u306b\u9077\u79fb\u3059\u308b\n        dp = prev[1:][::-1].cumsum()[::-1]\n    dp %= MOD\n\nanswer = dp[0]\nprint(answer)", "code2": "num = list(map(int, input().split()))\nnum.sort()\n\nx = num[2] * 3 - sum(num)\n\nif x%2 == 0:\n  ans = int(x/2)\nelse:\n  ans = int(x//2 + 2)\n\nprint(ans)\n", "label": 0, "name1": "s898339720.py", "name2": "s512155836.py"}, {"id": 24, "code1": "from math import *\nn,m=map(int,input().split())\nif(n==1 or m==1):\n    print(1)\nelse:\n    print(ceil((n*m)/2))\n", "code2": "h,w= map(int, input().split())\n\nif h==1 or w==1:\n    print(1)\n    exit()\n\nif w%2==0:\n    print((w//2)*h)\n\nelse:\n    if h%2==0:\n        print((h//2)*w)\n    else:\n        print((h//2)*w+(w//2)+1)", "label": 1, "name1": "s965203099.py", "name2": "s773266940.py"}, {"id": 299, "code1": "class UnionFind():\n  def __init__(self, n):\n    self.n = n\n    self.parents = [-1] * n\n\n  def find(self, x):\n    if self.parents[x] < 0:\n      return x\n    else:\n      self.parents[x] = self.find(self.parents[x])\n      return self.parents[x]\n\n  def union(self, x, y):\n    x = self.find(x)\n    y = self.find(y)\n\n    if x == y:\n      return\n\n    if self.parents[x] > self.parents[y]:\n      x, y = y, x\n\n    self.parents[x] += self.parents[y]\n    self.parents[y] = x\n\n  def size(self, x):\n    return -self.parents[self.find(x)]\n\n  def same(self, x, y):\n    return self.find(x) == self.find(y)\n\n  def members(self, x):\n    root = self.find(x)\n    return [i for i in range(self.n) if self.find(i) == root]\n\n  def roots(self):\n    return [i for i, x in enumerate(self.parents) if x < 0]\n\n  def group_count(self):\n    return len(self.roots())\n\n  def all_group_members(self):\n    return {r: self.members(r) for r in self.roots()}\n\n  def __str__(self):\n    return '\\n'.join('{}: {}'.format(r, self.members(r)) for r in self.roots())\n\nn, m = map(int, input().split())\nuf = UnionFind(n)\n\nfor _ in range(m):\n  a, b = map(int, input().split())\n  uf.union(a-1,b-1)\n  \nprint(uf.group_count() - 1)\n\n", "code2": "import sys\nimport heapq, math\nfrom itertools import zip_longest, permutations, combinations, combinations_with_replacement\nfrom itertools import accumulate, dropwhile, takewhile, groupby\nfrom functools import lru_cache\nfrom copy import deepcopy\n\nclass UnionFind:\n\n    def __init__(self, n: int):\n        self._n = n\n        self._parents = [i for i in range(n)]\n        self._rank = [1 for _ in range(n)]\n\n    def unite(self, x: int, y: int) -> None:\n        px = self.find(x)\n        py = self.find(y)\n\n        # \u4e00\u81f4\u3057\u3066\u3044\u306a\u3044\u3068\u304d\u306f\u30ea\u30f3\u30af\u3092\u3064\u3051\u308b\n        if px != py:\n            self._link(px, py)\n\n    def _link(self, x: int, y: int):\n        if self._rank[x] < self._rank[y]:\n            self._parents[x] = y\n        elif self._rank[x] > self._rank[y]:\n            self._parents[y] = x\n        else:\n            self._parents[x] = y\n            self._rank[y] += 1\n\n    def same(self, x: int, y: int) -> bool:\n        px = self.find(x)\n        py = self.find(y)\n        return px == py\n\n    def find(self, x: int) -> int:\n        if self._parents[x] == x:\n            return x\n\n        self._parents[x] = self.find(self._parents[x])\n        return self._parents[x]\n\nN, M = map(int, input().split())\nuf = UnionFind(N + 1)\n\nfor i in range(M):\n    A, B = map(int, input().split())\n    uf.unite(A, B)\n\ns = set()\nfor i in range(1, N + 1):\n    s.add(uf.find(i))\n\nprint(len(s) - 1)\n", "label": 1, "name1": "s813737955.py", "name2": "s182405502.py"}, {"id": 321, "code1": "####################\n#  AC:     ms (PyPy)\n####################\n\ndef main():\n    MOD = 10**6+3\n    # preprocess\n    fac = [None] * (MOD+1)\n    fac[0] = fac[1] = 1\n    for i in range(2, MOD+1):\n        fac[i] = (fac[i-1] * i) % MOD\n\n    Q = int(input())\n    for i in range(Q):\n        x, d, n = map(int, input().split())\n\n        if d == 0:\n            print(pow(x, n, MOD))\n            continue\n        \n        xd = (x * pow(d, MOD-2, MOD)) % MOD\n        if xd == 0 or xd + (n-1) >= MOD:\n            print(0)\n            continue\n\n        print(pow(d, n, MOD) * fac[xd+(n-1)] * pow(fac[xd-1], MOD-2, MOD) % MOD)\n\n\nif __name__ == \"__main__\":\n    main()", "code2": "# https://atcoder.jp/contests/m-solutions2019/submissions/5741430\nimport sys\n\ninput = sys.stdin.readline\n\nMOD = 10 ** 6 + 3\n\n\ndef inv(n):\n    return pow(n, MOD - 2, MOD)\n\n\nfact = [1]\nfor n in range(1, MOD):\n    fact.append((fact[-1] * n) % MOD)\n    # d>1 \u306e\u6570\u5217\u3092 d=1 \u3068\u306a\u308b\u6570\u5217\u306b\u5909\u63db\u3059\u308b\n    # MOD\u306e\u500d\u6570\u3092\u542b\u3080\u6570\u5217\u306e\u7a4d\u306f0\u306b\u306a\u308b\u306e\u3067,\n    # MOD\u306e\u500d\u6570\u3092\u542b\u307e\u306a\u3044\u533a\u9593\u306e\u7a4d\u304c\u8a08\u7b97\u3067\u304d\u308c\u3070\u3088\u3044\n    # \u305d\u306e\u3088\u3046\u306a\u533a\u9593\u306e\u53f3\u7aef\u306fMOD-1\u3067\u3042\u308a,fact[MOD-1]\u304c\u8a08\u7b97\u3067\u304d\u308c\u3070\u3088\u3044\n\ninv_fact = [-1] * MOD\ninv_fact[MOD - 1] = inv(fact[-1])\nfor n in range(MOD - 2, -1, -1):\n    inv_fact[n] = ((inv_fact[n + 1] * (n + 1)) % MOD)\n    # inv_fact\u306f,inv(n!)\u306bn,n-1,...\u3092\u639b\u3051\u308b\u30a4\u30e1\u30fc\u30b8\n\nQ = int(input())\nfor _ in range(Q):\n    x, d, n = map(int, input().split())\n\n    if x == 0:\n        print(0)\n        continue\n\n    if d == 0:\n        print(pow(x, n, MOD))\n        continue\n\n    xd = (x * inv(d)) % MOD\n    if xd == 0:\n        print(0)\n        continue\n\n    if MOD - xd < n:\n        print(0)\n        continue\n\n    dn = pow(d, n, MOD)\n    print((((fact[xd + n - 1] * inv_fact[xd - 1]) % MOD) * dn) % MOD)\n", "label": 1, "name1": "s606450603.py", "name2": "s847761585.py"}, {"id": 572, "code1": "import math\na, b, c = map(int, input().split())\nh = b * math.sin(math.radians(c))\nprint(a * h / 2)\nprint(a + b + math.sqrt((a-b*math.cos(math.radians(c)))**2 + h**2))\nprint(h)\n\n", "code2": "import sys\nsys.setrecursionlimit(2147483647)\nINF=float(\"inf\")\nMOD=10**9+7\ninput=lambda :sys.stdin.readline().rstrip()\ndef resolve():\n    n,k=map(int,input().split())\n    A=list(map(int,input().split()))\n    dp=[0]*(k+1)\n    for i in range(k):\n        if dp[i]: continue\n        for j in range(n):\n            if i+A[j]<=k: dp[i+A[j]]=1\n    print(\"First\" if dp[k] else \"Second\")\nresolve()", "label": 0, "name1": "s253160566.py", "name2": "s270542298.py"}, {"id": 396, "code1": "input()\ns = sorted(map(int, raw_input().split()))\nfor i in s:\n    print i,", "code2": "n = input()\nfor i in sorted(map(int, raw_input().split())):\n print i ,", "label": 1, "name1": "s503541745.py", "name2": "s740416119.py"}, {"id": 969, "code1": "import bisect\nn = int(input())\na = list(map(int, input().split()))\nb = list(map(int, input().split()))\nc = list(map(int, input().split()))\nbsort = sorted(b)\ncsort = sorted(c)\nres = 0\nasum = [0] * n\nbsum = [0] * n\nfor i in range(n):\n    asum[i] = n - bisect.bisect_right(bsort, a[i])\nfor i in range(n):\n    bsum[i] = n - bisect.bisect_right(csort, b[i])\nbsum.sort()\ntotal = 0\nfor i in range(n):\n    total += bsum[i]\n    bsum[i] = total\nres = 0\nfor i in range(n):\n    if asum[i] != 0:\n        res += bsum[asum[i] -1]\nprint(res)", "code2": "# -*- coding: utf-8 -*-\nimport bisect\nimport heapq\nimport math\nimport random\nfrom collections import Counter, defaultdict, deque\nfrom decimal import ROUND_CEILING, ROUND_HALF_UP, Decimal\nfrom fractions import Fraction\nfrom functools import lru_cache, reduce\nfrom itertools import combinations, combinations_with_replacement, product, permutations, accumulate\nfrom operator import add, mul, sub, itemgetter, attrgetter\n\n\nimport sys\n# sys.setrecursionlimit(10**6)\n# readline = sys.stdin.buffer.readline\nreadline = sys.stdin.readline\n\nINF = 2**62-1\n\n\ndef read_int():\n    return int(readline())\n\n\ndef read_int_n():\n    return list(map(int, readline().split()))\n\n\ndef read_float():\n    return float(readline())\n\n\ndef read_float_n():\n    return list(map(float, readline().split()))\n\n\ndef read_str():\n    return readline().strip()\n\n\ndef read_str_n():\n    return readline().strip().split()\n\n\ndef ep(*args):\n    print(*args, file=sys.stderr)\n\n\ndef mt(f):\n    import time\n\n    def wrap(*args, **kwargs):\n        s = time.perf_counter()\n        ret = f(*args, **kwargs)\n        e = time.perf_counter()\n\n        ep(e - s, 'sec')\n        return ret\n\n    return wrap\n\n\nclass Bisect:\n    def __init__(self, func):\n        self.__func = func\n\n    def bisect_left(self, x, lo, hi):\n        while lo < hi:\n            mid = (lo+hi)//2\n            if self.__func(mid) < x:\n                lo = mid+1\n            else:\n                hi = mid\n        return lo\n\n    def bisect_right(self, x, lo, hi):\n        while lo < hi:\n            mid = (lo+hi)//2\n            if x < self.__func(mid):\n                hi = mid\n            else:\n                lo = mid+1\n        return lo\n\n@mt\ndef slv(N, A, B, H):\n    c = A-B\n    def f(n):\n        m = n\n        for h in H:\n            h -= n * B\n            if h > 0:\n                m -= -(-h // c)\n        return 1 if m >= 0 else 0\n\n    return Bisect(f).bisect_left(1, 0, 10**9)\n\n\n\ndef main():\n    N, A, B = read_int_n()\n    H = [read_int() for _ in range(N)]\n    print(slv(N, A, B, H))\n\n\nif __name__ == '__main__':\n    main()\n", "label": 0, "name1": "s514022897.py", "name2": "s796173031.py"}, {"id": 108, "code1": "A,B,C = map(int, input().split())\ncount = 0\nlist1 = [A,B]\n\nfor i in range(min(list1),max(list1)):\n    if C == i:\n        count = 1\n \nif count == 1:\n    print(\"Yes\")\nelse:\n    print(\"No\")", "code2": "a,b,c = map(int, input().split())\n\nprint(\"Yes\" if a<c<b or b<c<a else \"No\")", "label": 1, "name1": "s230128846.py", "name2": "s135661044.py"}, {"id": 663, "code1": "#!/usr/bin/env python3\n#CODE FESTIVAL 2016 A\n\nimport sys\nimport math\nimport bisect\nsys.setrecursionlimit(1000000000)\nfrom heapq import heappush, heappop\nfrom collections import defaultdict\nfrom itertools import accumulate\nfrom collections import Counter\nfrom collections import deque\nfrom operator import itemgetter\nfrom itertools import permutations\nmod = 10**9 + 7\ndef I(): return int(sys.stdin.readline())\ndef LI(): return list(map(int,sys.stdin.readline().split()))\n\nn = I()\na = LI()\nx = []\nfor i in range(n):\n    if i+1 > a[i]:\n        x.append((a[i],i+1))\n    else:\n        x.append((i+1,a[i]))\nprint(n-len(list(set(x))))\n", "code2": "S = list(input())\nT = list(input())\n\nS.reverse()\nT.reverse()\nflag = False\n\nfor i in range(len(S)-len(T)+1):\n    for j in range(len(T)):\n        if S[j+i] == T[j] or S[j+i] == '?':\n            pass\n        else:\n            break\n\n        if j == len(T)-1:\n            flag = True\n            for k in range(len(T)):\n                if S[k+i] == '?':\n                    S[k+i] = T[k]\n            break\n    if flag:\n        break\n\nif flag:\n    for i in range(len(S)):\n        if S[i] == '?':\n            S[i] = 'a'\n    S.reverse()\n    print(''.join(S))\n\nelse:\n    print('UNRESTORABLE')\n\n\n\n", "label": 0, "name1": "s190944842.py", "name2": "s456382222.py"}, {"id": 954, "code1": "#!/usr/bin/env python3\nimport sys, math, itertools, collections, bisect\ninput = lambda: sys.stdin.buffer.readline().rstrip().decode('utf-8')\ninf = float('inf') ;mod = 10**9+7\nmans = inf ;ans = 0 ;count = 0 ;pro = 1\n\nn=input()\nC=collections.Counter(n)\nprint(C[\"2\"])", "code2": "\nn,c = map(int, input().split())\nd = []\nfor _ in range(c):\n    a = list(map(int, input().split()))\n    d.append(a)\n\ngrid = [[0 for j in range(c+1)] for i in range(3)]\nfor i in range(n):\n    for j,cc in enumerate(map(int, input().split())):\n        k = j\n        grid[(i+j)%3][cc] += 1\n\nans = float('INF')\n\nfor i in range(1,c+1):\n    for j in range(1,c+1):\n        if i == j:\n            continue\n        for k in range(1,c+1):\n            if i == k or j == k:\n                continue\n            cost = 0\n            for a in range(1,c+1):\n                # print(int(d[a-1][i-1]), grid[0][a], int(d[a-1][j-1]), grid[1][a], int(d[a-1][k-1]), grid[2][a])\n                cost += d[a-1][i-1] * grid[0][a] + d[a-1][j-1] * grid[1][a] + d[a-1][k-1] * grid[2][a]\n            \n            if cost < ans:\n                # print(i,j,k,cost)\n                ans = cost\n\nprint(int(ans))\n", "label": 0, "name1": "s618561619.py", "name2": "s856621686.py"}, {"id": 478, "code1": "import itertools\n\ndef is_edge_exists(node1, node2, edges):\n\tfor edge in edges:\n\t\tif node1 in edge and node2 in edge:\n\t\t\treturn True\n\treturn False\n\ndef route_count(route, edges):\n\tif route[0]!=1:\n\t\treturn 0\n\tfor i in range(len(route)-1):\n\t\tif not is_edge_exists(route[i], route[i+1], edges):\n\t\t\treturn 0\n\treturn 1\n\nN, M = map(int, input().split())\nedges = [list(map(int, input().split())) for i in range(M)]\nnodes = [i+1 for i in range(N)]\nroutes = list(itertools.permutations(nodes))\n\nans = 0\nfor route in routes:\n\tans += route_count(route, edges)\nprint(ans)", "code2": "#\n# abc054 c\n#\n\nimport sys\nfrom io import StringIO\nimport unittest\nimport itertools\n\n\nclass TestClass(unittest.TestCase):\n    def assertIO(self, input, output):\n        stdout, stdin = sys.stdout, sys.stdin\n        sys.stdout, sys.stdin = StringIO(), StringIO(input)\n        resolve()\n        sys.stdout.seek(0)\n        out = sys.stdout.read()[:-1]\n        sys.stdout, sys.stdin = stdout, stdin\n        self.assertEqual(out, output)\n\n    def test_\u5165\u529b\u4f8b_1(self):\n        input = \"\"\"3 3\n1 2\n1 3\n2 3\"\"\"\n        output = \"\"\"2\"\"\"\n        self.assertIO(input, output)\n\n    def test_\u5165\u529b\u4f8b_2(self):\n        input = \"\"\"7 7\n1 3\n2 7\n3 4\n4 5\n4 6\n5 6\n6 7\"\"\"\n        output = \"\"\"1\"\"\"\n        self.assertIO(input, output)\n\n\ndef resolve():\n    N, M = map(int, input().split())\n    P = [list(map(int, input().split())) for _ in range(M)]\n\n    R = itertools.permutations(range(1, N+1))\n\n    ans = 0\n    for r in R:\n        flag = True\n        r = list(r)\n        if r[0] != 1:\n            break\n        for i in range(1, N):\n            for p in P:\n                if (r[i-1] == p[0] and r[i] == p[1]) or (r[i-1] == p[1] and r[i] == p[0]):\n                    break\n            else:\n                flag = False\n        if flag == True:\n            ans += 1\n\n    print(ans)\n\n\nif __name__ == \"__main__\":\n    # unittest.main()\n    resolve()\n", "label": 1, "name1": "s952388313.py", "name2": "s851959667.py"}, {"id": 772, "code1": "iN = int(input())\naA = [0] + [int(_) for _ in input().split()] + [0]\niAll = sum(map(lambda i :abs(aA[i+1]-aA[i]),range(iN+1)))\nprint(\"\\n\".join(map(lambda i:str( iAll - abs(aA[i-1]-aA[i]) - abs(aA[i]-aA[i+1]) + abs(aA[i-1]-aA[i+1])), range(1,iN+1))))\n", "code2": "def gcd(x,y):\n    a=max(x,y)\n    b=min(x,y)\n    if a%b==0:\n        return b\n    else:\n        return gcd(b,a%b)\n\ndef lcm(x,y):\n    return (x*y)//gcd(x,y)\n\nN=int(input())\nans=1\nfor i in range(N):\n    ans=lcm(ans,int(input()))\nprint(ans)\n", "label": 0, "name1": "s167602198.py", "name2": "s751000860.py"}, {"id": 729, "code1": "import bisect\n\nans = \"IMPOSSIBLE\"\nn, m = map(int, input().split())\nac = []\nbc = []\nfor _ in range(m):\n    a, b = map(int, input().split())\n    if min(a, b) == 1:\n        ac.append(max(a, b))\n    elif max(a, b) == n:\n        bc.append(min(a, b))\nac = list(sorted(ac))\nbc = list(sorted(bc))\nfor c in ac:\n    i = bisect.bisect_left(bc, c)\n    if i < len(bc) and bc[i] == c:\n        ans = ans[2:]\n        break\nprint(ans)", "code2": "x, y = map(int, input().split())\ncnt = 1\nwhile True:\n    if x > y:\n        print(cnt - 1)\n        exit()\n    else:\n        x *= 2\n        cnt += 1\n", "label": 0, "name1": "s723688485.py", "name2": "s788055694.py"}, {"id": 123, "code1": "import sys\nsys.setrecursionlimit(2147483647)\nINF=float(\"inf\")\nMOD=10**9+7\ninput=lambda :sys.stdin.readline().rstrip()\ndef resolve():\n    n,k=map(int,input().split())\n    A=list(map(int,input().split()))\n    dp=[0]*(k+1)\n    for i in range(k):\n        if dp[i]: continue\n        for j in range(n):\n            if i+A[j]<=k: dp[i+A[j]]=1\n    print(\"First\" if dp[k] else \"Second\")\nresolve()", "code2": "n, k = map(int, input().split())\na_s = list(map(int, input().split()))\ndp = [\"Second\"] * (k + 1)\nfor i in range(k + 1):\n    if dp[i] == \"Second\":\n        for a in a_s:\n            ii = i + a\n            if ii > k:break\n            dp[ii] = \"First\"\nprint(dp[-1])\n", "label": 1, "name1": "s270542298.py", "name2": "s835744397.py"}, {"id": 414, "code1": "import sys\nimport fractions\nfrom collections import Counter, deque, defaultdict\nfrom math import factorial\nimport heapq, bisect\nimport math\nimport itertools\nsys.setrecursionlimit(10 ** 5 + 10)\nINF = 10**15 +5\ndef input(): return sys.stdin.readline().strip()\ndef INT(): return int(input())\ndef MAP(): return map(int, input().split())\ndef LIST(): return list(map(int, input().split()))\n\nn = INT()\nt = [0]*n\nfor i in range(n):\n    t[i] = INT()\n\ndef lcm(a,b):\n    gcd = fractions.gcd(a,b)\n    a//=gcd\n    b//=gcd\n    return a*b*gcd\n    \nif n == 1:\n    print(t[0])\n    sys.exit()\n\nres = lcm(t[0],t[1])\nfor i in range(1,n-1):\n    res = lcm(res, t[i+1])\n\nprint(res)\n\n\n", "code2": "def gcd(x,y):\n    a=max(x,y)\n    b=min(x,y)\n    if a%b==0:\n        return b\n    else:\n        return gcd(b,a%b)\n\ndef lcm(x,y):\n    return (x*y)//gcd(x,y)\n\nN=int(input())\nans=1\nfor i in range(N):\n    ans=lcm(ans,int(input()))\nprint(ans)\n", "label": 1, "name1": "s491119021.py", "name2": "s751000860.py"}, {"id": 62, "code1": "a = int(input())\nb = int(input())\nc = int(input())\nd = int(input())\n\nt = a+b+c+d\nx = t // 60\ny = t - (x*60)\nprint(x)\nprint(y)\n", "code2": "import sys\ns1=int(input())\ns2=int(input())\ns3=int(input())\ns4=int(input())\nsum_second=s1+s2+s3+s4\nx=sum_second//60\ny=sum_second%60\nprint(x)\nprint(y)\n", "label": 1, "name1": "s681424325.py", "name2": "s692336192.py"}, {"id": 65, "code1": "while(True):\n    n = int(input())\n    if not n: break\n    maxind = 0\n    maxnum = 0\n    for _ in range(n):\n        a,b,c = map(int,input().split())\n        if maxnum < b+c: maxind=a; maxnum=b+c\n    print(maxind,maxnum)\n", "code2": "while 1:\n    n = int(input())\n    if n == 0:\n        break\n\n    large = 0\n    for _ in range(n):\n        p, d1, d2 = map(int, input().split())\n        if large < d1 + d2:\n            large = d1 + d2\n            number = p\n\n    print(number, large)\n\n", "label": 1, "name1": "s695355783.py", "name2": "s338851959.py"}, {"id": 805, "code1": "from datetime import date\nwhile 1:\n\tm,d=map(int,raw_input().split())\n\tif m==0:break\n\tprint date(2004,m,d).strftime(\"%A\")", "code2": "n=int(input())\nA=[int(i) for i in input().split()]\nB=[int(i) for i in input().split()]\nct1,ct2,ct3=0,0,0\nfor i in range(n):\n  ct1+=(B[i]-A[i])\n  ct2+=max(A[i]-B[i],0)\n  if B[i]>A[i]:\n    ct3+=(B[i]-A[i]-1)//2+1\nprint(\"Yes\" if max(ct2,ct3)<=ct1 else \"No\")", "label": 0, "name1": "s074010277.py", "name2": "s862908490.py"}, {"id": 547, "code1": "while True:\n    data = {}\n    n = input()\n    if n == 0:\n        break\n    for i in range(n):\n        tmp = raw_input()\n        tmp_data = tmp.split(\" \")\n        if i == 0:\n            data.update({tmp_data[0] : int(tmp_data[1]) + int(tmp_data[2])})\n        else:\n            flag = False\n            for j in data.iterkeys():\n                if data[j] < int(tmp_data[1]) + int(tmp_data[2]):\n                    flag = True\n                if flag:\n                    data.clear()\n                    data.update({tmp_data[0] : int(tmp_data[1]) + int(tmp_data[2])})\n\n    for key in data.iterkeys():\n        print \"%s %d\" % (key, data[key])", "code2": "z,x,c,v=0,0,0,0\nwhile True:\n  try:\n    q,w = map(str,raw_input().split(\",\"))\n    if w == \"A\":z+=1\n    elif w == \"B\":x+=1\n    elif w ==\"AB\":c+=1\n    elif w ==\"O\": v+=1\n  except EOFError: \n    print \"%d\\n%d\\n%d\\n%d\"%(z,x,c,v)\n    break", "label": 0, "name1": "s667605741.py", "name2": "s960711709.py"}, {"id": 115, "code1": "a,b,c=map(int,input().split())\nif (a>c and b<c) or (a<c and b>c):\n  print(\"Yes\")\nelse:\n  print(\"No\")", "code2": "a, b, c = map(int, input().split())\nprint(\"Yes\" if max(a, b, c) != c and min(a, b, c) != c else \"No\")", "label": 1, "name1": "s473634907.py", "name2": "s794594808.py"}, {"id": 497, "code1": "#!/usr/bin/env python3\n\n#import\n#import math\n#import numpy as np\nN = int(input())\nS = list(input())\n\nre = S.count(\"E\")\nrw = N - re\nle = 0\nlw = 0\n\nans = 10**9\n\nfor i in range(N):\n    if S[i] == \"E\":\n        re -= 1\n        ans = min(ans, re + lw)\n        le += 1\n    else:\n        rw -= 1        \n        ans = min(ans, re + lw)\n        lw += 1\n\nprint(ans)\n\n\n", "code2": "from collections import Counter\nN = int(input())\nS = input()\nconS = Counter(S)\nNuE = conS['E']\nNuW = conS['W']\ndef Change(x,lefW,rigE):\n    if x == 'W':\n        return lefW + rigE -1\n    else:\n        return lefW + rigE\nlefW = 0\nrigE = NuE\nAns = N\nfor i in S:\n    if i == 'E':\n        rigE -= 1\n    else:\n        lefW += 1\n    Ans = min(Ans, Change(i,lefW,rigE))\nprint(Ans)", "label": 1, "name1": "s258995068.py", "name2": "s577792615.py"}, {"id": 834, "code1": "#!/usr/bin/env python3\n\n#import\n#import math\n#import numpy as np\nN = int(input())\nS = list(input())\n\nre = S.count(\"E\")\nrw = N - re\nle = 0\nlw = 0\n\nans = 10**9\n\nfor i in range(N):\n    if S[i] == \"E\":\n        re -= 1\n        ans = min(ans, re + lw)\n        le += 1\n    else:\n        rw -= 1        \n        ans = min(ans, re + lw)\n        lw += 1\n\nprint(ans)\n\n\n", "code2": "from bisect import bisect_left, bisect\nn, l, t = map(int, input().split())\nants = [list(map(int, input().split())) for _ in range(n)]\nbnts = []\ndiff = []\n\nfor i in range(n):\n\tx, w = ants[i][0], 3 - 2*ants[i][1]\n\tbnts.append((x + t*w) % l)\n\tif i == 0:\n\t\tzero = bnts[-1]\n\tif ants[i][1] != ants[0][1]:\n\t\tif ants[0][1] == 1:\n\t\t\tdiff.append(x - ants[0][0])\n\t\telse:\n\t\t\tdiff.append(l - (x - ants[0][0]))\n\nbnts.sort()\nnum = 0\nquo, mod = t//l, t%l\nnum += quo * len(diff) * 2\ndiff.sort()\ndiff += [d+l for d in diff]\n#num += bisect_left(diff, mod*2)\nnum += bisect(diff, mod*2)\nnum %= n\nfor i in range(n):\n\tif bnts[i] == zero:\n\t\tif ants[0][1] == 1:\n\t\t\ttrue_zero = (i-num) % n\n\t\telse:\n\t\t\tif i < n-1:\n\t\t\t\tif bnts[i+1] == zero:\n\t\t\t\t\t#pass\n\t\t\t\t\tnum -= 1\n\t\t\ttrue_zero = (i+num) % n\n\nans = bnts[true_zero:] + bnts[:true_zero]\nprint(*ans, sep=\"\\n\")", "label": 0, "name1": "s258995068.py", "name2": "s998286865.py"}, {"id": 376, "code1": "I,O,R,J,L,S,Z=map(int,input().split())\na=(I//2+J//2+L//2)*2\nb=0\nif I*J*L!=0:b=(2*((I-1)//2+(J-1)//2+(L-1)//2)+3)\nprint(max(a,b)+O)", "code2": "i, o, t, j, l, s, z = map(int, input().split())\nans = 0\nans += o\nnum = 0\nif i % 2 == 1:\n\tnum += 1\nif j % 2 == 1:\n\tnum += 1\nif l % 2 == 1:\n\tnum += 1\nif num >= 2 and i * j * l != 0:\n\tans += 3\n\ti -= 1\n\tj -= 1\n\tl -= 1\nans += 2 * (i // 2)\nans += 2 * (j // 2)\nans += 2 * (l // 2)\n\nprint(ans)", "label": 1, "name1": "s966423542.py", "name2": "s217107193.py"}, {"id": 939, "code1": "# def makelist(n, m):\n# \treturn [[0 for i in range(m)] for j in range(n)]\n\nN = int(input())\na = [0] + list(map(int, input().split()))\n\ndef check(n):\n\tb = [False]*(len(a))\n\tfor i in range(1, len(a)):\n\t\tif a[i] >= n:\n\t\t\tb[i] = True\n\t\telse:\n\t\t\tb[i] = False\n\n\tr = int(1e9)\n\tl = int(1e9)\n\trb = b[N]\n\tlb = b[N]\n\tfor i in range(1, N):\n\t\tif lb == b[N-i]:\n\t\t\tl = i\n\t\t\tbreak\n\t\telse:\n\t\t\tlb = b[N-i]\n\t\t\n\tfor i in range(1, N):\n\t\tif rb == b[N+i]:\n\t\t\tr = i\n\t\t\tbreak\n\t\telse:\n\t\t\trb = b[N+i]\n\tif r == int(1e9) and l == int(1e9):\n\t\tif N % 2 == 1:\n\t\t\treturn b[N]\n\t\telse:\n\t\t\treturn not b[N]\n\telse:\n\t\tif r < l:\n\t\t\treturn rb\n\t\telse:\n\t\t\treturn lb\n\n# \u6761\u4ef6\u3092\u6e80\u305f\u3059\u6700\u5c0f\u306e\u5024\u3092\u8fd4\u3059\ndef binarySearch(small, big):\n\tmid = (big + small) // 2\n\tif big - small <= 1:\n\t\tif check(small): return small\n\t\telse:            return big\n\telse:\n\t\tif not check(mid):\n\t\t\treturn binarySearch(small, mid)\n\t\telse:\n\t\t\treturn binarySearch(mid, big)\n\nprint(binarySearch(2, 2*N-2))\n", "code2": "D=int(input())\nc=list(map(int,input().split()))\ns=[list(map(int,input().split())) for _ in range(D)]\n\nlast=[0]*26\n\n\nfor d in range(1,D+1):\n    ans=[]\n    for choice in range(1,27):\n        ans_tmp=0\n        ans_tmp+=s[d-1][choice-1]\n        for i in range(26):\n            if i+1==choice:\n                continue\n            ans_tmp-=c[i]*(d-last[i])*max(2,(D-d)//36)\n        ans.append((ans_tmp,choice))\n    _,case=max(ans)\n    last[case-1]=d\n    print(case)\n\n", "label": 0, "name1": "s773273342.py", "name2": "s931339849.py"}, {"id": 474, "code1": "N = int(input())\nA = list(map(int, input().split()))\nB = list(map(int, input().split()))\n\nplus_2 = 0\nminus = 0\nfor a, b in zip(A, B):\n    if a < b:\n        plus_2 += (b-a)//2\n    else:\n        minus += a-b\n\nif plus_2 >= minus:\n    print('Yes')\nelse:\n    print('No')", "code2": "import sys\nreadline = sys.stdin.readline\nsys.setrecursionlimit(10**8)\nmod = 10**9+7\n#mod = 998244353\nINF = 10**18\neps = 10**-7\n\nN = int(readline())\nA = list(map(int,readline().split()))\nB = list(map(int,readline().split()))\nK = sum(B)-sum(A)\nfor a,b in zip(A,B):\n    if a < b:\n        K -= (b-a+1)//2\nprint('Yes' if K >= 0 else 'No')\n\n\n", "label": 1, "name1": "s301247411.py", "name2": "s897100598.py"}, {"id": 393, "code1": "start, end, div = list(map(int, input().strip().split()))\n\ncount = end // div - start //div\n\nif start % div == 0:\n  count += 1\nprint(count)", "code2": "a, b, x = map(int, input().split()) \n\nn = b // x\nm = (a-1) // x\n\nprint(n-m)", "label": 1, "name1": "s009071418.py", "name2": "s514746443.py"}, {"id": 863, "code1": "n, m = map(int, input().split())\np = []\ns = []\nfor i in range(m):\n    input1, input2 = input().split()\n    p.append(int(input1))\n    s.append(input2)\n\ncorrect = [0] * n\npenalty = [0] * n\nfor i in range(m):\n    tgt = p[i] - 1\n    if correct[tgt] == 1:\n        continue\n    if s[i] == 'AC':\n        correct[tgt] += 1\n    elif s[i] == 'WA':\n        penalty[tgt] += 1\n\nfor i in range(m):\n    tgt = p[i] - 1\n    if correct[tgt] == 0:\n        penalty[tgt] = 0\n\nprint('{0} {1}'.format(sum(correct), sum(penalty)))\n", "code2": "# AOJ 1503: Numbers\n# Python3 2018.7.13 bal4u\n\nimport sys\nn = int(input())\nif n == 1: print(4, 2, sep='\\n'); sys.exit(0)\nans = 1\nfor i in range(2, n+2): ans *= i\nprint(ans+2)\nfor i in range(2, n+2): print(i)\n", "label": 0, "name1": "s366260920.py", "name2": "s590878073.py"}, {"id": 935, "code1": "import sys\n# import math, string, itertools, fractions, heapq, collections, re, array, bisect, copy, functools, random\nfrom collections import deque, defaultdict, Counter; from heapq import heappush, heappop\n# from itertools import permutations, combinations, product, accumulate, groupby\n# from bisect import bisect_left, bisect_right, insort_left, insort_right\n# from operator import itemgetter as ig\nsys.setrecursionlimit(10 ** 7)\ninf = 10 ** 20; INF = float(\"INF\"); ans = 0; tmp = 0; ansli = []; tmpli = []; candili = []; mod = 10 ** 9 + 7\ndd = [(-1, 0), (0, 1), (1, 0), (0, -1)]; ddn = dd + [(-1, 1), (1, 1), (1, -1), (-1, -1)]; ddn9 = ddn + [(0, 0)]\n\"\"\"for dx, dy in dd:\n        nx = j + dx; ny = i + dy\n            if 0 <= nx < w and 0 <= ny < h:\"\"\"\ndef wi(): return list(map(int, sys.stdin.readline().split()))\ndef wip(): return [int(x) - 1 for x in sys.stdin.readline().split()]#WideIntPoint\ndef ws(): return sys.stdin.readline().split()\ndef i(): return int(sys.stdin.readline())\ndef s(): return input()\ndef hi(n): return [i() for _ in range(n)]\ndef hs(n): return [s() for _ in range(n)]#HeightString\ndef mi(n): return [wi() for _ in range(n)]#MatrixInt\ndef mip(n): return [wip() for _ in range(n)]\ndef ms(n): return [ws() for _ in range(n)]\n\n\nif __name__ == '__main__':\n    h, w = wi()\n    s = hs(h)\n    flagli = [[0] * w for i in range(h)]\n    stack = deque()\n    black = 0\n    white = 0\n    for i in range(h):\n        for j in range(w):\n            if flagli[i][j] == 0:\n                flagli[i][j] = 1\n                white = 1 if s[i][j] == \".\" else 0\n                black = 1 if s[i][j] == \"#\" else 0\n                stack.append([i, j])\n                while stack != deque():\n                    p, q = stack.pop()\n                    k = 0 if s[p][q] == \".\" else 1\n                    for dx, dy in dd:\n                        nx = q + dx;\n                        ny = p + dy\n                        if 0 <= nx < w and 0 <= ny < h:\n                            if flagli[ny][nx] == 0:\n                                if k == 0 and s[ny][nx] == \"#\":\n                                    flagli[ny][nx] = 1\n                                    stack.append([ny, nx])\n                                    black += 1\n                                elif k == 1 and s[ny][nx] == \".\":\n                                    flagli[ny][nx] = 1\n                                    stack.append([ny, nx])\n                                    white += 1\n                ans += black * white\n                black = 0\n                white = 0\nprint(ans)", "code2": "n = int(input())\nA = list(map(int, input().split()))\nl = 1\nr = 2*n\nwhile l < r-1:\n    mid = (l+r)//2\n    B = []\n    C = []\n    for i in range(0,2*n-1):\n        B.append(A[i] >= mid)\n        C.append(0)\n    for i in range(1,2*n-1):\n        if B[i-1] == B[i]:\n            C[i] = 1\n    for i in range(0,2*n-2):\n        if B[i+1] == B[i]:\n            C[i] = 1\n    mi = 2*n\n    ans = False\n    for i in range(0,2*n-1):\n        if C[i] == 1:\n            if abs(i-n+1) < mi:\n                mi = abs(i-n+1)\n                ans = B[i]\n    if mi == 2*n:   #specialfall\n        ans = ((n+1)%2)^B[n-1]\n    if ans == True:\n        l = mid\n    else:\n        r = mid\nprint(l)\n        \n", "label": 0, "name1": "s005060405.py", "name2": "s087982630.py"}, {"id": 59, "code1": "# -*- coding: utf-8 -*-\n'import sys'\n'import math'\ni=int(4)\nt=0\nwhile i:\n    t+=int(input())\n    i-=1\nprint(int(t/60))\nprint(t%60)", "code2": "# coding: utf-8\n# Your code here!\nn1=int(input())\nn2=int(input())\nn3=int(input())\nn4=int(input())\n\nn=sum((n1,n2,n3,n4))\n\nx=n//60\ny=n-(x*60)\n\nprint(x)\nprint(y)\n", "label": 1, "name1": "s417833494.py", "name2": "s520795772.py"}, {"id": 85, "code1": "z,x,c,v=0,0,0,0\nwhile True:\n  try:\n    q,w = map(str,raw_input().split(\",\"))\n    if w == \"A\":z+=1\n    elif w == \"B\":x+=1\n    elif w ==\"AB\":c+=1\n    elif w ==\"O\": v+=1\n  except EOFError: \n    print \"%d\\n%d\\n%d\\n%d\"%(z,x,c,v)\n    break", "code2": "if __name__ == '__main__':\n\n\tans = []\n\twhile True:\n\t\ttry:\n\t\t\tn,b = input().split(\",\")\n\t\t\tans.append(b)\n\t\texcept EOFError:\n\t\t\tbreak\n\n\tprint(ans.count(\"A\"))\n\tprint(ans.count(\"B\"))\n\tprint(ans.count(\"AB\"))\n\tprint(ans.count(\"O\"))\n\n", "label": 1, "name1": "s960711709.py", "name2": "s525017039.py"}, {"id": 415, "code1": "import sys\nimport fractions\nfrom collections import Counter, deque, defaultdict\nfrom math import factorial\nimport heapq, bisect\nimport math\nimport itertools\nsys.setrecursionlimit(10 ** 5 + 10)\nINF = 10**15 +5\ndef input(): return sys.stdin.readline().strip()\ndef INT(): return int(input())\ndef MAP(): return map(int, input().split())\ndef LIST(): return list(map(int, input().split()))\n\nn = INT()\nt = [0]*n\nfor i in range(n):\n    t[i] = INT()\n\ndef lcm(a,b):\n    gcd = fractions.gcd(a,b)\n    a//=gcd\n    b//=gcd\n    return a*b*gcd\n    \nif n == 1:\n    print(t[0])\n    sys.exit()\n\nres = lcm(t[0],t[1])\nfor i in range(1,n-1):\n    res = lcm(res, t[i+1])\n\nprint(res)\n\n\n", "code2": "N = int(input())\n\ndef gcd(a, b):\n    while b:\n        a, b = b, a % b\n    return a\n\ndef lcm(a, b):\n    return a * b // gcd(a, b)\n\ns = int(input())\nfor i in range(N - 1):\n    tmp = int(input())\n    s = lcm(s, tmp)\n\nprint(s)\n", "label": 1, "name1": "s491119021.py", "name2": "s550486741.py"}, {"id": 499, "code1": "n=int(input())\ns=input()\n\nE=[0 for i in range(n)]\nW=[0 for i in range(n)]\n\ncnt=0\nfor i in range(n):\n    W[i]=cnt\n    if s[i]==\"W\":\n        cnt+=1\n\ncnt=0   \nfor i in range(n):\n    E[n-1-i]=cnt\n    if s[n-1-i]==\"E\":\n        cnt+=1\n\nmini=10**8\nfor i in range(n):\n    mini=min(mini,E[i]+W[i])\n\nprint(mini)", "code2": "from collections import Counter\nN = int(input())\nS = input()\nconS = Counter(S)\nNuE = conS['E']\nNuW = conS['W']\ndef Change(x,lefW,rigE):\n    if x == 'W':\n        return lefW + rigE -1\n    else:\n        return lefW + rigE\nlefW = 0\nrigE = NuE\nAns = N\nfor i in S:\n    if i == 'E':\n        rigE -= 1\n    else:\n        lefW += 1\n    Ans = min(Ans, Change(i,lefW,rigE))\nprint(Ans)", "label": 1, "name1": "s614583596.py", "name2": "s577792615.py"}, {"id": 597, "code1": "\n\ndef isPrime(n):\n    if n <= 1:\n        return False \n    if n == 2:\n        return True\n    if n % 2 == 0:\n        return False\n\n    i = 3\n    while i * i <= n :\n        if n % i == 0:\n            return False \n        i += 1\n\n    return True        \n# end of isPrime\n\nwhile True:\n    n = input()\n    if n == 0:break\n\n    ans = 0\n    for i in range(n + 1, n * 2 + 1):\n        if isPrime(i):ans += 1\n\n    print ans", "code2": "import sys\ninput = sys.stdin.readline\nQ = int(input())\n\ndef check(x, a, b):\n  y = (a <= -(-x // 2)) or (b <= -(-x // 2))\n  z = (a <= (x // 2 + 1)) and (b <= (x // 2 + 1))\n  return (-(-x // 2) + y) * ((x // 2 + 1) + z) < a * b\n\nfor _ in range(Q):\n  a, b = map(int, input().split())\n\n  ok = 0\n  ng = a * b\n  while ng - ok > 1:\n    m = (ok + ng) // 2\n    if check(m, a, b): ok = m\n    else: ng = m\n  print(ok)", "label": 0, "name1": "s415543076.py", "name2": "s809561228.py"}, {"id": 994, "code1": "S = input()\nl = len(S)\n\nfor i in range(1, l//2):\n  if S[:l//2-i] == S[l//2-i:l-2*i]:\n    print(l-2*i)\n    break", "code2": "while True:\n    t = int(input())\n    if t==0:\n        break\n    n = int(input())\n    hour = 0\n    for i in range(n):\n        s,f = map(int,input().split())\n        hour += (f-s)\n        \n    if hour >= t:\n        print(\"OK\")\n    else:\n        print(t-hour)\n\n", "label": 0, "name1": "s423959382.py", "name2": "s816516481.py"}, {"id": 495, "code1": "#!/usr/bin/env python3\n\n#import\n#import math\n#import numpy as np\nN = int(input())\nS = list(input())\n\nre = S.count(\"E\")\nrw = N - re\nle = 0\nlw = 0\n\nans = 10**9\n\nfor i in range(N):\n    if S[i] == \"E\":\n        re -= 1\n        ans = min(ans, re + lw)\n        le += 1\n    else:\n        rw -= 1        \n        ans = min(ans, re + lw)\n        lw += 1\n\nprint(ans)\n\n\n", "code2": "n=int(input())\ns=input()\n\nE=[0 for i in range(n)]\nW=[0 for i in range(n)]\n\ncnt=0\nfor i in range(n):\n    W[i]=cnt\n    if s[i]==\"W\":\n        cnt+=1\n\ncnt=0   \nfor i in range(n):\n    E[n-1-i]=cnt\n    if s[n-1-i]==\"E\":\n        cnt+=1\n\nmini=10**8\nfor i in range(n):\n    mini=min(mini,E[i]+W[i])\n\nprint(mini)", "label": 1, "name1": "s258995068.py", "name2": "s614583596.py"}, {"id": 762, "code1": "import sys\ninput = sys.stdin.readline\na, b, x = [int(x) for x in input().split()]\nB = 1 + b // x\nif a == 0:\n    print(B)\nelif a % x == 0:\n    A = 1 + a // x\n    print(B - A + 1)\nelse:\n    A = 1 + a // x\n    print(B - A)\n", "code2": "n = int(input())\ndat = list(map(int,input().split()))\n\ndat = [0] + dat + [0]\ntotal = 0\ncur = 0\nfor i in range(n + 2):\n    total += abs(cur - dat[i])\n    cur = dat[i]\ntotal += abs(cur)\ncur = 0\nfor i in range(n):\n    j = i + 1\n    if dat[j-1] < dat[j] < dat[j+1]:\n        # \u9593\u306b\u631f\u307e\u308c\u3066\u3044\u308b\u30d1\u30bf\u30fc\u30f3\uff11\n        #print(\"pat1\")\n        print(total)\n    elif dat[j-1] > dat[j] > dat[j+1]:\n        # \u9593\u306b\u631f\u307e\u308c\u3066\u3044\u308b\u30d1\u30bf\u30fc\u30f32\n        #print(\"pat2\")\n        print(total)\n    else:\n        # \u3053\u306e\u5834\u5408\u306f\u9593\u306b\u631f\u307e\u308c\u3066\u3044\u306a\u3044\n        #print(\"{0} {1} {2}\".format(total, abs(dat[j-1] -dat[j]) , abs(dat[j-1] -dat[j+1])))\n        print(total - abs(dat[j-1] -dat[j]) - abs(dat[j] -dat[j+1]) + abs(dat[j-1] - dat[j+1]))\n", "label": 0, "name1": "s444272977.py", "name2": "s576885295.py"}, {"id": 918, "code1": "S = [input() for i in range(3)]\ncnt = [0, 0, 0]\nlimit = [len(S[i]) for i in range(3)]\npoint = 0\nNUM = \"ABC\"\nwhile cnt[point] != limit[point]:\n  if S[point][cnt[point]] == 'a':\n    cnt[point] += 1\n    point = 0\n  elif S[point][cnt[point]] == 'b':\n    cnt[point] += 1\n    point = 1\n  elif S[point][cnt[point]] == 'c':\n    cnt[point] += 1\n    point = 2\nprint(NUM[point])", "code2": "n=int(input())\nmod=10**9+7\nfra=[1]*(n+2)\ninv=[1]*(n+2)\nt1=1\nt2=1\nfor i in range(1,n+2):\n    t1*=i\n    t1%=mod\n    t2*=pow(i,mod-2,mod)\n    t2%=mod\n    fra[i]=t1\n    inv[i]=t2\nans=fra[n]\nfor i in range((n+1)//2,n):\n    ans-=fra[i-1]*inv[2*i-n]*fra[i]%mod\n    ans%=mod\nprint(ans)", "label": 0, "name1": "s464702195.py", "name2": "s299124610.py"}, {"id": 933, "code1": "def aising19_c():\n    from collections import deque\n\n    h, w = (int(x) for x in input().split())\n    color = [[s == '#' for s in str(input())] for _ in range(h)]\n    used = [[False]*w for _ in range(h)]\n\n    ans = 0\n    for i in range(h):\n        for j in range(w):\n            if used[i][j]: continue\n            bk, wt = 0, 0\n            que = deque()\n            used[i][j] = True\n            que.append((i, j))\n            while que:\n                ci, cj = que.popleft()\n                if color[ci][cj]: bk += 1\n                else: wt += 1\n                for di, dj in ((-1,0),(0,-1),(0,1),(1,0)):\n                    ni, nj = ci+di, cj+dj\n                    if ni < 0 or h <= ni or nj < 0 or w <= nj: continue\n                    if color[ci][cj] == color[ni][nj]: continue\n                    if used[ni][nj]: continue\n                    used[ni][nj] = True\n                    que.append((ni, nj))\n            ans += bk * wt\n    print(ans)\n\nif __name__ == '__main__':\n    aising19_c()", "code2": "# def makelist(n, m):\n# \treturn [[0 for i in range(m)] for j in range(n)]\n\nN = int(input())\na = [0] + list(map(int, input().split()))\n\ndef check(n):\n\tb = [False]*(len(a))\n\tfor i in range(1, len(a)):\n\t\tif a[i] >= n:\n\t\t\tb[i] = True\n\t\telse:\n\t\t\tb[i] = False\n\n\tr = int(1e9)\n\tl = int(1e9)\n\trb = b[N]\n\tlb = b[N]\n\tfor i in range(1, N):\n\t\tif lb == b[N-i]:\n\t\t\tl = i\n\t\t\tbreak\n\t\telse:\n\t\t\tlb = b[N-i]\n\t\t\n\tfor i in range(1, N):\n\t\tif rb == b[N+i]:\n\t\t\tr = i\n\t\t\tbreak\n\t\telse:\n\t\t\trb = b[N+i]\n\tif r == int(1e9) and l == int(1e9):\n\t\tif N % 2 == 1:\n\t\t\treturn b[N]\n\t\telse:\n\t\t\treturn not b[N]\n\telse:\n\t\tif r < l:\n\t\t\treturn rb\n\t\telse:\n\t\t\treturn lb\n\n# \u6761\u4ef6\u3092\u6e80\u305f\u3059\u6700\u5c0f\u306e\u5024\u3092\u8fd4\u3059\ndef binarySearch(small, big):\n\tmid = (big + small) // 2\n\tif big - small <= 1:\n\t\tif check(small): return small\n\t\telse:            return big\n\telse:\n\t\tif not check(mid):\n\t\t\treturn binarySearch(small, mid)\n\t\telse:\n\t\t\treturn binarySearch(mid, big)\n\nprint(binarySearch(2, 2*N-2))\n", "label": 0, "name1": "s472052550.py", "name2": "s773273342.py"}, {"id": 264, "code1": "a,b,c,k=map(int,input().split())\n\nif k <= a:\n    print(k)\nelif k <= a+b:\n    print(a)\nelse:\n    print(a-(k-(a+b)))", "code2": "a,b,c,k=map(int,input().split())\nc_=max(0,k-a-b)\na_=min(a,k)\nprint(a_-c_)", "label": 1, "name1": "s019552488.py", "name2": "s535747622.py"}, {"id": 467, "code1": "n=int(input())\n\nL=[[] for i in range(n+1)]\n\nfor i in range(n-1):\n    a,b=map(int,input().split())\n    L[a].append(b)\n    L[b].append(a)\n\nfe=[0 for i in range(n+1)]\nque=[(1,0)]\nvisited=[0 for i in range(n+1)]\nvisited[1]=1\nhead=0\n\nwhile len(que)>head:\n    now=que[head]\n    head+=1\n    fe[now[0]]=now[1]\n    for nex in L[now[0]]:\n        if visited[nex]==0:\n            visited[nex]=1\n            que.append((nex,now[1]+1))\n            \nsn=[0 for i in range(n+1)]\nque=[(n,0)]\nvisited=[0 for i in range(n+1)]\nvisited[-1]=1\nhead=0\n\nwhile len(que)>head:\n    now=que[head]\n    head+=1\n    sn[now[0]]=now[1]\n    for nex in L[now[0]]:\n        if visited[nex]==0:\n            visited[nex]=1\n            que.append((nex,now[1]+1))\n\nkaname=[]\nfor i in range(1,n+1):\n    ck=fe[i]-sn[i]\n    if ck==1 or ck==2:\n        kaname.append(i)\n\ncnt=0\nque=[(1,0)]\nvisited=[0 for i in range(n+1)]\nvisited[1]=1\nhead=0\n\nwhile len(que)>head:\n    now=que[head]\n    head+=1\n    cnt+=1\n    for nex in L[now[0]]:\n        if visited[nex]==0 and not nex in kaname:\n            visited[nex]=1\n            que.append((nex,now[1]+1))\n\nif cnt*2>n:\n    print(\"Fennec\")\nelse:\n    print(\"Snuke\")", "code2": "import sys\nsys.setrecursionlimit(sys.getrecursionlimit()*1000)\n\ninput = sys.stdin.readline\nN = int(input())\ntree = [[] for _ in range(N+1)]\nfor _ in range(N-1):\n    a, b = map(int,input().split())\n    tree[a].append((b,1))\n    tree[b].append((a,1))\n\ndepth = [None]*(N+1)\ndef DFS(v,p,d):\n    depth[v] = d\n    for e in tree[v]:\n        if e[0] != p:\n            DFS(e[0], v, d + e[1])\nDFS(1,0,0)\n\ndepthN = [None]*(N+1)\ndef DFSN(v,p,d):\n    depthN[v] = d\n    for e in tree[v]:\n        if e[0] != p:\n            DFSN(e[0], v, d + e[1])\nDFSN(N,0,0)\n\nblack = 0\nfor i in range(1,N):\n    if depth[i] <= depthN[i]:\n        black += 1\n\nif black > N/2:\n    print(\"Fennec\")\nelse:\n    print(\"Snuke\")\n\n", "label": 1, "name1": "s845599163.py", "name2": "s821936096.py"}, {"id": 360, "code1": "from heapq import heappush, heappop\nimport sys\nfrom typing import List, Tuple\n\n\nif __name__ == \"__main__\":\n    V, E, r = map(lambda x: int(x), input().split())\n\n    edges: List[List[Tuple[int, int]]] = [[] for _ in range(V)]\n    dists = [sys.maxsize for _ in range(V)]\n    dists[r] = 0\n\n    for _ in range(E):\n        s, t, dist = map(lambda x: int(x), input().split())\n        edges[s].append((t, dist))\n\n    que: List[Tuple[int, int]] = []  # (dist, vertex)\n    heappush(que, (0, r))\n\n    while que:\n        dist, vertex = heappop(que)\n        for to, cost in edges[vertex]:\n            if cost + dist < dists[to]:\n                dists[to] = cost + dist\n                heappush(que, (cost + dist, to))\n\n    for dist in dists:\n        if sys.maxsize == dist:\n            print(\"INF\")\n        else:\n            print(dist)\n\n", "code2": "'''\n????????\u00a3????????????1??????????????????\n??\\???C++??\u00a7????????????????\u00a7\u00a3?\u00b1???????????????????????????????????????\u00a7???\n??????python??\u00a7??????????????????Accept??\u00a7??????????????????\n????????\u00a3??\u00a8optimization??????????????\u00a7??????\n??\u00a7????????????Wrong Answer??\u00a7?????????\n???????????????????????????????????????????????????\nOnline Judge???????????????Public Solutions??\u00a7????????????nanae?????????python3????????????????????????\n????????\u00a3??\u00a8?????????????????????\n???????????????????????????0.06?\u00a7????????????\u00a7??????\n'''\n\nimport queue\nv,e,s=map(int,input().split())\nedge=[]\ninf =1000000100\nfor i in range(v):\n    edge.append([])\n\nfor i in range(e):\n    vs,vt,d=map(int,input().split())\n    edge[vs].append((vt,d))\n    \ndis=[]\nfor i in range(v):\n    dis.append(inf)\n\ndis[s]=0\n\nq = queue.PriorityQueue()\nq.put((0,s))\n\n'''\nwhile(not q.empty()):\n    now=q.get()\n    nowv=now[1]\n    for (vt,d) in edge[nowv]:\n        if dis[vt]>dis[nowv]+d:\n            dis[vt]=dis[nowv]+d\n            q.put((dis[vt],vt))\n'''\n\nfinished=0\nwhile(finished<v and not q.empty()):\n    now=q.get()\n    nowv=now[1]\n    if now[0]>dis[nowv]: continue\n    for (vt,d) in edge[nowv]:\n        if dis[vt]>dis[nowv]+d:\n            dis[vt]=dis[nowv]+d\n            q.put((dis[vt],vt))\n    finished+=1       \n\nfor i in range(v):\n    if dis[i]>=inf:\n        print(\"INF\")\n    else:\n        print(dis[i])", "label": 1, "name1": "s404691730.py", "name2": "s256416940.py"}, {"id": 532, "code1": "n=int(input())\na=list(map(int,input().split()))\nans=0\nfor i in range(n-1):\n    if a[i]==a[i+1]:\n        a[i+1]=-1\n        ans+=1\nprint(ans)", "code2": "# -*- coding: utf-8 -*-\n'import sys'\n'import math'\ni=int(4)\nt=0\nwhile i:\n    t+=int(input())\n    i-=1\nprint(int(t/60))\nprint(t%60)", "label": 0, "name1": "s300532690.py", "name2": "s417833494.py"}, {"id": 670, "code1": "s = list(input())\nt = list(input())\nans = [-1, -1]\nif len(t) <= len(s):\n    for i in range(len(s) - len(t) + 1):\n        c = 1\n        for j in range(len(t)):\n            if s[i + j] != \"?\" and t[j] != s[i + j]:\n                c = 0\n                break\n        if c == 1:\n            ans = [i, i + len(t)]\n\nif ans != [-1, -1]:\n    k = []\n    for i in range(len(s)):\n        if ans[0] <= i < ans[1]:\n            k.append(t[i - ans[0]])\n        else:\n            if s[i] == \"?\":\n                k.append(\"a\")\n            else:\n                k.append(s[i])\n    print(\"\".join(k))\nelse:\n    print(\"UNRESTORABLE\")\n", "code2": "a,b,c,k=map(int,input().split())\n\nif k <= a:\n    print(k)\nelif k <= a+b:\n    print(a)\nelse:\n    print(a-(k-(a+b)))", "label": 0, "name1": "s590642866.py", "name2": "s019552488.py"}, {"id": 78, "code1": "def main():\n    n=int(input())\n    m=int((2*n)**0.5)\n    if m*(m+1)==n*2:\n        print(\"Yes\")\n        m+=1\n        print(m)\n    else:\n        print(\"No\")\n        exit()\n    \n    ans=[[m-1] for i in range(m)]\n    c=1\n    for i in range(m):\n        for j in range(i+1,m):\n            ans[i].append(c)\n            ans[j].append(c)\n            c+=1\n    for i in ans:\n        print(\" \".join(map(str,i)))\n\n\nif __name__ == '__main__':\n    main()\n\n\n\n\n\n\n", "code2": "import sys\n\nread = sys.stdin.read\nreadline = sys.stdin.readline\nreadlines = sys.stdin.readlines\nsys.setrecursionlimit(10 ** 9)\nINF = 1 << 60\n\n\ndef main():\n    N = int(readline())\n    K = int((1 + (8 * N + 1) ** 0.5) / 2)\n    if not N == K * (K - 1) // 2:\n        print('No')\n        return\n\n    num = 1\n    ans = [[0] * (K - 1) for _ in range(K - 1)]\n    for i in range(K - 1):\n        for j in range(i + 1):\n            ans[i][j] = ans[j][i] = num\n            num += 1\n    \n    print('Yes')\n    print(K)\n    for row in ans:\n        print(K - 1, *row)\n    tmp = [ans[i][i] for i in range(K - 1)]\n    print(K - 1, *tmp)\n\n\nif __name__ == '__main__':\n    main()\n", "label": 1, "name1": "s694753497.py", "name2": "s987242186.py"}, {"id": 97, "code1": "n,k=map(int,input().split())\nx=n%k\nprint(min(x,abs(x-k)))", "code2": "n, k = map(int, input().split())\nprint(min(n % k, k - (n % k)))\n", "label": 1, "name1": "s584027827.py", "name2": "s724434402.py"}, {"id": 428, "code1": "#!/usr/bin/env python3\nfrom collections import defaultdict,deque\nfrom heapq import heappush, heappop\nfrom bisect import bisect_left, bisect_right\nimport sys, random, itertools, math\nsys.setrecursionlimit(10**5)\ninput = sys.stdin.readline\nsqrt = math.sqrt\ndef LI(): return list(map(int, input().split()))\ndef LF(): return list(map(float, input().split()))\ndef LI_(): return list(map(lambda x: int(x)-1, input().split()))\ndef II(): return int(input())\ndef IF(): return float(input())\ndef LS(): return list(map(list, input().split()))\ndef S(): return list(input().rstrip())\ndef IR(n): return [II() for _ in range(n)]\ndef LIR(n): return [LI() for _ in range(n)]\ndef FR(n): return [IF() for _ in range(n)]\ndef LFR(n): return [LI() for _ in range(n)]\ndef LIR_(n): return [LI_() for _ in range(n)]\ndef SR(n): return [input().rstrip()[:-1] for _ in range(n)]\ndef LSR(n): return [LS() for _ in range(n)]\nmod = 1000000007\ninf = 1e10\n\n#solve\ndef solve():\n    n = II()\n    if n == 0:\n        return False\n    group = set()\n    go_group = set()\n    member = set()\n    d = defaultdict(int)\n    g = SR(n)\n    for gi in g:\n        group.add(gi.split(\":\")[0])\n        d[gi.split(\":\")[0]] = gi.split(\":\")[1].split(\",\")\n    C = defaultdict(int)\n    def s(g):\n        for gi in g:\n            if gi in group:\n                if C[gi]:\n                    continue\n                C[gi] = 1\n                s(d[gi])\n            else:\n                member.add(gi)\n    s(d[g[0].split(\":\")[0]])\n    print(len(member))\n    return True\n\n#main\nif __name__ == '__main__':\n    while solve():\n        pass\n\n", "code2": "while 1:\n\tn = input()\n\tif n == 0: break\n\tans = {}\n\tfor i in range(n):\n\t\tgroup,name = raw_input().split(\":\")\n\t\tif i == 0: first = group\n\t\tans[group] = set(name[:-1].split(\",\"))\n\t\twhile 1:\n\t\t\tfor key in ans:\n\t\t\t\tflag = 0\n\t\t\t\tif key == first: continue\n\t\t\t\tfor key1 in ans:\n\t\t\t\t\tif key in ans[key1]:\n\t\t\t\t\t\tans[key1] |= ans[key]\n\t\t\t\t\t\tans[key1].discard(key)\n\t\t\t\t\t\tflag = 1\n\t\t\tif flag == 0: break\n\tprint len(ans[first])", "label": 1, "name1": "s728275108.py", "name2": "s281780788.py"}, {"id": 69, "code1": "# AOJ 0217 Walking in the Hospital\n# Python3 2018.6.23 bal4u\n\nwhile 1:\n\tn = int(input())\n\tif n == 0: break\n\tdmax = 0\n\tfor i in range(n):\n\t\tp, d1, d2 = map(int, input().split())\n\t\tif d1+d2 > dmax: id, dmax = p, d1+d2\n\tprint(id, dmax)\n", "code2": "while 1:\n    n = int(input())\n    if n == 0:\n        break\n\n    large = 0\n    for _ in range(n):\n        p, d1, d2 = map(int, input().split())\n        if large < d1 + d2:\n            large = d1 + d2\n            number = p\n\n    print(number, large)\n\n", "label": 1, "name1": "s876770513.py", "name2": "s338851959.py"}, {"id": 589, "code1": "def f(n, s):\n    md = 10 ** 9 + 7\n    dp = [1] * n\n    for i in range(n - 1):\n        if s[i] == \"<\":\n            L = dp[0]\n            for dpi in range(1, n - i - 1):\n                dp[dpi] = L = (dp[dpi] + L) % md\n            dp = dp[:-1]\n        else:\n            R = dp[-1]\n            for dpi in range(n - i - 2, 0, -1):\n                dp[dpi] = R = (dp[dpi] + R) % md\n            dp = dp[1:]\n    print(dp[0])\n\n\nn = int(input())\ns = input()\nf(n, s)\n", "code2": "#!/usr/bin/env python\n# -*- coding: utf-8 -*-\nimport math\n\ndef sieve_of_erastosthenes(num):\n    input_list = [False if i % 2 == 0 or i % 3 == 0 or i % 5 == 0 else True for i in range(num)]\n    input_list[0] = input_list[1] = False\n    input_list[2] = input_list[3] = input_list[5] = True\n    sqrt = math.sqrt(num)\n\n    for serial in range(3, num, 2):\n        if serial >= sqrt:\n            return input_list\n        for s in range(serial ** 2, num, serial): \n            input_list[s] = False\n\nprimeTable = sieve_of_erastosthenes((10**6))\n\nwhile True:\n    n = int(input())\n    if n == 0:\n        break\n    print(sum([1 if primeTable[i] == True else 0 for i in range(n+1,2*n+1)]))", "label": 0, "name1": "s415178183.py", "name2": "s839739261.py"}, {"id": 593, "code1": "num = list(map(int, input().split()))\nnum.sort()\n\nx = num[2] * 3 - sum(num)\n\nif x%2 == 0:\n  ans = int(x/2)\nelse:\n  ans = int(x//2 + 2)\n\nprint(ans)\n", "code2": "y = [True for i in range(250001)]\ny[0] = y[1] = False\nfor i in range(2, 500):\n    if y[i]:\n        for j in range(2, 250000 // i + 1):\n            y[i * j] = False\nwhile True:\n    n = int(input())\n    if n == 0:\n        break\n    print(y[n + 1 : n * 2 + 1].count(True))\n", "label": 0, "name1": "s512155836.py", "name2": "s889149636.py"}, {"id": 223, "code1": "n = int(input())\np = tuple(map(int, input().split()))\nq = tuple(map(int, input().split()))\n\nimport itertools\nr = list(itertools.permutations(range(1, n+1)))\n\np_place = r.index(p)\nq_place = r.index(q)\nanswer = abs(p_place-q_place)\nprint(answer)", "code2": "from itertools import permutations\nN = int(input())\nP = tuple(map(int, input().split()))\nQ = tuple(map(int, input().split()))\ni = a = b = 0\nfor x in permutations(range(1, N+1), N):\n  i += 1\n  if x == P:\n    a = i\n  if x == Q:\n    b = i\nprint(abs(a - b))", "label": 1, "name1": "s558804624.py", "name2": "s989424908.py"}, {"id": 113, "code1": "a,b,c = map(int, input().split())\n\nprint(\"Yes\" if a<c<b or b<c<a else \"No\")", "code2": "a, b, c = map(int, input().split())\nprint(\"Yes\" if max(a, b, c) != c and min(a, b, c) != c else \"No\")", "label": 1, "name1": "s135661044.py", "name2": "s794594808.py"}, {"id": 297, "code1": "class UnionFind():\n  def __init__(self, n):\n    self.n = n\n    self.parents = [-1] * n\n\n  def find(self, x):\n    if self.parents[x] < 0:\n      return x\n    else:\n      self.parents[x] = self.find(self.parents[x])\n      return self.parents[x]\n\n  def union(self, x, y):\n    x = self.find(x)\n    y = self.find(y)\n\n    if x == y:\n      return\n\n    if self.parents[x] > self.parents[y]:\n      x, y = y, x\n\n    self.parents[x] += self.parents[y]\n    self.parents[y] = x\n\n  def size(self, x):\n    return -self.parents[self.find(x)]\n\n  def same(self, x, y):\n    return self.find(x) == self.find(y)\n\n  def members(self, x):\n    root = self.find(x)\n    return [i for i in range(self.n) if self.find(i) == root]\n\n  def roots(self):\n    return [i for i, x in enumerate(self.parents) if x < 0]\n\n  def group_count(self):\n    return len(self.roots())\n\n  def all_group_members(self):\n    return {r: self.members(r) for r in self.roots()}\n\n  def __str__(self):\n    return '\\n'.join('{}: {}'.format(r, self.members(r)) for r in self.roots())\n\nn, m = map(int, input().split())\nuf = UnionFind(n)\n\nfor _ in range(m):\n  a, b = map(int, input().split())\n  uf.union(a-1,b-1)\n  \nprint(uf.group_count() - 1)\n\n", "code2": "class Unionfind:\n     \n    def __init__(self,n):\n        self.uf = [-1]*n\n \n    def find(self,x):\n        if self.uf[x] < 0:\n            return x\n        else:\n            self.uf[x] = self.find(self.uf[x])\n            return self.uf[x]\n \n    def same(self,x,y):\n        return self.find(x) == self.find(y)\n \n    def union(self,x,y):\n        x = self.find(x)\n        y = self.find(y)\n        if x == y:\n            return False\n        if self.uf[x] > self.uf[y]:\n            x,y = y,x\n        self.uf[x] += self.uf[y]\n        self.uf[y] = x\n        return True\n \n    def size(self,x):\n        x = self.find(x)\n        return -self.uf[x]\n\nn,m = map(int,input().split())\n\nu = Unionfind(n)\ncount = 0\nfor i in range(m):\n    a,b = map(int,input().split())\n    a -= 1\n    b -= 1\n    u.union(a,b)\n\ns = set()\nfor i in range(n):\n    s.add(u.find(i))\nprint(len(s)-1)", "label": 1, "name1": "s813737955.py", "name2": "s213272363.py"}, {"id": 365, "code1": "'''\n????????\u00a3????????????1??????????????????\n??\\???C++??\u00a7????????????????\u00a7\u00a3?\u00b1???????????????????????????????????????\u00a7???\n??????python??\u00a7??????????????????Accept??\u00a7??????????????????\n????????\u00a3??\u00a8optimization??????????????\u00a7??????\n??\u00a7????????????Wrong Answer??\u00a7?????????\n???????????????????????????????????????????????????\nOnline Judge???????????????Public Solutions??\u00a7????????????nanae?????????python3????????????????????????\n????????\u00a3??\u00a8?????????????????????\n???????????????????????????0.06?\u00a7????????????\u00a7??????\n'''\n\nimport queue\nv,e,s=map(int,input().split())\nedge=[]\ninf =1000000100\nfor i in range(v):\n    edge.append([])\n\nfor i in range(e):\n    vs,vt,d=map(int,input().split())\n    edge[vs].append((vt,d))\n    \ndis=[]\nfor i in range(v):\n    dis.append(inf)\n\ndis[s]=0\n\nq = queue.PriorityQueue()\nq.put((0,s))\n\n'''\nwhile(not q.empty()):\n    now=q.get()\n    nowv=now[1]\n    for (vt,d) in edge[nowv]:\n        if dis[vt]>dis[nowv]+d:\n            dis[vt]=dis[nowv]+d\n            q.put((dis[vt],vt))\n'''\n\nfinished=0\nwhile(finished<v and not q.empty()):\n    now=q.get()\n    nowv=now[1]\n    if now[0]>dis[nowv]: continue\n    for (vt,d) in edge[nowv]:\n        if dis[vt]>dis[nowv]+d:\n            dis[vt]=dis[nowv]+d\n            q.put((dis[vt],vt))\n    finished+=1       \n\nfor i in range(v):\n    if dis[i]>=inf:\n        print(\"INF\")\n    else:\n        print(dis[i])", "code2": "# -*- coding: utf-8 -*-\nimport math\n\ngraph = []\n# input \nV, E, r = map(int, input().split())\n# initialize\nlens = [float('inf') for i in range(V)]\nlens[r] = 0\n# input\nfor i in range(E) :\n    start, desti, distance = map(int, input().split())\n    graph.append([start, desti, distance])\n    \n# judge \nwhile True :\n    # set a flag\n    flag = True\n    for q in graph :\n        # compare the distance \n        if lens[q[1]] > lens[q[0]] + q[2]:\n          lens[q[1]] = min(lens[q[1]], lens[q[0]] + q[2])\n          flag = False         \n    if flag:\n      break\n# output results \nfor item in lens :\n    if math.isinf(item):\n        print(\"INF\")\n    else :\n        print(item)\n", "label": 1, "name1": "s256416940.py", "name2": "s376653599.py"}, {"id": 781, "code1": "def gcd(x,y):\n    a=max(x,y)\n    b=min(x,y)\n    if a%b==0:\n        return b\n    else:\n        return gcd(b,a%b)\n\ndef lcm(x,y):\n    return (x*y)//gcd(x,y)\n\nN=int(input())\nans=1\nfor i in range(N):\n    ans=lcm(ans,int(input()))\nprint(ans)\n", "code2": "# \u9802\u70b9 v \u306e\u6240\u5c5e\u3059\u308b\u30b0\u30eb\u30fc\u30d7\u3092\u8abf\u3079\u308b\ndef root(v, uni):\n  if uni[v] < 0:  # v \u304c\u89aa\u306e\u5834\u5408\n    return v\n  else:           # v \u304c\u5b50\u306e\u5834\u5408\n    uni[v] = root(uni[v], uni)  # \u89aa\u306eroot\u3092\u8abf\u3079\u308b\n    return uni[v]\n\n# \u9802\u70b9 a \u3068\u9802\u70b9 b \u3092\u3064\u306a\u3050\u3002\u3082\u3068\u3082\u3068\u540c\u3058\u30b0\u30eb\u30fc\u30d7\u306e\u3068\u304d\u3001False \u3092\u8fd4\u3059\ndef connect(a, b, uni):\n  # \u307e\u305a\u306f\u305d\u308c\u305e\u308c\u6839\u306e\u756a\u53f7\u306b\u7f6e\u304d\u63db\u3048\u308b\n  ra = root(a, uni)\n  rb = root(b, uni)\n  if ra == rb:  # a \u3068 b \u304c\u305d\u3082\u305d\u3082\u540c\u3058\u30b0\u30eb\u30fc\u30d7\u306b\u5c5e\u3057\u3066\u3044\u308b\u306a\u3089\u5373\u7d42\u4e86\n    return False\n\t\n  # ra \u3092\u5927\u304d\u306a\u30b0\u30eb\u30fc\u30d7\u306b\u3057\u305f\u3044\u306e\u3067\u3001\u9006\u3067\u3042\u308c\u3070\u5165\u308c\u66ff\u3048\u308b\n  if uni[ra] > uni[rb]: # rb\u306e\u65b9\u304c\u8981\u7d20\u6570\u304c\u591a\u3051\u308c\u3070\n    tmp = ra\n    ra  = rb \n    rb  = tmp\n\n  # ra \u3068 rb \u3092\u7d50\u5408\u3057\u3001rb \u306e\u89aa\u3092 ra \u3068\u3059\u308b\n  uni[ra] += uni[rb]\n  uni[rb] = ra\n  return True\n      \n##\nN, K, L = map(int, input().split())\n\nroad = [-1]*(N+1)\nrail = [-1]*(N+1)\n\nfor i in range(K):\n  a, b = map(int, input().split())\n  connect(a, b, road)\n\nfor i in range(L):\n  a, b = map(int, input().split())\n  connect(a, b, rail)\n\n\n##\ndp = [0]*(N+1)\nfor i in range(1, N+1):\n  dp[i] = (root(i, road), root(i, rail))\n\ndic = {}\nfor i in range(1, N+1):\n  key = dp[i]\n  if key not in dic:\n    dic[key] = 1\n  else:\n    dic[key] += 1\n\nfor i in range(1, N+1):\n  ans = dic[dp[i]]\n  if i == N:\n    print(ans)\n  else:\n    print(ans, end=\" \")\n", "label": 0, "name1": "s751000860.py", "name2": "s866905054.py"}, {"id": 524, "code1": "def main():\n    N, A, B = map(int, input().split())\n    X = map(int, input().split())\n\n    ret = 0\n    curr = next(X)\n    for x in X:\n        ret += min((x - curr) * A, B)\n        curr = x\n    print(ret)\n\n\nif __name__ == '__main__':\n    main()\n", "code2": "N = int(input())\nAs = list(map(int,input().split()))\ncounts = []\nnow = As[0]\ncount = 1\nfor a in range(1,len(As)):\n    if As[a]==now:\n        count+=1\n        if a == len(As)-1:\n            counts.append(count)\n    else:\n        counts.append(count)\n        count =1\n        now = As[a]\nprint(sum([i//2 for i in counts]))", "label": 0, "name1": "s627561056.py", "name2": "s736034553.py"}, {"id": 635, "code1": "N = int(raw_input())\nT_list = map(int, raw_input().split())\nA_list = map(int, raw_input().split())\n\nlow_list = [1]*N\nhigh_list = [1]*N\n\nt_now = 0\nfor i in range(N):\n    if T_list[i] > t_now:\n        t_now = T_list[i]\n        low_list[i] = T_list[i]\n        high_list[i] = T_list[i]\n    else:\n        high_list[i] = T_list[i]\na_now = 0\nfor j in range(N):\n    i = N - 1 - j\n    if A_list[i] > a_now:\n        a_now = A_list[i]\n        low_list[i] = max(A_list[i], low_list[i])\n        high_list[i] = min(A_list[i], high_list[i])\n    else:\n        high_list[i] = min(A_list[i], high_list[i])\n    \nres = 1\nfor i in range(N):\n    if high_list[i] < low_list[i]:\n        res = 0\n        break\n    else:\n        res = res*(high_list[i] - low_list[i] + 1) % 1000000007\n\nprint res", "code2": "n = input()\np, q = [-1, -1]\nfor i in xrange(n):\n    t, a = map(int, raw_input().split())\n    if p == -1 or q == -1:\n        p = t\n        q = a\n        continue\n    if t >= p and a >= q:\n        p = t\n        q = a\n    else:\n        z = max(p / t + (p % t != 0), q / a + (q % a != 0))\n        p = t * z\n        q = a * z\nprint p + q\n\n", "label": 0, "name1": "s251140241.py", "name2": "s412403305.py"}, {"id": 413, "code1": "n = int(input())\na = list(map(int, input().split()))\na.insert(n,0)\na.insert(0,0)\nsum = 0\nfor i in range(n+1):\n    sum += abs(a[i+1] -a[i])\nfor i in range(n):\n    print(sum - abs(a[i+1] - a[i]) - abs(a[i+2] - a[i+1]) + abs(a[i+2] - a[i]))", "code2": "import sys\n\nN = int(input())\nli = list(map(int, input().split()))\n\nnow = 0\ncount = 0\nt = 0\n\nfor i in li:\n  t += abs(i - now)\n  now = i\n\nt += abs(now)\n\nli.insert(0, 0)\nli.append(0)\n\nfor n in range(1, N+1):\n  print(t - (abs(li[n-1] - li[n])) - abs(li[n] - li[n+1]) + abs(li[n-1] - li[n+1]))", "label": 1, "name1": "s465741499.py", "name2": "s508890771.py"}, {"id": 982, "code1": "MAX = 1000001\nprimes = list()\nfor i in range(MAX):\n    primes.append(True)\nprimes[0] = False\nprimes[1] = False\n\nfor i in range(2, MAX):\n    j = i + i\n    while j < MAX:\n        primes[j] = False\n        j = j + i\n\nwhile True:\n    n = int(input())\n    if n == 0:\n        break\n\n    ans = 0\n    for i in range(1, n // 2 + 1):\n        if primes[i] and primes[n-i]:\n            ans += 1\n    print(ans)\n", "code2": "N=int(input())\n\nD=list(map(int,input().split()))\nflg =False\nA = [0 for i in range(13)]\nA[0]=1\nfor i in range(N):\n    j = min(D[i],24-D[i])\n    if j==0:\n        flg=True\n        break\n    elif j==12:\n        if A[j]==1:\n            flg=True\n            break\n        else:\n            A[j]+=1\n    else:\n        if A[j]==2:\n            flg=True\n            break\n        else:\n            A[j]+=1\n\nimport copy\n\nif flg:\n    print(0)\nelse:\n    count=0\n    one_times=[]\n    times=[0]\n    for i in range(1,12): \n        if A[i]==1:\n            count+=1\n            one_times.append(i)\n        if A[i]==2:\n            times.append(i)\n            times.append(24-i)\n    if A[12]==1:\n        times.append(12)\n    score_max=0\n    for i in range(2**count):\n        t=copy.copy(times)\n        for j in range(count):\n            if (i//(2**j))%2==0:\n                t.append(one_times[j])\n            else:\n                t.append(24-one_times[j])\n        t.sort()\n        \n        score_min=24\n        for j in range(len(t)):\n            if j==len(t)-1:\n                score_min=min(t[0]+24-t[len(t)-1],score_min)\n            else:\n                score_min=min(t[j+1]-t[j],score_min)\n        score_max=max(score_min,score_max)\n    print(score_max)", "label": 0, "name1": "s246285393.py", "name2": "s868602829.py"}, {"id": 518, "code1": "from math import *\nn,m=map(int,input().split())\nif(n==1 or m==1):\n    print(1)\nelse:\n    print(ceil((n*m)/2))\n", "code2": "while True:\n    n = int(input())\n    if n == 0:\n        break\n    scores = list(map(int, input().split()))\n    m = sum(scores) / n\n    dev = list((i - m) for i in scores)\n    var = sum((i ** 2) for i in dev) / n\n    stdev = var ** 0.5\n    print(stdev)\n\n", "label": 0, "name1": "s965203099.py", "name2": "s320188133.py"}, {"id": 696, "code1": "N,M = map(int,(input().split()))\nX = list(map(int,(input().split())))\nX.sort()\nif M > N:\n    dist = [X[i+1]-X[i] for i in range(M - 1)]\n    dist.sort(reverse = True)\n    del dist[0:N-1]\n    print(sum(dist))\nelse:\n print(0)", "code2": "A, B, C = map(int, input().split())\n\n\nH = C-(A-B)\n\nif H < 0:\n    print(\"0\")\nelse:\n    print(H)\n\n\n", "label": 0, "name1": "s025338416.py", "name2": "s336832003.py"}, {"id": 124, "code1": "import sys\nsys.setrecursionlimit(2147483647)\nINF=float(\"inf\")\nMOD=10**9+7\ninput=lambda :sys.stdin.readline().rstrip()\ndef resolve():\n    n,k=map(int,input().split())\n    A=list(map(int,input().split()))\n    dp=[0]*(k+1)\n    for i in range(k):\n        if dp[i]: continue\n        for j in range(n):\n            if i+A[j]<=k: dp[i+A[j]]=1\n    print(\"First\" if dp[k] else \"Second\")\nresolve()", "code2": "n,k = map(int,input().split())\na = list(map(int,input().split()))\ndp = [False]*(k+1)\nfor i in range(1,k+1):\n    for j in range(n):\n        if i-a[j]<0:\n            break\n        if dp[i-a[j]]==False:\n            dp[i] = True\n            break\nif dp[k]==True:\n    print(\"First\")\nelse:\n    print(\"Second\")\n", "label": 1, "name1": "s270542298.py", "name2": "s370455728.py"}, {"id": 28, "code1": "\ndef resolve():\n    N, A, B = map(int, input().split())\n    X = list(map(int, input().split()))\n\n    ans = 0\n    for i in range(N - 1):\n        res = min((X[i + 1] - X[i]) * A, B)\n        ans += res\n        \n    print(ans)\n\n\nif __name__ == \"__main__\":\n    resolve()", "code2": "def main():\n    N, A, B = map(int, input().split())\n    X = map(int, input().split())\n\n    ret = 0\n    curr = next(X)\n    for x in X:\n        ret += min((x - curr) * A, B)\n        curr = x\n    print(ret)\n\n\nif __name__ == '__main__':\n    main()\n", "label": 1, "name1": "s398154186.py", "name2": "s627561056.py"}, {"id": 782, "code1": "N = int(input())\n\ndef gcd(a, b):\n    while b:\n        a, b = b, a % b\n    return a\n\ndef lcm(a, b):\n    return a * b // gcd(a, b)\n\ns = int(input())\nfor i in range(N - 1):\n    tmp = int(input())\n    s = lcm(s, tmp)\n\nprint(s)\n", "code2": "from collections import defaultdict\n\nclass Unionfind:\n\n    __slots__ = ['parents','sizes']\n\n    def __init__(self, n):\n        self.parents = list(range(n))\n        self.sizes = [1]*n\n\n    def root(self, x):\n        if self.parents[x] == x:\n            return x\n        else:\n            root_x = self.root(self.parents[x])\n            self.parents[x] = root_x\n            return root_x\n\n    def unite(self, x, y):\n        x = self.root(x); y = self.root(y)\n        if x == y:\n            return\n        if self.sizes[x] < self.sizes[y]:\n            x, y = y, x\n        self.sizes[x] += self.sizes[y]\n        self.parents[y] = x\n\n    def same(self, x, y):\n        return self.root(x) == self.root(y)\n\n    # \u96c6\u5408\u81ea\u4f53\u306e\u6570 ({1,2}, {3}, {4} : kind -> 3)\n    def kind(self):\n        for v in range(N):\n            self.root(v)\n        return len(list(set(self.parents)))\n\n    # x\u304c\u5c5e\u3059\u308b\u96c6\u5408\u306e\u8981\u7d20\u306e\u6570\u3000({1,2,3} : size(2) -> 3)\n    def size(self, x):\n        self.sizes[x] = self.sizes[self.root(x)]\n        return self.sizes[x]\n\nN, K, L = map(int,input().split())\nroad = Unionfind(N)\ntrain = Unionfind(N)\n\nfor _ in range(K):\n    p, q = map(int,input().split())\n    p -= 1; q -= 1\n    road.unite(p, q)\n\nfor _ in range(L):\n    r, s = map(int,input().split())\n    r -= 1; s -= 1\n    train.unite(r, s)\n\ncnt = defaultdict(int)\n\nfor i in range(N):\n    key = (road.root(i), train.root(i))\n    cnt[key] += 1\n\nans_list = []\nfor i in range(N):\n    key = (road.root(i), train.root(i))\n    ans = cnt[key]\n    ans_list.append(ans)\n\nprint(*ans_list)", "label": 0, "name1": "s550486741.py", "name2": "s028456939.py"}, {"id": 480, "code1": "N,M=map(int,input().split())\ngraph=[[] for _ in range(N)]\nfor _ in range(M):\n    a,b=map(int,input().split())\n    graph[a-1].append(b-1)\n    graph[b-1].append(a-1)\n\nvisited=[False]*N\nvisited[0]=True\n\ndef dfs(v,N,visited):\n    if all(visited):\n        return 1\n    \n    ret=0\n    for new_v in graph[v]:\n        if visited[new_v]:\n            continue\n        \n        visited[new_v]=True\n        ret+=dfs(new_v,N,visited)\n        visited[new_v]=False\n    \n    return ret\n\nprint(dfs(0,N,visited))", "code2": "#\n# abc054 c\n#\n\nimport sys\nfrom io import StringIO\nimport unittest\nimport itertools\n\n\nclass TestClass(unittest.TestCase):\n    def assertIO(self, input, output):\n        stdout, stdin = sys.stdout, sys.stdin\n        sys.stdout, sys.stdin = StringIO(), StringIO(input)\n        resolve()\n        sys.stdout.seek(0)\n        out = sys.stdout.read()[:-1]\n        sys.stdout, sys.stdin = stdout, stdin\n        self.assertEqual(out, output)\n\n    def test_\u5165\u529b\u4f8b_1(self):\n        input = \"\"\"3 3\n1 2\n1 3\n2 3\"\"\"\n        output = \"\"\"2\"\"\"\n        self.assertIO(input, output)\n\n    def test_\u5165\u529b\u4f8b_2(self):\n        input = \"\"\"7 7\n1 3\n2 7\n3 4\n4 5\n4 6\n5 6\n6 7\"\"\"\n        output = \"\"\"1\"\"\"\n        self.assertIO(input, output)\n\n\ndef resolve():\n    N, M = map(int, input().split())\n    P = [list(map(int, input().split())) for _ in range(M)]\n\n    R = itertools.permutations(range(1, N+1))\n\n    ans = 0\n    for r in R:\n        flag = True\n        r = list(r)\n        if r[0] != 1:\n            break\n        for i in range(1, N):\n            for p in P:\n                if (r[i-1] == p[0] and r[i] == p[1]) or (r[i-1] == p[1] and r[i] == p[0]):\n                    break\n            else:\n                flag = False\n        if flag == True:\n            ans += 1\n\n    print(ans)\n\n\nif __name__ == \"__main__\":\n    # unittest.main()\n    resolve()\n", "label": 1, "name1": "s866159978.py", "name2": "s851959667.py"}, {"id": 218, "code1": "import itertools\n\nN = int(input())\nP = tuple(map(int, input().split()))\nQ = tuple(map(int, input().split()))\n\nfor i, pat in enumerate(itertools.permutations(range(1, N + 1)), N):\n    if pat == P:\n        a = i\n    if pat == Q:\n        b = i\n\nans = abs(a - b)\n\nprint(ans)\n", "code2": "from itertools import permutations\n\nn = int(input())\np = list(map(int, input().split()))\nq = list(map(int, input().split()))\n\nfor i, j in enumerate(permutations(range(1, n + 1))):\n    if list(j) == p:\n        p_index = i\n    if list(j) == q:\n        q_index = i\n\nprint(abs(p_index - q_index))", "label": 1, "name1": "s509770499.py", "name2": "s474633952.py"}, {"id": 647, "code1": "n = int(input())\np = tuple(map(int, input().split()))\nq = tuple(map(int, input().split()))\n\nimport itertools\nr = list(itertools.permutations(range(1, n+1)))\n\np_place = r.index(p)\nq_place = r.index(q)\nanswer = abs(p_place-q_place)\nprint(answer)", "code2": "# AOJ 0144 Packet Transportation\n# Python3 2018.6.23 bal4u\n\nINF = 0x7fffffff\nn = int(input())\narr = [[INF for j in range(n)] for i in range(n)]\nfor i in range(n):\n\ta = list(map(int, input().split()))\n\tx, k = a[0]-1, a[1]\n\tfor j in range(k):\n\t\ty = a[j+2]-1\n\t\tarr[x][y] = 1\nfor k in range(n):\n\tarr[k][k] = 0\n\tfor i in range(n):\n\t\tif arr[i][k] >= INF: continue\n\t\tfor j in range(n):\n\t\t\tif arr[k][j] >= INF: continue\n\t\t\tarr[i][j] = min(arr[i][j], arr[i][k] + arr[k][j])\np = int(input())\nfor i in range(p):\n\ts, d, v = map(int, input().split())\n\ts,d = s-1, d-1\n\tprint(arr[s][d]+1 if arr[s][d] < v else \"NA\")\n", "label": 0, "name1": "s558804624.py", "name2": "s881383078.py"}, {"id": 732, "code1": "import bisect\n\nans = \"IMPOSSIBLE\"\nn, m = map(int, input().split())\nac = []\nbc = []\nfor _ in range(m):\n    a, b = map(int, input().split())\n    if min(a, b) == 1:\n        ac.append(max(a, b))\n    elif max(a, b) == n:\n        bc.append(min(a, b))\nac = list(sorted(ac))\nbc = list(sorted(bc))\nfor c in ac:\n    i = bisect.bisect_left(bc, c)\n    if i < len(bc) and bc[i] == c:\n        ans = ans[2:]\n        break\nprint(ans)", "code2": "from heapq import heappush, heappop\nimport sys\nfrom typing import List, Tuple\n\n\nif __name__ == \"__main__\":\n    V, E, r = map(lambda x: int(x), input().split())\n\n    edges: List[List[Tuple[int, int]]] = [[] for _ in range(V)]\n    dists = [sys.maxsize for _ in range(V)]\n    dists[r] = 0\n\n    for _ in range(E):\n        s, t, dist = map(lambda x: int(x), input().split())\n        edges[s].append((t, dist))\n\n    que: List[Tuple[int, int]] = []  # (dist, vertex)\n    heappush(que, (0, r))\n\n    while que:\n        dist, vertex = heappop(que)\n        for to, cost in edges[vertex]:\n            if cost + dist < dists[to]:\n                dists[to] = cost + dist\n                heappush(que, (cost + dist, to))\n\n    for dist in dists:\n        if sys.maxsize == dist:\n            print(\"INF\")\n        else:\n            print(dist)\n\n", "label": 0, "name1": "s723688485.py", "name2": "s404691730.py"}, {"id": 858, "code1": "from fractions import gcd \n\n\nn = int(input())\nl = list(map(int, input().split()))\nnum = 0\nfor i in range(len(l)):\n    num = gcd(num, l[i])\n\nprint(num)", "code2": "# Edit: 2014/10/13\n# Lang: Python3\n# Time: 00.xxs\n\n# File: pc1503.py\n\nfrom functools import reduce\n\nif __name__ == \"__main__\":\n    n = int(input()) # 1<=n<=1,500\n    #n1500 = reduce(lambda x,y: x*y, range(2,1501))+2\n    n1500 = 48119977967797748601669900935813797818348080406726138081308559411630575189001095591292230585206733851868464009619343585194052091124618166270271481881393331431627962810299844149333789044689395510487167879769325303699470467829234399263326545652860748605075746366928323606645492277541120083438086727369377887676000211405318480244354207419604864176969950581435222198851194568984095705945549589054568321792338919149442985919957734792959402499096845643020401869381175603964424333222114125974374817804242633309769804293952870034619354125014210045647664063240162007560108665290568646128342557147350985358724154623253371867470765120422073867963935775258692109753041762094343569050497470353531764481503174750911858230906998361066084787758316110585736013365377431860738572261325738233656835271947352695180865573043834027955539012765489372645042504406597752357481931532872356635411224578334040522294746402829585458478708778346379431862368824819009177091444034885941394319343910223168655869761799669075059527608502465593181398566214786801211651657222004123456498258513120359126022843038535083709796101565934859483203933443308601475813108363074118562404412420191947127585482919172173045961122122701434297870691932154082986945954748251105782181586397275820342101470457300633590139512919549474113721711616912519714191760699935509810254849967087635936181176363954224186031346682928878492872249485456690138831610135377916327940503701400290125509132140782614640495733518048670983360134097860364762638658894873174499870133559364805443430831459505987809215393353387232078177562975021460595422358573128085417162336030235138652735438053034531962620811566019896879275257163988352090874930346115518331202927263708446729394381879888839549731876978682249320628599631628662375508826209854754631984276392670919216923002770077734756077549035942976209159416211581439461484509549370357486770276807687544580164314647595031368948490282897173328013518435758700056425922638411889496527975846052717958044813737086806600171993703579485864029383208714528950303253881360812631162134750100307772634337467012820470715650810714689905121432259528505483053930402217400686061612471659630192434864094539828085677465383026128353771071152304197549798870706139893609140045659756285435787771636258253666592102151236142132724425850991205720020493660580896600891888594659612927724357866265934517615841298789154462249169688860092640284756382431746120357767933119589280468687348061788072986362788582227019465263474828590646048451070702923434422714349595857654843699542321849363652767771978314681013589442955219879702008068934096624650625769705233333462826013860098698155180331145365652453482955497979915586438474687345677874451117702250441711504844638414485210092261397271970571029038581873069951161330495772310508760528249706514238384269808639507080418298318311361373628512041716415196868334254119137139589149597210032153545941114666530498906529240798164804007394775927836045668573993316428972539932745757171947402454257142633700815922407278403640595355142075599446056337986717212316223257763412164180899532722039383244462511410346646148863397237096276822656157561194665545757017429842404840309758925618650507921043007241637877939825811059339138925526124514467627126548126795078784022672860886251974581362141782786407402896309678008909663263987018538107050886193489012497405005820727271232733728141775132722013860591169620692789290456794698409808557447756701311883266010859016027592252397754508251628808293537776536569608111330584797160694847898923196743970244451842702266403326317319092117151143971679500042590269255093130215984418097418435474300467281949798227102529873732749027992079700287275900856241172902880909546551703263202853584498085358955307673717177961902081098618729046348849060249600000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000002\n    print(n1500)\n    for i in range(0,n):\n        print(i+2)", "label": 0, "name1": "s849557734.py", "name2": "s021750176.py"}, {"id": 876, "code1": "a, b, c, x, y = [int(i) for i in input().strip().split(\" \")]\n\nz = min(x, y)\ntotal = 0\n\nif (a+b) > c*2:\n    total += c * 2 * z\nelse:\n    total += a * z + b * z\n\nif (a < c * 2):\n    total += (x-z) * a\nelse:\n    total += (x-z) * c * 2\n\nif (b < c * 2):\n    total += (y-z) * b\nelse:\n    total += (y-z) * c * 2\n\nprint(total)\n", "code2": "\n\nK = int(input())\n\nA,B = map(int, input().split())\n\ncheck = 0\nfor i in range(int(1000/K) ):\n    if K*(i+1)>=A and K*(i+1) <= B:\n        print('OK')\n        check = 1\n        break\nif check == 0:\n    print('NG')\n", "label": 0, "name1": "s005706927.py", "name2": "s701703861.py"}, {"id": 990, "code1": "from fractions import gcd\nfrom datetime import date, timedelta\nfrom heapq import*\nimport math\nfrom collections import defaultdict, Counter, deque\nimport sys\nfrom bisect import *\nimport itertools\nimport copy\nsys.setrecursionlimit(10 ** 7)\nMOD = 10 ** 9 + 7\n\n\ndef main():\n    n = int(input())\n    d = list(map(int, input().split()))\n    if n == 1:\n        print(d[0])\n        exit()\n    dc = defaultdict(int)\n    dc[0] = 1\n    for i in range(n):\n        v = d[i]\n        if dc[v] >= 2 or (dc[v] == 1 and (v == 12 or v == 0)):\n            print(0)\n            exit()\n        dc[v] += 1\n    \n    dd = []\n    ddt = []\n    for i in range(0, 13):\n        if (i == 0 or i == 12) and dc[i] == 1:\n            ddt.append(i)\n        elif dc[i] == 1:\n            dd.append(i)\n        elif dc[i] == 2:\n            ddt.append(i)\n            ddt.append(24 - i)\n\n\n    \n    ans = 0\n    for i in range(1 << len(dd)):\n        d3 = []\n        for j in range(len(ddt)):\n            d3.append(ddt[j])\n\n        for j in range(len(dd)):\n            if (i & (1 << j)):\n                d3.append(dd[j])\n            else:\n                d3.append(24 - dd[j])\n        \n        d3 = sorted(d3)\n        t = float(\"inf\")\n        for i in range(len(d3) - 1):\n            t = min(t, d3[i + 1] - d3[i])\n        t = min(t , 24 - d3[-1])\n        ans = max(t, ans)\n    print(ans)\n\n\nif __name__ == '__main__':\n    main()\n", "code2": "while True:\n    t= int(input())\n    if t== 0: break\n    n= int(input())\n    c= [list(map(int, input().split())) for _ in range(n)]\n    sf= sum(c[i][1]-c[i][0] for i in range(n))\n    print(\"OK\" if t<= sf else t-sf)", "label": 0, "name1": "s742731060.py", "name2": "s737311536.py"}, {"id": 262, "code1": "A, B, C, K = list(map(int,input().split()))\nif K <= A:\n  print(K)\nelif K <= (A + B):\n  print(A)\nelif K <= (A + B + C):\n  print(2*A + B - K)\nelse:\n  print(A + B - C)", "code2": "a,b,c,k=map(int,input().split())\nc_=max(0,k-a-b)\na_=min(a,k)\nprint(a_-c_)", "label": 1, "name1": "s098797347.py", "name2": "s535747622.py"}, {"id": 872, "code1": "# AOJ 1503: Numbers\n# Python3 2018.7.13 bal4u\n\nimport sys\nn = int(input())\nif n == 1: print(4, 2, sep='\\n'); sys.exit(0)\nans = 1\nfor i in range(2, n+2): ans *= i\nprint(ans+2)\nfor i in range(2, n+2): print(i)\n", "code2": "a, b = input().split()\nif a == 'H':\n    print(b)\nelse:\n    if b == 'H':\n        print('D')\n    else:\n        print('H')", "label": 0, "name1": "s590878073.py", "name2": "s562716029.py"}, {"id": 786, "code1": "import math,string,itertools,fractions,heapq,collections,re,array,bisect,sys,random,time,copy,functools\n\nsys.setrecursionlimit(10**7)\ninf = 10**20\neps = 1.0 / 10**10\nmod = 998244353\ndd = [(0,-1),(1,0),(0,1),(-1,0)]\nddn = [(0,-1),(1,-1),(1,0),(1,1),(0,1),(-1,-1),(-1,0),(-1,1)]\n\ndef LI(): return [int(x) for x in sys.stdin.readline().split()]\ndef LI_(): return [int(x)-1 for x in sys.stdin.readline().split()]\ndef LF(): return [float(x) for x in sys.stdin.readline().split()]\ndef LS(): return sys.stdin.readline().split()\ndef I(): return int(sys.stdin.readline())\ndef F(): return float(sys.stdin.readline())\ndef S(): return input()\ndef pf(s): return print(s, flush=True)\n\n\ndef main():\n    rr = []\n\n    while True:\n        n = I()\n        if n == 0:\n            break\n\n        a = [S().split(':') for _ in range(n)]\n        ts = set([c[0] for c in a])\n        ms = {}\n        for t,m in a:\n            ms[t] = m[:-1].split(',')\n\n        fm = {}\n        def f(c):\n            if c in fm:\n                return fm[c]\n            if c in ts:\n                s = set()\n                for k in ms[c]:\n                    s |= f(k)\n                fm[c] = s\n                return s\n            fm[c] = set([c])\n            return fm[c]\n\n        r = f(a[0][0])\n\n        rr.append(len(r))\n\n    return '\\n'.join(map(str,rr))\n\n\nprint(main())\n\n\n", "code2": "# coding:utf-8\n\nimport sys\n\n\ninput = sys.stdin.readline\nINF = float('inf')\nMOD = 10 ** 9 + 7\n\n\ndef inpl(): return list(map(int, input().split()))\n\n\n# a\u306ep\u4e57\u3092\u6c42\u3081\u308b\u30a2\u30eb\u30b4\u30ea\u30ba\u30e0\n# MOD\u7248\ndef pow_mod(a, p):\n    if p == 0: return 1\n\n    if p % 2 == 0:\n        half_p = p // 2\n        half = pow_mod(a, half_p)\n        return half * half % MOD\n    else:\n        return a * pow_mod(a, p - 1) % MOD\n\n\ndef solve(N, A):\n    # \u968e\u4e57N!\u3092\u6c42\u3081\u308b\n    fact = [1] * N\n    for i in range(1, N):\n        fact[i] = fact[i - 1] * (i + 1) % MOD\n\n    # 1/N!\u306e\u9006\u5143\u3092\u6c42\u3081\u308b\n    fact_inv = [1] * N\n    fact_inv[-1] = pow_mod(fact[-1], MOD - 2)\n    for i in range(N - 1, 0, -1):\n        tmp = fact_inv[i] * (i + 1)\n        tmp %= MOD\n        fact_inv[i - 1] = tmp\n\n    # 1/k\u3092\u6c42\u3081\u308b\n    inv = [1]\n    for i in range(1, N):\n        inv.append((fact[i - 1] * fact_inv[i]) % MOD)\n\n    # 1/k\u306e\u7d2f\u7a4d\u548c\u3092\u6c42\u3081\u308b\n    inv_sum = [1]\n    for i in range(1, N):\n        inv_sum.append((inv_sum[-1] + inv[i]) % MOD)\n\n    # \u7d2f\u7a4d\u548c\u306e\u7d50\u679c\u3092\u4fc2\u6570\u3068\u3057\u3066Ai\u306b\u639b\u3051\u3066\u3001\u52a0\u7b97\u3059\u308b\n    ans = 0\n    for i in range(N):\n        ans += A[i] * (inv_sum[i] + inv_sum[N - 1 - i] - 1)\n        ans %= MOD\n\n    # ans\u306bN!\u3092\u639b\u3051\u305f\u3082\u306e\u3092\u8fd4\u3059\n    return ans * fact[-1] % MOD\n\n\nN = int(input())\nA = inpl()\nprint(solve(N, A))\n", "label": 0, "name1": "s451877142.py", "name2": "s535253599.py"}, {"id": 921, "code1": "N=int(input())\ns=[]\nfor i in range(N):\n    s.append(int(input()))\ns.sort()\n\nif sum(s)%10!=0:\n    ans=sum(s)\nelse:\n    f=False\n    for si in s:\n        if si%10!=0:\n            ans=sum(s)-si\n            f=True\n            break\n    if not f:\n        ans=0\n\nprint(ans)", "code2": "n=int(input())\nmod=10**9+7\nfra=[1]*(n+2)\ninv=[1]*(n+2)\nt1=1\nt2=1\nfor i in range(1,n+2):\n    t1*=i\n    t1%=mod\n    t2*=pow(i,mod-2,mod)\n    t2%=mod\n    fra[i]=t1\n    inv[i]=t2\nans=fra[n]\nfor i in range((n+1)//2,n):\n    ans-=fra[i-1]*inv[2*i-n]*fra[i]%mod\n    ans%=mod\nprint(ans)", "label": 0, "name1": "s777989048.py", "name2": "s299124610.py"}, {"id": 450, "code1": "nm = [0,31,29,31,30,31,30,31,31,30,31,30]\nwhile True:\n\n    m,d = map(int,raw_input().split(\" \"))\n\n    if m == 0:\n        break\n    else:\n        nd = 0\n        for i in range(m):\n           nd += nm[i]\n\n        nd += d\n        n = nd%7\n        if n == 1:\n            print \"Thursday\"\n        elif n == 2:\n            print \"Friday\"\n        elif n == 3:\n            print \"Saturday\"\n        elif n == 4:\n            print \"Sunday\"\n        elif n == 5:\n            print \"Monday\"\n        elif n == 6:\n            print \"Tuesday\"\n        else:                                                                                                                                                                                                \n            print \"Wednesday\"", "code2": "from datetime import date\nwhile 1:\n\tm,d=map(int,raw_input().split())\n\tif m==0:break\n\tprint date(2004,m,d).strftime(\"%A\")", "label": 1, "name1": "s504491910.py", "name2": "s074010277.py"}, {"id": 128, "code1": "from collections import defaultdict, deque, Counter\nfrom heapq import heappush, heappop, heapify\nfrom bisect import bisect_right, bisect_left\nimport random\nfrom itertools import permutations, accumulate, combinations, product\nimport sys\nimport string\nfrom bisect import bisect_left, bisect_right\nfrom math import factorial, ceil, floor, gamma, log\nfrom operator import mul\nfrom functools import reduce\nfrom copy import deepcopy\n\nsys.setrecursionlimit(2147483647)\nINF = 10 ** 20\ndef LI(): return list(map(int, sys.stdin.readline().split()))\ndef I(): return int(sys.stdin.readline())\ndef LS(): return sys.stdin.buffer.readline().rstrip().split()\ndef S(): return sys.stdin.buffer.readline().rstrip().decode('utf-8')\ndef IR(n): return [I() for i in range(n)]\ndef LIR(n): return [LI() for i in range(n)]\ndef SR(n): pass\ndef LSR(n): return [LS() for i in range(n)]\ndef SRL(n): return [list(S()) for i in range(n)]\ndef MSRL(n): return [[int(j) for j in list(S())] for i in range(n)]\nmod = 10 ** 9 + 7\n\nn = I()\n\nfac = [1] * (n + 1)\ninv = [1] * (n + 1)\nfor j in range(1, n + 1):\n    fac[j] = fac[j-1] * j % mod\n\n\ninv[n] = pow(fac[n], mod-2, mod)\nfor j in range(n-1, -1, -1):\n    inv[j] = inv[j+1] * (j+1) % mod\n\n\ndef comb(n, r):\n    if r > n or n < 0 or r < 0:\n        return 0\n    return fac[n] * inv[n - r] * inv[r] % mod\n\ns = input()\ndp = [[0] * n for _ in range(n)]\ndp[0][0] = 1\nfor i in range(1, n):\n    ret = 0\n    if s[i - 1] == \"<\":\n        for j in range(i - 1, -1, -1):\n            ret += dp[i - 1][j]\n            ret %= mod\n            dp[i][j] = ret\n    else:\n        for j in range(i):\n            ret += dp[i - 1][j]\n            dp[i][j + 1] = ret\n        dp[i][i] = ret\n\nprint(sum(dp[-1]) % mod)\n", "code2": "N = int(input())\ns = input()\nMOD = 10**9+7\n\n#A1 ... An\u306eBIT(1-indexed)\nBIT = [0]*(N+1)\n\n#A1 ~ Ai\u307e\u3067\u306e\u548c O(logN)\ndef BIT_query(idx):\n    res_sum = 0\n    while idx > 0:\n        res_sum += BIT[idx]\n        idx -= idx&(-idx)\n    return res_sum\n\n#Ai += x O(logN)\ndef BIT_update(idx,x):\n    while idx <= N:\n        BIT[idx] += x\n        idx += idx&(-idx) #BIT_update(0, )\u3092\u3059\u308b\u3068 while \u304c\u7d42\u308f\u3089\u306a\u3044\n    return\n\n\ndp = [[0]*N for _ in range(N)] # dp[i][k]\uff1ai\u756a\u76ee\u307e\u3067\u898b\u305f\u6642\u306b\uff0ci\u756a\u76ee\u306e\u8981\u7d20\u3088\u308a\u5c0f\u3055\u3044\u5024\u306e\u500b\u6570\u304ck\u306e\u6642\u306e\u30d1\u30bf\u30fc\u30f3\u6570 \nfor k in range(N): dp[0][k] = 1\n\nfor i in range(1, N):\n    BIT = [0]*(N+1)\n    for k in range(N): BIT_update(k+1, dp[i-1][k]) #BIT_update(0, )\u3092\u3059\u308b\u3068 while \u304c\u7d42\u308f\u3089\u306a\u3044\n    if s[i-1] == '<':\n        for k in range(N-i): dp[i][k] = BIT_query(k+1) % MOD #sum([dp[i-1][j] for j in range(k+1)])\n    else:\n        for k in range(N): dp[i][k] = (BIT_query(N) - BIT_query(k+1)) % MOD #sum([dp[i-1][j] for j in range(k+1, N)])\n\nprint(dp[-1][0])", "label": 1, "name1": "s321259797.py", "name2": "s562446307.py"}, {"id": 764, "code1": "start, end, div = list(map(int, input().strip().split()))\n\ncount = end // div - start //div\n\nif start % div == 0:\n  count += 1\nprint(count)", "code2": "n = int(input())\na = list(map(int, input().split()))\na.insert(n,0)\na.insert(0,0)\nsum = 0\nfor i in range(n+1):\n    sum += abs(a[i+1] -a[i])\nfor i in range(n):\n    print(sum - abs(a[i+1] - a[i]) - abs(a[i+2] - a[i+1]) + abs(a[i+2] - a[i]))", "label": 0, "name1": "s009071418.py", "name2": "s465741499.py"}, {"id": 851, "code1": "l = [[], [], []]\nans = []\nfor i in range(3):\n  for j in range(8):\n    s = raw_input().split()\n    l[i].append([float(s[1]), int(s[0])])\nfor i in range(3):\n  l[i].sort()\n  ans.append(l[i].pop(0))\n  ans.append(l[i].pop(0))\nl = l[0] + l[1] + l[2]\nl.sort()\nans.append(l.pop(0))\nans.append(l.pop(0))\nfor n in ans:\n  print str(n[1]) + \" \" + str(n[0])", "code2": "N = int(input())\nA = list(map(int, input().split()))\nsort = sorted(A)\n# amari = []\n# while len(amari) != 1:\n#   amari.clear()\n#   if 0 in sort: sort.remove(0)\n#   for item in sort:\n#     if item%sort[0] not in amari:\n#       amari.append(item%sort[0])\n#   last_sort0 = sort[0]\n#   sort = sorted(amari[:])\n#   sort.append(last_sort0)\n\n# print(last_sort0-amari[0])\n\nwhile len(sort) != 1:\n  for i in range(1,len(sort)):\n    sort[i] = sort[i]%sort[0]\n  sort = [j for j in sorted(sort) if j != 0]\n\nprint(sort[0])", "label": 0, "name1": "s549811190.py", "name2": "s006625656.py"}, {"id": 769, "code1": "n = input()\nfor i in sorted(map(int, raw_input().split())):\n print i ,", "code2": "def gcd(x,y):\n    a=max(x,y)\n    b=min(x,y)\n    if a%b==0:\n        return b\n    else:\n        return gcd(b,a%b)\n\ndef lcm(x,y):\n    return (x*y)//gcd(x,y)\n\nN=int(input())\nans=1\nfor i in range(N):\n    ans=lcm(ans,int(input()))\nprint(ans)\n", "label": 0, "name1": "s740416119.py", "name2": "s751000860.py"}, {"id": 552, "code1": "# https://atcoder.jp/contests/tenka1-2018-beginner/tasks/tenka1_2018_d\n\nfrom itertools import combinations\n\nn = int(input())\nk = -1\nfor i in range(10**3):\n    if i*i - i - 2 * n == 0:\n        k = i\n\nif k == -1:\n    print('No')\n    exit()\n\n# print('Yes')\n# print(k)\n\nnum = 0\nV = [[] for _ in range(k)]\nfor cmb in combinations(range(k), r=2):\n    num += 1\n    a, b = cmb\n    V[a].append(num)\n    V[b].append(num)\nprint('Yes')\nprint(k)\nfor v in V:\n    print(len(v), end=\" \")\n    print(*v)\n", "code2": "n,k = map(int,input().split())\nprint(min(n%k,-((n%k)-k)))", "label": 0, "name1": "s366576461.py", "name2": "s413819466.py"}, {"id": 875, "code1": "a, b, c, x, y = map(int, input().split())\nc *= 2\nans = min(a+b, c) * min(x, y)\nif x>y:\n    ans += (x-y)*min(a, c)\nelse:\n    ans += (y-x)*min(b, c)\nprint(ans)", "code2": "a, b = input().split()\nif a == 'H':\n    print(b)\nelse:\n    if b == 'H':\n        print('D')\n    else:\n        print('H')", "label": 0, "name1": "s327021416.py", "name2": "s562716029.py"}, {"id": 345, "code1": "# ABC068C - Cat Snuke and a Voyage (ARC079C)\ndef main():\n    N, M, *AB = map(int, open(0).read().split())\n    from_1, to_N = set(), set()\n    for a, b in zip(*[iter(AB)] * 2):\n        if a == 1:\n            from_1.add(b)\n        if b == N:\n            to_N.add(a)\n    flg = from_1 & to_N  # intermediate point of both 1, N exists?\n    print(\"POSSIBLE\" if flg else \"IMPOSSIBLE\")\n\n\nif __name__ == \"__main__\":\n    main()", "code2": "def inpl(): return list(map(int, input().split()))\nN, M = inpl()\nf, n = set(), set()\nfor i in range(M):\n    temp = inpl()\n    if 1 in temp:\n        f.add(temp[1])\n    if N in temp:\n        n.add(temp[0])\nif len(f & n) > 0:\n    print('POSSIBLE')\nelse:\n    print('IMPOSSIBLE')", "label": 1, "name1": "s726342129.py", "name2": "s278593598.py"}, {"id": 317, "code1": "import sys\n\n\n#\u4e92\u3044\u306b\u7d20\u306aa,b\u306b\u3064\u3044\u3066\u3001a*x+b*y=1\u306e\u4e00\u3064\u306e\u89e3\ndef extgcd(a, b):\n    r = [1, 0, a]\n    w = [0, 1, b]\n    while w[2] != 1:\n        q = r[2] // w[2]\n        r2 = w\n        w2 = [r[0] - q * w[0], r[1] - q * w[1], r[2] - q * w[2]]\n        r = r2\n        w = w2\n    #[x,y]\n    return [w[0], w[1]]\n\n\n# a\u306e\u9006\u5143(mod m)\u3092\u6c42\u3081\u308b\u3002(a\u3068m\u306f\u4e92\u3044\u306b\u7d20\u3067\u3042\u308b\u3053\u3068\u304c\u524d\u63d0)\ndef mod_inv(a, m):\n    x = extgcd(a, m)[0]\n    return (m + x % m) % m\n\n\nreadline = sys.stdin.readline\nMOD_NUM = 10**6 + 3\n\nQ = int(readline())\nq_array = [list(map(int, readline().split())) for i in range(Q)]\nans_array = []\n\nfactorial = [1] * MOD_NUM\nfactorial_inv = [1] * MOD_NUM\n\ntmp = 1\nfor i in range(2, MOD_NUM):\n    tmp = tmp * i % MOD_NUM\n    factorial[i] = tmp\n    factorial_inv[i] = mod_inv(tmp, MOD_NUM)\n\nfor q in q_array:\n    x, d, n = q\n    # print(x, d, n)\n    if x == 0:\n        ans_array.append(\"0\\n\")\n        continue\n    if d == 0:\n        ans = pow(x, n, MOD_NUM)\n        ans_array.append(str(ans) + \"\\n\")\n    else:\n        x_start = x * mod_inv(d, MOD_NUM) % MOD_NUM\n        if x_start + n > MOD_NUM:\n            ans_array.append(\"0\\n\")\n        else:\n            ans = factorial[x_start + n - 1] * factorial_inv[\n                x_start - 1] * pow(d, n, MOD_NUM) % MOD_NUM\n            ans_array.append(str(ans) + \"\\n\")\n\nsys.stdout.writelines(ans_array)", "code2": "# https://atcoder.jp/contests/m-solutions2019/submissions/5741430\nimport sys\n\ninput = sys.stdin.readline\n\nMOD = 10 ** 6 + 3\n\n\ndef inv(n):\n    return pow(n, MOD - 2, MOD)\n\n\nfact = [1]\nfor n in range(1, MOD):\n    fact.append((fact[-1] * n) % MOD)\n    # d>1 \u306e\u6570\u5217\u3092 d=1 \u3068\u306a\u308b\u6570\u5217\u306b\u5909\u63db\u3059\u308b\n    # MOD\u306e\u500d\u6570\u3092\u542b\u3080\u6570\u5217\u306e\u7a4d\u306f0\u306b\u306a\u308b\u306e\u3067,\n    # MOD\u306e\u500d\u6570\u3092\u542b\u307e\u306a\u3044\u533a\u9593\u306e\u7a4d\u304c\u8a08\u7b97\u3067\u304d\u308c\u3070\u3088\u3044\n    # \u305d\u306e\u3088\u3046\u306a\u533a\u9593\u306e\u53f3\u7aef\u306fMOD-1\u3067\u3042\u308a,fact[MOD-1]\u304c\u8a08\u7b97\u3067\u304d\u308c\u3070\u3088\u3044\n\ninv_fact = [-1] * MOD\ninv_fact[MOD - 1] = inv(fact[-1])\nfor n in range(MOD - 2, -1, -1):\n    inv_fact[n] = ((inv_fact[n + 1] * (n + 1)) % MOD)\n    # inv_fact\u306f,inv(n!)\u306bn,n-1,...\u3092\u639b\u3051\u308b\u30a4\u30e1\u30fc\u30b8\n\nQ = int(input())\nfor _ in range(Q):\n    x, d, n = map(int, input().split())\n\n    if x == 0:\n        print(0)\n        continue\n\n    if d == 0:\n        print(pow(x, n, MOD))\n        continue\n\n    xd = (x * inv(d)) % MOD\n    if xd == 0:\n        print(0)\n        continue\n\n    if MOD - xd < n:\n        print(0)\n        continue\n\n    dn = pow(d, n, MOD)\n    print((((fact[xd + n - 1] * inv_fact[xd - 1]) % MOD) * dn) % MOD)\n", "label": 1, "name1": "s261991889.py", "name2": "s847761585.py"}, {"id": 674, "code1": "import re\n\ns = input().replace('?', '.')\nt = input()\n\nif len(t)>len(s):\n  print('UNRESTORABLE')\nelif len(t)==len(s):\n  if re.match(s, t):\n    print(t)\n  else:\n    print('UNRESTORABLE')\nelse:\n  for i in range(len(s)-len(t)+1):\n    check_str = s[len(s)-len(t)-i:len(s)-i]\n    if re.match(check_str, t):\n      break\n\n  if i==len(s)-len(t):\n    print('UNRESTORABLE')\n  else:\n    ans = s[:len(s)-len(t)-i] + t + s[len(s)-i:]\n    ans = ans.replace('.', 'a')\n    print(ans)", "code2": "while True:\n    n,x = map(int,raw_input().split())\n    count = 0;\n    if n == 0 and x == 0:break\n    for i in range(1,n + 1):\n        for j in range(1,n + 1):\n            if i == j:break\n            for k in range(1,n + 1):\n                if j == k:break\n                if i + j + k == x:\n                    count+=1\n                    break\n    print count", "label": 0, "name1": "s389752250.py", "name2": "s748079428.py"}, {"id": 9, "code1": "import sys\n\ns = list(input())\n\nfor i in range(len(s)):\n  if i % 2 == 1:\n    if s[i] == \"L\" or s[i] == \"U\"or s[i] == \"D\":\n      continue\n    else:\n      print(\"No\")\n      sys.exit()\n  else:\n    if s[i] == \"R\" or s[i] == \"U\"or s[i] == \"D\":\n      continue\n    else:\n      print(\"No\")\n      sys.exit()\n\nprint(\"Yes\")", "code2": "S = input()\nodd = S[0::2]\neven = S[1::2]\nans = 'No'\n\nif 'L' not in odd:\n    if 'R' not in even:\n        ans = 'Yes'\n\nprint(ans)", "label": 1, "name1": "s904714457.py", "name2": "s134920706.py"}, {"id": 255, "code1": "s = list(input())\nt = list(input())\nans = [-1, -1]\nif len(t) <= len(s):\n    for i in range(len(s) - len(t) + 1):\n        c = 1\n        for j in range(len(t)):\n            if s[i + j] != \"?\" and t[j] != s[i + j]:\n                c = 0\n                break\n        if c == 1:\n            ans = [i, i + len(t)]\n\nif ans != [-1, -1]:\n    k = []\n    for i in range(len(s)):\n        if ans[0] <= i < ans[1]:\n            k.append(t[i - ans[0]])\n        else:\n            if s[i] == \"?\":\n                k.append(\"a\")\n            else:\n                k.append(s[i])\n    print(\"\".join(k))\nelse:\n    print(\"UNRESTORABLE\")\n", "code2": "import re\n\ns = input().replace('?', '.')\nt = input()\n\nif len(t)>len(s):\n  print('UNRESTORABLE')\nelif len(t)==len(s):\n  if re.match(s, t):\n    print(t)\n  else:\n    print('UNRESTORABLE')\nelse:\n  for i in range(len(s)-len(t)+1):\n    check_str = s[len(s)-len(t)-i:len(s)-i]\n    if re.match(check_str, t):\n      break\n\n  if i==len(s)-len(t):\n    print('UNRESTORABLE')\n  else:\n    ans = s[:len(s)-len(t)-i] + t + s[len(s)-i:]\n    ans = ans.replace('.', 'a')\n    print(ans)", "label": 1, "name1": "s590642866.py", "name2": "s389752250.py"}, {"id": 338, "code1": "S = input()\n\nl = len(S)\nS_list = list(map(int, S))\n\nans = 0\n\nfor i in range(l):\n    num = int(S_list[-i-1])\n\n    for j in range(i+1):\n        ans += num * (10 ** (j)) * (2 ** (max(l-1-j-1, l-1-i)))\n\nprint(ans)\n", "code2": "S = list(input())\nN = len(S)\n\nfrom itertools import product\nLS = list(product([0,1], repeat=N-1))\nout = 0\nfor L in LS:\n    T = S[0]\n    for i in range(N-1):\n        if L[i]==1:\n            T += \"+\"+S[i+1]\n        else:\n            T += S[i+1]\n    A = list(map(int,T.split(\"+\")))\n    out += sum(A)\nprint(out)", "label": 1, "name1": "s174681493.py", "name2": "s603233292.py"}, {"id": 780, "code1": "import sys\nimport fractions\nfrom collections import Counter, deque, defaultdict\nfrom math import factorial\nimport heapq, bisect\nimport math\nimport itertools\nsys.setrecursionlimit(10 ** 5 + 10)\nINF = 10**15 +5\ndef input(): return sys.stdin.readline().strip()\ndef INT(): return int(input())\ndef MAP(): return map(int, input().split())\ndef LIST(): return list(map(int, input().split()))\n\nn = INT()\nt = [0]*n\nfor i in range(n):\n    t[i] = INT()\n\ndef lcm(a,b):\n    gcd = fractions.gcd(a,b)\n    a//=gcd\n    b//=gcd\n    return a*b*gcd\n    \nif n == 1:\n    print(t[0])\n    sys.exit()\n\nres = lcm(t[0],t[1])\nfor i in range(1,n-1):\n    res = lcm(res, t[i+1])\n\nprint(res)\n\n\n", "code2": "def inpl(): return [int(i) for i in input().split()]\nclass UnionFind():\n    def __init__(self, num):\n        self.par = [-1 for _ in range(num)]\n    \n    def find(self, x):\n        if self.par[x] < 0:\n            return x\n        else:\n            x = self.par[x]\n            return self.find(x)\n    \n    def union(self, x, y):\n        rx = self.find(x)\n        ry = self.find(y)\n        if rx != ry:\n            if self.par[rx] < self.par[ry]:\n                self.par[ry] = rx\n            if self.par[rx] > self.par[ry]:\n                self.par[rx] = ry\n            else:\n                self.par[rx] -= 1\n                self.par[ry] = rx\n        return\n\nN, K, L = inpl()\nufk = UnionFind(N)\nfor i in range(K):\n    p, q = inpl()\n    ufk.union(p-1, q-1)\n\nufr = UnionFind(N)\nfor i in range(L):\n    r, s = inpl()\n    ufr.union(r-1, s-1)\n\nfrom collections import defaultdict\nans = defaultdict(lambda: 0)\nfor i in range(N):\n    ans[ufk.find(i),ufr.find(i)] +=1\nAns = [0 for _ in range(N)]\nfor i in range(N):\n    Ans[i] = ans[ufk.find(i),ufr.find(i)]\nprint(*Ans)", "label": 0, "name1": "s491119021.py", "name2": "s236967102.py"}, {"id": 372, "code1": "AI, AO, _, AJ, AL, _, _ = map(int, input().split())\n\nodd = AI % 2 + AJ % 2 + AL % 2\nif odd == 0 or odd == 3:\n    print(AI + AO + AJ + AL)\nelif odd == 1:\n    print(AI + AO + AJ + AL - 1)\nelse:\n    if AI + AJ + AL == 2:\n        print(AO)\n    else:\n        print(AI + AO + AJ + AL - 1)\n", "code2": "I,O,R,J,L,S,Z=map(int,input().split())\na=(I//2+J//2+L//2)*2\nb=0\nif I*J*L!=0:b=(2*((I-1)//2+(J-1)//2+(L-1)//2)+3)\nprint(max(a,b)+O)", "label": 1, "name1": "s383965736.py", "name2": "s966423542.py"}, {"id": 148, "code1": "#!/usr/bin/env python\n# -*- coding: utf-8 -*-\nimport math\n\ndef sieve_of_erastosthenes(num):\n    input_list = [False if i % 2 == 0 or i % 3 == 0 or i % 5 == 0 else True for i in range(num)]\n    input_list[0] = input_list[1] = False\n    input_list[2] = input_list[3] = input_list[5] = True\n    sqrt = math.sqrt(num)\n\n    for serial in range(3, num, 2):\n        if serial >= sqrt:\n            return input_list\n        for s in range(serial ** 2, num, serial): \n            input_list[s] = False\n\nprimeTable = sieve_of_erastosthenes((10**6))\n\nwhile True:\n    n = int(input())\n    if n == 0:\n        break\n    print(sum([1 if primeTable[i] == True else 0 for i in range(n+1,2*n+1)]))", "code2": "prime = [True for i in range(250001)]\nprime[0] = prime[1] = False\nfor i in range(2, 500):\n    if prime[i]:\n        for j in range(2, 250000 // i + 1):\n            prime[i * j] = False\n\nwhile True:\n    n = int(input())\n    if n == 0:\n        break\n    print(prime[n + 1 : n * 2 + 1].count(True))\n", "label": 1, "name1": "s839739261.py", "name2": "s672275091.py"}, {"id": 561, "code1": "n,k = map(int,input().split())\nprint(min(n%k,-((n%k)-k)))", "code2": "from enum import Enum\nimport sys\nimport math\n\n\nA,B,DEGREE = map(int,input().split())\n\nrad = math.radians(DEGREE)\n\nS = A*B*math.sin(rad)/2.0\nC = math.sqrt(A*A+B*B-2*A*B*math.cos(rad))\nh = 2*S/A\n\nprint(\"%.10f %.10f %.10f\"%(S,A+B+C,h))\n\n", "label": 0, "name1": "s413819466.py", "name2": "s944812786.py"}, {"id": 83, "code1": "import sys\nd={'A\\n':0,'B\\n':0,'AB\\n':0,'O\\n':0}\nfor e in sys.stdin:d[e.split(',')[1]]+=1\nfor b in d:print(d[b])\n", "code2": "if __name__ == '__main__':\n\n\tans = []\n\twhile True:\n\t\ttry:\n\t\t\tn,b = input().split(\",\")\n\t\t\tans.append(b)\n\t\texcept EOFError:\n\t\t\tbreak\n\n\tprint(ans.count(\"A\"))\n\tprint(ans.count(\"B\"))\n\tprint(ans.count(\"AB\"))\n\tprint(ans.count(\"O\"))\n\n", "label": 1, "name1": "s566437610.py", "name2": "s525017039.py"}, {"id": 864, "code1": "N, M = map(int, input().split())\n\nAC_count = 0\nWA_count = 0\nWA_count_dict = {}\nis_not_AC = {}\n\nfor m in range(M):\n    p, S = input().split()\n    p = int(p)\n    \n    if p not in is_not_AC.keys():\n        is_not_AC[p] = True\n        WA_count_dict[p] = 0\n        \n    if is_not_AC[p]:\n        if S==\"WA\":\n            WA_count_dict[p] += 1\n        else:\n            AC_count += 1\n            is_not_AC[p] = False\n            \nfor k in is_not_AC.keys():\n    if is_not_AC[k] == False:\n        WA_count += WA_count_dict[k]\n\nprint(AC_count, WA_count)", "code2": "a, b, c, x, y = [int(i) for i in input().strip().split(\" \")]\n\nz = min(x, y)\ntotal = 0\n\nif (a+b) > c*2:\n    total += c * 2 * z\nelse:\n    total += a * z + b * z\n\nif (a < c * 2):\n    total += (x-z) * a\nelse:\n    total += (x-z) * c * 2\n\nif (b < c * 2):\n    total += (y-z) * b\nelse:\n    total += (y-z) * c * 2\n\nprint(total)\n", "label": 0, "name1": "s383689589.py", "name2": "s005706927.py"}, {"id": 655, "code1": "n=int(raw_input())\ng=[[1000000]*n for _ in xrange(n)]\nfor i in xrange(n):\n    g[i][i]=0\nfor i in xrange(n):\n    r=map(int,raw_input().split())\n    for j in r[2:]:\n        g[r[0]-1][j-1]=1\nfor k in xrange(n):\n    for i in xrange(n):\n        for j in xrange(n):\n            g[i][j]=min(g[i][j],g[i][k]+g[k][j])\nm=int(raw_input())\nfor i in xrange(m):\n    s,d,v=map(int,raw_input().split())\n    s-=1\n    d-=1\n    if g[s][d]<v:\n        print(g[s][d]+1)\n    else:\n        print('NA')", "code2": "N = int(input())\na = list(map(int, input().split()))\n\nans = 0\nfor i in range(N):\n  if a[a[i]-1] == i+1:\n    ans += 1\nprint(ans//2)", "label": 0, "name1": "s227640621.py", "name2": "s364926848.py"}, {"id": 707, "code1": "import sys\nsys.setrecursionlimit(10**7) #\u518d\u5e30\u95a2\u6570\u306e\u4e0a\u9650,10**5\u4ee5\u4e0a\u306e\u5834\u5408python\nimport math\nfrom copy import copy, deepcopy\nfrom copy import deepcopy as dcp\nfrom operator import itemgetter\nfrom bisect import bisect_left, bisect, bisect_right#2\u5206\u63a2\u7d22\n#bisect_left(l,x), bisect(l,x)#a\u306f\u30bd\u30fc\u30c8\u6e08\u307f\u3067\u3042\u308b\u5fc5\u8981\u3042\u308a\u3002a\u306e\u4e2d\u304b\u3089x\u672a\u6e80\u306e\u8981\u7d20\u6570\u3092\u8fd4\u3059\u3002right\u3060\u3068\u4ee5\u4e0b\nfrom collections import deque, defaultdict\n#deque(l), pop(), append(x), popleft(), appendleft(x)\n#q.rotate(n)\u3067 \u2192 \u306bn\u56de\u30ed\u30fc\u30c6\u30fc\u30c8\nfrom collections import Counter#\u6587\u5b57\u5217\u3092\u500b\u6570\u30ab\u30a6\u30f3\u30c8\u8f9e\u66f8\u306b\u3001\n#S=Counter(l),S.most_common(x),S.keys(),S.values(),S.items()\nfrom itertools import accumulate,combinations,permutations,product#\u7d2f\u7a4d\u548c\n#list(accumulate(l))\nfrom heapq import heapify,heappop,heappush\n#heapify(q),heappush(q,a),heappop(q) #q=heapify(q)\u3068\u3057\u306a\u3044\u3053\u3068\u3001\u8fd4\u308a\u5024\u306fNone\nfrom functools import reduce,lru_cache#pypy\u3067\u3082\u3046\u3054\u304f\n#@lru_cache(maxsize = None)#maxsize\u306f\u4fdd\u5b58\u3059\u308b\u30c7\u30fc\u30bf\u6570\u306e\u6700\u5927\u5024\u30012**n\u304c\u6700\u3082\u9ad8\u52b9\u7387\nfrom decimal import Decimal\n\ndef input(): \n    x=sys.stdin.readline()\n    return x[:-1] if x[-1]==\"\\n\" else x\ndef printe(*x):print(\"## \",*x,file=sys.stderr)\ndef printl(li): _=print(*li, sep=\"\\n\") if li else None\ndef argsort(s, return_sorted=False): \n    inds=sorted(range(len(s)), key=lambda k: s[k])\n    if return_sorted: return inds, [s[i] for i in inds]\n    return inds\ndef alp2num(c,cap=False): return ord(c)-97 if not cap else ord(c)-65\ndef num2alp(i,cap=False): return chr(i+97) if not cap else chr(i+65)\ndef matmat(A,B):\n    K,N,M=len(B),len(A),len(B[0])\n    return [[sum([(A[i][k]*B[k][j]) for k in range(K)]) for j in range(M)] for i in range(N)]\ndef matvec(M,v):\n    N,size=len(v),len(M)\n    return [sum([M[i][j]*v[j] for j in range(N)]) for i in range(size)]\ndef T(M):\n    n,m=len(M),len(M[0])\n    return [[M[j][i] for j in range(n)] for i in range(m)]\ndef binr(x): return bin(x)[2:]\ndef bitcount(x): #x\u306f64bit\u6574\u6570\n    x= x - ((x >> 1) & 0x5555555555555555)\n    x= (x & 0x3333333333333333) + ((x >> 2) & 0x3333333333333333)\n    x= (x + (x >> 4)) & 0x0f0f0f0f0f0f0f0f \n    x+= (x >> 8); x+= (x >> 16); x+= (x >> 32) \n    return x & 0x7f\n\ndef main():\n    mod = 1000000007\n    #w.sort(key=itemgetter(1),reverse=True)  #\u4e8c\u500b\u76ee\u306e\u8981\u7d20\u3067\u964d\u9806\u4e26\u3073\u66ff\u3048\n\n    #N = int(input())\n    a,b,c = map(int, input().split())\n\n\n    print(max(0,c-(a-b)))\n\n\n\nif __name__ == \"__main__\":\n    main()", "code2": "####################\n#  AC:     ms (PyPy)\n####################\n\ndef main():\n    MOD = 10**6+3\n    # preprocess\n    fac = [None] * (MOD+1)\n    fac[0] = fac[1] = 1\n    for i in range(2, MOD+1):\n        fac[i] = (fac[i-1] * i) % MOD\n\n    Q = int(input())\n    for i in range(Q):\n        x, d, n = map(int, input().split())\n\n        if d == 0:\n            print(pow(x, n, MOD))\n            continue\n        \n        xd = (x * pow(d, MOD-2, MOD)) % MOD\n        if xd == 0 or xd + (n-1) >= MOD:\n            print(0)\n            continue\n\n        print(pow(d, n, MOD) * fac[xd+(n-1)] * pow(fac[xd-1], MOD-2, MOD) % MOD)\n\n\nif __name__ == \"__main__\":\n    main()", "label": 0, "name1": "s948835843.py", "name2": "s606450603.py"}, {"id": 546, "code1": "while(True):\n    n = int(input())\n    if not n: break\n    maxind = 0\n    maxnum = 0\n    for _ in range(n):\n        a,b,c = map(int,input().split())\n        if maxnum < b+c: maxind=a; maxnum=b+c\n    print(maxind,maxnum)\n", "code2": "import sys\nd={'A\\n':0,'B\\n':0,'AB\\n':0,'O\\n':0}\nfor e in sys.stdin:d[e.split(',')[1]]+=1\nfor b in d:print(d[b])\n", "label": 0, "name1": "s695355783.py", "name2": "s566437610.py"}, {"id": 259, "code1": "import re\n\ns = input().replace('?', '.')\nt = input()\n\nif len(t)>len(s):\n  print('UNRESTORABLE')\nelif len(t)==len(s):\n  if re.match(s, t):\n    print(t)\n  else:\n    print('UNRESTORABLE')\nelse:\n  for i in range(len(s)-len(t)+1):\n    check_str = s[len(s)-len(t)-i:len(s)-i]\n    if re.match(check_str, t):\n      break\n\n  if i==len(s)-len(t):\n    print('UNRESTORABLE')\n  else:\n    ans = s[:len(s)-len(t)-i] + t + s[len(s)-i:]\n    ans = ans.replace('.', 'a')\n    print(ans)", "code2": "nl = lambda: list(map(int, input().split()))\nsl = lambda: input().split()\nn = lambda: int(input())\ns = lambda: input()\n\nS = s()\nT = s()\n\ncands = set()\nfor i in range(len(S) - len(T) + 1):\n    match = True\n    for j in range(len(T)):\n        if S[i+j] == T[j] or S[i+j] == '?':\n            continue\n        match = False\n        break\n    if match:\n        cand = S[:i] + T + S[i+len(T):]\n        scand = ''\n        for c in cand:\n            if c == '?':\n                scand += 'a'\n            else:\n                scand += c\n        cands.add(scand)\n\nif len(cands) == 0:\n    print('UNRESTORABLE')\nelse:\n    print(sorted(list(cands))[0])\n", "label": 1, "name1": "s389752250.py", "name2": "s617830873.py"}, {"id": 143, "code1": "num = list(map(int, input().split()))\nnum.sort()\n\nx = num[2] * 3 - sum(num)\n\nif x%2 == 0:\n  ans = int(x/2)\nelse:\n  ans = int(x//2 + 2)\n\nprint(ans)\n", "code2": "A,B,C = map(int,input().split())\nmx = max(A,B,C)\nrem = mx*3 - (A+B+C)\nprint(rem//2+2 if rem%2 else rem//2)", "label": 1, "name1": "s512155836.py", "name2": "s154829848.py"}, {"id": 822, "code1": "import itertools\n\ndef is_edge_exists(node1, node2, edges):\n\tfor edge in edges:\n\t\tif node1 in edge and node2 in edge:\n\t\t\treturn True\n\treturn False\n\ndef route_count(route, edges):\n\tif route[0]!=1:\n\t\treturn 0\n\tfor i in range(len(route)-1):\n\t\tif not is_edge_exists(route[i], route[i+1], edges):\n\t\t\treturn 0\n\treturn 1\n\nN, M = map(int, input().split())\nedges = [list(map(int, input().split())) for i in range(M)]\nnodes = [i+1 for i in range(N)]\nroutes = list(itertools.permutations(nodes))\n\nans = 0\nfor route in routes:\n\tans += route_count(route, edges)\nprint(ans)", "code2": "#!/usr/bin/env python3\n\n#import\n#import math\n#import numpy as np\nN = int(input())\nS = list(input())\n\nre = S.count(\"E\")\nrw = N - re\nle = 0\nlw = 0\n\nans = 10**9\n\nfor i in range(N):\n    if S[i] == \"E\":\n        re -= 1\n        ans = min(ans, re + lw)\n        le += 1\n    else:\n        rw -= 1        \n        ans = min(ans, re + lw)\n        lw += 1\n\nprint(ans)\n\n\n", "label": 0, "name1": "s952388313.py", "name2": "s258995068.py"}, {"id": 522, "code1": "\ndef resolve():\n    N, A, B = map(int, input().split())\n    X = list(map(int, input().split()))\n\n    ans = 0\n    for i in range(N - 1):\n        res = min((X[i + 1] - X[i]) * A, B)\n        ans += res\n        \n    print(ans)\n\n\nif __name__ == \"__main__\":\n    resolve()", "code2": "def solve():\n    N = int(input())\n    A = list(map(int, input().split()))\n    b = 0\n    c = 0\n    d = 0\n    for a in A:\n        if a == b:\n            c += 1\n        if a != b:\n            d += c//2\n            b = a\n            c = 1\n    d += c//2\n    b = a\n    c = 0\n    print(d)\n    \n\nif __name__ == '__main__':\n    solve()", "label": 0, "name1": "s398154186.py", "name2": "s237957783.py"}, {"id": 613, "code1": "X = input()\ns_cnt = 0\nans = 0\nfor s in X:\n    if s=='S':\n        s_cnt += 1\n    else:\n        if s_cnt > 0:\n            ans += 1\n            s_cnt -= 1\n\nprint(len(X) - 2*ans)", "code2": "a, b = map(int, input().split())\nif a > b:\n    print(a-1)\nelse:\n    print(a)", "label": 0, "name1": "s514074837.py", "name2": "s737717931.py"}, {"id": 323, "code1": "####################\n#  AC:     ms (PyPy)\n####################\n\ndef main():\n    MOD = 10**6+3\n    # preprocess\n    fac = [None] * (MOD+1)\n    fac[0] = fac[1] = 1\n    for i in range(2, MOD+1):\n        fac[i] = (fac[i-1] * i) % MOD\n\n    Q = int(input())\n    for i in range(Q):\n        x, d, n = map(int, input().split())\n\n        if d == 0:\n            print(pow(x, n, MOD))\n            continue\n        \n        xd = (x * pow(d, MOD-2, MOD)) % MOD\n        if xd == 0 or xd + (n-1) >= MOD:\n            print(0)\n            continue\n\n        print(pow(d, n, MOD) * fac[xd+(n-1)] * pow(fac[xd-1], MOD-2, MOD) % MOD)\n\n\nif __name__ == \"__main__\":\n    main()", "code2": "mod = 10 ** 6 + 3\n\n\nclass Combi():\n    def __init__(self, N, mod):\n        self.power = [1 for _ in range(N+1)]\n        self.rev = [1 for _ in range(N+1)]\n        self.mod = mod\n        for i in range(2, N+1):\n            self.power[i] = (self.power[i-1]*i) % self.mod\n        self.rev[N] = pow(self.power[N], self.mod-2, self.mod)\n        for j in range(N, 0, -1):\n            self.rev[j-1] = (self.rev[j]*j) % self.mod\n\n    def com(self, K, R):\n        if K < R:\n            return 0\n        else:\n            return ((self.power[K])*(self.rev[K-R])*(self.rev[R])) % self.mod\n\n    def pom(self, K, R):\n        if K < R:\n            return 0\n        else:\n            return (self.power[K])*(self.rev[K-R]) % self.mod\n\n    def powe(self, K):\n        return self.power[K]\n\n    def rev_powe(self, K):\n        return self.rev[K]\n\n\ncombi = Combi(mod-1, mod)\n\n\ndef rev(X):\n    return pow(X, mod-2, mod)\n\n\ndef count_div(L, R, D):\n    return not bool(R//D - (L-1)//D)\n\n\ndef solve():\n    x, d, n = map(int, input().split())\n    if d % (mod) == 0:\n        print(pow(x,n,mod))\n        return\n    elif d % (mod) != 0:\n        y = rev(d)*x\n        if count_div(y, y+n-1, mod):\n            y = y % mod\n            ans = pow(d, n, mod)*combi.powe(y+n-1) * combi.rev_powe(y)*y\n            print(ans % mod)\n            return\n        else:\n            ans = 0\n            print(ans % mod)\n            return\n\n\ndef main():\n    Q = int(input())\n    for i in range(Q):\n        solve()\n\n\nif __name__ == \"__main__\":\n    main()\n", "label": 1, "name1": "s606450603.py", "name2": "s344170533.py"}, {"id": 639, "code1": "def main():\n    n = int(input())\n    x,y = 1,1\n    for _ in range(n):\n        t,a = map(int,input().split())\n        z = -1*min(-x//t,-y//a)\n        x = z*t\n        y = z*a\n        # print(x,y)\n    print(x+y)\n\nmain()", "code2": "import itertools\n\nN = int(input())\nP = tuple(map(int, input().split()))\nQ = tuple(map(int, input().split()))\n\nfor i, pat in enumerate(itertools.permutations(range(1, N + 1)), N):\n    if pat == P:\n        a = i\n    if pat == Q:\n        b = i\n\nans = abs(a - b)\n\nprint(ans)\n", "label": 0, "name1": "s902948767.py", "name2": "s509770499.py"}, {"id": 770, "code1": "#coding:utf-8\n\nn = input()\nl = map(int, raw_input(). split())\nl.sort()\nfor i in xrange(n):\n    print(l[i]),", "code2": "N = int(input())\n\ndef gcd(a, b):\n    while b:\n        a, b = b, a % b\n    return a\n\ndef lcm(a, b):\n    return a * b // gcd(a, b)\n\ns = int(input())\nfor i in range(N - 1):\n    tmp = int(input())\n    s = lcm(s, tmp)\n\nprint(s)\n", "label": 0, "name1": "s666694142.py", "name2": "s550486741.py"}, {"id": 60, "code1": "a = int(input())\nb = int(input())\nc = int(input())\nd = int(input())\n\nt = a+b+c+d\nx = t // 60\ny = t - (x*60)\nprint(x)\nprint(y)\n", "code2": "t=sum([input()for i in range(4)])\nprint \"%d\\n%d\"%(t/60,t%60)", "label": 1, "name1": "s681424325.py", "name2": "s212246504.py"}, {"id": 595, "code1": "A,B,C=map(int,input().split())\nans = 1\nif (A%2 != B%2) and (A%2 == C%2):\n  A += 1\n  C += 1\nelif (A%2 == B%2) and (A%2 != C%2):\n  A += 1\n  B += 1\nelif (A%2 != B%2) and (B%2 == C%2):\n  C += 1\n  B += 1\nelse:\n  ans = 0\nL = [A,B,C]\nL.sort()\nans += (L[2]-L[1])//2 + (L[2]-L[0])//2\nprint( ans )\n", "code2": "import sys\n\nimport bisect\n\n# from collections import Counter, deque, defaultdict\n\n# import copy\n# from heapq import heappush, heappop, heapify\n# from fractions import gcd\n# import itertools\n# from operator import attrgetter, itemgetter\nimport math\n\n# import numpy as np\n\nreadline = sys.stdin.readline\nMOD = 10 ** 9 + 7\nINF = float('INF')\nsys.setrecursionlimit(10 ** 5)\n\n\ndef main():\n    q = int(input())\n\n    for i in range(q):\n        a, b = list(map(int, readline().split()))\n\n        if a > b:\n            a, b = b, a\n\n        if a == b or a + 1 == b:\n            print(2 * a - 2)\n        else:\n            ab = a * b\n            ok = 0\n            ng = int(ab ** 0.5) + 1000000\n            while abs(ng - ok) > 1:\n                mid = (ok + ng) // 2\n                if mid ** 2 < ab:\n                    ok = mid\n                else:\n                    ng = mid\n            c = ok\n\n            if c * (c + 1) < ab:\n                print(2 * c - 1)\n            else:\n                print(2 * c - 2)\n\n\nif __name__ == '__main__':\n    main()\n", "label": 0, "name1": "s612094036.py", "name2": "s587240804.py"}, {"id": 251, "code1": "N = int(input())\nA = [int(_) - 1 for _ in input().split()]\nans = 0\nfor i in range(N):\n    if i < A[i] and A[A[i]] == i:\n        ans += 1\nprint(ans)\n", "code2": "n=int(input())\na=list(map(int,input().split()))\n\nans = 0\nfor i in range(n):\n\n    if a[i] > i+1 and i+1 == a[a[i]-1]:\n\n        ans+=1\n\n    i+=1\n\nprint(ans)", "label": 1, "name1": "s038697693.py", "name2": "s366404563.py"}, {"id": 435, "code1": "# \u9802\u70b9 v \u306e\u6240\u5c5e\u3059\u308b\u30b0\u30eb\u30fc\u30d7\u3092\u8abf\u3079\u308b\ndef root(v, uni):\n  if uni[v] < 0:  # v \u304c\u89aa\u306e\u5834\u5408\n    return v\n  else:           # v \u304c\u5b50\u306e\u5834\u5408\n    uni[v] = root(uni[v], uni)  # \u89aa\u306eroot\u3092\u8abf\u3079\u308b\n    return uni[v]\n\n# \u9802\u70b9 a \u3068\u9802\u70b9 b \u3092\u3064\u306a\u3050\u3002\u3082\u3068\u3082\u3068\u540c\u3058\u30b0\u30eb\u30fc\u30d7\u306e\u3068\u304d\u3001False \u3092\u8fd4\u3059\ndef connect(a, b, uni):\n  # \u307e\u305a\u306f\u305d\u308c\u305e\u308c\u6839\u306e\u756a\u53f7\u306b\u7f6e\u304d\u63db\u3048\u308b\n  ra = root(a, uni)\n  rb = root(b, uni)\n  if ra == rb:  # a \u3068 b \u304c\u305d\u3082\u305d\u3082\u540c\u3058\u30b0\u30eb\u30fc\u30d7\u306b\u5c5e\u3057\u3066\u3044\u308b\u306a\u3089\u5373\u7d42\u4e86\n    return False\n\t\n  # ra \u3092\u5927\u304d\u306a\u30b0\u30eb\u30fc\u30d7\u306b\u3057\u305f\u3044\u306e\u3067\u3001\u9006\u3067\u3042\u308c\u3070\u5165\u308c\u66ff\u3048\u308b\n  if uni[ra] > uni[rb]: # rb\u306e\u65b9\u304c\u8981\u7d20\u6570\u304c\u591a\u3051\u308c\u3070\n    tmp = ra\n    ra  = rb \n    rb  = tmp\n\n  # ra \u3068 rb \u3092\u7d50\u5408\u3057\u3001rb \u306e\u89aa\u3092 ra \u3068\u3059\u308b\n  uni[ra] += uni[rb]\n  uni[rb] = ra\n  return True\n      \n##\nN, K, L = map(int, input().split())\n\nroad = [-1]*(N+1)\nrail = [-1]*(N+1)\n\nfor i in range(K):\n  a, b = map(int, input().split())\n  connect(a, b, road)\n\nfor i in range(L):\n  a, b = map(int, input().split())\n  connect(a, b, rail)\n\n\n##\ndp = [0]*(N+1)\nfor i in range(1, N+1):\n  dp[i] = (root(i, road), root(i, rail))\n\ndic = {}\nfor i in range(1, N+1):\n  key = dp[i]\n  if key not in dic:\n    dic[key] = 1\n  else:\n    dic[key] += 1\n\nfor i in range(1, N+1):\n  ans = dic[dp[i]]\n  if i == N:\n    print(ans)\n  else:\n    print(ans, end=\" \")\n", "code2": "from collections import defaultdict\n\nclass Unionfind:\n\n    __slots__ = ['parents','sizes']\n\n    def __init__(self, n):\n        self.parents = list(range(n))\n        self.sizes = [1]*n\n\n    def root(self, x):\n        if self.parents[x] == x:\n            return x\n        else:\n            root_x = self.root(self.parents[x])\n            self.parents[x] = root_x\n            return root_x\n\n    def unite(self, x, y):\n        x = self.root(x); y = self.root(y)\n        if x == y:\n            return\n        if self.sizes[x] < self.sizes[y]:\n            x, y = y, x\n        self.sizes[x] += self.sizes[y]\n        self.parents[y] = x\n\n    def same(self, x, y):\n        return self.root(x) == self.root(y)\n\n    # \u96c6\u5408\u81ea\u4f53\u306e\u6570 ({1,2}, {3}, {4} : kind -> 3)\n    def kind(self):\n        for v in range(N):\n            self.root(v)\n        return len(list(set(self.parents)))\n\n    # x\u304c\u5c5e\u3059\u308b\u96c6\u5408\u306e\u8981\u7d20\u306e\u6570\u3000({1,2,3} : size(2) -> 3)\n    def size(self, x):\n        self.sizes[x] = self.sizes[self.root(x)]\n        return self.sizes[x]\n\nN, K, L = map(int,input().split())\nroad = Unionfind(N)\ntrain = Unionfind(N)\n\nfor _ in range(K):\n    p, q = map(int,input().split())\n    p -= 1; q -= 1\n    road.unite(p, q)\n\nfor _ in range(L):\n    r, s = map(int,input().split())\n    r -= 1; s -= 1\n    train.unite(r, s)\n\ncnt = defaultdict(int)\n\nfor i in range(N):\n    key = (road.root(i), train.root(i))\n    cnt[key] += 1\n\nans_list = []\nfor i in range(N):\n    key = (road.root(i), train.root(i))\n    ans = cnt[key]\n    ans_list.append(ans)\n\nprint(*ans_list)", "label": 1, "name1": "s866905054.py", "name2": "s028456939.py"}, {"id": 766, "code1": "n = input()\nfor i in sorted(map(int, raw_input().split())):\n print i ,", "code2": "iN = int(input())\naA = [0] + [int(_) for _ in input().split()] + [0]\niAll = sum(map(lambda i :abs(aA[i+1]-aA[i]),range(iN+1)))\nprint(\"\\n\".join(map(lambda i:str( iAll - abs(aA[i-1]-aA[i]) - abs(aA[i]-aA[i+1]) + abs(aA[i-1]-aA[i+1])), range(1,iN+1))))\n", "label": 0, "name1": "s740416119.py", "name2": "s167602198.py"}, {"id": 363, "code1": "'''\n????????\u00a3????????????1??????????????????\n??\\???C++??\u00a7????????????????\u00a7\u00a3?\u00b1???????????????????????????????????????\u00a7???\n??????python??\u00a7??????????????????Accept??\u00a7??????????????????\n????????\u00a3??\u00a8optimization??????????????\u00a7??????\n??\u00a7????????????Wrong Answer??\u00a7?????????\n???????????????????????????????????????????????????\nOnline Judge???????????????Public Solutions??\u00a7????????????nanae?????????python3????????????????????????\n????????\u00a3??\u00a8?????????????????????\n???????????????????????????0.06?\u00a7????????????\u00a7??????\n'''\n\nimport queue\nv,e,s=map(int,input().split())\nedge=[]\ninf =1000000100\nfor i in range(v):\n    edge.append([])\n\nfor i in range(e):\n    vs,vt,d=map(int,input().split())\n    edge[vs].append((vt,d))\n    \ndis=[]\nfor i in range(v):\n    dis.append(inf)\n\ndis[s]=0\n\nq = queue.PriorityQueue()\nq.put((0,s))\n\n'''\nwhile(not q.empty()):\n    now=q.get()\n    nowv=now[1]\n    for (vt,d) in edge[nowv]:\n        if dis[vt]>dis[nowv]+d:\n            dis[vt]=dis[nowv]+d\n            q.put((dis[vt],vt))\n'''\n\nfinished=0\nwhile(finished<v and not q.empty()):\n    now=q.get()\n    nowv=now[1]\n    if now[0]>dis[nowv]: continue\n    for (vt,d) in edge[nowv]:\n        if dis[vt]>dis[nowv]+d:\n            dis[vt]=dis[nowv]+d\n            q.put((dis[vt],vt))\n    finished+=1       \n\nfor i in range(v):\n    if dis[i]>=inf:\n        print(\"INF\")\n    else:\n        print(dis[i])", "code2": "from heapq import heappush,heappop\nINF=10**18\nn,m,r=map(int,input().split())\ne=[[] for _ in range(n)]\nd=[INF]*n\nfor i in range(m):\n  a,b,c=map(int,input().split())\n  e[a].append((b,c))\nq=[]\nheappush(q,(0,r))\nd[r]=0\nwhile q:\n  dist,node=heappop(q)\n  for to,cost in e[node]:\n    if d[to]>cost+dist:\n      d[to]=cost+dist\n      heappush(q,(d[to],to))\nfor i in d:\n  if i!=INF:print(i)\n  else:print('INF')\n", "label": 1, "name1": "s256416940.py", "name2": "s737089154.py"}, {"id": 931, "code1": "P=10**9+7\ndef egcd(a, b):\n    (x, lastx) = (0, 1)\n    (y, lasty) = (1, 0)\n    while b != 0:\n        q = a // b\n        (a, b) = (b, a % b)\n        (x, lastx) = (lastx - q * x, x)\n        (y, lasty) = (lasty - q * y, y)\n    return (lastx, lasty, a)\ndef inv(x):\n    return egcd(x,P)[0]\nN=int(input())\nFact=[0 for i in range(N+1)]\nFinv=[0 for i in range(N+1)]\nFact[0]=1\nFinv[0]=1\nfor i in range(N):\n    Fact[i+1]=((i+1)*Fact[i])%P\n    Finv[i+1]=(Finv[i]*inv(i+1))%P\nSGN=[0 for i in range(N)]\nans=0\nfor k in range(N):\n    if 2*k-N>=0:\n        SGN[k]=(((Fact[k-1]*Fact[k])%P)*Finv[2*k-N])%P\n        ans=(ans+k*(SGN[k]-SGN[k-1]))%P\nprint(ans)\n", "code2": "N=int(input())\na=list(map(int,input().split()))\ndef cond(n):\n    L=(0,-1)\n    for i in range(1,N):\n        if a[i]>=n and a[i-1]>=n:\n            L=(i,1)\n        elif a[i]<n and a[i-1]<n:\n            L=(i,0)\n\n    R=(2*N-1,-1)\n    for i in range(2*N-3,N-2,-1):\n        if a[i]>=n and a[i+1]>=n:\n            R=(i,1)\n        elif a[i]<n and a[i+1]<n:\n            R=(i,0)\n\n    if L[1]==-1 and R[1]==-1:\n        return a[0]>=n\n    elif L[1]==-1:\n        return R[1]==1\n    elif R[1]==-1:\n        return L[1]==1\n    elif L[1]==R[1]:\n        return R[1]==1\n    else:\n        if L[1]==0:\n            return N-1-L[0]>R[0]-(N-1)\n        else:\n            return N-1-L[0]<R[0]-(N-1)\n\n\nstart=1\nend=2*N-1\nwhile end-start>1:\n    test=(end+start)//2\n    if cond(test):\n        start=test\n    else:\n        end=test\nif cond(end):\n    print(end)\nelse:\n    print(start)", "label": 0, "name1": "s436731704.py", "name2": "s882473833.py"}, {"id": 708, "code1": "A, B, C = map(int, input().split())\n\n\nH = C-(A-B)\n\nif H < 0:\n    print(\"0\")\nelse:\n    print(H)\n\n\n", "code2": "a,b,c = map(int,input().split())\n\nprint(min(a+b,b+c,c+a))\n", "label": 0, "name1": "s336832003.py", "name2": "s223078477.py"}, {"id": 404, "code1": "#coding:utf-8\n\nn = input()\nl = map(int, raw_input(). split())\nl.sort()\nfor i in xrange(n):\n    print(l[i]),", "code2": "input() # skip\nnums = map(int, input().split())\n\nsorted_nums = sorted(nums)\n\nprint(' '.join(map(str, sorted_nums)))", "label": 1, "name1": "s666694142.py", "name2": "s812022393.py"}, {"id": 645, "code1": "import itertools\n\nN = int(input())\nP = tuple(map(int, input().split()))\nQ = tuple(map(int, input().split()))\n\nfor i, pat in enumerate(itertools.permutations(range(1, N + 1)), N):\n    if pat == P:\n        a = i\n    if pat == Q:\n        b = i\n\nans = abs(a - b)\n\nprint(ans)\n", "code2": "inf = 2**31\n\nn = int(raw_input())\nG = [[inf]*n for _ in range(n)]\nref = {}\ninputs = [map(int,raw_input().split()) for _ in range(n)]\nfor i in range(n): ref[inputs[i][0]] = i\nfor i in range(n):\n    for j in inputs[i][2:]:\n        G[i][ref[j]] = 1\n        \nfor k in range(n):\n    for i in range(n):\n        for j in range(n):\n            G[i][j] = min(G[i][j],G[i][k]+G[k][j])\n            \np = int(raw_input())\nfor loop in range(p):\n    s,d,v = map(int,raw_input().split())\n    dist = G[ref[s]][ref[d]]\n    print dist+1 if dist+1 <= v else \"NA\"", "label": 0, "name1": "s509770499.py", "name2": "s378122232.py"}, {"id": 403, "code1": "#coding:utf-8\n\nn = input()\nl = map(int, raw_input(). split())\nl.sort()\nfor i in xrange(n):\n    print(l[i]),", "code2": "#!/usr/bin/env python\n\ndef q_sort(a):\n        if len(a)==0:\n                return []\n        pivot  = a[0]\n        return q_sort([i for i in a if i < pivot ]) + [i for i in a if i == pivot ] + q_sort([i for i in a if pivot < i])\n\n\n\nn = int( raw_input() )\narray =  [ int(i) for i in raw_input().split(\" \") ]\nfor i in q_sort(array):\n        print i,", "label": 1, "name1": "s666694142.py", "name2": "s289691256.py"}, {"id": 941, "code1": "n = int(input())\nA = list(map(int, input().split()))\nl = 1\nr = 2*n\nwhile l < r-1:\n    mid = (l+r)//2\n    B = []\n    C = []\n    for i in range(0,2*n-1):\n        B.append(A[i] >= mid)\n        C.append(0)\n    for i in range(1,2*n-1):\n        if B[i-1] == B[i]:\n            C[i] = 1\n    for i in range(0,2*n-2):\n        if B[i+1] == B[i]:\n            C[i] = 1\n    mi = 2*n\n    ans = False\n    for i in range(0,2*n-1):\n        if C[i] == 1:\n            if abs(i-n+1) < mi:\n                mi = abs(i-n+1)\n                ans = B[i]\n    if mi == 2*n:   #specialfall\n        ans = ((n+1)%2)^B[n-1]\n    if ans == True:\n        l = mid\n    else:\n        r = mid\nprint(l)\n        \n", "code2": "ans = [1]*365\nfor i in range(365):\n    ans[i]=i%25 + 1\nfor i in range(365):\n    print(ans[i])", "label": 0, "name1": "s087982630.py", "name2": "s964378808.py"}, {"id": 109, "code1": "A,B,C = map(int, input().split())\ncount = 0\nlist1 = [A,B]\n\nfor i in range(min(list1),max(list1)):\n    if C == i:\n        count = 1\n \nif count == 1:\n    print(\"Yes\")\nelse:\n    print(\"No\")", "code2": "a,b,c=map(int,input().split())\nif (a>c and b<c) or (a<c and b>c):\n  print(\"Yes\")\nelse:\n  print(\"No\")", "label": 1, "name1": "s230128846.py", "name2": "s473634907.py"}, {"id": 215, "code1": "n = input()\np, q = [-1, -1]\nfor i in xrange(n):\n    t, a = map(int, raw_input().split())\n    if p == -1 or q == -1:\n        p = t\n        q = a\n        continue\n    if t >= p and a >= q:\n        p = t\n        q = a\n    else:\n        z = max(p / t + (p % t != 0), q / a + (q % a != 0))\n        p = t * z\n        q = a * z\nprint p + q\n\n", "code2": "N = int(input())\nA = 1\nB = 1\nfor i in range(N):\n    t, a = map(int, input().split())\n    n = max(-(-A // t), -(-B // a))\n\n    A = t * n\n    B = a * n\nprint(A + B)\n", "label": 1, "name1": "s412403305.py", "name2": "s678023406.py"}, {"id": 188, "code1": "a,b=map(int,input().split())\nif b >= a:\n  print(a)\nelse:\n  print(a-1)", "code2": "a, b = map(int, raw_input().split())\nans = a\nif b < a:\n    ans -= 1\nprint ans\n", "label": 1, "name1": "s714654685.py", "name2": "s698471058.py"}, {"id": 89, "code1": "import sys\nimport collections as col\nnum = []\nfor line in sys.stdin:\n\ttako = line[:-1].split(\",\")\n\tnum.append(tako[1])\ntako = col.Counter(num)\na = tako[\"O\"]\ntako[\"O\"] = tako[\"AB\"]\ntako[\"AB\"] = a\nfor i in tako.items():\n\tprint i[1]", "code2": "import sys\ntype=[\"A\",\"B\",\"AB\",\"O\"]\nlist=[line.strip().split(\",\")[1] for line in sys.stdin.readlines()]\nfor i in type:\n    print list.count(i)", "label": 1, "name1": "s223119670.py", "name2": "s131180170.py"}, {"id": 917, "code1": "SA = list(input())\nSB = list(input())\nSC = list(input())\nA = 0\nB = 0\nC = 0\nans = \"\"\nturn = \"a\"\nwhile ans == \"\":\n    if turn == \"a\":\n        if A == len(SA):\n            ans = \"A\"\n        else:\n            turn = SA[A]\n        A +=1\n    if turn == \"b\":\n        if B == len(SB):\n            ans = \"B\"\n        else:\n            turn = SB[B]\n        B += 1\n    if turn == \"c\":\n        if C == len(SC):\n            ans = \"C\"\n        else:\n            turn = SC[C]\n        C += 1\nprint(ans)", "code2": "# ARC075C - Bugged (ABC063C)\ndef main():\n    n = int(input())\n    lst = list(map(int, [input().rstrip() for _ in range(n)]))\n    total = sum(lst)\n    if total % 10 != 0:\n        print(total)\n    else:\n        ans = 0\n        for i in set(lst):\n            if (total - i) % 10 != 0:\n                ans = max(ans, total - i)\n        print(ans)\n\n\nif __name__ == \"__main__\":\n    main()", "label": 0, "name1": "s106587030.py", "name2": "s165497353.py"}, {"id": 355, "code1": "from sys import stdin, setrecursionlimit\n\n\ndef main():\n    input = stdin.buffer.readline\n    x, y = map(int, input().split())\n    count = 0\n    tmp = x\n    while tmp <= y:\n        tmp *= 2\n        count += 1\n    print(count)\n\n\nif __name__ == \"__main__\":\n    setrecursionlimit(10000)\n    main()\n", "code2": "x, y=map(int, input().split())\nans=[]\n\nwhile x<=y:\n    ans.append(x)\n    x*=2\n\nprint(len(ans))", "label": 1, "name1": "s379690682.py", "name2": "s268106998.py"}, {"id": 983, "code1": "# Aizu Problem 0185: Goldbach Conjecture II\n#\nimport sys, math, os, bisect\n\n# read input:\nPYDEV = os.environ.get('PYDEV')\nif PYDEV==\"True\":\n    sys.stdin = open(\"sample-input.txt\", \"rt\")\n\n\ndef primes2(n):\n    \"\"\" Input n>=6, Returns a list of primes, 2 <= p < n \"\"\"\n    n, correction = n-n%6+6, 2-(n%6>1)\n    sieve = [True] * (n//3)\n    for i in range(1,int(n**0.5)//3+1):\n      if sieve[i]:\n        k=3*i+1|1\n        sieve[      k*k//3      ::2*k] = [False] * ((n//6-k*k//6-1)//k+1)\n        sieve[k*(k-2*(i&1)+4)//3::2*k] = [False] * ((n//6-k*(k-2*(i&1)+4)//6-1)//k+1)\n    return [2,3] + [3*i+1|1 for i in range(1,n//3-correction) if sieve[i]]\n\nprimes = primes2(10**6)\npset = set(primes)\n\nwhile True:\n    n = int(input())\n    if n == 0:\n        break\n    S = 0\n    for p in primes:\n        if p > n // 2:\n            break\n        if n - p in pset:\n            S += 1\n    print(S)", "code2": "import sys\nstdin = sys.stdin\n \nsys.setrecursionlimit(10**5) \n \ndef li(): return map(int, stdin.readline().split())\ndef li_(): return map(lambda x: int(x)-1, stdin.readline().split())\ndef lf(): return map(float, stdin.readline().split())\ndef ls(): return stdin.readline().split()\ndef ns(): return stdin.readline().rstrip()\ndef lc(): return list(ns())\ndef ni(): return int(stdin.readline())\ndef nf(): return float(stdin.readline())\n\nfrom heapq import heappush, heappop\n\nn = ni()\nd = list(li())\n\ndef isok(dur: int, d: list):\n    pque = [24]\n    for di in d:\n        heappush(pque, di)\n\n    cur = 0\n    while pque:\n        tmp = heappop(pque)\n        if tmp - cur < dur and tmp >= 12:\n            return False\n        \n        elif tmp - cur < dur:\n            heappush(pque, 24-tmp)\n            \n        else:\n            cur = tmp\n        \n    return True\n\nans = 13\nfor cand in range(12, -1, -1):\n    if isok(cand, d):\n        ans = cand\n        break\n        \nprint(ans) ", "label": 0, "name1": "s372898939.py", "name2": "s479594239.py"}, {"id": 80, "code1": "def main():\n    n=int(input())\n    m=int((2*n)**0.5)\n    if m*(m+1)==n*2:\n        print(\"Yes\")\n        m+=1\n        print(m)\n    else:\n        print(\"No\")\n        exit()\n    \n    ans=[[m-1] for i in range(m)]\n    c=1\n    for i in range(m):\n        for j in range(i+1,m):\n            ans[i].append(c)\n            ans[j].append(c)\n            c+=1\n    for i in ans:\n        print(\" \".join(map(str,i)))\n\n\nif __name__ == '__main__':\n    main()\n\n\n\n\n\n\n", "code2": "# -*- coding: utf-8 -*-\n\n\"\"\"\n\u53c2\u8003\uff1ahttps://img.atcoder.jp/tenka1-2018/editorial.pdf\n\u3000\u3000\u3000https://ferin-tech.hatenablog.com/entry/2018/10/29/135010\n\u3000\u3000\u3000https://babcs2035.hateblo.jp/entry/2018/11/03/143845\n\u3000\u3000\u3000https://naoyat.hatenablog.jp/entry/tenka1-2018-vc\n\u3000\u3000\u3000https://atcoder.jp/contests/tenka1-2018-beginner/submissions/3996670\n\"\"\"\n\nimport sys, re\nfrom collections import deque, defaultdict, Counter\nfrom math import sqrt, hypot, factorial, pi, sin, cos, radians, log10\nif sys.version_info.minor >= 5: from math import gcd\nelse: from fractions import gcd \nfrom heapq import heappop, heappush, heapify, heappushpop\nfrom bisect import bisect_left, bisect_right\nfrom itertools import permutations, combinations, product\nfrom operator import itemgetter, mul\nfrom copy import copy, deepcopy\nfrom functools import reduce, partial\nfrom fractions import Fraction\nfrom string import ascii_lowercase, ascii_uppercase, digits\n\ndef input(): return sys.stdin.readline().strip()\ndef list2d(a, b, c): return [[c] * b for i in range(a)]\ndef list3d(a, b, c, d): return [[[d] * c for j in range(b)] for i in range(a)]\ndef ceil(x, y=1): return int(-(-x // y))\ndef round(x): return int((x*2+1) // 2)\ndef fermat(x, y, MOD): return x * pow(y, MOD-2, MOD) % MOD\ndef lcm(x, y): return (x * y) // gcd(x, y)\ndef lcm_list(nums): return reduce(lcm, nums, 1)\ndef gcd_list(nums): return reduce(gcd, nums, nums[0])\ndef INT(): return int(input())\ndef MAP(): return map(int, input().split())\ndef LIST(): return list(map(int, input().split()))\nsys.setrecursionlimit(10 ** 9)\nINF = float('inf')\nMOD = 10 ** 9 + 7\n\nN = INT()\n\ncnt = 1\nadd = 2\nwhile cnt < N:\n    cnt += add\n    add += 1\n# \u6761\u4ef6\u3092\u6e80\u305f\u3059\u3082\u306e\u3092\u69cb\u6210\u3067\u304d\u308b\nif cnt == N:\n    # \u5404\u90e8\u5206\u96c6\u5408\u306e\u8981\u7d20\u6570:c \u90e8\u5206\u96c6\u5408\u306e\u6570:add\n    c = add - 1\n    ans = list2d(add, c, 0)\n    k = 1\n    for i in range(add):\n        for j in range(i, c):\n            ans[i][j] = k\n            ans[j+1][i] = k\n            k += 1\n    print('Yes')\n    print(add)\n    for i in range(add):\n        print(c, *ans[i])\nelse:\n    print('No')\n", "label": 1, "name1": "s694753497.py", "name2": "s936378682.py"}, {"id": 509, "code1": "S = input()\n\nflag = 'Yes'\nfor i in range(len(S)):\n    if i%2 == 0:\n        if S[i] == 'R' or S[i] == 'U' or S[i] == 'D':\n            pass\n        else:\n            flag = 'No'\n            break\n    if i%2 == 1:\n        if S[i] == 'L' or S[i] == 'U' or S[i] == 'D':\n            pass\n        else:\n            flag = 'No'\n            break\n\nprint(flag)\n", "code2": "from math import *\nn,m=map(int,input().split())\nif(n==1 or m==1):\n    print(1)\nelse:\n    print(ceil((n*m)/2))\n", "label": 0, "name1": "s961835833.py", "name2": "s965203099.py"}, {"id": 942, "code1": "# def makelist(n, m):\n# \treturn [[0 for i in range(m)] for j in range(n)]\n\nN = int(input())\na = [0] + list(map(int, input().split()))\n\ndef check(n):\n\tb = [False]*(len(a))\n\tfor i in range(1, len(a)):\n\t\tif a[i] >= n:\n\t\t\tb[i] = True\n\t\telse:\n\t\t\tb[i] = False\n\n\tr = int(1e9)\n\tl = int(1e9)\n\trb = b[N]\n\tlb = b[N]\n\tfor i in range(1, N):\n\t\tif lb == b[N-i]:\n\t\t\tl = i\n\t\t\tbreak\n\t\telse:\n\t\t\tlb = b[N-i]\n\t\t\n\tfor i in range(1, N):\n\t\tif rb == b[N+i]:\n\t\t\tr = i\n\t\t\tbreak\n\t\telse:\n\t\t\trb = b[N+i]\n\tif r == int(1e9) and l == int(1e9):\n\t\tif N % 2 == 1:\n\t\t\treturn b[N]\n\t\telse:\n\t\t\treturn not b[N]\n\telse:\n\t\tif r < l:\n\t\t\treturn rb\n\t\telse:\n\t\t\treturn lb\n\n# \u6761\u4ef6\u3092\u6e80\u305f\u3059\u6700\u5c0f\u306e\u5024\u3092\u8fd4\u3059\ndef binarySearch(small, big):\n\tmid = (big + small) // 2\n\tif big - small <= 1:\n\t\tif check(small): return small\n\t\telse:            return big\n\telse:\n\t\tif not check(mid):\n\t\t\treturn binarySearch(small, mid)\n\t\telse:\n\t\t\treturn binarySearch(mid, big)\n\nprint(binarySearch(2, 2*N-2))\n", "code2": "#!/usr/bin/env python3\nimport sys, math, itertools, collections, bisect\ninput = lambda: sys.stdin.buffer.readline().rstrip().decode('utf-8')\ninf = float('inf') ;mod = 10**9+7\nmans = inf ;ans = 0 ;count = 0 ;pro = 1\n\nn=input()\nC=collections.Counter(n)\nprint(C[\"2\"])", "label": 0, "name1": "s773273342.py", "name2": "s618561619.py"}, {"id": 705, "code1": "A, B, C = map(int, input().split())\n\n\nH = C-(A-B)\n\nif H < 0:\n    print(\"0\")\nelse:\n    print(H)\n\n\n", "code2": "import sys\n\n\n#\u4e92\u3044\u306b\u7d20\u306aa,b\u306b\u3064\u3044\u3066\u3001a*x+b*y=1\u306e\u4e00\u3064\u306e\u89e3\ndef extgcd(a, b):\n    r = [1, 0, a]\n    w = [0, 1, b]\n    while w[2] != 1:\n        q = r[2] // w[2]\n        r2 = w\n        w2 = [r[0] - q * w[0], r[1] - q * w[1], r[2] - q * w[2]]\n        r = r2\n        w = w2\n    #[x,y]\n    return [w[0], w[1]]\n\n\n# a\u306e\u9006\u5143(mod m)\u3092\u6c42\u3081\u308b\u3002(a\u3068m\u306f\u4e92\u3044\u306b\u7d20\u3067\u3042\u308b\u3053\u3068\u304c\u524d\u63d0)\ndef mod_inv(a, m):\n    x = extgcd(a, m)[0]\n    return (m + x % m) % m\n\n\nreadline = sys.stdin.readline\nMOD_NUM = 10**6 + 3\n\nQ = int(readline())\nq_array = [list(map(int, readline().split())) for i in range(Q)]\nans_array = []\n\nfactorial = [1] * MOD_NUM\nfactorial_inv = [1] * MOD_NUM\n\ntmp = 1\nfor i in range(2, MOD_NUM):\n    tmp = tmp * i % MOD_NUM\n    factorial[i] = tmp\n    factorial_inv[i] = mod_inv(tmp, MOD_NUM)\n\nfor q in q_array:\n    x, d, n = q\n    # print(x, d, n)\n    if x == 0:\n        ans_array.append(\"0\\n\")\n        continue\n    if d == 0:\n        ans = pow(x, n, MOD_NUM)\n        ans_array.append(str(ans) + \"\\n\")\n    else:\n        x_start = x * mod_inv(d, MOD_NUM) % MOD_NUM\n        if x_start + n > MOD_NUM:\n            ans_array.append(\"0\\n\")\n        else:\n            ans = factorial[x_start + n - 1] * factorial_inv[\n                x_start - 1] * pow(d, n, MOD_NUM) % MOD_NUM\n            ans_array.append(str(ans) + \"\\n\")\n\nsys.stdout.writelines(ans_array)", "label": 0, "name1": "s336832003.py", "name2": "s261991889.py"}, {"id": 640, "code1": "n = int(input())\nsa,sb=[int(it) for it in input().split()]\nfor i in range(n-1):\n  a,b=[int(it) for it in input().split()]\n  r =  max( sa//a + (1 if sa%a!=0 else 0),sb//b+(1 if sb%b!=0 else 0) )\n  sa = r*a\n  sb = r*b\nprint (sa+sb)", "code2": "from itertools import permutations\nn = int(input())\np = tuple(map(int, input().split()))\nq = tuple(map(int, input().split()))\n\nfor n, i in enumerate(permutations(sorted(p))):\n    if i == p:\n        pn = n\n\nfor n, i in enumerate(permutations(sorted(q))):\n    if i == q:\n        qn = n\nprint(abs(pn-qn))\n", "label": 0, "name1": "s718859988.py", "name2": "s199679379.py"}, {"id": 743, "code1": "from heapq import heappush,heappop\nINF=10**18\nn,m,r=map(int,input().split())\ne=[[] for _ in range(n)]\nd=[INF]*n\nfor i in range(m):\n  a,b,c=map(int,input().split())\n  e[a].append((b,c))\nq=[]\nheappush(q,(0,r))\nd[r]=0\nwhile q:\n  dist,node=heappop(q)\n  for to,cost in e[node]:\n    if d[to]>cost+dist:\n      d[to]=cost+dist\n      heappush(q,(d[to],to))\nfor i in d:\n  if i!=INF:print(i)\n  else:print('INF')\n", "code2": "I,O,R,J,L,S,Z=map(int,input().split())\na=(I//2+J//2+L//2)*2\nb=0\nif I*J*L!=0:b=(2*((I-1)//2+(J-1)//2+(L-1)//2)+3)\nprint(max(a,b)+O)", "label": 0, "name1": "s737089154.py", "name2": "s966423542.py"}, {"id": 27, "code1": "\ndef resolve():\n    N, A, B = map(int, input().split())\n    X = list(map(int, input().split()))\n\n    ans = 0\n    for i in range(N - 1):\n        res = min((X[i + 1] - X[i]) * A, B)\n        ans += res\n        \n    print(ans)\n\n\nif __name__ == \"__main__\":\n    resolve()", "code2": "n,a,b = map(int, input().split())\nXs = list(map(int, input().split()))\n\nds = [0] * (n+10)\nfor i in range(n-1):\n    cost1 = a*(Xs[i+1] - Xs[i])\n    cost2 = b\n    ds[i+1] = ds[i] + min(cost1, cost2)\nprint(ds[n-1])", "label": 1, "name1": "s398154186.py", "name2": "s039990138.py"}, {"id": 419, "code1": "def gcd(x,y):\n    a=max(x,y)\n    b=min(x,y)\n    if a%b==0:\n        return b\n    else:\n        return gcd(b,a%b)\n\ndef lcm(x,y):\n    return (x*y)//gcd(x,y)\n\nN=int(input())\nans=1\nfor i in range(N):\n    ans=lcm(ans,int(input()))\nprint(ans)\n", "code2": "import sys, re, os\nfrom collections import deque, defaultdict, Counter\nfrom math import ceil, sqrt, hypot, factorial, pi, sin, cos, radians, gcd\nfrom itertools import permutations, combinations, product, accumulate\nfrom operator import itemgetter, mul\nfrom copy import deepcopy\nfrom string import ascii_lowercase, ascii_uppercase, digits\nfrom functools import reduce\nfrom bisect import bisect_left, insort_left\nfrom heapq import heapify, heappush, heappop\n\nINPUT = lambda: sys.stdin.readline().rstrip()\nINT = lambda: int(INPUT())\nMAP = lambda: map(int, INPUT().split())\nS_MAP = lambda: map(str, INPUT().split())\nLIST = lambda: list(map(int, INPUT().split()))\nS_LIST = lambda: list(map(str, INPUT().split()))\n\nsys.setrecursionlimit(10 ** 9)\nINF = float('inf')\nmod = 10 ** 9 + 7\n\n\ndef main():\n    N = INT()\n    T = [INT() for _ in range(N)]\n\n    lcm_base = lambda x, y: (x * y) // gcd(x, y)\n    lcm = lambda *numbers: reduce(lcm_base, numbers, 1)\n    print(lcm(*T))\n\n\nif __name__ == '__main__':\n    main()\n", "label": 1, "name1": "s751000860.py", "name2": "s617576669.py"}, {"id": 665, "code1": "N = int(input())\nA = [int(_) - 1 for _ in input().split()]\nans = 0\nfor i in range(N):\n    if i < A[i] and A[A[i]] == i:\n        ans += 1\nprint(ans)\n", "code2": "import re\n\ns = input().replace('?', '.')\nt = input()\n\nif len(t)>len(s):\n  print('UNRESTORABLE')\nelif len(t)==len(s):\n  if re.match(s, t):\n    print(t)\n  else:\n    print('UNRESTORABLE')\nelse:\n  for i in range(len(s)-len(t)+1):\n    check_str = s[len(s)-len(t)-i:len(s)-i]\n    if re.match(check_str, t):\n      break\n\n  if i==len(s)-len(t):\n    print('UNRESTORABLE')\n  else:\n    ans = s[:len(s)-len(t)-i] + t + s[len(s)-i:]\n    ans = ans.replace('.', 'a')\n    print(ans)", "label": 0, "name1": "s038697693.py", "name2": "s389752250.py"}, {"id": 202, "code1": "n = int(input())\nt = list(map(int, input().split()))\na = list(map(int, input().split()))\nmod = 10 ** 9 + 7\n\nans, frag = 1, 0\nfor i in range(n):\n    if t[i] == a[i] == t[-1] == a[0]:\n        frag = 1\n    if 0 < i < n - 1 and t[i - 1] == t[i] and a[i] == a[i + 1]:\n        ans = ans * min(t[i], a[i]) % mod\nprint(ans * frag)\n", "code2": "# \u5165\u529b\nimport sys\nstdin = sys.stdin\n\ndef li(): return [int(x) for x in stdin.readline().split()]\ndef li_(): return [int(x)-1 for x in stdin.readline().split()]\ndef lf(): return [float(x) for x in stdin.readline().split()]\ndef ls(): return stdin.readline().split()\ndef ns(): return stdin.readline().rstrip()\ndef lc(): return list(ns())\ndef ni(): return int(ns())\ndef nf(): return float(ns())\n\nn = ni()\nt = li()\na = li()\n\nMOD = 10**9 + 7\n\n# T,A \u306e\u66f4\u65b0\u3068\u77db\u76fe\u3092\u78ba\u8a8d\nt_modified = [0]*n\na_modified = [0]*n\nt_modified[0] = 1\na_modified[-1] = 1\nconsistent = True\n\nif max(a) != max(t):\n    consistent = False\n\nfor i in range(n-1):\n    if t[i+1] != t[i]:\n        t_modified[i+1] = 1\n        \n        if t[i+1] > a[i+1]:\n            consistent = False\n            \n    if a[i] != a[i+1]:\n        a_modified[i] = 1\n        \n        if a[i] > t[i]:\n            consistent = False\n\n# \u66f4\u65b0\u304c\u3042\u3063\u305f\u70b9\u306f1\u901a\u308a\u3001\u7121\u304b\u3063\u305f\u70b9\u306fmin(ti,ai)\u901a\u308a\u306e\u9ad8\u3055\u304c\u8003\u3048\u3089\u308c\u308b      \nans = 1\nfor i in range(n):\n    if t_modified[i] == 0 and a_modified[i] == 0:\n        ans = (ans * min(t[i], a[i])) % MOD\n\nif consistent:\n    print(ans)\nelse:\n    print(0)", "label": 1, "name1": "s894086979.py", "name2": "s440436566.py"}, {"id": 310, "code1": "a, b, c = map(int, input().split())\nans = c - (a - b)\n\nif ans >= 0:\n    print(ans)\nelse:\n    print(0)", "code2": "A, B, C = map(int, input().split())\nX = C - (A - B)\nif X >= 0:\n    print(X)\nelse:\n    print(0)", "label": 1, "name1": "s855957951.py", "name2": "s835397152.py"}, {"id": 536, "code1": "N = int(input())\nAs = list(map(int,input().split()))\ncounts = []\nnow = As[0]\ncount = 1\nfor a in range(1,len(As)):\n    if As[a]==now:\n        count+=1\n        if a == len(As)-1:\n            counts.append(count)\n    else:\n        counts.append(count)\n        count =1\n        now = As[a]\nprint(sum([i//2 for i in counts]))", "code2": "# AOJ 0217 Walking in the Hospital\n# Python3 2018.6.23 bal4u\n\nwhile 1:\n\tn = int(input())\n\tif n == 0: break\n\tdmax = 0\n\tfor i in range(n):\n\t\tp, d1, d2 = map(int, input().split())\n\t\tif d1+d2 > dmax: id, dmax = p, d1+d2\n\tprint(id, dmax)\n", "label": 0, "name1": "s736034553.py", "name2": "s876770513.py"}, {"id": 73, "code1": "# https://atcoder.jp/contests/tenka1-2018-beginner/tasks/tenka1_2018_d\n\nfrom itertools import combinations\n\nn = int(input())\nk = -1\nfor i in range(10**3):\n    if i*i - i - 2 * n == 0:\n        k = i\n\nif k == -1:\n    print('No')\n    exit()\n\n# print('Yes')\n# print(k)\n\nnum = 0\nV = [[] for _ in range(k)]\nfor cmb in combinations(range(k), r=2):\n    num += 1\n    a, b = cmb\n    V[a].append(num)\n    V[b].append(num)\nprint('Yes')\nprint(k)\nfor v in V:\n    print(len(v), end=\" \")\n    print(*v)\n", "code2": "def main():\n    n=int(input())\n    m=int((2*n)**0.5)\n    if m*(m+1)==n*2:\n        print(\"Yes\")\n        m+=1\n        print(m)\n    else:\n        print(\"No\")\n        exit()\n    \n    ans=[[m-1] for i in range(m)]\n    c=1\n    for i in range(m):\n        for j in range(i+1,m):\n            ans[i].append(c)\n            ans[j].append(c)\n            c+=1\n    for i in ans:\n        print(\" \".join(map(str,i)))\n\n\nif __name__ == '__main__':\n    main()\n\n\n\n\n\n\n", "label": 1, "name1": "s366576461.py", "name2": "s694753497.py"}, {"id": 581, "code1": "import sys\nsys.setrecursionlimit(2147483647)\nINF=float(\"inf\")\nMOD=10**9+7\ninput=lambda :sys.stdin.readline().rstrip()\ndef resolve():\n    n,k=map(int,input().split())\n    A=list(map(int,input().split()))\n    dp=[0]*(k+1)\n    for i in range(k):\n        if dp[i]: continue\n        for j in range(n):\n            if i+A[j]<=k: dp[i+A[j]]=1\n    print(\"First\" if dp[k] else \"Second\")\nresolve()", "code2": "import sys\nread = sys.stdin.buffer.read\nreadline = sys.stdin.buffer.readline\nreadlines = sys.stdin.buffer.readlines\n\nimport numpy as np\n\nN = int(readline())\nS = read().rstrip().decode('utf-8')\n\nMOD = 10**9 + 7\n\n\"\"\"\n\u30fb\u6700\u5f8c\u306b\u4f7f\u3063\u305f\u6570\u306b\u5bfe\u3057\u3066\u3001\u4e0b\u5074\u306b\u6b8b\u3063\u3066\u3044\u308b\u500b\u6570 -> \u6570\u3048\u4e0a\u3052\n\"\"\"\n\ndp = np.ones(N,np.int64) # \u5de6\u7aef\n\nfor s in S:\n    prev = dp\n    if s == '<':\n        # 0,1,...,n\u304cdp[n]\u306b\u9077\u79fb\u3059\u308b\n        dp = prev[:-1].cumsum()\n    else:\n        # n+1,n+2,...\u304cdp[n]\u306b\u9077\u79fb\u3059\u308b\n        dp = prev[1:][::-1].cumsum()[::-1]\n    dp %= MOD\n\nanswer = dp[0]\nprint(answer)", "label": 0, "name1": "s270542298.py", "name2": "s898339720.py"}, {"id": 475, "code1": "N = int(input())\nA = list(map(int, input().split()))\nB = list(map(int, input().split()))\n\nplus_2 = 0\nminus = 0\nfor a, b in zip(A, B):\n    if a < b:\n        plus_2 += (b-a)//2\n    else:\n        minus += a-b\n\nif plus_2 >= minus:\n    print('Yes')\nelse:\n    print('No')", "code2": "N = int(input())\na = list(map(int, input().split(\" \")))\nb = list(map(int, input().split(\" \")))\na_cnt, b_cnt = 0, 0\n\nfor i in range(N):\n    # ai\u3092bi\u306b\u8fd1\u3065\u3051\u308b\n    if a[i] < b[i]:\n        num = (b[i] - a[i] + 1) // 2\n        a_cnt += num\n        a[i] += 2 * num\n\nfor i in range(N):\n    # bi\u3092ai\u306b\u8fd1\u3065\u3051\u308b\n    if b[i] < a[i]:\n        b_cnt += (a[i] - b[i])\n\nif a_cnt >= b_cnt:\n    print(\"Yes\")\nelse:\n    print('No')", "label": 1, "name1": "s301247411.py", "name2": "s391693807.py"}, {"id": 144, "code1": "\n\ndef isPrime(n):\n    if n <= 1:\n        return False \n    if n == 2:\n        return True\n    if n % 2 == 0:\n        return False\n\n    i = 3\n    while i * i <= n :\n        if n % i == 0:\n            return False \n        i += 1\n\n    return True        \n# end of isPrime\n\nwhile True:\n    n = input()\n    if n == 0:break\n\n    ans = 0\n    for i in range(n + 1, n * 2 + 1):\n        if isPrime(i):ans += 1\n\n    print ans", "code2": "#!/usr/bin/env python\n# -*- coding: utf-8 -*-\nimport math\n\ndef sieve_of_erastosthenes(num):\n    input_list = [False if i % 2 == 0 or i % 3 == 0 or i % 5 == 0 else True for i in range(num)]\n    input_list[0] = input_list[1] = False\n    input_list[2] = input_list[3] = input_list[5] = True\n    sqrt = math.sqrt(num)\n\n    for serial in range(3, num, 2):\n        if serial >= sqrt:\n            return input_list\n        for s in range(serial ** 2, num, serial): \n            input_list[s] = False\n\nprimeTable = sieve_of_erastosthenes((10**6))\n\nwhile True:\n    n = int(input())\n    if n == 0:\n        break\n    print(sum([1 if primeTable[i] == True else 0 for i in range(n+1,2*n+1)]))", "label": 1, "name1": "s415543076.py", "name2": "s839739261.py"}, {"id": 842, "code1": "N = int(input())\nA = list(map(int, input().split()))\n\ndef selection_sort(A, N):\n    count = 0\n    for i in range(0, N):\n        min_j = i\n        for j in range(i, N):\n            if A[j] < A[min_j]:\n                min_j = j\n        if min_j != i:\n            count += 1\n        A[i], A[min_j] = A[min_j], A[i]\n    return A, count\n\nA, count = selection_sort(A, N)\nprint(' '.join(map(str, A)))\nprint(count)\n", "code2": "l = [[], [], []]\nans = []\nfor i in range(3):\n  for j in range(8):\n    s = raw_input().split()\n    l[i].append([float(s[1]), int(s[0])])\nfor i in range(3):\n  l[i].sort()\n  ans.append(l[i].pop(0))\n  ans.append(l[i].pop(0))\nl = l[0] + l[1] + l[2]\nl.sort()\nans.append(l.pop(0))\nans.append(l.pop(0))\nfor n in ans:\n  print str(n[1]) + \" \" + str(n[0])", "label": 0, "name1": "s850451389.py", "name2": "s549811190.py"}, {"id": 468, "code1": "n=int(input())\na=list(map(int,input().split()))\nb=list(map(int,input().split()))\n\nsum1=0\nsum2=0\n\nfor i,j in zip(a,b):\n  if i>j:\n    sum1+=(i-j)\n  elif i<j:\n    sum2+=(j-i)//2\n\nprint('Yes' if sum1<=sum2 else 'No')", "code2": "n=int(input())\nA=[int(i) for i in input().split()]\nB=[int(i) for i in input().split()]\nct1,ct2,ct3=0,0,0\nfor i in range(n):\n  ct1+=(B[i]-A[i])\n  ct2+=max(A[i]-B[i],0)\n  if B[i]>A[i]:\n    ct3+=(B[i]-A[i]-1)//2+1\nprint(\"Yes\" if max(ct2,ct3)<=ct1 else \"No\")", "label": 1, "name1": "s390816173.py", "name2": "s862908490.py"}, {"id": 885, "code1": "\n\nK = int(input())\n\nA,B = map(int, input().split())\n\ncheck = 0\nfor i in range(int(1000/K) ):\n    if K*(i+1)>=A and K*(i+1) <= B:\n        print('OK')\n        check = 1\n        break\nif check == 0:\n    print('NG')\n", "code2": "count = 0\nwhile count < 1000:\n\tprint \"Hello World\"\n\tcount = count + 1", "label": 0, "name1": "s701703861.py", "name2": "s042038863.py"}, {"id": 139, "code1": "A,B,C=map(int,input().split())\nans = 1\nif (A%2 != B%2) and (A%2 == C%2):\n  A += 1\n  C += 1\nelif (A%2 == B%2) and (A%2 != C%2):\n  A += 1\n  B += 1\nelif (A%2 != B%2) and (B%2 == C%2):\n  C += 1\n  B += 1\nelse:\n  ans = 0\nL = [A,B,C]\nL.sort()\nans += (L[2]-L[1])//2 + (L[2]-L[0])//2\nprint( ans )\n", "code2": "import numpy as np\n\ndef input_numbers():\n    temp = list(map(int, input().split()))\n    return temp\n\ndef GCD(a, b):\n    if(a < b):\n        temp = a\n        a = b\n        b = temp\n    a = a % b\n    if(a == 0):\n        return b\n    else:\n        return GCD(a, b)\n\nnumbers = input_numbers()\n\nnumbers.sort()\n\ncount = 0\n\ncount += numbers[2] - numbers[1]\nnumbers[0] += numbers[2] - numbers[1]\nnumbers[1] = numbers[2]\n\ndiff = numbers[2] - numbers[0]\n\nif(diff % 2 == 0):\n    count += (diff // 2)\n\nelse:\n    numbers[1] += 1\n    numbers[2] += 1\n    count += 1\n\n    diff = numbers[2] - numbers[0]\n    count += (diff // 2)\n\nprint(count)", "label": 1, "name1": "s612094036.py", "name2": "s782702570.py"}, {"id": 74, "code1": "# https://atcoder.jp/contests/tenka1-2018-beginner/tasks/tenka1_2018_d\n\nfrom itertools import combinations\n\nn = int(input())\nk = -1\nfor i in range(10**3):\n    if i*i - i - 2 * n == 0:\n        k = i\n\nif k == -1:\n    print('No')\n    exit()\n\n# print('Yes')\n# print(k)\n\nnum = 0\nV = [[] for _ in range(k)]\nfor cmb in combinations(range(k), r=2):\n    num += 1\n    a, b = cmb\n    V[a].append(num)\n    V[b].append(num)\nprint('Yes')\nprint(k)\nfor v in V:\n    print(len(v), end=\" \")\n    print(*v)\n", "code2": "import sys\n\nread = sys.stdin.read\nreadline = sys.stdin.readline\nreadlines = sys.stdin.readlines\nsys.setrecursionlimit(10 ** 9)\nINF = 1 << 60\n\n\ndef main():\n    N = int(readline())\n    K = int((1 + (8 * N + 1) ** 0.5) / 2)\n    if not N == K * (K - 1) // 2:\n        print('No')\n        return\n\n    num = 1\n    ans = [[0] * (K - 1) for _ in range(K - 1)]\n    for i in range(K - 1):\n        for j in range(i + 1):\n            ans[i][j] = ans[j][i] = num\n            num += 1\n    \n    print('Yes')\n    print(K)\n    for row in ans:\n        print(K - 1, *row)\n    tmp = [ans[i][i] for i in range(K - 1)]\n    print(K - 1, *tmp)\n\n\nif __name__ == '__main__':\n    main()\n", "label": 1, "name1": "s366576461.py", "name2": "s987242186.py"}, {"id": 840, "code1": "N = int(input())\nA = list(map(int,input().split()))\ncnt = 0\nfor i in range(N):\n    minj = i\n    for j in range(i+1,N):\n        if A[j] < A[minj]:\n            minj = j\n    if i != minj:\n        A[i],A[minj] = A[minj],A[i]\n        cnt += 1\nprint(*A)\nprint(cnt)\n\n", "code2": "data = []\ntmp = []\nans = []\n\ndef pushAns(d):\n    for j in range(2):\n        ans.append((d[0][0],d[0][1]))\n        d.pop(0)    \n\nfor i in range(24):\n    a,b = (float(x) for x in input().split())\n    tmp.append((a,b))\n    if (i + 1) % 8 == 0:\n        tmp.sort(key=lambda x:x[1])\n        pushAns(tmp)\n        data.extend(tmp)\n        tmp.clear()\n        \ndata.sort(key=lambda x:x[1])\npushAns(data)\n\nfor i in range(8):\n    print(int(ans[i][0]),ans[i][1])\n", "label": 0, "name1": "s412559133.py", "name2": "s435730800.py"}, {"id": 159, "code1": "q = int(input())\nquest = [tuple(map(int, input().split())) for _ in range(q)]\nfor a, b in quest:\n    m = a*b\n    l = int((m - 1) ** (1/2))\n    # check float\n    if l * l >= m:\n        l -= 1\n    elif (l+1) * (l+1) < m:\n        l += 1\n    if a == b:\n        print((a-1) * 2)\n    elif (l+1) * l < m:\n        print(l*2 - 1)\n    else:\n        print(l*2 - 2)\n", "code2": "import math\nq = int(input())\nfor i in range(q):\n  a,b = map(int,input().split())\n  if a == b:\n    print(a*2-2)\n    continue\n  y = max(a,b)\n  z = min(a,b)\n  ind = math.sqrt(a*b)\n  d = int(ind)\n  if ind.is_integer():\n    d -= 1\n  cnt = 0\n  if d*(d+1) < a*b:\n    if d >= z:\n      cnt = 1\n    if d+1 >= y:\n      cnt = 2\n    print(2*d-cnt)\n  else:\n    if d >= z:\n      cnt = 1\n    print(2*d-1-cnt)", "label": 1, "name1": "s200942919.py", "name2": "s038587801.py"}, {"id": 500, "code1": "n=int(input())\ns=input()\n\nE=[0 for i in range(n)]\nW=[0 for i in range(n)]\n\ncnt=0\nfor i in range(n):\n    W[i]=cnt\n    if s[i]==\"W\":\n        cnt+=1\n\ncnt=0   \nfor i in range(n):\n    E[n-1-i]=cnt\n    if s[n-1-i]==\"E\":\n        cnt+=1\n\nmini=10**8\nfor i in range(n):\n    mini=min(mini,E[i]+W[i])\n\nprint(mini)", "code2": "n = int(input())\ns = input()\n\nl = [0]*n\nl[0] = s[1:].count(\"E\")\n\nfor i in range(1,n):\n    if s[i-1] == \"W\":\n        l[i] += 1\n    if s[i] == \"E\":\n        l[i] -= 1\n    l[i] += l[i-1]\n\nprint(min(l))\n", "label": 1, "name1": "s614583596.py", "name2": "s452403906.py"}, {"id": 801, "code1": "nm = [0,31,29,31,30,31,30,31,31,30,31,30]\nwhile True:\n\n    m,d = map(int,raw_input().split(\" \"))\n\n    if m == 0:\n        break\n    else:\n        nd = 0\n        for i in range(m):\n           nd += nm[i]\n\n        nd += d\n        n = nd%7\n        if n == 1:\n            print \"Thursday\"\n        elif n == 2:\n            print \"Friday\"\n        elif n == 3:\n            print \"Saturday\"\n        elif n == 4:\n            print \"Sunday\"\n        elif n == 5:\n            print \"Monday\"\n        elif n == 6:\n            print \"Tuesday\"\n        else:                                                                                                                                                                                                \n            print \"Wednesday\"", "code2": "N = int(input())\nimport sys\nsys.setrecursionlimit(N+10)\n\nes = [[] for _ in range(N)]\nfor i in range(N-1):\n    a,b = map(int, input().split())\n    a,b = a-1, b-1\n    es[a].append(b)\n    es[b].append(a)\n\n\"\"\"\n\u76f8\u624b\u306e\u53d6\u308c\u308b\u30de\u30b9\u76ee\u3092\u6e1b\u3089\u3059\u3088\u3046\u306b\u3068\u308b\u3068\u3088\u3044\n\u76f8\u624b\u3088\u308a\u305d\u306e\u30de\u30b9\u306b\u8fd1\u3051\u308c\u3070\u305d\u306e\u30de\u30b9\u3092\u53d6\u5f97\u3067\u304d\u308b\n\u30d5\u30a7\u30cd\u30c3\u30af\u304f\u3093\u3001\u3059\u306c\u3051\u541b\u306b\u3064\u3044\u3066\u521d\u671f\u5730\u70b9\u304b\u3089\u305d\u308c\u305e\u308c\u3078\u306e\u8ddd\u96e2\u304c\u5fc5\u8981\n\"\"\"\ndef solve(now, depth, depth_list, es, visited):\n    visited[now] = True\n    depth_list[now] = depth\n    for next in es[now]:\n        if visited[next] == False:            \n            solve(next, depth+1, depth_list, es, visited)\n\ndepth_list_F = [0] * N\nvisited_F = [False] * N\nsolve(0, 0, depth_list_F, es, visited_F)\n\ndepth_list_S = [0] * N\nvisited_S = [False] * N\nsolve(N-1, 0, depth_list_S, es, visited_S)\n\ncnt_F = cnt_S = 0\nfor f,s in zip(depth_list_F, depth_list_S):\n    if f <= s:\n        cnt_F += 1 # \u30d5\u30a7\u30cd\u30c3\u30af\u541b\u304b\u3089\u59cb\u3081\u308b\u306e\u3067\u540c\u3058\u8ddd\u96e2\u306a\u3089\u30d5\u30a7\u30cd\u30c3\u30af\u541b\u304c\u3068\u308b\n    else:\n        cnt_S += 1\n\nif cnt_F > cnt_S:\n    print(\"Fennec\")\nelse:\n    print(\"Snuke\")", "label": 0, "name1": "s504491910.py", "name2": "s940891501.py"}, {"id": 909, "code1": "H,W = map(int,input().split())\nA = [input() for i in range(H)]\nfrom collections import Counter\nctr = Counter()\nfor row in A:\n    ctr.update(row)\n\nif H%2==0 and W%2==0:\n    print('Yes' if all(v%4==0 for v in ctr.values()) else 'No')\n    exit()\n\nif H%2==0 or W%2==0:\n    if H%2: H,W = W,H\n    if any(v%2 for v in ctr.values()):\n        print('No')\n        exit()\n    pair = 0\n    for v in ctr.values():\n        if v%4==2:\n            pair += 1\n    print('Yes' if pair*2 <= H else 'No')\n\nelse:\n    odd = 0\n    for k in ctr.keys():\n        if ctr[k]%2:\n            odd += 1\n            ctr[k] -= 1\n    if odd != 1:\n        print('No')\n        exit()\n    pair = 0\n    for v in ctr.values():\n        if v%4==2:\n            pair += 1\n    print('Yes' if pair*2 <= H+W-2 else 'No')", "code2": "S = [input() for i in range(3)]\ncnt = [0, 0, 0]\nlimit = [len(S[i]) for i in range(3)]\npoint = 0\nNUM = \"ABC\"\nwhile cnt[point] != limit[point]:\n  if S[point][cnt[point]] == 'a':\n    cnt[point] += 1\n    point = 0\n  elif S[point][cnt[point]] == 'b':\n    cnt[point] += 1\n    point = 1\n  elif S[point][cnt[point]] == 'c':\n    cnt[point] += 1\n    point = 2\nprint(NUM[point])", "label": 0, "name1": "s065097494.py", "name2": "s464702195.py"}, {"id": 160, "code1": "q = int(input())\nquest = [tuple(map(int, input().split())) for _ in range(q)]\nfor a, b in quest:\n    m = a*b\n    l = int((m - 1) ** (1/2))\n    # check float\n    if l * l >= m:\n        l -= 1\n    elif (l+1) * (l+1) < m:\n        l += 1\n    if a == b:\n        print((a-1) * 2)\n    elif (l+1) * l < m:\n        print(l*2 - 1)\n    else:\n        print(l*2 - 2)\n", "code2": "from math import sqrt\n\nq = int(input())\n\np = []\nfor _ in range(q):\n    p.append(list(map(int, input().split())))\n\nfor t in p:\n    x = min(t)\n    y = max(t)\n    if x == y or x + 1 == y:\n        print(x * 2 - 2)\n    else:\n        temp = sqrt(x * y)\n        hoge = int(temp)\n        if hoge == temp:\n            hoge -= 1\n        if hoge * (hoge + 1) >= x * y:\n            print(2 * hoge - 2)\n        else:\n            print(2 * hoge - 1)\n\n", "label": 1, "name1": "s200942919.py", "name2": "s218122178.py"}, {"id": 296, "code1": "import numpy as np\nn,m = map(int, input().split())\nX = sorted(np.array(input().split(), dtype = np.int64))\nX = sorted(np.diff(X))\nif m-n >= 0:\n    ans = sum(X[:m-n])\nelse:\n    ans = 0\nprint(ans)", "code2": "n,m=map(int,input().split())\nif n>=m:\n  print(0)\n  exit()\na=list(map(int,input().split()))\na=sorted(a)\nb=[0]*(m-1)\nfor i in range(m-1):\n\tb[i]=a[i+1]-a[i]\nb=sorted(b)\nb=b[:m-1-(n-1)]\nprint(sum(b))", "label": 1, "name1": "s052852893.py", "name2": "s754278131.py"}, {"id": 894, "code1": "count = 0\nwhile count < 1000:\n\tprint \"Hello World\"\n\tcount = count + 1", "code2": "N = int(input())\nanswer = N\nwhile 1:\n    if all([answer%n for n in range(2,answer)]):\n        print(answer)\n        exit()\n    else:\n        answer += 1\n", "label": 0, "name1": "s042038863.py", "name2": "s134494492.py"}, {"id": 724, "code1": "S = input()\n\nl = len(S)\nS_list = list(map(int, S))\n\nans = 0\n\nfor i in range(l):\n    num = int(S_list[-i-1])\n\n    for j in range(i+1):\n        ans += num * (10 ** (j)) * (2 ** (max(l-1-j-1, l-1-i)))\n\nprint(ans)\n", "code2": "# ABC068C - Cat Snuke and a Voyage (ARC079C)\ndef main():\n    N, M, *AB = map(int, open(0).read().split())\n    from_1, to_N = set(), set()\n    for a, b in zip(*[iter(AB)] * 2):\n        if a == 1:\n            from_1.add(b)\n        if b == N:\n            to_N.add(a)\n    flg = from_1 & to_N  # intermediate point of both 1, N exists?\n    print(\"POSSIBLE\" if flg else \"IMPOSSIBLE\")\n\n\nif __name__ == \"__main__\":\n    main()", "label": 0, "name1": "s174681493.py", "name2": "s726342129.py"}, {"id": 978, "code1": "# -*- coding: utf-8 -*-\nimport bisect\nimport heapq\nimport math\nimport random\nfrom collections import Counter, defaultdict, deque\nfrom decimal import ROUND_CEILING, ROUND_HALF_UP, Decimal\nfrom fractions import Fraction\nfrom functools import lru_cache, reduce\nfrom itertools import combinations, combinations_with_replacement, product, permutations, accumulate\nfrom operator import add, mul, sub, itemgetter, attrgetter\n\n\nimport sys\n# sys.setrecursionlimit(10**6)\n# readline = sys.stdin.buffer.readline\nreadline = sys.stdin.readline\n\nINF = 2**62-1\n\n\ndef read_int():\n    return int(readline())\n\n\ndef read_int_n():\n    return list(map(int, readline().split()))\n\n\ndef read_float():\n    return float(readline())\n\n\ndef read_float_n():\n    return list(map(float, readline().split()))\n\n\ndef read_str():\n    return readline().strip()\n\n\ndef read_str_n():\n    return readline().strip().split()\n\n\ndef ep(*args):\n    print(*args, file=sys.stderr)\n\n\ndef mt(f):\n    import time\n\n    def wrap(*args, **kwargs):\n        s = time.perf_counter()\n        ret = f(*args, **kwargs)\n        e = time.perf_counter()\n\n        ep(e - s, 'sec')\n        return ret\n\n    return wrap\n\n\nclass Bisect:\n    def __init__(self, func):\n        self.__func = func\n\n    def bisect_left(self, x, lo, hi):\n        while lo < hi:\n            mid = (lo+hi)//2\n            if self.__func(mid) < x:\n                lo = mid+1\n            else:\n                hi = mid\n        return lo\n\n    def bisect_right(self, x, lo, hi):\n        while lo < hi:\n            mid = (lo+hi)//2\n            if x < self.__func(mid):\n                hi = mid\n            else:\n                lo = mid+1\n        return lo\n\n@mt\ndef slv(N, A, B, H):\n    c = A-B\n    def f(n):\n        m = n\n        for h in H:\n            h -= n * B\n            if h > 0:\n                m -= -(-h // c)\n        return 1 if m >= 0 else 0\n\n    return Bisect(f).bisect_left(1, 0, 10**9)\n\n\n\ndef main():\n    N, A, B = read_int_n()\n    H = [read_int() for _ in range(N)]\n    print(slv(N, A, B, H))\n\n\nif __name__ == '__main__':\n    main()\n", "code2": "from fractions import gcd\nfrom datetime import date, timedelta\nfrom heapq import*\nimport math\nfrom collections import defaultdict, Counter, deque\nimport sys\nfrom bisect import *\nimport itertools\nimport copy\nsys.setrecursionlimit(10 ** 7)\nMOD = 10 ** 9 + 7\n\n\ndef main():\n    n = int(input())\n    d = list(map(int, input().split()))\n    if n == 1:\n        print(d[0])\n        exit()\n    dc = defaultdict(int)\n    dc[0] = 1\n    for i in range(n):\n        v = d[i]\n        if dc[v] >= 2 or (dc[v] == 1 and (v == 12 or v == 0)):\n            print(0)\n            exit()\n        dc[v] += 1\n    \n    dd = []\n    ddt = []\n    for i in range(0, 13):\n        if (i == 0 or i == 12) and dc[i] == 1:\n            ddt.append(i)\n        elif dc[i] == 1:\n            dd.append(i)\n        elif dc[i] == 2:\n            ddt.append(i)\n            ddt.append(24 - i)\n\n\n    \n    ans = 0\n    for i in range(1 << len(dd)):\n        d3 = []\n        for j in range(len(ddt)):\n            d3.append(ddt[j])\n\n        for j in range(len(dd)):\n            if (i & (1 << j)):\n                d3.append(dd[j])\n            else:\n                d3.append(24 - dd[j])\n        \n        d3 = sorted(d3)\n        t = float(\"inf\")\n        for i in range(len(d3) - 1):\n            t = min(t, d3[i + 1] - d3[i])\n        t = min(t , 24 - d3[-1])\n        ans = max(t, ans)\n    print(ans)\n\n\nif __name__ == '__main__':\n    main()\n", "label": 0, "name1": "s796173031.py", "name2": "s742731060.py"}, {"id": 86, "code1": "z,x,c,v=0,0,0,0\nwhile True:\n  try:\n    q,w = map(str,raw_input().split(\",\"))\n    if w == \"A\":z+=1\n    elif w == \"B\":x+=1\n    elif w ==\"AB\":c+=1\n    elif w ==\"O\": v+=1\n  except EOFError: \n    print \"%d\\n%d\\n%d\\n%d\"%(z,x,c,v)\n    break", "code2": "try:\n    a = ['A', 'B', 'AB', 'O']\n    b = {s: 0 for s in a}\n    while True:\n        b[raw_input().split(',')[1]] += 1\nexcept EOFError:\n    pass\nfor s in a:\n    print b[s]", "label": 1, "name1": "s960711709.py", "name2": "s465440062.py"}, {"id": 950, "code1": "ans = [1]*365\nfor i in range(365):\n    ans[i]=i%25 + 1\nfor i in range(365):\n    print(ans[i])", "code2": "n, m, k = map(int, input().split())\n \nans = \"No\"\nfor i in range(n + 1):\n    for j in range(m + 1):\n        if i * (m - j) + j * (n - i) == k:\n            ans = \"Yes\"\nprint(ans)", "label": 0, "name1": "s964378808.py", "name2": "s425111362.py"}, {"id": 253, "code1": "S = list(input())\nT = list(input())\n\nS.reverse()\nT.reverse()\nflag = False\n\nfor i in range(len(S)-len(T)+1):\n    for j in range(len(T)):\n        if S[j+i] == T[j] or S[j+i] == '?':\n            pass\n        else:\n            break\n\n        if j == len(T)-1:\n            flag = True\n            for k in range(len(T)):\n                if S[k+i] == '?':\n                    S[k+i] = T[k]\n            break\n    if flag:\n        break\n\nif flag:\n    for i in range(len(S)):\n        if S[i] == '?':\n            S[i] = 'a'\n    S.reverse()\n    print(''.join(S))\n\nelse:\n    print('UNRESTORABLE')\n\n\n\n", "code2": "import re\n\ns = input().replace('?', '.')\nt = input()\n\nif len(t)>len(s):\n  print('UNRESTORABLE')\nelif len(t)==len(s):\n  if re.match(s, t):\n    print(t)\n  else:\n    print('UNRESTORABLE')\nelse:\n  for i in range(len(s)-len(t)+1):\n    check_str = s[len(s)-len(t)-i:len(s)-i]\n    if re.match(check_str, t):\n      break\n\n  if i==len(s)-len(t):\n    print('UNRESTORABLE')\n  else:\n    ans = s[:len(s)-len(t)-i] + t + s[len(s)-i:]\n    ans = ans.replace('.', 'a')\n    print(ans)", "label": 1, "name1": "s456382222.py", "name2": "s389752250.py"}, {"id": 855, "code1": "from fractions import gcd \n\n\nn = int(input())\nl = list(map(int, input().split()))\nnum = 0\nfor i in range(len(l)):\n    num = gcd(num, l[i])\n\nprint(num)", "code2": "N, M = map(int, input().split())\n\nAC_count = 0\nWA_count = 0\nWA_count_dict = {}\nis_not_AC = {}\n\nfor m in range(M):\n    p, S = input().split()\n    p = int(p)\n    \n    if p not in is_not_AC.keys():\n        is_not_AC[p] = True\n        WA_count_dict[p] = 0\n        \n    if is_not_AC[p]:\n        if S==\"WA\":\n            WA_count_dict[p] += 1\n        else:\n            AC_count += 1\n            is_not_AC[p] = False\n            \nfor k in is_not_AC.keys():\n    if is_not_AC[k] == False:\n        WA_count += WA_count_dict[k]\n\nprint(AC_count, WA_count)", "label": 0, "name1": "s849557734.py", "name2": "s383689589.py"}, {"id": 38, "code1": "import math\nimport statistics\n\nwhile(1):\n    n=int(input())\n    if(not n):\n        break\n    S=list(map(int,input().split(\" \")))\n    mean=statistics.mean(S)\n    #print(mean)\n    S=list(map(lambda x: (x-mean)**2, S))\n    #print(S)\n    print(math.sqrt(sum(S)/n))\n\n", "code2": "while True:\n    n=int(input())\n    if n == 0:\n        break\n    a=list(map(int, input().split()))\n    m=sum(a)/n\n    std=0\n    for i in range(n):\n       std+=(a[i]-m)**2\n    std/=n\n    print(std**0.5)\n    \n", "label": 1, "name1": "s513646243.py", "name2": "s611963790.py"}, {"id": 421, "code1": "N = int(input())\n\ndef gcd(a, b):\n    while b:\n        a, b = b, a % b\n    return a\n\ndef lcm(a, b):\n    return a * b // gcd(a, b)\n\ns = int(input())\nfor i in range(N - 1):\n    tmp = int(input())\n    s = lcm(s, tmp)\n\nprint(s)\n", "code2": "import sys, re, os\nfrom collections import deque, defaultdict, Counter\nfrom math import ceil, sqrt, hypot, factorial, pi, sin, cos, radians, gcd\nfrom itertools import permutations, combinations, product, accumulate\nfrom operator import itemgetter, mul\nfrom copy import deepcopy\nfrom string import ascii_lowercase, ascii_uppercase, digits\nfrom functools import reduce\nfrom bisect import bisect_left, insort_left\nfrom heapq import heapify, heappush, heappop\n\nINPUT = lambda: sys.stdin.readline().rstrip()\nINT = lambda: int(INPUT())\nMAP = lambda: map(int, INPUT().split())\nS_MAP = lambda: map(str, INPUT().split())\nLIST = lambda: list(map(int, INPUT().split()))\nS_LIST = lambda: list(map(str, INPUT().split()))\n\nsys.setrecursionlimit(10 ** 9)\nINF = float('inf')\nmod = 10 ** 9 + 7\n\n\ndef main():\n    N = INT()\n    T = [INT() for _ in range(N)]\n\n    lcm_base = lambda x, y: (x * y) // gcd(x, y)\n    lcm = lambda *numbers: reduce(lcm_base, numbers, 1)\n    print(lcm(*T))\n\n\nif __name__ == '__main__':\n    main()\n", "label": 1, "name1": "s550486741.py", "name2": "s617576669.py"}, {"id": 258, "code1": "import re\n\ns = input().replace('?', '.')\nt = input()\n\nif len(t)>len(s):\n  print('UNRESTORABLE')\nelif len(t)==len(s):\n  if re.match(s, t):\n    print(t)\n  else:\n    print('UNRESTORABLE')\nelse:\n  for i in range(len(s)-len(t)+1):\n    check_str = s[len(s)-len(t)-i:len(s)-i]\n    if re.match(check_str, t):\n      break\n\n  if i==len(s)-len(t):\n    print('UNRESTORABLE')\n  else:\n    ans = s[:len(s)-len(t)-i] + t + s[len(s)-i:]\n    ans = ans.replace('.', 'a')\n    print(ans)", "code2": "#!usr/bin/env python3\nfrom collections import defaultdict\nfrom collections import deque\nfrom heapq import heappush, heappop\nimport sys\nimport math\nimport bisect\nimport random\ndef LI(): return list(map(int, sys.stdin.readline().split()))\ndef I(): return int(sys.stdin.readline())\ndef LS():return list(map(list, sys.stdin.readline().split()))\ndef S(): return list(sys.stdin.readline())[:-1]\ndef IR(n):\n    l = [None for i in range(n)]\n    for i in range(n):l[i] = I()\n    return l\ndef LIR(n):\n    l = [None for i in range(n)]\n    for i in range(n):l[i] = LI()\n    return l\ndef SR(n):\n    l = [None for i in range(n)]\n    for i in range(n):l[i] = S()\n    return l\ndef LSR(n):\n    l = [None for i in range(n)]\n    for i in range(n):l[i] = SR()\n    return l\nmod = 1000000007\n\n#A\ndef A():\n    r,g = IR(2)\n    print(2*g-r)\n\n#B\ndef B():\n    n = I()\n    k = I()\n    a = 1\n    for i in range(n):\n        if a > k:\n            a += k\n        else:\n            a *= 2\n    print(a)\n#C\ndef C():\n    def check(a,b):\n        for i in range(len(a)):\n            if a[i] != b[i] and a[i] != \"?\":\n                return False\n        return True\n    def f(c):\n        if c == \"?\":return \"a\"\n        return c\n    s = S()\n    t = S()\n    n = len(s)\n    l = len(t)\n    ans = []\n    for i in range(n-l+1)[::-1]:\n        if check(s[i:i+l],t):\n            c = [f(s[j]) for j in range(i)]\n            c += t\n            for j in range(i+l,n):\n                c += f(s[j])\n            ans.append(c)\n    if not len(ans):\n        print(\"UNRESTORABLE\")\n    else:\n        ans.sort()\n        for i in ans[0]:\n            print(i,end = \"\")\n        print()\n#D\ndef D():\n    return\n\n#E\ndef E():\n    return\n\n#F\ndef F():\n    return\n\n#G\ndef G():\n    return\n\n#H\ndef H():\n    return\n\n#Solve\nif __name__ == \"__main__\":\n    C()\n", "label": 1, "name1": "s389752250.py", "name2": "s063203841.py"}, {"id": 871, "code1": "# -*- coding: utf-8 -*-\n\nimport sys\nimport os\nimport math\n\nn = int(input())\nif n == 1:\n    # 4\n    print(4)\n    print(2)\nelif n == 2:\n    # 8, 9\n    print(8)\n    print(4)\n    print(3)\nelse:\n    a = 1\n    for i in range(1, n + 2):\n        a *= i\n    print(a - n - 1)\n\n    for i in range(n + 1, 1, -1):\n        print(i)", "code2": "a,b=input().split()\nif a==\"H\":\n  if b==\"H\":\n    print(\"H\")\n  else:\n    print(\"D\")\nif a==\"D\":\n  if b==\"H\":\n    print(\"D\")\n  else:\n    print(\"H\")", "label": 0, "name1": "s101680760.py", "name2": "s799192785.py"}, {"id": 627, "code1": "n = int(input())\nS = list(map(int, input().split()))\ns = sorted(S, reverse=True)\n\nif n %2 ==0:\n  l = n/2\n  m = s[0]\n  s = s[1:int(l)]\n  p = sum(s)\n  o = p*2 + m \n  print(o)\nelse:\n  l = (n+1)/2\n  m = s[0]\n  q = s[int(l)-1]\n  s = s[1:int(l-1)]\n  p = sum(s)\n  o = p*2 + m +q\n  print(o)\n  ", "code2": "#coding=UTF-8\n\nN=int(input())\nmozir=input()\nhyo=mozir.split(' ')\n\nRec_LTR=[int(mono) for mono in hyo]\n\nmozir=input()\nhyo=mozir.split(' ')\n\nRec_RTL=[int(mono) for mono in hyo]\n\nLTR_hani=[]\nhighest=0\nfor idx in range(0,N,1):\n    if Rec_LTR[idx]>highest:\n        highest=Rec_LTR[idx]\n        LTR_hani.append([highest,highest])\n    else:\n        LTR_hani.append([highest,1])\n\nRTL_hani=[None]*N\nhighest=0\nfor idx in range(N-1,-1,-1):\n    if Rec_RTL[idx]>highest:\n        highest=Rec_RTL[idx]\n        RTL_hani[idx]=[highest,highest]\n    else:\n        RTL_hani[idx]=[highest,1]\n\n#concat\nans=1\nhou=1000000007\nfor idx in range(0,N,1):\n    # prod set\n    ue=min(RTL_hani[idx][0],LTR_hani[idx][0])\n    shita=max(RTL_hani[idx][1],LTR_hani[idx][1])\n    ans=(ans*max((ue-shita+1),0))%hou\n\nprint(ans)\n", "label": 0, "name1": "s142787879.py", "name2": "s271635856.py"}, {"id": 482, "code1": "N,M=map(int,input().split())\ngraph=[[] for _ in range(N)]\nfor _ in range(M):\n    a,b=map(int,input().split())\n    graph[a-1].append(b-1)\n    graph[b-1].append(a-1)\n\nvisited=[False]*N\nvisited[0]=True\n\ndef dfs(v,N,visited):\n    if all(visited):\n        return 1\n    \n    ret=0\n    for new_v in graph[v]:\n        if visited[new_v]:\n            continue\n        \n        visited[new_v]=True\n        ret+=dfs(new_v,N,visited)\n        visited[new_v]=False\n    \n    return ret\n\nprint(dfs(0,N,visited))", "code2": "import itertools\nimport numpy as np\n\nN, M = map(int, input().split())\nX = [[] for _ in range(M)]\nfor i in range(M):\n    X[i] = list(map(int, input().split()))\npermutations_list = list(itertools.permutations([i for i in range(N-1)]))\n\ncount = 0\nfor i in range(len(permutations_list)):\n    x = np.argsort(permutations_list[i])\n    if [1, x[0]+2] not in X and [x[0]+2, 1] not in X:\n        count += 1\n        continue\n    for j in range(N-2):\n        pair = [x[j]+2, x[j+1]+2]\n        reverse = list(reversed(pair))\n        if pair not in X and reverse not in X:\n            count += 1\n            break\nprint(len(permutations_list) -count)", "label": 1, "name1": "s866159978.py", "name2": "s078154216.py"}, {"id": 797, "code1": "m=10**9+7\ni=s=r=0\nf=1\ninput()\na=input().split()\nfor x in a:i+=1;s+=pow(i,m-2,m);r+=int(x)*~-s+int(a[-i])*s;f=f*i%m\nprint(r*f%m)", "code2": "a=['Wednesday','Thursday','Friday','Saturday','Sunday','Monday','Tuesday',0]\nwhile True:\n    q=map(int,raw_input().split())\n    if sum(q) == 0: break\n    print a[(sum([0,31,29,31,30,31,30,31,31,30,31,30,31][:q[0]])+q[1])%7]", "label": 0, "name1": "s072063122.py", "name2": "s388074654.py"}, {"id": 228, "code1": "n=int(raw_input())\ng=[[1000000]*n for _ in xrange(n)]\nfor i in xrange(n):\n    g[i][i]=0\nfor i in xrange(n):\n    r=map(int,raw_input().split())\n    for j in r[2:]:\n        g[r[0]-1][j-1]=1\nfor k in xrange(n):\n    for i in xrange(n):\n        for j in xrange(n):\n            g[i][j]=min(g[i][j],g[i][k]+g[k][j])\nm=int(raw_input())\nfor i in xrange(m):\n    s,d,v=map(int,raw_input().split())\n    s-=1\n    d-=1\n    if g[s][d]<v:\n        print(g[s][d]+1)\n    else:\n        print('NA')", "code2": "# AOJ 0144 Packet Transportation\n# Python3 2018.6.23 bal4u\n\nINF = 0x7fffffff\nn = int(input())\narr = [[INF for j in range(n)] for i in range(n)]\nfor i in range(n):\n\ta = list(map(int, input().split()))\n\tx, k = a[0]-1, a[1]\n\tfor j in range(k):\n\t\ty = a[j+2]-1\n\t\tarr[x][y] = 1\nfor k in range(n):\n\tarr[k][k] = 0\n\tfor i in range(n):\n\t\tif arr[i][k] >= INF: continue\n\t\tfor j in range(n):\n\t\t\tif arr[k][j] >= INF: continue\n\t\t\tarr[i][j] = min(arr[i][j], arr[i][k] + arr[k][j])\np = int(input())\nfor i in range(p):\n\ts, d, v = map(int, input().split())\n\ts,d = s-1, d-1\n\tprint(arr[s][d]+1 if arr[s][d] < v else \"NA\")\n", "label": 1, "name1": "s227640621.py", "name2": "s881383078.py"}, {"id": 529, "code1": "while(1):\n    n = int(input())\n    if n == 0:\n        break\n    s = [float(i) for i in input().split()]\n    m = sum(s)/n\n    a = (sum([(i- m)**2 for i in s])/n)**0.5\n    print(\"{:.8f}\".format(a))\n", "code2": "# -*- coding: utf-8 -*-\n'import sys'\n'import math'\ni=int(4)\nt=0\nwhile i:\n    t+=int(input())\n    i-=1\nprint(int(t/60))\nprint(t%60)", "label": 0, "name1": "s123853064.py", "name2": "s417833494.py"}, {"id": 41, "code1": "while(1):\n    n = int(input())\n    if n == 0:\n        break\n    s = [float(i) for i in input().split()]\n    m = sum(s)/n\n    a = (sum([(i- m)**2 for i in s])/n)**0.5\n    print(\"{:.8f}\".format(a))\n", "code2": "import sys\nimport math\n\ndef str_input():\n    S = raw_input()\n    if S[len(S)-1] == \"\\r\":\n        return S[:len(S)-1]\n    return S\n\ndef float_to_str(num):\n    return str(\"{:.10f}\".format(num))\n\ndef list_input(tp):\n    return map(tp, str_input().split())\n\n# # # # # # # # # # # # # # # # # # # # # # # # #\n\nwhile 1:\n    n = input()\n\n    if n == 0:\n        break\n\n    s = list_input(float)\n    m = sum(s) / n\n    s = map(lambda x: x-m, s)\n    s = map(lambda x: x*x, s)\n    s = map(lambda x: x/n, s)\n    \n    print float_to_str(math.sqrt(sum(s)))", "label": 1, "name1": "s123853064.py", "name2": "s976131338.py"}, {"id": 548, "code1": "# AOJ 0217 Walking in the Hospital\n# Python3 2018.6.23 bal4u\n\nwhile 1:\n\tn = int(input())\n\tif n == 0: break\n\tdmax = 0\n\tfor i in range(n):\n\t\tp, d1, d2 = map(int, input().split())\n\t\tif d1+d2 > dmax: id, dmax = p, d1+d2\n\tprint(id, dmax)\n", "code2": "import sys\nimport collections as col\nnum = []\nfor line in sys.stdin:\n\ttako = line[:-1].split(\",\")\n\tnum.append(tako[1])\ntako = col.Counter(num)\na = tako[\"O\"]\ntako[\"O\"] = tako[\"AB\"]\ntako[\"AB\"] = a\nfor i in tako.items():\n\tprint i[1]", "label": 0, "name1": "s876770513.py", "name2": "s223119670.py"}, {"id": 746, "code1": "from heapq import heappush,heappop\nINF=10**18\nn,m,r=map(int,input().split())\ne=[[] for _ in range(n)]\nd=[INF]*n\nfor i in range(m):\n  a,b,c=map(int,input().split())\n  e[a].append((b,c))\nq=[]\nheappush(q,(0,r))\nd[r]=0\nwhile q:\n  dist,node=heappop(q)\n  for to,cost in e[node]:\n    if d[to]>cost+dist:\n      d[to]=cost+dist\n      heappush(q,(d[to],to))\nfor i in d:\n  if i!=INF:print(i)\n  else:print('INF')\n", "code2": "h, w = map(int, input().split())\na = [list(input()) for i in range(h)]\nta = [[\".\"] * w for i in range(h)]\nao = [[\".\"] * w for i in range(h)]\nfor i in range(h):\n    if i % 2 == 0:\n        for j in range(w - 1):\n            ta[i][j] = \"#\"\n        ao[i][-1] = \"#\"\n    else:\n        for j in range(1, w):\n            ao[i][j] = \"#\"\n        ta[i][0] = \"#\"\nfor i in range(h):\n    for j in range(w):\n        if a[i][j] == \"#\":\n            ta[i][j] = \"#\"\n            ao[i][j] = \"#\"\nfor i in range(h):\n    print(*ta[i], sep=\"\")\nprint()\nfor i in range(h):\n    print(*ao[i], sep=\"\")", "label": 0, "name1": "s737089154.py", "name2": "s319820171.py"}, {"id": 227, "code1": "inf = 2**31\n\nn = int(raw_input())\nG = [[inf]*n for _ in range(n)]\nref = {}\ninputs = [map(int,raw_input().split()) for _ in range(n)]\nfor i in range(n): ref[inputs[i][0]] = i\nfor i in range(n):\n    for j in inputs[i][2:]:\n        G[i][ref[j]] = 1\n        \nfor k in range(n):\n    for i in range(n):\n        for j in range(n):\n            G[i][j] = min(G[i][j],G[i][k]+G[k][j])\n            \np = int(raw_input())\nfor loop in range(p):\n    s,d,v = map(int,raw_input().split())\n    dist = G[ref[s]][ref[d]]\n    print dist+1 if dist+1 <= v else \"NA\"", "code2": "from collections import deque\n\nn = int(input())\nrlst = [None] * (n + 1)\nfor _ in range(n):\n  lst = list(map(int, input().split()))\n  r = lst[0]\n  lst = lst[2:]\n  rlst[r] = lst\n\np = int(input())\n\nfor _ in range(p):\n  s, d, v = map(int, input().split())\n  visited = [False] * (n + 1)\n  visited[s] = True\n  que = deque()\n  que.append((s, 0))\n  while que:\n    node, dist = que.popleft()\n    if node == d:\n      if dist < v:\n        print(dist + 1)\n      else:\n        print(\"NA\")\n      break\n    for to in rlst[node]:\n      if not visited[to]:\n        que.append((to, dist + 1))\n        visited[to] = True\n  else:\n    print(\"NA\")\n", "label": 1, "name1": "s378122232.py", "name2": "s423232212.py"}, {"id": 577, "code1": "a,b,c = map(int, input().split())\n\nprint(\"Yes\" if a<c<b or b<c<a else \"No\")", "code2": "def f(n, s):\n    md = 10 ** 9 + 7\n    dp = [1] * n\n    for i in range(n - 1):\n        if s[i] == \"<\":\n            L = dp[0]\n            for dpi in range(1, n - i - 1):\n                dp[dpi] = L = (dp[dpi] + L) % md\n            dp = dp[:-1]\n        else:\n            R = dp[-1]\n            for dpi in range(n - i - 2, 0, -1):\n                dp[dpi] = R = (dp[dpi] + R) % md\n            dp = dp[1:]\n    print(dp[0])\n\n\nn = int(input())\ns = input()\nf(n, s)\n", "label": 0, "name1": "s135661044.py", "name2": "s415178183.py"}, {"id": 808, "code1": "import sys,queue,math,copy,itertools,bisect,collections\nfrom heapq import *\n\ndef main():\n    sys.setrecursionlimit(10**7)\n    INF = 10**18\n    MOD = 10**9 + 7\n    LI = lambda : [int(x) for x in sys.stdin.readline().split()]\n    NI = lambda : int(sys.stdin.readline())\n\n    N = NI()\n    root = [[] for _ in range(N)]\n    for _ in range(N-1):\n        a,b = LI()\n        root[a-1].append(b-1)\n        root[b-1].append(a-1)\n\n    node = [-1 for _ in range(N)]\n    q = []\n    q.append((0,0))\n    node[0] = 0\n    while q:\n        u,num = q.pop()\n        for v in root[u]:\n            if node[v] < 0:\n                node[v] = num+1\n                if v == N-1:\n                    q = []\n                    break\n                q.append((v,num+1))\n    c = node[N-1]\n    u = N-1\n    pu = 0\n    while c > (node[N-1])//2:\n        for v in root[u]:\n            if node[v] != c-1: continue\n            pu = u\n            u = v\n            c -= 1\n            break\n\n    p = u\n    node = [-1 for _ in range(N)]\n    node[p] = 0\n    node[pu] = 1\n    cnt = [0,0]\n    for i in range(2):\n        if i == 0:\n            q.append(p)\n        else:\n            q.append(pu)\n        while q:\n            u = q.pop()\n            for v in root[u]:\n                if node[v] < 0:\n                    node[v] = i\n                    q.append(v)\n                    cnt[i] += 1\n    if cnt[0] > cnt[1]:\n        print('Fennec')\n    else:\n        print('Snuke')\n\nif __name__ == '__main__':\n    main()", "code2": "n=int(input())\nA=[int(i) for i in input().split()]\nB=[int(i) for i in input().split()]\nct1,ct2,ct3=0,0,0\nfor i in range(n):\n  ct1+=(B[i]-A[i])\n  ct2+=max(A[i]-B[i],0)\n  if B[i]>A[i]:\n    ct3+=(B[i]-A[i]-1)//2+1\nprint(\"Yes\" if max(ct2,ct3)<=ct1 else \"No\")", "label": 0, "name1": "s905380406.py", "name2": "s862908490.py"}, {"id": 11, "code1": "import sys\n\ns = list(input())\n\nfor i in range(len(s)):\n  if i % 2 == 1:\n    if s[i] == \"L\" or s[i] == \"U\"or s[i] == \"D\":\n      continue\n    else:\n      print(\"No\")\n      sys.exit()\n  else:\n    if s[i] == \"R\" or s[i] == \"U\"or s[i] == \"D\":\n      continue\n    else:\n      print(\"No\")\n      sys.exit()\n\nprint(\"Yes\")", "code2": "steps = input()\n\nodd_steps = [x for i, x in enumerate(steps) if i % 2 == 0]\neven_steps = [x for i, x in enumerate(steps) if i % 2 == 1]\n\nif \"L\" in odd_steps or \"R\" in even_steps:\n  print(\"No\")\nelse:\n  print(\"Yes\")", "label": 1, "name1": "s904714457.py", "name2": "s237740005.py"}, {"id": 558, "code1": "import sys\nd={'A\\n':0,'B\\n':0,'AB\\n':0,'O\\n':0}\nfor e in sys.stdin:d[e.split(',')[1]]+=1\nfor b in d:print(d[b])\n", "code2": "from enum import Enum\nimport sys\nimport math\n\n\nA,B,DEGREE = map(int,input().split())\n\nrad = math.radians(DEGREE)\n\nS = A*B*math.sin(rad)/2.0\nC = math.sqrt(A*A+B*B-2*A*B*math.cos(rad))\nh = 2*S/A\n\nprint(\"%.10f %.10f %.10f\"%(S,A+B+C,h))\n\n", "label": 0, "name1": "s566437610.py", "name2": "s944812786.py"}, {"id": 0, "code1": "n = int(input())\nif n%9 == 0:\n    print(\"Yes\")\nelse:\n    print(\"No\")", "code2": "num = input()\n\nnum = str(num)\n\nlist_num = list(num)\n\nlist_num = [int(s) for s in list_num]\n\nans = 0\n\nfor n in list_num:\n    ans += n\n    ans  = ans%9\n\nif ans==0:\n    print(\"Yes\")\nelse:\n    print(\"No\")\n", "label": 1, "name1": "s507543676.py", "name2": "s383833581.py"}, {"id": 833, "code1": "n = int(input())\ns = input()\nleft = [0]\nright = [0]\nfor i in range(n):\n    if s[i] == 'W':\n        tmp = left[-1] + 1\n        left.append(tmp)\n    else:\n        left.append(left[-1])\n    if s[n-1-i] == 'E':\n        tmp = right[-1] + 1\n        right.append(tmp)\n    else:\n        right.append(right[-1])\nmi = 10**18\nright = right[::-1]\nfor i in range(n+1):\n    if mi > left[i] + right[i]:\n        mi = left[i] + right[i]\nprint(mi)", "code2": "N = int(input())\nA = list(map(int, input().split()))\n\ndef selection_sort(A, N):\n    count = 0\n    for i in range(0, N):\n        min_j = i\n        for j in range(i, N):\n            if A[j] < A[min_j]:\n                min_j = j\n        if min_j != i:\n            count += 1\n        A[i], A[min_j] = A[min_j], A[i]\n    return A, count\n\nA, count = selection_sort(A, N)\nprint(' '.join(map(str, A)))\nprint(count)\n", "label": 0, "name1": "s487064711.py", "name2": "s850451389.py"}, {"id": 374, "code1": "AI, AO, _, AJ, AL, _, _ = map(int, input().split())\n\nodd = AI % 2 + AJ % 2 + AL % 2\nif odd == 0 or odd == 3:\n    print(AI + AO + AJ + AL)\nelif odd == 1:\n    print(AI + AO + AJ + AL - 1)\nelse:\n    if AI + AJ + AL == 2:\n        print(AO)\n    else:\n        print(AI + AO + AJ + AL - 1)\n", "code2": "i, o, t, j, l, s, z = map(int, input().split())\nans = 0\nans += o\nnum = 0\nif i % 2 == 1:\n\tnum += 1\nif j % 2 == 1:\n\tnum += 1\nif l % 2 == 1:\n\tnum += 1\nif num >= 2 and i * j * l != 0:\n\tans += 3\n\ti -= 1\n\tj -= 1\n\tl -= 1\nans += 2 * (i // 2)\nans += 2 * (j // 2)\nans += 2 * (l // 2)\n\nprint(ans)", "label": 1, "name1": "s383965736.py", "name2": "s217107193.py"}, {"id": 854, "code1": "l = [[], [], []]\nans = []\nfor i in range(3):\n  for j in range(8):\n    s = raw_input().split()\n    l[i].append([float(s[1]), int(s[0])])\nfor i in range(3):\n  l[i].sort()\n  ans.append(l[i].pop(0))\n  ans.append(l[i].pop(0))\nl = l[0] + l[1] + l[2]\nl.sort()\nans.append(l.pop(0))\nans.append(l.pop(0))\nfor n in ans:\n  print str(n[1]) + \" \" + str(n[0])", "code2": "n, m = map(int, input().split())\np = []\ns = []\nfor i in range(m):\n    input1, input2 = input().split()\n    p.append(int(input1))\n    s.append(input2)\n\ncorrect = [0] * n\npenalty = [0] * n\nfor i in range(m):\n    tgt = p[i] - 1\n    if correct[tgt] == 1:\n        continue\n    if s[i] == 'AC':\n        correct[tgt] += 1\n    elif s[i] == 'WA':\n        penalty[tgt] += 1\n\nfor i in range(m):\n    tgt = p[i] - 1\n    if correct[tgt] == 0:\n        penalty[tgt] = 0\n\nprint('{0} {1}'.format(sum(correct), sum(penalty)))\n", "label": 0, "name1": "s549811190.py", "name2": "s366260920.py"}, {"id": 977, "code1": "n,a,b= map(int,input().split())\nsh = sorted([int(input()) for i in range(n)],reverse=True)\nsumh = sum(sh)\ndef nibu(t):\n    rt=0\n    for i in range(n):\n        temp = -1*(-1*max(0,sh[i]-t*b)//(a-b))\n        if temp>0:rt+=temp\n        else:break\n        if rt>t:return False\n    return True if t>=rt else False\nl=max(sh)//a\nr=max(sh)//b+1\nwhile r-l!=1:\n    m = (l+r)//2\n    if nibu(m):r=m\n    else:l=m\nprint(r)\n", "code2": "# Aizu Problem 0185: Goldbach Conjecture II\n#\nimport sys, math, os, bisect\n\n# read input:\nPYDEV = os.environ.get('PYDEV')\nif PYDEV==\"True\":\n    sys.stdin = open(\"sample-input.txt\", \"rt\")\n\n\ndef primes2(n):\n    \"\"\" Input n>=6, Returns a list of primes, 2 <= p < n \"\"\"\n    n, correction = n-n%6+6, 2-(n%6>1)\n    sieve = [True] * (n//3)\n    for i in range(1,int(n**0.5)//3+1):\n      if sieve[i]:\n        k=3*i+1|1\n        sieve[      k*k//3      ::2*k] = [False] * ((n//6-k*k//6-1)//k+1)\n        sieve[k*(k-2*(i&1)+4)//3::2*k] = [False] * ((n//6-k*(k-2*(i&1)+4)//6-1)//k+1)\n    return [2,3] + [3*i+1|1 for i in range(1,n//3-correction) if sieve[i]]\n\nprimes = primes2(10**6)\npset = set(primes)\n\nwhile True:\n    n = int(input())\n    if n == 0:\n        break\n    S = 0\n    for p in primes:\n        if p > n // 2:\n            break\n        if n - p in pset:\n            S += 1\n    print(S)", "label": 0, "name1": "s242197255.py", "name2": "s372898939.py"}, {"id": 700, "code1": "class Unionfind:\n     \n    def __init__(self,n):\n        self.uf = [-1]*n\n \n    def find(self,x):\n        if self.uf[x] < 0:\n            return x\n        else:\n            self.uf[x] = self.find(self.uf[x])\n            return self.uf[x]\n \n    def same(self,x,y):\n        return self.find(x) == self.find(y)\n \n    def union(self,x,y):\n        x = self.find(x)\n        y = self.find(y)\n        if x == y:\n            return False\n        if self.uf[x] > self.uf[y]:\n            x,y = y,x\n        self.uf[x] += self.uf[y]\n        self.uf[y] = x\n        return True\n \n    def size(self,x):\n        x = self.find(x)\n        return -self.uf[x]\n\nn,m = map(int,input().split())\n\nu = Unionfind(n)\ncount = 0\nfor i in range(m):\n    a,b = map(int,input().split())\n    a -= 1\n    b -= 1\n    u.union(a,b)\n\ns = set()\nfor i in range(n):\n    s.add(u.find(i))\nprint(len(s)-1)", "code2": "a, b, c = map(int, input().split())\nans = c - (a - b)\n\nif ans >= 0:\n    print(ans)\nelse:\n    print(0)", "label": 0, "name1": "s213272363.py", "name2": "s855957951.py"}, {"id": 179, "code1": "# coding: utf-8\ndef check(a,b):\n    if (a,b) in memo:\n        return memo[(a,b)]\n    if 0<=a<h and 0<=b<w and field[a][b].isdigit():\n        x=check(a+1,b)\n        y=check(a,b+1)\n        memo[(a,b)]=field[a][b]+(x if len(x)>len(y) else x if len(x)==len(y) and len(x)!=0 and int(x)>int(y) else y)\n        return field[a][b]+(x if len(x)>len(y) else x if len(x)==len(y) and len(x)!=0 and int(x)>int(y) else y)\n    else:\n        return ''\nwhile 1:\n    w,h=map(int,input().split())\n    if w==0:\n        break\n    field=[]\n    for i in range(h):\n        field.append(list(input()))\n    ans='0'\n    memo={}\n    for i in range(h):\n        for j in range(w):\n            if field[i][j]!='0' and field[i][j].isdigit():\n                tmp=check(i,j)\n                if int(ans)<int(tmp):\n                    ans=tmp\n    print(ans)\n", "code2": "def isValid(row, col, ROWS, COLS):\n    return row >= 0 and row < ROWS and col >= 0 and col < COLS\n\ndef search(matrix, row, col, ROWS, COLS, memo):\n    if (row, col) in memo:\n        return memo[(row, col)]\n    \n    numStrA = ''\n    numStrB = ''\n\n    rr = row + 1\n    cc = col\n    if isValid(rr, cc, ROWS, COLS) and matrix[rr][cc].isdigit():\n        numStrA = search(matrix, rr, cc, ROWS, COLS, memo)\n\n    rr = row\n    cc = col + 1\n    if isValid(rr, cc, ROWS, COLS) and matrix[rr][cc].isdigit():\n        numStrB = search(matrix, rr, cc, ROWS, COLS, memo)\n\n    numStrA = matrix[row][col] + numStrA\n    numStrB = matrix[row][col] + numStrB\n\n    if len(numStrA) > len(numStrB):\n        val = numStrA\n    elif len(numStrB) > len(numStrA):\n        val = numStrB\n    else:\n        if numStrA > numStrB:\n            val = numStrA\n        else:\n            val = numStrB\n\n    memo[(row, col)] = val\n    return val\n\nif __name__ == '__main__':\n    while True:\n        COLS, ROWS = [ int(x) for x in list(filter(lambda x: x != '', \\\n            input().strip().split(' '))) ]\n        if ROWS == 0 and COLS == 0:\n            break\n\n        matrix = []\n        for _ in range(ROWS):\n            matrix.append(input().strip())\n        \n        maxNum = 0\n        memo = {}\n        for row in range(ROWS):\n            for col in range(COLS):\n                if matrix[row][col].isdigit() and matrix[row][col] != '0':\n                    maxNum = max(maxNum, int(search(matrix, row, col, ROWS, COLS, memo)))\n\n        print(maxNum)\n", "label": 1, "name1": "s573602328.py", "name2": "s153886931.py"}, {"id": 984, "code1": "MN = 1000000\nprime = []\nmem = [False] * 2 + [True] * MN\nfor i in range(2, MN):\n  if not mem[i]:\n    continue\n  prime.append(i)\n  for j in range(i + i, MN, i):\n    mem[j] = False\n\nwhile True:\n  N, ans = input(), 0\n  if not N:\n    break\n\n  for p in prime:\n    if p > N / 2:\n      break\n    if mem[N - p]:\n      ans += 1\n  print(ans)", "code2": "import sys\ns = input()\nk = len(s)\nfor i in range(2,len(s),2):\n    s = s[:len(s)-2]\n    if s[:(len(s)//2)] == s[(len(s)//2):]:\n        print(k-i)\n        sys.exit()\n    ", "label": 0, "name1": "s690247182.py", "name2": "s986303518.py"}, {"id": 366, "code1": "from heapq import heappush,heappop\nINF=10**18\nn,m,r=map(int,input().split())\ne=[[] for _ in range(n)]\nd=[INF]*n\nfor i in range(m):\n  a,b,c=map(int,input().split())\n  e[a].append((b,c))\nq=[]\nheappush(q,(0,r))\nd[r]=0\nwhile q:\n  dist,node=heappop(q)\n  for to,cost in e[node]:\n    if d[to]>cost+dist:\n      d[to]=cost+dist\n      heappush(q,(d[to],to))\nfor i in d:\n  if i!=INF:print(i)\n  else:print('INF')\n", "code2": "import heapq\nN, M, S = map(int, input().split())\nedges = [[]for _ in range(N)]\ninf = 10**18\nfor _ in range(M):\n    u, v, d = map(int, input().split())\n    edges[u].append((v, d))\n\n\ndef dijkstra(s):\n\n    dist = [inf]*N\n    dist[s] = 0\n    vs = []\n    heapq.heappush(vs, (0, s))\n    while len(vs):\n        res, v = heapq.heappop(vs)\n        if res > dist[v]:\n            continue\n        for nxt, cost in edges[v]:\n            if res+cost < dist[nxt]:\n                dist[nxt] = res+cost\n                heapq.heappush(vs, (dist[nxt], nxt))\n    return dist\n\n\ndist = dijkstra(S)\nfor i in range(N):\n    if dist[i] == inf:\n        print(\"INF\")\n    else:\n        print(dist[i])\n\n", "label": 1, "name1": "s737089154.py", "name2": "s577496395.py"}, {"id": 386, "code1": "h, w = map(int, input().split())\na = [list(input()) for i in range(h)]\nta = [[\".\"] * w for i in range(h)]\nao = [[\".\"] * w for i in range(h)]\nfor i in range(h):\n    if i % 2 == 0:\n        for j in range(w - 1):\n            ta[i][j] = \"#\"\n        ao[i][-1] = \"#\"\n    else:\n        for j in range(1, w):\n            ao[i][j] = \"#\"\n        ta[i][0] = \"#\"\nfor i in range(h):\n    for j in range(w):\n        if a[i][j] == \"#\":\n            ta[i][j] = \"#\"\n            ao[i][j] = \"#\"\nfor i in range(h):\n    print(*ta[i], sep=\"\")\nprint()\nfor i in range(h):\n    print(*ao[i], sep=\"\")", "code2": "H,W = map(int,input().split())\nsrc = [input() for i in range(H)]\n\nans1 = [['#'] + ['.']*(W-1) for i in range(H)]\nans2 = [['.']*(W-1) + ['#'] for i in range(H)]\n\nfor i in range(1,H-1):\n    for j in range(1,W-1):\n        if i%2:\n            ans1[i][j] = '#'\n            ans2[i][j] = src[i][j]\n        else:\n            ans1[i][j] = src[i][j]\n            ans2[i][j] = '#'\n\nfor row in ans1:\n    print(''.join(row))\nprint('')\nfor row in ans2:\n    print(''.join(row))", "label": 1, "name1": "s319820171.py", "name2": "s074407161.py"}, {"id": 849, "code1": "data = []\ntmp = []\nans = []\n\ndef pushAns(d):\n    for j in range(2):\n        ans.append((d[0][0],d[0][1]))\n        d.pop(0)    \n\nfor i in range(24):\n    a,b = (float(x) for x in input().split())\n    tmp.append((a,b))\n    if (i + 1) % 8 == 0:\n        tmp.sort(key=lambda x:x[1])\n        pushAns(tmp)\n        data.extend(tmp)\n        tmp.clear()\n        \ndata.sort(key=lambda x:x[1])\npushAns(data)\n\nfor i in range(8):\n    print(int(ans[i][0]),ans[i][1])\n", "code2": "from fractions import gcd \n\n\nn = int(input())\nl = list(map(int, input().split()))\nnum = 0\nfor i in range(len(l)):\n    num = gcd(num, l[i])\n\nprint(num)", "label": 0, "name1": "s435730800.py", "name2": "s849557734.py"}, {"id": 334, "code1": "s=input()\nn=len(s)\nl=[[] for _ in range(2**(n-1))]\nfor b in range(2**(n-1)):\n    x=b\n    for i in range(n-1):\n        if x%2==1:\n            l[b].append(1)\n        else:\n            l[b].append(0)\n        x//=2\n#print(l)\nindexes=[[] for _ in range(2**(n-1))]\nfor k in range(2**(n-1)):\n    indexes[k]=[i for i, x in enumerate(l[k]) if x == 1]\n#print(indexes)\nSUM=0\nfor j in range(2**(n-1)):\n    L=len(indexes[j])\n    if L==0:\n        SUM+=int(s)\n        #print(SUM)\n    else:\n        SUM+=int(s[:indexes[j][0]+1])\n        #print(SUM)\n        SUM+=int(s[indexes[j][L-1]+1:])\n        #print(SUM)\n        if L>1:\n            for h in range(L-1):\n                SUM+=int(s[indexes[j][h]+1:indexes[j][h+1]+1])\n                #print(SUM)\nprint(SUM)", "code2": "import sys\nif sys.platform =='ios':\n\tsys.stdin=open('Untitled.txt')\ninput = sys.stdin.readline\n\n# \u53c2\u7167URL:https://qiita.com/gogotealove/items/11f9e83218926211083a\n\n# n = [int(x) for x in input().rstrip()]\n# op_cnt = len(n) - 1  # \u3059\u304d\u9593\u306e\u500b\u6570\n# ans2 = []\n# for i in range(2 ** op_cnt):\n#     op = [\"\"] * op_cnt  # \u3042\u3089\u304b\u3058\u3081 [\"-\", \"-\", \"-\"] \u3068\u3044\u3046\u30ea\u30b9\u30c8\u3092\u4f5c\u3063\u3066\u304a\u304f\n#     for j in range(op_cnt):\n#         if ((i >> j) & 1):\n#             op[op_cnt - 1 - j] = \"+\"  # \u30d5\u30e9\u30b0\u304c\u7acb\u3063\u3066\u3044\u305f\u7b87\u6240\u3092 \"+\" \u3067\u4e0a\u66f8\u304d\n#     ans2.append(op)\n# for a in ans2:\n# \tprint(a)\n\nS = input().rstrip() # \u5165\u529b\u5024 \"1234\\n\" \u3092 \"1234\"\u306b\nn = len(S)-1 # \u30aa\u30da\u30ec\u30fc\u30bf\u304c\u5165\u308a\u3046\u308b\u9699\u9593\u306flen(S)-1\n\nops = []\nfor i in range(2**n): # \u5404\u9699\u9593\u306b\u5bfe\u3057\u3066\u3001 +\u3059\u308b\u3057\u306a\u3044\u306e2\u901a\u308a\u304c\u3042\u308b\u306e\u3067\u30012^n \u56de\u30eb\u30fc\u30d7\n\top = [\"\"] * n # \u3042\u3089\u304b\u3058\u3081\u30ea\u30b9\u30c8\u3092\u4f5c\u6210\n\tfor j in range(n):\n\t\tif((i>>j) & 1) == 1:  # \u9806\u306b\u53f3\u306b\u30b7\u30d5\u30c8\u3055\u305b\u6700\u4e0b\u4f4dbit\u306e\u30c1\u30a7\u30c3\u30af\u3092\u884c\u3046\n\t\t\top[n-1-j] = \"+\" # \u30d5\u30e9\u30b0\u304c\u7acb\u3063\u3066\u3044\u305f\u3089op\u306e\u5024\u3092\u66f8\u304d\u63db\u3048\u308b\n\tops.append(op)\n\n# \u3053\u3053\u307e\u3067\u3067 ops \u306e\u4e2d\u306b\u3042\u308a\u3046\u308b\u7d44\u307f\u5408\u308f\u305b\u304c\u5217\u6319\u3055\u308c\u308b\uff08\u4ee5\u4e0b\u306flen(S)-1==3\u306e\u4f8b\uff09\n# ['', '', '']\n# ['', '', '+']\n# ['', '+', '']\n# ['', '+', '+']\n# ['+', '', '']\n# ['+', '', '+']\n# ['+', '+', '']\n# ['+', '+', '+']\n\nans = 0\nfor o in ops:\n\ts = [s for s in S]\n\tfor k in range(len(o)):\n\t\ts.insert(2*k+1, o[k])\n\tans += eval(''.join(s)) # eval \u3092\u5229\u7528\u3059\u308b\u3053\u3068\u3067\u6587\u5b57\u5217\u3092\u5f0f\u3068\u3057\u3066\u8a55\u4fa1\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u308b\n\nprint(ans)", "label": 1, "name1": "s307853353.py", "name2": "s854607235.py"}, {"id": 880, "code1": "a,b=input().split()\nif a==\"H\":\n  if b==\"H\":\n    print(\"H\")\n  else:\n    print(\"D\")\nif a==\"D\":\n  if b==\"H\":\n    print(\"D\")\n  else:\n    print(\"H\")", "code2": "k = int(input())\n\na, b = map(int, input().split())\n\nflag = False\n\nfor i in range(1,1000):\n    n = i*k\n    if n >= a and n <=b:\n        flag =True\n        break\n\nif flag == True:\n    print(\"OK\")\nelse:\n    print(\"NG\")", "label": 0, "name1": "s799192785.py", "name2": "s386666511.py"}, {"id": 56, "code1": "t =0\nfor a in range(4):\n  y = int(input())\n  t += y\nc = t\ng=0\nwhile True:\n if c <0: break\n else:\n  c-=60\n  g+=1\ng-=1\nprint g\nprint t%60", "code2": "t=sum([input()for i in range(4)])\nprint \"%d\\n%d\"%(t/60,t%60)", "label": 1, "name1": "s359341708.py", "name2": "s212246504.py"}, {"id": 809, "code1": "n=int(input())\n\nL=[[] for i in range(n+1)]\n\nfor i in range(n-1):\n    a,b=map(int,input().split())\n    L[a].append(b)\n    L[b].append(a)\n\nfe=[0 for i in range(n+1)]\nque=[(1,0)]\nvisited=[0 for i in range(n+1)]\nvisited[1]=1\nhead=0\n\nwhile len(que)>head:\n    now=que[head]\n    head+=1\n    fe[now[0]]=now[1]\n    for nex in L[now[0]]:\n        if visited[nex]==0:\n            visited[nex]=1\n            que.append((nex,now[1]+1))\n            \nsn=[0 for i in range(n+1)]\nque=[(n,0)]\nvisited=[0 for i in range(n+1)]\nvisited[-1]=1\nhead=0\n\nwhile len(que)>head:\n    now=que[head]\n    head+=1\n    sn[now[0]]=now[1]\n    for nex in L[now[0]]:\n        if visited[nex]==0:\n            visited[nex]=1\n            que.append((nex,now[1]+1))\n\nkaname=[]\nfor i in range(1,n+1):\n    ck=fe[i]-sn[i]\n    if ck==1 or ck==2:\n        kaname.append(i)\n\ncnt=0\nque=[(1,0)]\nvisited=[0 for i in range(n+1)]\nvisited[1]=1\nhead=0\n\nwhile len(que)>head:\n    now=que[head]\n    head+=1\n    cnt+=1\n    for nex in L[now[0]]:\n        if visited[nex]==0 and not nex in kaname:\n            visited[nex]=1\n            que.append((nex,now[1]+1))\n\nif cnt*2>n:\n    print(\"Fennec\")\nelse:\n    print(\"Snuke\")", "code2": "N = int(input())\nA = list(map(int, input().split()))\nB = list(map(int, input().split()))\n\nplus_2 = 0\nminus = 0\nfor a, b in zip(A, B):\n    if a < b:\n        plus_2 += (b-a)//2\n    else:\n        minus += a-b\n\nif plus_2 >= minus:\n    print('Yes')\nelse:\n    print('No')", "label": 0, "name1": "s845599163.py", "name2": "s301247411.py"}, {"id": 869, "code1": "# AOJ 1503: Numbers\n# Python3 2018.7.13 bal4u\n\nimport sys\nn = int(input())\nif n == 1: print(4, 2, sep='\\n'); sys.exit(0)\nans = 1\nfor i in range(2, n+2): ans *= i\nprint(ans+2)\nfor i in range(2, n+2): print(i)\n", "code2": "a, b, c, x, y = map(int, input().split())\nc *= 2\nans = min(a+b, c) * min(x, y)\nif x>y:\n    ans += (x-y)*min(a, c)\nelse:\n    ans += (y-x)*min(b, c)\nprint(ans)", "label": 0, "name1": "s590878073.py", "name2": "s327021416.py"}, {"id": 282, "code1": "a, b = [], []\nappear_count = [0] * 4\nfor _ in range(3):\n    _a, _b = map(int, raw_input().split())\n    appear_count[_a - 1] += 1\n    appear_count[_b - 1] += 1\nif max(appear_count) == 3:\n    print \"NO\"\nelse:\n    print \"YES\"", "code2": "tree = [ [] for _ in range(4) ]\n\nfor i in range(3):\n    a, b = map(int, input().split())\n    a -= 1; b -= 1;\n    tree[a].append(b)\n    tree[b].append(a)\n\nfor i in range(4):\n    visited = [ False for _ in range(4) ]\n    cur = i\n    visited[cur] = True\n    for j in range(3):\n        for v in tree[cur]:\n            if not visited[v]:\n                next_v = v\n                break\n        visited[next_v] = True\n        cur = next_v\n\nprint ( \"YES\" if all(visited) else \"NO\" )\n", "label": 1, "name1": "s562629657.py", "name2": "s679343249.py"}, {"id": 742, "code1": "'''\n????????\u00a3????????????1??????????????????\n??\\???C++??\u00a7????????????????\u00a7\u00a3?\u00b1???????????????????????????????????????\u00a7???\n??????python??\u00a7??????????????????Accept??\u00a7??????????????????\n????????\u00a3??\u00a8optimization??????????????\u00a7??????\n??\u00a7????????????Wrong Answer??\u00a7?????????\n???????????????????????????????????????????????????\nOnline Judge???????????????Public Solutions??\u00a7????????????nanae?????????python3????????????????????????\n????????\u00a3??\u00a8?????????????????????\n???????????????????????????0.06?\u00a7????????????\u00a7??????\n'''\n\nimport queue\nv,e,s=map(int,input().split())\nedge=[]\ninf =1000000100\nfor i in range(v):\n    edge.append([])\n\nfor i in range(e):\n    vs,vt,d=map(int,input().split())\n    edge[vs].append((vt,d))\n    \ndis=[]\nfor i in range(v):\n    dis.append(inf)\n\ndis[s]=0\n\nq = queue.PriorityQueue()\nq.put((0,s))\n\n'''\nwhile(not q.empty()):\n    now=q.get()\n    nowv=now[1]\n    for (vt,d) in edge[nowv]:\n        if dis[vt]>dis[nowv]+d:\n            dis[vt]=dis[nowv]+d\n            q.put((dis[vt],vt))\n'''\n\nfinished=0\nwhile(finished<v and not q.empty()):\n    now=q.get()\n    nowv=now[1]\n    if now[0]>dis[nowv]: continue\n    for (vt,d) in edge[nowv]:\n        if dis[vt]>dis[nowv]+d:\n            dis[vt]=dis[nowv]+d\n            q.put((dis[vt],vt))\n    finished+=1       \n\nfor i in range(v):\n    if dis[i]>=inf:\n        print(\"INF\")\n    else:\n        print(dis[i])", "code2": "AI, AO, _, AJ, AL, _, _ = map(int, input().split())\n\nodd = AI % 2 + AJ % 2 + AL % 2\nif odd == 0 or odd == 3:\n    print(AI + AO + AJ + AL)\nelif odd == 1:\n    print(AI + AO + AJ + AL - 1)\nelse:\n    if AI + AJ + AL == 2:\n        print(AO)\n    else:\n        print(AI + AO + AJ + AL - 1)\n", "label": 0, "name1": "s256416940.py", "name2": "s383965736.py"}, {"id": 698, "code1": "import numpy as np\nn,m = map(int, input().split())\nX = sorted(np.array(input().split(), dtype = np.int64))\nX = sorted(np.diff(X))\nif m-n >= 0:\n    ans = sum(X[:m-n])\nelse:\n    ans = 0\nprint(ans)", "code2": "import sys\nsys.setrecursionlimit(10**7) #\u518d\u5e30\u95a2\u6570\u306e\u4e0a\u9650,10**5\u4ee5\u4e0a\u306e\u5834\u5408python\nimport math\nfrom copy import copy, deepcopy\nfrom copy import deepcopy as dcp\nfrom operator import itemgetter\nfrom bisect import bisect_left, bisect, bisect_right#2\u5206\u63a2\u7d22\n#bisect_left(l,x), bisect(l,x)#a\u306f\u30bd\u30fc\u30c8\u6e08\u307f\u3067\u3042\u308b\u5fc5\u8981\u3042\u308a\u3002a\u306e\u4e2d\u304b\u3089x\u672a\u6e80\u306e\u8981\u7d20\u6570\u3092\u8fd4\u3059\u3002right\u3060\u3068\u4ee5\u4e0b\nfrom collections import deque, defaultdict\n#deque(l), pop(), append(x), popleft(), appendleft(x)\n#q.rotate(n)\u3067 \u2192 \u306bn\u56de\u30ed\u30fc\u30c6\u30fc\u30c8\nfrom collections import Counter#\u6587\u5b57\u5217\u3092\u500b\u6570\u30ab\u30a6\u30f3\u30c8\u8f9e\u66f8\u306b\u3001\n#S=Counter(l),S.most_common(x),S.keys(),S.values(),S.items()\nfrom itertools import accumulate,combinations,permutations,product#\u7d2f\u7a4d\u548c\n#list(accumulate(l))\nfrom heapq import heapify,heappop,heappush\n#heapify(q),heappush(q,a),heappop(q) #q=heapify(q)\u3068\u3057\u306a\u3044\u3053\u3068\u3001\u8fd4\u308a\u5024\u306fNone\nfrom functools import reduce,lru_cache#pypy\u3067\u3082\u3046\u3054\u304f\n#@lru_cache(maxsize = None)#maxsize\u306f\u4fdd\u5b58\u3059\u308b\u30c7\u30fc\u30bf\u6570\u306e\u6700\u5927\u5024\u30012**n\u304c\u6700\u3082\u9ad8\u52b9\u7387\nfrom decimal import Decimal\n\ndef input(): \n    x=sys.stdin.readline()\n    return x[:-1] if x[-1]==\"\\n\" else x\ndef printe(*x):print(\"## \",*x,file=sys.stderr)\ndef printl(li): _=print(*li, sep=\"\\n\") if li else None\ndef argsort(s, return_sorted=False): \n    inds=sorted(range(len(s)), key=lambda k: s[k])\n    if return_sorted: return inds, [s[i] for i in inds]\n    return inds\ndef alp2num(c,cap=False): return ord(c)-97 if not cap else ord(c)-65\ndef num2alp(i,cap=False): return chr(i+97) if not cap else chr(i+65)\ndef matmat(A,B):\n    K,N,M=len(B),len(A),len(B[0])\n    return [[sum([(A[i][k]*B[k][j]) for k in range(K)]) for j in range(M)] for i in range(N)]\ndef matvec(M,v):\n    N,size=len(v),len(M)\n    return [sum([M[i][j]*v[j] for j in range(N)]) for i in range(size)]\ndef T(M):\n    n,m=len(M),len(M[0])\n    return [[M[j][i] for j in range(n)] for i in range(m)]\ndef binr(x): return bin(x)[2:]\ndef bitcount(x): #x\u306f64bit\u6574\u6570\n    x= x - ((x >> 1) & 0x5555555555555555)\n    x= (x & 0x3333333333333333) + ((x >> 2) & 0x3333333333333333)\n    x= (x + (x >> 4)) & 0x0f0f0f0f0f0f0f0f \n    x+= (x >> 8); x+= (x >> 16); x+= (x >> 32) \n    return x & 0x7f\n\ndef main():\n    mod = 1000000007\n    #w.sort(key=itemgetter(1),reverse=True)  #\u4e8c\u500b\u76ee\u306e\u8981\u7d20\u3067\u964d\u9806\u4e26\u3073\u66ff\u3048\n\n    #N = int(input())\n    a,b,c = map(int, input().split())\n\n\n    print(max(0,c-(a-b)))\n\n\n\nif __name__ == \"__main__\":\n    main()", "label": 0, "name1": "s052852893.py", "name2": "s948835843.py"}, {"id": 972, "code1": "import bisect\nn = int(input())\na = list(map(int, input().split()))\nb = list(map(int, input().split()))\nc = list(map(int, input().split()))\nbsort = sorted(b)\ncsort = sorted(c)\nres = 0\nasum = [0] * n\nbsum = [0] * n\nfor i in range(n):\n    asum[i] = n - bisect.bisect_right(bsort, a[i])\nfor i in range(n):\n    bsum[i] = n - bisect.bisect_right(csort, b[i])\nbsum.sort()\ntotal = 0\nfor i in range(n):\n    total += bsum[i]\n    bsum[i] = total\nres = 0\nfor i in range(n):\n    if asum[i] != 0:\n        res += bsum[asum[i] -1]\nprint(res)", "code2": "MN = 1000000\nprime = []\nmem = [False] * 2 + [True] * MN\nfor i in range(2, MN):\n  if not mem[i]:\n    continue\n  prime.append(i)\n  for j in range(i + i, MN, i):\n    mem[j] = False\n\nwhile True:\n  N, ans = input(), 0\n  if not N:\n    break\n\n  for p in prime:\n    if p > N / 2:\n      break\n    if mem[N - p]:\n      ans += 1\n  print(ans)", "label": 0, "name1": "s514022897.py", "name2": "s690247182.py"}, {"id": 628, "code1": "from sys import stdin\n\n\ndef main():\n    input = lambda: stdin.readline()[:-1]\n    N = int(input())\n    A = list(map(int, input().split()))\n\n    A.sort(reverse=1)\n    d, m = divmod(N, 2)\n    n = [2] * (d + m)\n    n[-1], n[0] = n[-1] - m, 1\n    ans = 0\n    for i, k in enumerate(n):\n        ans += A[i] * k\n    print(ans)\n\n\nmain()\n", "code2": "n = int(input())\nt = list(map(int, input().split()))\na = list(map(int, input().split()))\nmod = 10 ** 9 + 7\n\nans, frag = 1, 0\nfor i in range(n):\n    if t[i] == a[i] == t[-1] == a[0]:\n        frag = 1\n    if 0 < i < n - 1 and t[i - 1] == t[i] and a[i] == a[i + 1]:\n        ans = ans * min(t[i], a[i]) % mod\nprint(ans * frag)\n", "label": 0, "name1": "s775405634.py", "name2": "s894086979.py"}, {"id": 997, "code1": "S = input()\nl = len(S)\n\nfor i in range(1, l//2):\n  if S[:l//2-i] == S[l//2-i:l-2*i]:\n    print(l-2*i)\n    break", "code2": "N = int(input())\nT, A = map(int, input().split())\nH = list(map(int, input().split()))\n\nmin_i = 0\nmin_temp = 100000000000000\n\nfor i, h in enumerate(H):\n\n    temp = T - h * 0.006\n\n    if abs(A - temp) < min_temp:\n        min_i = i\n        min_temp = abs(A - temp)\n\nprint(min_i + 1)\n", "label": 0, "name1": "s423959382.py", "name2": "s942055979.py"}, {"id": 280, "code1": "deg = [0] * 4\nfor _ in range(3):\n    a, b = map(int, input().split())\n    deg[a - 1] += 1\n    deg[b - 1] += 1\nif all(x <= 2 for x in deg):\n    print(\"YES\")\nelse:\n    print(\"NO\")\n", "code2": "tree = [ [] for _ in range(4) ]\n\nfor i in range(3):\n    a, b = map(int, input().split())\n    a -= 1; b -= 1;\n    tree[a].append(b)\n    tree[b].append(a)\n\nfor i in range(4):\n    visited = [ False for _ in range(4) ]\n    cur = i\n    visited[cur] = True\n    for j in range(3):\n        for v in tree[cur]:\n            if not visited[v]:\n                next_v = v\n                break\n        visited[next_v] = True\n        cur = next_v\n\nprint ( \"YES\" if all(visited) else \"NO\" )\n", "label": 1, "name1": "s546079663.py", "name2": "s679343249.py"}, {"id": 783, "code1": "import math,string,itertools,fractions,heapq,collections,re,array,bisect,sys,random,time,copy,functools\n\nsys.setrecursionlimit(10**7)\ninf = 10**20\neps = 1.0 / 10**10\nmod = 998244353\ndd = [(0,-1),(1,0),(0,1),(-1,0)]\nddn = [(0,-1),(1,-1),(1,0),(1,1),(0,1),(-1,-1),(-1,0),(-1,1)]\n\ndef LI(): return [int(x) for x in sys.stdin.readline().split()]\ndef LI_(): return [int(x)-1 for x in sys.stdin.readline().split()]\ndef LF(): return [float(x) for x in sys.stdin.readline().split()]\ndef LS(): return sys.stdin.readline().split()\ndef I(): return int(sys.stdin.readline())\ndef F(): return float(sys.stdin.readline())\ndef S(): return input()\ndef pf(s): return print(s, flush=True)\n\n\ndef main():\n    rr = []\n\n    while True:\n        n = I()\n        if n == 0:\n            break\n\n        a = [S().split(':') for _ in range(n)]\n        ts = set([c[0] for c in a])\n        ms = {}\n        for t,m in a:\n            ms[t] = m[:-1].split(',')\n\n        fm = {}\n        def f(c):\n            if c in fm:\n                return fm[c]\n            if c in ts:\n                s = set()\n                for k in ms[c]:\n                    s |= f(k)\n                fm[c] = s\n                return s\n            fm[c] = set([c])\n            return fm[c]\n\n        r = f(a[0][0])\n\n        rr.append(len(r))\n\n    return '\\n'.join(map(str,rr))\n\n\nprint(main())\n\n\n", "code2": "def inpl(): return [int(i) for i in input().split()]\nclass UnionFind():\n    def __init__(self, num):\n        self.par = [-1 for _ in range(num)]\n    \n    def find(self, x):\n        if self.par[x] < 0:\n            return x\n        else:\n            x = self.par[x]\n            return self.find(x)\n    \n    def union(self, x, y):\n        rx = self.find(x)\n        ry = self.find(y)\n        if rx != ry:\n            if self.par[rx] < self.par[ry]:\n                self.par[ry] = rx\n            if self.par[rx] > self.par[ry]:\n                self.par[rx] = ry\n            else:\n                self.par[rx] -= 1\n                self.par[ry] = rx\n        return\n\nN, K, L = inpl()\nufk = UnionFind(N)\nfor i in range(K):\n    p, q = inpl()\n    ufk.union(p-1, q-1)\n\nufr = UnionFind(N)\nfor i in range(L):\n    r, s = inpl()\n    ufr.union(r-1, s-1)\n\nfrom collections import defaultdict\nans = defaultdict(lambda: 0)\nfor i in range(N):\n    ans[ufk.find(i),ufr.find(i)] +=1\nAns = [0 for _ in range(N)]\nfor i in range(N):\n    Ans[i] = ans[ufk.find(i),ufr.find(i)]\nprint(*Ans)", "label": 0, "name1": "s451877142.py", "name2": "s236967102.py"}, {"id": 778, "code1": "def gcd(x,y):\n    a=max(x,y)\n    b=min(x,y)\n    if a%b==0:\n        return b\n    else:\n        return gcd(b,a%b)\n\ndef lcm(x,y):\n    return (x*y)//gcd(x,y)\n\nN=int(input())\nans=1\nfor i in range(N):\n    ans=lcm(ans,int(input()))\nprint(ans)\n", "code2": "#!/usr/bin/env python3\nfrom collections import defaultdict,deque\nfrom heapq import heappush, heappop\nfrom bisect import bisect_left, bisect_right\nimport sys, random, itertools, math\nsys.setrecursionlimit(10**5)\ninput = sys.stdin.readline\nsqrt = math.sqrt\ndef LI(): return list(map(int, input().split()))\ndef LF(): return list(map(float, input().split()))\ndef LI_(): return list(map(lambda x: int(x)-1, input().split()))\ndef II(): return int(input())\ndef IF(): return float(input())\ndef LS(): return list(map(list, input().split()))\ndef S(): return list(input().rstrip())\ndef IR(n): return [II() for _ in range(n)]\ndef LIR(n): return [LI() for _ in range(n)]\ndef FR(n): return [IF() for _ in range(n)]\ndef LFR(n): return [LI() for _ in range(n)]\ndef LIR_(n): return [LI_() for _ in range(n)]\ndef SR(n): return [input().rstrip()[:-1] for _ in range(n)]\ndef LSR(n): return [LS() for _ in range(n)]\nmod = 1000000007\ninf = 1e10\n\n#solve\ndef solve():\n    n = II()\n    if n == 0:\n        return False\n    group = set()\n    go_group = set()\n    member = set()\n    d = defaultdict(int)\n    g = SR(n)\n    for gi in g:\n        group.add(gi.split(\":\")[0])\n        d[gi.split(\":\")[0]] = gi.split(\":\")[1].split(\",\")\n    C = defaultdict(int)\n    def s(g):\n        for gi in g:\n            if gi in group:\n                if C[gi]:\n                    continue\n                C[gi] = 1\n                s(d[gi])\n            else:\n                member.add(gi)\n    s(d[g[0].split(\":\")[0]])\n    print(len(member))\n    return True\n\n#main\nif __name__ == '__main__':\n    while solve():\n        pass\n\n", "label": 0, "name1": "s751000860.py", "name2": "s728275108.py"}, {"id": 206, "code1": "N = int(raw_input())\nT_list = map(int, raw_input().split())\nA_list = map(int, raw_input().split())\n\nlow_list = [1]*N\nhigh_list = [1]*N\n\nt_now = 0\nfor i in range(N):\n    if T_list[i] > t_now:\n        t_now = T_list[i]\n        low_list[i] = T_list[i]\n        high_list[i] = T_list[i]\n    else:\n        high_list[i] = T_list[i]\na_now = 0\nfor j in range(N):\n    i = N - 1 - j\n    if A_list[i] > a_now:\n        a_now = A_list[i]\n        low_list[i] = max(A_list[i], low_list[i])\n        high_list[i] = min(A_list[i], high_list[i])\n    else:\n        high_list[i] = min(A_list[i], high_list[i])\n    \nres = 1\nfor i in range(N):\n    if high_list[i] < low_list[i]:\n        res = 0\n        break\n    else:\n        res = res*(high_list[i] - low_list[i] + 1) % 1000000007\n\nprint res", "code2": "n = int(input())\nt = list(map(int, input().split()))\na = list(map(int, input().split()))\nmod = 10 ** 9 + 7\n\n# \u89e3\u8aacAC\nif n <= 2:\n    print(int(t == a))\n    exit()\n\nans = 1\nfor i in range(1, n - 1):\n    ht, ha = 0, 0\n    if t[i - 1] < t[i] and a[i] > a[i + 1]:\n        if t[i] != a[i]:\n            print(0)\n            break\n    if t[i - 1] < t[i]:\n        if t[i] > a[i]:\n            print(0)\n            break\n    elif a[i] > a[i + 1]:\n        if t[i] < a[i]:\n            print(0)\n            break\n    else:\n        ans = ans * min(t[i], a[i]) % mod\nelse:\n    print(ans)\n", "label": 1, "name1": "s251140241.py", "name2": "s265158851.py"}, {"id": 66, "code1": "while True:\n    data = {}\n    n = input()\n    if n == 0:\n        break\n    for i in range(n):\n        tmp = raw_input()\n        tmp_data = tmp.split(\" \")\n        if i == 0:\n            data.update({tmp_data[0] : int(tmp_data[1]) + int(tmp_data[2])})\n        else:\n            flag = False\n            for j in data.iterkeys():\n                if data[j] < int(tmp_data[1]) + int(tmp_data[2]):\n                    flag = True\n                if flag:\n                    data.clear()\n                    data.update({tmp_data[0] : int(tmp_data[1]) + int(tmp_data[2])})\n\n    for key in data.iterkeys():\n        print \"%s %d\" % (key, data[key])", "code2": "# AOJ 0217 Walking in the Hospital\n# Python3 2018.6.23 bal4u\n\nwhile 1:\n\tn = int(input())\n\tif n == 0: break\n\tdmax = 0\n\tfor i in range(n):\n\t\tp, d1, d2 = map(int, input().split())\n\t\tif d1+d2 > dmax: id, dmax = p, d1+d2\n\tprint(id, dmax)\n", "label": 1, "name1": "s667605741.py", "name2": "s876770513.py"}, {"id": 444, "code1": "mod=1000000007\nn=input()\na=map(int, raw_input().split())\nfac=[1]\nfor i in range(1, 100001):\n\tfac.append(fac[-1]*i%mod)\ninv=[0, 1]\nfor i in range(2, 100001):\n\tinv.append(-(mod/i)*inv[mod%i]%mod)\ninv_sum=[0]\nfor i in range(1, 100000):\n\tinv_sum.append((inv_sum[-1]+inv[i+1])%mod)\nresult=0\nfor i in range(n):\n\tresult+=(inv_sum[i]+1+inv_sum[n-i-1])*a[i]%mod\n\tresult%=mod\nprint result*fac[n]%mod\n", "code2": "m=10**9+7\ni=s=r=0\nf=1\ninput()\na=input().split()\nfor x in a:i+=1;s+=pow(i,m-2,m);r+=int(x)*~-s+int(a[-i])*s;f=f*i%m\nprint(r*f%m)", "label": 1, "name1": "s393644468.py", "name2": "s072063122.py"}, {"id": 10, "code1": "import sys\n\ns = list(input())\n\nfor i in range(len(s)):\n  if i % 2 == 1:\n    if s[i] == \"L\" or s[i] == \"U\"or s[i] == \"D\":\n      continue\n    else:\n      print(\"No\")\n      sys.exit()\n  else:\n    if s[i] == \"R\" or s[i] == \"U\"or s[i] == \"D\":\n      continue\n    else:\n      print(\"No\")\n      sys.exit()\n\nprint(\"Yes\")", "code2": "S = input()\n\nflag = 'Yes'\nfor i in range(len(S)):\n    if i%2 == 0:\n        if S[i] == 'R' or S[i] == 'U' or S[i] == 'D':\n            pass\n        else:\n            flag = 'No'\n            break\n    if i%2 == 1:\n        if S[i] == 'L' or S[i] == 'U' or S[i] == 'D':\n            pass\n        else:\n            flag = 'No'\n            break\n\nprint(flag)\n", "label": 1, "name1": "s904714457.py", "name2": "s961835833.py"}, {"id": 717, "code1": "a,b,c = map(int,input().split())\n\nprint(min(a+b,b+c,c+a))\n", "code2": "s=input()\nn=len(s)\nl=[[] for _ in range(2**(n-1))]\nfor b in range(2**(n-1)):\n    x=b\n    for i in range(n-1):\n        if x%2==1:\n            l[b].append(1)\n        else:\n            l[b].append(0)\n        x//=2\n#print(l)\nindexes=[[] for _ in range(2**(n-1))]\nfor k in range(2**(n-1)):\n    indexes[k]=[i for i, x in enumerate(l[k]) if x == 1]\n#print(indexes)\nSUM=0\nfor j in range(2**(n-1)):\n    L=len(indexes[j])\n    if L==0:\n        SUM+=int(s)\n        #print(SUM)\n    else:\n        SUM+=int(s[:indexes[j][0]+1])\n        #print(SUM)\n        SUM+=int(s[indexes[j][L-1]+1:])\n        #print(SUM)\n        if L>1:\n            for h in range(L-1):\n                SUM+=int(s[indexes[j][h]+1:indexes[j][h+1]+1])\n                #print(SUM)\nprint(SUM)", "label": 0, "name1": "s223078477.py", "name2": "s307853353.py"}, {"id": 130, "code1": "def f(n, s):\n    md = 10 ** 9 + 7\n    dp = [1] * n\n    for i in range(n - 1):\n        if s[i] == \"<\":\n            L = dp[0]\n            for dpi in range(1, n - i - 1):\n                dp[dpi] = L = (dp[dpi] + L) % md\n            dp = dp[:-1]\n        else:\n            R = dp[-1]\n            for dpi in range(n - i - 2, 0, -1):\n                dp[dpi] = R = (dp[dpi] + R) % md\n            dp = dp[1:]\n    print(dp[0])\n\n\nn = int(input())\ns = input()\nf(n, s)\n", "code2": "N = int(input())\ns = input()\nMOD = 10**9+7\n\n#A1 ... An\u306eBIT(1-indexed)\nBIT = [0]*(N+1)\n\n#A1 ~ Ai\u307e\u3067\u306e\u548c O(logN)\ndef BIT_query(idx):\n    res_sum = 0\n    while idx > 0:\n        res_sum += BIT[idx]\n        idx -= idx&(-idx)\n    return res_sum\n\n#Ai += x O(logN)\ndef BIT_update(idx,x):\n    while idx <= N:\n        BIT[idx] += x\n        idx += idx&(-idx) #BIT_update(0, )\u3092\u3059\u308b\u3068 while \u304c\u7d42\u308f\u3089\u306a\u3044\n    return\n\n\ndp = [[0]*N for _ in range(N)] # dp[i][k]\uff1ai\u756a\u76ee\u307e\u3067\u898b\u305f\u6642\u306b\uff0ci\u756a\u76ee\u306e\u8981\u7d20\u3088\u308a\u5c0f\u3055\u3044\u5024\u306e\u500b\u6570\u304ck\u306e\u6642\u306e\u30d1\u30bf\u30fc\u30f3\u6570 \nfor k in range(N): dp[0][k] = 1\n\nfor i in range(1, N):\n    BIT = [0]*(N+1)\n    for k in range(N): BIT_update(k+1, dp[i-1][k]) #BIT_update(0, )\u3092\u3059\u308b\u3068 while \u304c\u7d42\u308f\u3089\u306a\u3044\n    if s[i-1] == '<':\n        for k in range(N-i): dp[i][k] = BIT_query(k+1) % MOD #sum([dp[i-1][j] for j in range(k+1)])\n    else:\n        for k in range(N): dp[i][k] = (BIT_query(N) - BIT_query(k+1)) % MOD #sum([dp[i-1][j] for j in range(k+1, N)])\n\nprint(dp[-1][0])", "label": 1, "name1": "s415178183.py", "name2": "s562446307.py"}, {"id": 755, "code1": "h, w = map(int, input().split())\na = [list(input()) for i in range(h)]\nta = [[\".\"] * w for i in range(h)]\nao = [[\".\"] * w for i in range(h)]\nfor i in range(h):\n    if i % 2 == 0:\n        for j in range(w - 1):\n            ta[i][j] = \"#\"\n        ao[i][-1] = \"#\"\n    else:\n        for j in range(1, w):\n            ao[i][j] = \"#\"\n        ta[i][0] = \"#\"\nfor i in range(h):\n    for j in range(w):\n        if a[i][j] == \"#\":\n            ta[i][j] = \"#\"\n            ao[i][j] = \"#\"\nfor i in range(h):\n    print(*ta[i], sep=\"\")\nprint()\nfor i in range(h):\n    print(*ao[i], sep=\"\")", "code2": "start, end, div = list(map(int, input().strip().split()))\n\ncount = end // div - start //div\n\nif start % div == 0:\n  count += 1\nprint(count)", "label": 0, "name1": "s319820171.py", "name2": "s009071418.py"}, {"id": 966, "code1": "\nn,c = map(int, input().split())\nd = []\nfor _ in range(c):\n    a = list(map(int, input().split()))\n    d.append(a)\n\ngrid = [[0 for j in range(c+1)] for i in range(3)]\nfor i in range(n):\n    for j,cc in enumerate(map(int, input().split())):\n        k = j\n        grid[(i+j)%3][cc] += 1\n\nans = float('INF')\n\nfor i in range(1,c+1):\n    for j in range(1,c+1):\n        if i == j:\n            continue\n        for k in range(1,c+1):\n            if i == k or j == k:\n                continue\n            cost = 0\n            for a in range(1,c+1):\n                # print(int(d[a-1][i-1]), grid[0][a], int(d[a-1][j-1]), grid[1][a], int(d[a-1][k-1]), grid[2][a])\n                cost += d[a-1][i-1] * grid[0][a] + d[a-1][j-1] * grid[1][a] + d[a-1][k-1] * grid[2][a]\n            \n            if cost < ans:\n                # print(i,j,k,cost)\n                ans = cost\n\nprint(int(ans))\n", "code2": "# -*- coding: utf-8 -*-\nimport bisect\nimport heapq\nimport math\nimport random\nfrom collections import Counter, defaultdict, deque\nfrom decimal import ROUND_CEILING, ROUND_HALF_UP, Decimal\nfrom fractions import Fraction\nfrom functools import lru_cache, reduce\nfrom itertools import combinations, combinations_with_replacement, product, permutations, accumulate\nfrom operator import add, mul, sub, itemgetter, attrgetter\n\n\nimport sys\n# sys.setrecursionlimit(10**6)\n# readline = sys.stdin.buffer.readline\nreadline = sys.stdin.readline\n\nINF = 2**62-1\n\n\ndef read_int():\n    return int(readline())\n\n\ndef read_int_n():\n    return list(map(int, readline().split()))\n\n\ndef read_float():\n    return float(readline())\n\n\ndef read_float_n():\n    return list(map(float, readline().split()))\n\n\ndef read_str():\n    return readline().strip()\n\n\ndef read_str_n():\n    return readline().strip().split()\n\n\ndef ep(*args):\n    print(*args, file=sys.stderr)\n\n\ndef mt(f):\n    import time\n\n    def wrap(*args, **kwargs):\n        s = time.perf_counter()\n        ret = f(*args, **kwargs)\n        e = time.perf_counter()\n\n        ep(e - s, 'sec')\n        return ret\n\n    return wrap\n\n\nclass Bisect:\n    def __init__(self, func):\n        self.__func = func\n\n    def bisect_left(self, x, lo, hi):\n        while lo < hi:\n            mid = (lo+hi)//2\n            if self.__func(mid) < x:\n                lo = mid+1\n            else:\n                hi = mid\n        return lo\n\n    def bisect_right(self, x, lo, hi):\n        while lo < hi:\n            mid = (lo+hi)//2\n            if x < self.__func(mid):\n                hi = mid\n            else:\n                lo = mid+1\n        return lo\n\n@mt\ndef slv(N, A, B, H):\n    c = A-B\n    def f(n):\n        m = n\n        for h in H:\n            h -= n * B\n            if h > 0:\n                m -= -(-h // c)\n        return 1 if m >= 0 else 0\n\n    return Bisect(f).bisect_left(1, 0, 10**9)\n\n\n\ndef main():\n    N, A, B = read_int_n()\n    H = [read_int() for _ in range(N)]\n    print(slv(N, A, B, H))\n\n\nif __name__ == '__main__':\n    main()\n", "label": 0, "name1": "s856621686.py", "name2": "s796173031.py"}, {"id": 263, "code1": "A, B, C, K = list(map(int,input().split()))\nif K <= A:\n  print(K)\nelif K <= (A + B):\n  print(A)\nelif K <= (A + B + C):\n  print(2*A + B - K)\nelse:\n  print(A + B - C)", "code2": "A, B, C, K = list(map(int, input().split()))\nif A <= K:\n  ans = A\nelse:\n  ans = K\nK -= A \nK -= B\nif K > 0:\n  ans -= K\nprint(ans)", "label": 1, "name1": "s098797347.py", "name2": "s691371673.py"}, {"id": 47, "code1": "def solve():\n    N = int(input())\n    A = list(map(int, input().split()))\n    b = 0\n    c = 0\n    d = 0\n    for a in A:\n        if a == b:\n            c += 1\n        if a != b:\n            d += c//2\n            b = a\n            c = 1\n    d += c//2\n    b = a\n    c = 0\n    print(d)\n    \n\nif __name__ == '__main__':\n    solve()", "code2": "n = int(input())\na = list(map(int, input().split()))\nL = len(a)\n\nans = 0\nfor i in range(1, L) :\n    if(a[i] == a[i-1]) :\n        a[i] = -1\n        ans += 1\n\nprint(ans)", "label": 1, "name1": "s237957783.py", "name2": "s691982040.py"}, {"id": 225, "code1": "inf = 2**31\n\nn = int(raw_input())\nG = [[inf]*n for _ in range(n)]\nref = {}\ninputs = [map(int,raw_input().split()) for _ in range(n)]\nfor i in range(n): ref[inputs[i][0]] = i\nfor i in range(n):\n    for j in inputs[i][2:]:\n        G[i][ref[j]] = 1\n        \nfor k in range(n):\n    for i in range(n):\n        for j in range(n):\n            G[i][j] = min(G[i][j],G[i][k]+G[k][j])\n            \np = int(raw_input())\nfor loop in range(p):\n    s,d,v = map(int,raw_input().split())\n    dist = G[ref[s]][ref[d]]\n    print dist+1 if dist+1 <= v else \"NA\"", "code2": "n=int(raw_input())\ng=[[1000000]*n for _ in xrange(n)]\nfor i in xrange(n):\n    g[i][i]=0\nfor i in xrange(n):\n    r=map(int,raw_input().split())\n    for j in r[2:]:\n        g[r[0]-1][j-1]=1\nfor k in xrange(n):\n    for i in xrange(n):\n        for j in xrange(n):\n            g[i][j]=min(g[i][j],g[i][k]+g[k][j])\nm=int(raw_input())\nfor i in xrange(m):\n    s,d,v=map(int,raw_input().split())\n    s-=1\n    d-=1\n    if g[s][d]<v:\n        print(g[s][d]+1)\n    else:\n        print('NA')", "label": 1, "name1": "s378122232.py", "name2": "s227640621.py"}, {"id": 680, "code1": "a,b,c,k=map(int,input().split())\nc_=max(0,k-a-b)\na_=min(a,k)\nprint(a_-c_)", "code2": "tree = [ [] for _ in range(4) ]\n\nfor i in range(3):\n    a, b = map(int, input().split())\n    a -= 1; b -= 1;\n    tree[a].append(b)\n    tree[b].append(a)\n\nfor i in range(4):\n    visited = [ False for _ in range(4) ]\n    cur = i\n    visited[cur] = True\n    for j in range(3):\n        for v in tree[cur]:\n            if not visited[v]:\n                next_v = v\n                break\n        visited[next_v] = True\n        cur = next_v\n\nprint ( \"YES\" if all(visited) else \"NO\" )\n", "label": 0, "name1": "s535747622.py", "name2": "s679343249.py"}, {"id": 506, "code1": "N = int(input())\n\ntotal = sum(list(map(int, str(N))))\n\nif total % 9 == 0:\n  print('Yes')\nelse:\n  print('No')\n", "code2": "from math import *\nn,m=map(int,input().split())\nif(n==1 or m==1):\n    print(1)\nelse:\n    print(ceil((n*m)/2))\n", "label": 0, "name1": "s525082295.py", "name2": "s965203099.py"}, {"id": 957, "code1": "#!/usr/bin/env pypy\n\nimport sys\nfrom typing import Any, Callable, Deque, Dict, List, Mapping, Optional, Sequence, Set, Tuple, TypeVar, Union\n# import time\n# import math\n# import numpy as np\n# import scipy.sparse.csgraph as cs            # csgraph_from_dense(ndarray, null_value=inf), bellman_ford(G, return_predecessors=True), dijkstra, floyd_warshall\n# import random                                # random, uniform, randint, randrange, shuffle, sample\n# import string                                # ascii_lowercase, ascii_uppercase, ascii_letters, digits, hexdigits\n# import re                                    # re.compile(pattern) => ptn obj; p.search(s), p.match(s), p.finditer(s) => match obj; p.sub(after, s)\n# from bisect import bisect_left, bisect_right # bisect_left(a, x, lo=0, hi=len(a)) returns i such that all(val<x for val in a[lo:i]) and all(val>-=x for val in a[i:hi]).\n# from collections import deque                # deque class. deque(L): dq.append(x), dq.appendleft(x), dq.pop(), dq.popleft(), dq.rotate()\n# from collections import defaultdict          # subclass of dict. defaultdict(facroty)\n# from collections import Counter              # subclass of dict. Counter(iter): c.elements(), c.most_common(n), c.subtract(iter)\n# from datetime import date, datetime          # date.today(), date(year,month,day) => date obj; datetime.now(), datetime(year,month,day,hour,second,microsecond) => datetime obj; subtraction => timedelta obj\n# from datetime.datetime import strptime       # strptime('2019/01/01 10:05:20', '%Y/%m/%d/ %H:%M:%S') returns datetime obj\n# from datetime import timedelta               # td.days, td.seconds, td.microseconds, td.total_seconds(). abs function is also available.\n# from copy import copy, deepcopy              # use deepcopy to copy multi-dimentional matrix without reference\n# from functools import reduce                 # reduce(f, iter[, init])\n# from functools import lru_cache              # @lrucache ...arguments of functions should be able to be keys of dict (e.g. list is not allowed)\n# from heapq import heapify, heappush, heappop # built-in list. heapify(L) changes list in-place to min-heap in O(n), heappush(heapL, x) and heappop(heapL) in O(lgn).\n# from heapq import nlargest, nsmallest        # nlargest(n, iter[, key]) returns k-largest-list in O(n+klgn).\n# from itertools import count, cycle, repeat   # count(start[,step]), cycle(iter), repeat(elm[,n])\n# from itertools import groupby                # [(k, list(g)) for k, g in groupby('000112')] returns [('0',['0','0','0']), ('1',['1','1']), ('2',['2'])]\n# from itertools import starmap                # starmap(pow, [[2,5], [3,2]]) returns [32, 9]\n# from itertools import product, permutations  # product(iter, repeat=n), permutations(iter[,r])\n# from itertools import combinations, combinations_with_replacement\n# from itertools import accumulate             # accumulate(iter[, f])\n# from operator import itemgetter              # itemgetter(1), itemgetter('key')\n# from fractions import Fraction               # Fraction(a, b) => a / b \u2208 Q. note: Fraction(0.1) do not returns Fraciton(1, 10). Fraction('0.1') returns Fraction(1, 10)\n\n\n\ndef main():\n    Num = Union[int, float]\n    mod = 1000000007                # 10^9+7\n    inf = float('inf')              # sys.float_info.max = 1.79e+308\n    # inf = 2 ** 63 - 1             # (for fast JIT compile in PyPy) 9.22e+18\n    sys.setrecursionlimit(10**6)    # 1000 -> 1000000\n    def input(): return sys.stdin.readline().rstrip()\n    def ii():    return int(input())\n    def isp():   return input().split()\n    def mi():    return map(int, input().split())\n    def mi_0():  return map(lambda x: int(x)-1, input().split())\n    def lmi():   return list(map(int, input().split()))\n    def lmi_0(): return list(map(lambda x: int(x)-1, input().split()))\n    def li():    return list(input())\n\n\n    def check(n, m, k):\n        for i in range(n + 1):\n            for j in range(m + 1):\n                if i * j + (n - i) * (m - j) == k:\n                    return True\n        return False\n    \n    \n    n, m, k = mi()\n    print('Yes') if check(n, m, k) else print('No')\n        \n\n\nif __name__ == \"__main__\":\n    main()\n", "code2": "\nn,c = map(int, input().split())\nd = []\nfor _ in range(c):\n    a = list(map(int, input().split()))\n    d.append(a)\n\ngrid = [[0 for j in range(c+1)] for i in range(3)]\nfor i in range(n):\n    for j,cc in enumerate(map(int, input().split())):\n        k = j\n        grid[(i+j)%3][cc] += 1\n\nans = float('INF')\n\nfor i in range(1,c+1):\n    for j in range(1,c+1):\n        if i == j:\n            continue\n        for k in range(1,c+1):\n            if i == k or j == k:\n                continue\n            cost = 0\n            for a in range(1,c+1):\n                # print(int(d[a-1][i-1]), grid[0][a], int(d[a-1][j-1]), grid[1][a], int(d[a-1][k-1]), grid[2][a])\n                cost += d[a-1][i-1] * grid[0][a] + d[a-1][j-1] * grid[1][a] + d[a-1][k-1] * grid[2][a]\n            \n            if cost < ans:\n                # print(i,j,k,cost)\n                ans = cost\n\nprint(int(ans))\n", "label": 0, "name1": "s894514161.py", "name2": "s856621686.py"}, {"id": 207, "code1": "def main():\n    n = int(input())\n    x,y = 1,1\n    for _ in range(n):\n        t,a = map(int,input().split())\n        z = -1*min(-x//t,-y//a)\n        x = z*t\n        y = z*a\n        # print(x,y)\n    print(x+y)\n\nmain()", "code2": "n = int(input())\nsa,sb=[int(it) for it in input().split()]\nfor i in range(n-1):\n  a,b=[int(it) for it in input().split()]\n  r =  max( sa//a + (1 if sa%a!=0 else 0),sb//b+(1 if sb%b!=0 else 0) )\n  sa = r*a\n  sb = r*b\nprint (sa+sb)", "label": 1, "name1": "s902948767.py", "name2": "s718859988.py"}, {"id": 829, "code1": "A, B, C = map(int, input().split())\nprint('Yes' if len(set([A, B, C])) == 2 else 'No')", "code2": "N = int(input())\narray = list(map(int, input().split()))\ncnt = 0 \nfor i in range(N):\n\tminij = i \n\tfor j in range(i, N):\n\t\tif array[j] < array[minij]:\n\t\t\tminij = j \n\tif minij != i:\n\t\tarray[i], array[minij] = array[minij], array[i]\n\t\tcnt += 1\n\nprint(' '.join(map(str, array)))\nprint( \"%d\" % (cnt))\n\n", "label": 0, "name1": "s278209661.py", "name2": "s260667176.py"}, {"id": 813, "code1": "n=int(input())\na=list(map(int,input().split()))\nb=list(map(int,input().split()))\n\nsum1=0\nsum2=0\n\nfor i,j in zip(a,b):\n  if i>j:\n    sum1+=(i-j)\n  elif i<j:\n    sum2+=(j-i)//2\n\nprint('Yes' if sum1<=sum2 else 'No')", "code2": "import itertools\n\ndef is_edge_exists(node1, node2, edges):\n\tfor edge in edges:\n\t\tif node1 in edge and node2 in edge:\n\t\t\treturn True\n\treturn False\n\ndef route_count(route, edges):\n\tif route[0]!=1:\n\t\treturn 0\n\tfor i in range(len(route)-1):\n\t\tif not is_edge_exists(route[i], route[i+1], edges):\n\t\t\treturn 0\n\treturn 1\n\nN, M = map(int, input().split())\nedges = [list(map(int, input().split())) for i in range(M)]\nnodes = [i+1 for i in range(N)]\nroutes = list(itertools.permutations(nodes))\n\nans = 0\nfor route in routes:\n\tans += route_count(route, edges)\nprint(ans)", "label": 0, "name1": "s390816173.py", "name2": "s952388313.py"}, {"id": 632, "code1": "import math\nN = int(input())\nA = list(map(int,input().split()))\nA.sort(reverse = True)\n\nans = 0\nfor i in range(1,N):\n  a = math.floor(i/2)\n  ans += A[a]\n    \nprint(ans)", "code2": "n = input()\np, q = [-1, -1]\nfor i in xrange(n):\n    t, a = map(int, raw_input().split())\n    if p == -1 or q == -1:\n        p = t\n        q = a\n        continue\n    if t >= p and a >= q:\n        p = t\n        q = a\n    else:\n        z = max(p / t + (p % t != 0), q / a + (q % a != 0))\n        p = t * z\n        q = a * z\nprint p + q\n\n", "label": 0, "name1": "s069304778.py", "name2": "s412403305.py"}, {"id": 434, "code1": "def inpl(): return [int(i) for i in input().split()]\nclass UnionFind():\n    def __init__(self, num):\n        self.par = [-1 for _ in range(num)]\n    \n    def find(self, x):\n        if self.par[x] < 0:\n            return x\n        else:\n            x = self.par[x]\n            return self.find(x)\n    \n    def union(self, x, y):\n        rx = self.find(x)\n        ry = self.find(y)\n        if rx != ry:\n            if self.par[rx] < self.par[ry]:\n                self.par[ry] = rx\n            if self.par[rx] > self.par[ry]:\n                self.par[rx] = ry\n            else:\n                self.par[rx] -= 1\n                self.par[ry] = rx\n        return\n\nN, K, L = inpl()\nufk = UnionFind(N)\nfor i in range(K):\n    p, q = inpl()\n    ufk.union(p-1, q-1)\n\nufr = UnionFind(N)\nfor i in range(L):\n    r, s = inpl()\n    ufr.union(r-1, s-1)\n\nfrom collections import defaultdict\nans = defaultdict(lambda: 0)\nfor i in range(N):\n    ans[ufk.find(i),ufr.find(i)] +=1\nAns = [0 for _ in range(N)]\nfor i in range(N):\n    Ans[i] = ans[ufk.find(i),ufr.find(i)]\nprint(*Ans)", "code2": "import sys\nfrom collections import deque, Counter\nsys.setrecursionlimit(1000000)\nN, K, L = map(int, input().split())\npq = [list(map(int, input().split())) for _ in range(K)]\nrs = [list(map(int, input().split())) for _ in range(L)]\n\nG_r = [[] for _ in range(N+1)]\nfor elem in pq:\n    G_r[elem[0]].append(elem[1])\n    G_r[elem[1]].append(elem[0])\nG_t = [[] for _ in range(N+1)]\nfor elem in rs:\n    G_t[elem[0]].append(elem[1])\n    G_t[elem[1]].append(elem[0])\n\n\nfield_r = [None]*(N+1)\n\n\ndef dfs_r(i, idx):\n    q = deque()\n    q.append(i)\n    field_r[i] = idx\n    while q:\n        tmp = q.pop()\n        for pos in G_r[tmp]:\n            if field_r[pos] is None:\n                field_r[pos] = idx\n                q.append(pos)\n            else:\n                continue\nidx = 0\nfor i in range(1, N+1):\n    if field_r[i] is None:\n        dfs_r(i, idx)\n        idx += 1\n\n\nfield_t = [None]*(N+1)\n\n\ndef dfs_t(i, idx):\n    q = deque()\n    q.append(i)\n    field_t[i] = idx\n    while q:\n        tmp = q.pop()\n        for pos in G_t[tmp]:\n            if field_t[pos] is None:\n                field_t[pos] = idx\n                q.append(pos)\n            else:\n                continue\nidx = 0\nfor i in range(1, N+1):\n    if field_t[i] is None:\n        dfs_t(i, idx)\n        idx += 1\n\nm = list(zip(field_r[1:], field_t[1:]))\ncnt = Counter(m)\nans = []\nfor elem in list(m):\n    ans.append(cnt[elem])\nprint(' '.join(map(str, ans)))\n", "label": 1, "name1": "s236967102.py", "name2": "s645452029.py"}, {"id": 562, "code1": "n,k = map(int, input().split())\namari=n%k\nn=min(amari, k-amari)\nprint(n)", "code2": "import math\na, b, C = map(float, input().split())\nC = C / 180 * math.pi\nprint('%.06f' % (a * b * math.sin(C) / 2))\nprint('%.06f' % ((a**2 + b**2 -2*a*b*math.cos(C))**(1/2) + a + b))\nprint('%.06f' % (b*math.sin(C)))", "label": 0, "name1": "s328388206.py", "name2": "s950542255.py"}, {"id": 25, "code1": "from math import *\nn,m=map(int,input().split())\nif(n==1 or m==1):\n    print(1)\nelse:\n    print(ceil((n*m)/2))\n", "code2": "h,w = map(int, input().split())\nif h ==1 or w == 1:\n    print('1')\nelse:\n    if h % 2 != 0:\n        if w % 2 != 0:\n            ans = (h * w) // 2 + 1\n        else:\n            ans = w / 2 * h\n    else:\n        ans = h / 2 * w\n    print(int(ans))", "label": 1, "name1": "s965203099.py", "name2": "s801200714.py"}, {"id": 261, "code1": "A, B, C, K = list(map(int,input().split()))\nif K <= A:\n  print(K)\nelif K <= (A + B):\n  print(A)\nelif K <= (A + B + C):\n  print(2*A + B - K)\nelse:\n  print(A + B - C)", "code2": "a,b,c,k=map(int,input().split())\n\nif k <= a:\n    print(k)\nelif k <= a+b:\n    print(a)\nelse:\n    print(a-(k-(a+b)))", "label": 1, "name1": "s098797347.py", "name2": "s019552488.py"}, {"id": 70, "code1": "# AOJ 0217 Walking in the Hospital\n# Python3 2018.6.23 bal4u\n\nwhile 1:\n\tn = int(input())\n\tif n == 0: break\n\tdmax = 0\n\tfor i in range(n):\n\t\tp, d1, d2 = map(int, input().split())\n\t\tif d1+d2 > dmax: id, dmax = p, d1+d2\n\tprint(id, dmax)\n", "code2": "while True:\n    num = int(input())\n    if num == 0:\n        break\n    \n    m = 0\n    mp = None\n    for _ in range(num):\n        p, d1, d2  = [int(x) for x in input().split()]\n        if d1 + d2 > m:\n            m = d1 + d2\n            mp = p\n    print(mp,m)\n", "label": 1, "name1": "s876770513.py", "name2": "s098046872.py"}, {"id": 617, "code1": "# coding: utf-8\ndef check(a,b):\n    if (a,b) in memo:\n        return memo[(a,b)]\n    if 0<=a<h and 0<=b<w and field[a][b].isdigit():\n        x=check(a+1,b)\n        y=check(a,b+1)\n        memo[(a,b)]=field[a][b]+(x if len(x)>len(y) else x if len(x)==len(y) and len(x)!=0 and int(x)>int(y) else y)\n        return field[a][b]+(x if len(x)>len(y) else x if len(x)==len(y) and len(x)!=0 and int(x)>int(y) else y)\n    else:\n        return ''\nwhile 1:\n    w,h=map(int,input().split())\n    if w==0:\n        break\n    field=[]\n    for i in range(h):\n        field.append(list(input()))\n    ans='0'\n    memo={}\n    for i in range(h):\n        for j in range(w):\n            if field[i][j]!='0' and field[i][j].isdigit():\n                tmp=check(i,j)\n                if int(ans)<int(tmp):\n                    ans=tmp\n    print(ans)\n", "code2": "a,b=map(int,input().split())\nif b >= a:\n  print(a)\nelse:\n  print(a-1)", "label": 0, "name1": "s573602328.py", "name2": "s714654685.py"}, {"id": 527, "code1": "while True:\n    n = int(input())\n    if n == 0:\n        break\n    scores = list(map(int, input().split()))\n    m = sum(scores) / n\n    dev = list((i - m) for i in scores)\n    var = sum((i ** 2) for i in dev) / n\n    stdev = var ** 0.5\n    print(stdev)\n\n", "code2": "N = int(input())\nAs = list(map(int,input().split()))\ncounts = []\nnow = As[0]\ncount = 1\nfor a in range(1,len(As)):\n    if As[a]==now:\n        count+=1\n        if a == len(As)-1:\n            counts.append(count)\n    else:\n        counts.append(count)\n        count =1\n        now = As[a]\nprint(sum([i//2 for i in counts]))", "label": 0, "name1": "s320188133.py", "name2": "s736034553.py"}, {"id": 439, "code1": "from collections import defaultdict\n\nclass Unionfind:\n\n    __slots__ = ['parents','sizes']\n\n    def __init__(self, n):\n        self.parents = list(range(n))\n        self.sizes = [1]*n\n\n    def root(self, x):\n        if self.parents[x] == x:\n            return x\n        else:\n            root_x = self.root(self.parents[x])\n            self.parents[x] = root_x\n            return root_x\n\n    def unite(self, x, y):\n        x = self.root(x); y = self.root(y)\n        if x == y:\n            return\n        if self.sizes[x] < self.sizes[y]:\n            x, y = y, x\n        self.sizes[x] += self.sizes[y]\n        self.parents[y] = x\n\n    def same(self, x, y):\n        return self.root(x) == self.root(y)\n\n    # \u96c6\u5408\u81ea\u4f53\u306e\u6570 ({1,2}, {3}, {4} : kind -> 3)\n    def kind(self):\n        for v in range(N):\n            self.root(v)\n        return len(list(set(self.parents)))\n\n    # x\u304c\u5c5e\u3059\u308b\u96c6\u5408\u306e\u8981\u7d20\u306e\u6570\u3000({1,2,3} : size(2) -> 3)\n    def size(self, x):\n        self.sizes[x] = self.sizes[self.root(x)]\n        return self.sizes[x]\n\nN, K, L = map(int,input().split())\nroad = Unionfind(N)\ntrain = Unionfind(N)\n\nfor _ in range(K):\n    p, q = map(int,input().split())\n    p -= 1; q -= 1\n    road.unite(p, q)\n\nfor _ in range(L):\n    r, s = map(int,input().split())\n    r -= 1; s -= 1\n    train.unite(r, s)\n\ncnt = defaultdict(int)\n\nfor i in range(N):\n    key = (road.root(i), train.root(i))\n    cnt[key] += 1\n\nans_list = []\nfor i in range(N):\n    key = (road.root(i), train.root(i))\n    ans = cnt[key]\n    ans_list.append(ans)\n\nprint(*ans_list)", "code2": "# D\nclass UnionFind:\n    \"\"\"size(int)\u3092\u6307\u5b9a\n    root(x:int)->int:      \u6839\u3092\u6c42\u3081\u308b\n    unite(x,y:int):        \u8981\u7d20\u3092\u30b0\u30eb\u30fc\u30d7\u306b\u307e\u3068\u3081\u308b \n    isSame(x,y:int)->bool: \u8981\u7d20\u540c\u58eb\u304c\u540c\u3058\u30b0\u30eb\u30fc\u30d7\u304b\u5224\u5b9a\u3059\u308b\n    \"\"\"\n    # \u5206\u96e2\u306f\u3067\u304d\u306a\u3044\n    # \u59cb\u3081\u5404\u8981\u7d20\u306f\u5225\u3005\u306e\u30b0\u30eb\u30fc\u30d7  \n    def __init__(self, size: int):\n        self.par = [-1]*size # \u89aa\u306e\u756a\u53f7\n        for i in range(size):\n            self.par[i] = i  # \u306f\u3058\u3081 \u3059\u3079\u3066\u306e\u9802\u70b9\u304c\u6839\n    \n    def root(self, x: int) -> int:\n        \"\"\"\u6839\u3092\u6c42\u3081\u308b\"\"\"\n        if self.par[x] == x: # if root\n            return x\n        else:\n            self.par[x] = self.root(self.par[x]) # \u7d4c\u8def\u5727\u7e2e\n            return self.par[x]\n    \n    def isSame(self, x:int, y:int)->bool:\n        \"\"\"x \u3068 y \u304c\u540c\u3058\u96c6\u5408\u306b\u5c5e\u3059\u308b\u304b\u5426\u304b\"\"\"\n        return self.root(x)==self.root(y)\n    \n    def unite(self, x:int, y:int):\n        \"\"\"x \u3068 y \u306e\u5c5e\u3059\u308b\u96c6\u5408\u3092\u4f75\u5408\"\"\"\n        x = self.root(x)\n        y = self.root(y)\n        if x == y: return\n        self.par[x] = y\n        \n# ------------------\nN,K,L = map(int, input().split())\nuf_k = UnionFind(N)\nuf_l = UnionFind(N)\nfor _ in range(K):\n    p,q = map(int, input().split())\n    uf_k.unite(p-1, q-1)\nfor _ in range(L):\n    r,s= map(int, input().split())\n    uf_l.unite(r-1, s-1)\n\ncnt = dict()\nfor i in range(N):\n    r_k,r_l = uf_k.root(i), uf_l.root(i)\n    if (r_k,r_l) in cnt.keys():\n        cnt[(r_k,r_l)] += 1\n    else:\n        cnt[(r_k,r_l)] = 1\n\nans = []\nfor i in range(N):\n    r_k,r_l = uf_k.root(i), uf_l.root(i)\n    ans.append(cnt[(r_k,r_l)])\nprint(*ans, sep=\" \", end=\"\\n\")", "label": 1, "name1": "s028456939.py", "name2": "s968458364.py"}, {"id": 287, "code1": "tree = [ [] for _ in range(4) ]\n\nfor i in range(3):\n    a, b = map(int, input().split())\n    a -= 1; b -= 1;\n    tree[a].append(b)\n    tree[b].append(a)\n\nfor i in range(4):\n    visited = [ False for _ in range(4) ]\n    cur = i\n    visited[cur] = True\n    for j in range(3):\n        for v in tree[cur]:\n            if not visited[v]:\n                next_v = v\n                break\n        visited[next_v] = True\n        cur = next_v\n\nprint ( \"YES\" if all(visited) else \"NO\" )\n", "code2": "d = [0] * 4\nfor i in xrange(3):\n    a, b = map(int, raw_input().split())\n    d[a-1] += 1\n    d[b-1] += 1\nt = 0\nfor x in d:\n    t += x % 2\nprint \"YES\" if t <= 2 else \"NO\"\n", "label": 1, "name1": "s679343249.py", "name2": "s155884176.py"}, {"id": 920, "code1": "SA = list(input())\nSB = list(input())\nSC = list(input())\nA = 0\nB = 0\nC = 0\nans = \"\"\nturn = \"a\"\nwhile ans == \"\":\n    if turn == \"a\":\n        if A == len(SA):\n            ans = \"A\"\n        else:\n            turn = SA[A]\n        A +=1\n    if turn == \"b\":\n        if B == len(SB):\n            ans = \"B\"\n        else:\n            turn = SB[B]\n        B += 1\n    if turn == \"c\":\n        if C == len(SC):\n            ans = \"C\"\n        else:\n            turn = SC[C]\n        C += 1\nprint(ans)", "code2": "N = int(input())\nMOD = 10**9 + 7\n\nfact = [1]*(N+1)\n\nfor i in range(1, N+1):\n    fact[i] = r = i*fact[i-1] % MOD\n\ncnts = [0]*(N+1)\nrev = 1\nfor K in range(N-1, (N+1)//2-1, -1):\n    cnts[K] = fact[K]*fact[K-1]*rev % MOD\n    rev = rev * (2*K-N) * (2*K-N-1) % MOD\n\nans = 0\nfor K in range((N+1)//2, N):\n    ans += (cnts[K] - cnts[K-1]) * K % MOD\n    ans %= MOD\nans = (ans * pow(fact[N-2], MOD-2, MOD)) % MOD\nprint(ans)", "label": 0, "name1": "s106587030.py", "name2": "s911857403.py"}, {"id": 485, "code1": "#\n# abc054 c\n#\n\nimport sys\nfrom io import StringIO\nimport unittest\nimport itertools\n\n\nclass TestClass(unittest.TestCase):\n    def assertIO(self, input, output):\n        stdout, stdin = sys.stdout, sys.stdin\n        sys.stdout, sys.stdin = StringIO(), StringIO(input)\n        resolve()\n        sys.stdout.seek(0)\n        out = sys.stdout.read()[:-1]\n        sys.stdout, sys.stdin = stdout, stdin\n        self.assertEqual(out, output)\n\n    def test_\u5165\u529b\u4f8b_1(self):\n        input = \"\"\"3 3\n1 2\n1 3\n2 3\"\"\"\n        output = \"\"\"2\"\"\"\n        self.assertIO(input, output)\n\n    def test_\u5165\u529b\u4f8b_2(self):\n        input = \"\"\"7 7\n1 3\n2 7\n3 4\n4 5\n4 6\n5 6\n6 7\"\"\"\n        output = \"\"\"1\"\"\"\n        self.assertIO(input, output)\n\n\ndef resolve():\n    N, M = map(int, input().split())\n    P = [list(map(int, input().split())) for _ in range(M)]\n\n    R = itertools.permutations(range(1, N+1))\n\n    ans = 0\n    for r in R:\n        flag = True\n        r = list(r)\n        if r[0] != 1:\n            break\n        for i in range(1, N):\n            for p in P:\n                if (r[i-1] == p[0] and r[i] == p[1]) or (r[i-1] == p[1] and r[i] == p[0]):\n                    break\n            else:\n                flag = False\n        if flag == True:\n            ans += 1\n\n    print(ans)\n\n\nif __name__ == \"__main__\":\n    # unittest.main()\n    resolve()\n", "code2": "N, M = list(map(int, input().split()))\nE = [[False]*N for _ in range(N)]\nfor m in range(M):\n    a, b = list(map(int, input().split()))\n    E[a-1][b-1] = E[b-1][a-1] = True\n\nP = []\nV = [False]*N\nV[0] = True\np = [0] + [None]*(N-1)\ndef dfs(i):\n    if i==N:\n        P.append(p[:])\n        return\n        \n    for v, visited in enumerate(V):\n        if not visited:\n            p[i] = v\n            V[v] = True\n            dfs(i+1)\n            V[v] = False\n\ndfs(1)\n\nans = 0\nfor p in P:\n    ok = True\n    for i in range(N-1):\n        if not E[p[i]][p[i+1]]:\n            ok = False\n            break\n    if ok: ans+=1\nprint(ans)", "label": 1, "name1": "s851959667.py", "name2": "s983566502.py"}, {"id": 622, "code1": "a, b = map(int, input().split())\nif a > b:\n    print(a-1)\nelse:\n    print(a)", "code2": "from sys import stdin\n\n\ndef main():\n    input = lambda: stdin.readline()[:-1]\n    N = int(input())\n    A = list(map(int, input().split()))\n\n    A.sort(reverse=1)\n    d, m = divmod(N, 2)\n    n = [2] * (d + m)\n    n[-1], n[0] = n[-1] - m, 1\n    ans = 0\n    for i, k in enumerate(n):\n        ans += A[i] * k\n    print(ans)\n\n\nmain()\n", "label": 0, "name1": "s737717931.py", "name2": "s775405634.py"}, {"id": 110, "code1": "A,B,C = map(int, input().split())\ncount = 0\nlist1 = [A,B]\n\nfor i in range(min(list1),max(list1)):\n    if C == i:\n        count = 1\n \nif count == 1:\n    print(\"Yes\")\nelse:\n    print(\"No\")", "code2": "a,b,c = list(map(int,input().strip().split()))\nans = ()\nif a <= c and c <= b:\n    ans = (\"Yes\")\nelif b <= c and c <= a:\n    ans = (\"Yes\")\nelse:\n    ans = (\"No\")\nprint(ans)", "label": 1, "name1": "s230128846.py", "name2": "s388043860.py"}, {"id": 739, "code1": "from sys import stdin, setrecursionlimit\n\n\ndef main():\n    input = stdin.buffer.readline\n    x, y = map(int, input().split())\n    count = 0\n    tmp = x\n    while tmp <= y:\n        tmp *= 2\n        count += 1\n    print(count)\n\n\nif __name__ == \"__main__\":\n    setrecursionlimit(10000)\n    main()\n", "code2": "AI, AO, _, AJ, AL, _, _ = map(int, input().split())\n\nodd = AI % 2 + AJ % 2 + AL % 2\nif odd == 0 or odd == 3:\n    print(AI + AO + AJ + AL)\nelif odd == 1:\n    print(AI + AO + AJ + AL - 1)\nelse:\n    if AI + AJ + AL == 2:\n        print(AO)\n    else:\n        print(AI + AO + AJ + AL - 1)\n", "label": 0, "name1": "s379690682.py", "name2": "s383965736.py"}, {"id": 407, "code1": "n = int(input())\ndat = list(map(int,input().split()))\n\ndat = [0] + dat + [0]\ntotal = 0\ncur = 0\nfor i in range(n + 2):\n    total += abs(cur - dat[i])\n    cur = dat[i]\ntotal += abs(cur)\ncur = 0\nfor i in range(n):\n    j = i + 1\n    if dat[j-1] < dat[j] < dat[j+1]:\n        # \u9593\u306b\u631f\u307e\u308c\u3066\u3044\u308b\u30d1\u30bf\u30fc\u30f3\uff11\n        #print(\"pat1\")\n        print(total)\n    elif dat[j-1] > dat[j] > dat[j+1]:\n        # \u9593\u306b\u631f\u307e\u308c\u3066\u3044\u308b\u30d1\u30bf\u30fc\u30f32\n        #print(\"pat2\")\n        print(total)\n    else:\n        # \u3053\u306e\u5834\u5408\u306f\u9593\u306b\u631f\u307e\u308c\u3066\u3044\u306a\u3044\n        #print(\"{0} {1} {2}\".format(total, abs(dat[j-1] -dat[j]) , abs(dat[j-1] -dat[j+1])))\n        print(total - abs(dat[j-1] -dat[j]) - abs(dat[j] -dat[j+1]) + abs(dat[j-1] - dat[j+1]))\n", "code2": "# your code goes here\nN = int(input())\npoint = [0]\npoint.extend(list(map(int,input().split())))\npoint.append(0)\n\ntotal = 0\nfor i in range(1,N+2):\n\ttotal += abs(point[i] - point[i-1])\n\nfor i in range(1,N+1):\n\tans = total - abs(point[i]-point[i-1]) - abs(point[i+1]-point[i]) + abs(point[i+1]-point[i-1])\n\tprint(ans)", "label": 1, "name1": "s576885295.py", "name2": "s443227148.py"}, {"id": 511, "code1": "S = input()\nodd = S[0::2]\neven = S[1::2]\nans = 'No'\n\nif 'L' not in odd:\n    if 'R' not in even:\n        ans = 'Yes'\n\nprint(ans)", "code2": "n,a,b = map(int, input().split())\nXs = list(map(int, input().split()))\n\nds = [0] * (n+10)\nfor i in range(n-1):\n    cost1 = a*(Xs[i+1] - Xs[i])\n    cost2 = b\n    ds[i+1] = ds[i] + min(cost1, cost2)\nprint(ds[n-1])", "label": 0, "name1": "s134920706.py", "name2": "s039990138.py"}, {"id": 307, "code1": "A, B, C = map(int, input().split())\n\n\nH = C-(A-B)\n\nif H < 0:\n    print(\"0\")\nelse:\n    print(H)\n\n\n", "code2": "import sys\nsys.setrecursionlimit(10**7) #\u518d\u5e30\u95a2\u6570\u306e\u4e0a\u9650,10**5\u4ee5\u4e0a\u306e\u5834\u5408python\nimport math\nfrom copy import copy, deepcopy\nfrom copy import deepcopy as dcp\nfrom operator import itemgetter\nfrom bisect import bisect_left, bisect, bisect_right#2\u5206\u63a2\u7d22\n#bisect_left(l,x), bisect(l,x)#a\u306f\u30bd\u30fc\u30c8\u6e08\u307f\u3067\u3042\u308b\u5fc5\u8981\u3042\u308a\u3002a\u306e\u4e2d\u304b\u3089x\u672a\u6e80\u306e\u8981\u7d20\u6570\u3092\u8fd4\u3059\u3002right\u3060\u3068\u4ee5\u4e0b\nfrom collections import deque, defaultdict\n#deque(l), pop(), append(x), popleft(), appendleft(x)\n#q.rotate(n)\u3067 \u2192 \u306bn\u56de\u30ed\u30fc\u30c6\u30fc\u30c8\nfrom collections import Counter#\u6587\u5b57\u5217\u3092\u500b\u6570\u30ab\u30a6\u30f3\u30c8\u8f9e\u66f8\u306b\u3001\n#S=Counter(l),S.most_common(x),S.keys(),S.values(),S.items()\nfrom itertools import accumulate,combinations,permutations,product#\u7d2f\u7a4d\u548c\n#list(accumulate(l))\nfrom heapq import heapify,heappop,heappush\n#heapify(q),heappush(q,a),heappop(q) #q=heapify(q)\u3068\u3057\u306a\u3044\u3053\u3068\u3001\u8fd4\u308a\u5024\u306fNone\nfrom functools import reduce,lru_cache#pypy\u3067\u3082\u3046\u3054\u304f\n#@lru_cache(maxsize = None)#maxsize\u306f\u4fdd\u5b58\u3059\u308b\u30c7\u30fc\u30bf\u6570\u306e\u6700\u5927\u5024\u30012**n\u304c\u6700\u3082\u9ad8\u52b9\u7387\nfrom decimal import Decimal\n\ndef input(): \n    x=sys.stdin.readline()\n    return x[:-1] if x[-1]==\"\\n\" else x\ndef printe(*x):print(\"## \",*x,file=sys.stderr)\ndef printl(li): _=print(*li, sep=\"\\n\") if li else None\ndef argsort(s, return_sorted=False): \n    inds=sorted(range(len(s)), key=lambda k: s[k])\n    if return_sorted: return inds, [s[i] for i in inds]\n    return inds\ndef alp2num(c,cap=False): return ord(c)-97 if not cap else ord(c)-65\ndef num2alp(i,cap=False): return chr(i+97) if not cap else chr(i+65)\ndef matmat(A,B):\n    K,N,M=len(B),len(A),len(B[0])\n    return [[sum([(A[i][k]*B[k][j]) for k in range(K)]) for j in range(M)] for i in range(N)]\ndef matvec(M,v):\n    N,size=len(v),len(M)\n    return [sum([M[i][j]*v[j] for j in range(N)]) for i in range(size)]\ndef T(M):\n    n,m=len(M),len(M[0])\n    return [[M[j][i] for j in range(n)] for i in range(m)]\ndef binr(x): return bin(x)[2:]\ndef bitcount(x): #x\u306f64bit\u6574\u6570\n    x= x - ((x >> 1) & 0x5555555555555555)\n    x= (x & 0x3333333333333333) + ((x >> 2) & 0x3333333333333333)\n    x= (x + (x >> 4)) & 0x0f0f0f0f0f0f0f0f \n    x+= (x >> 8); x+= (x >> 16); x+= (x >> 32) \n    return x & 0x7f\n\ndef main():\n    mod = 1000000007\n    #w.sort(key=itemgetter(1),reverse=True)  #\u4e8c\u500b\u76ee\u306e\u8981\u7d20\u3067\u964d\u9806\u4e26\u3073\u66ff\u3048\n\n    #N = int(input())\n    a,b,c = map(int, input().split())\n\n\n    print(max(0,c-(a-b)))\n\n\n\nif __name__ == \"__main__\":\n    main()", "label": 1, "name1": "s336832003.py", "name2": "s948835843.py"}, {"id": 828, "code1": "l = len(set(list(map(int, input().split()))))\nif l == 2:\n  print(\"Yes\")\nelse:\n  print(\"No\")", "code2": "N = int(input())\nA = list(map(int,input().split()))\ncnt = 0\nfor i in range(N):\n    minj = i\n    for j in range(i+1,N):\n        if A[j] < A[minj]:\n            minj = j\n    if i != minj:\n        A[i],A[minj] = A[minj],A[i]\n        cnt += 1\nprint(*A)\nprint(cnt)\n\n", "label": 0, "name1": "s571170465.py", "name2": "s412559133.py"}, {"id": 615, "code1": "# AOJ 1126: The Secret Number\n# Python3 2018.7.16 bal4u\n\nwhile True:\n\tW, H = map(int, input().split())\n\tif W == 0: break\n\td = [list(input()) for r in range(H)]\n\ta = [[0 for c in range(W)] for r in range(H)]\n\tans = 0\n\tfor r in range(H):\n\t\tfor c in range(W):\n\t\t\tif not d[r][c].isdigit(): continue\n\t\t\ta[r][c] = k = int(d[r][c])\n\t\t\tif c > 0 and d[r][c-1].isdigit():\n\t\t\t\ta[r][c] = a[r][c-1]*10 + k\n\t\t\tif r > 0 and d[r-1][c].isdigit():\n\t\t\t\tt = a[r-1][c]*10 + k\n\t\t\t\ta[r][c] = max(a[r][c], t)\n\t\t\tans = max(ans, a[r][c])\n\tprint(ans);\n\n", "code2": "a, b = map(int, input().split())\n\nprint(a - int(a > b))\n\n", "label": 0, "name1": "s855726623.py", "name2": "s523849066.py"}, {"id": 793, "code1": "# \u9802\u70b9 v \u306e\u6240\u5c5e\u3059\u308b\u30b0\u30eb\u30fc\u30d7\u3092\u8abf\u3079\u308b\ndef root(v, uni):\n  if uni[v] < 0:  # v \u304c\u89aa\u306e\u5834\u5408\n    return v\n  else:           # v \u304c\u5b50\u306e\u5834\u5408\n    uni[v] = root(uni[v], uni)  # \u89aa\u306eroot\u3092\u8abf\u3079\u308b\n    return uni[v]\n\n# \u9802\u70b9 a \u3068\u9802\u70b9 b \u3092\u3064\u306a\u3050\u3002\u3082\u3068\u3082\u3068\u540c\u3058\u30b0\u30eb\u30fc\u30d7\u306e\u3068\u304d\u3001False \u3092\u8fd4\u3059\ndef connect(a, b, uni):\n  # \u307e\u305a\u306f\u305d\u308c\u305e\u308c\u6839\u306e\u756a\u53f7\u306b\u7f6e\u304d\u63db\u3048\u308b\n  ra = root(a, uni)\n  rb = root(b, uni)\n  if ra == rb:  # a \u3068 b \u304c\u305d\u3082\u305d\u3082\u540c\u3058\u30b0\u30eb\u30fc\u30d7\u306b\u5c5e\u3057\u3066\u3044\u308b\u306a\u3089\u5373\u7d42\u4e86\n    return False\n\t\n  # ra \u3092\u5927\u304d\u306a\u30b0\u30eb\u30fc\u30d7\u306b\u3057\u305f\u3044\u306e\u3067\u3001\u9006\u3067\u3042\u308c\u3070\u5165\u308c\u66ff\u3048\u308b\n  if uni[ra] > uni[rb]: # rb\u306e\u65b9\u304c\u8981\u7d20\u6570\u304c\u591a\u3051\u308c\u3070\n    tmp = ra\n    ra  = rb \n    rb  = tmp\n\n  # ra \u3068 rb \u3092\u7d50\u5408\u3057\u3001rb \u306e\u89aa\u3092 ra \u3068\u3059\u308b\n  uni[ra] += uni[rb]\n  uni[rb] = ra\n  return True\n      \n##\nN, K, L = map(int, input().split())\n\nroad = [-1]*(N+1)\nrail = [-1]*(N+1)\n\nfor i in range(K):\n  a, b = map(int, input().split())\n  connect(a, b, road)\n\nfor i in range(L):\n  a, b = map(int, input().split())\n  connect(a, b, rail)\n\n\n##\ndp = [0]*(N+1)\nfor i in range(1, N+1):\n  dp[i] = (root(i, road), root(i, rail))\n\ndic = {}\nfor i in range(1, N+1):\n  key = dp[i]\n  if key not in dic:\n    dic[key] = 1\n  else:\n    dic[key] += 1\n\nfor i in range(1, N+1):\n  ans = dic[dp[i]]\n  if i == N:\n    print(ans)\n  else:\n    print(ans, end=\" \")\n", "code2": "from datetime import date\nwhile 1:\n\tm,d=map(int,raw_input().split())\n\tif m==0:break\n\tprint date(2004,m,d).strftime(\"%A\")", "label": 0, "name1": "s866905054.py", "name2": "s074010277.py"}, {"id": 848, "code1": "N, L, T = map(int, input().split())\nants = []\ntouch = 0  # \u3059\u3079\u3066\u306e\u87fb\u304c0\u3092\u901a\u308b\u5408\u8a08\u6570\n\nfor i in range(N):\n    x, w = map(int, input().split())\n    if w == 1:  # \u6642\u8a08\u56de\u308a\n        touch += (x + T) // L  # 0\u3092\u901a\u308b\u56de\u6570\n        x1 = (x + T) % L       # \u6700\u7d42\u7684\u306a\u5ea7\u6a19\n    else:\n        touch += (x - T) // L  # 0\u3092\u901a\u308b\u56de\u6570\n        x1 = (x - T) % L\n    ants.append(x1)\ntouch = touch % N  # 0\u306b\u3044\u305f\u87fb\u306eindex\nants.sort()\nants = ants[touch:]+ants[:touch]\n\nprint(\" \".join(map(str, ants)))", "code2": "N = int(input())\nA = list(map(int, input().split()))\nsort = sorted(A)\n# amari = []\n# while len(amari) != 1:\n#   amari.clear()\n#   if 0 in sort: sort.remove(0)\n#   for item in sort:\n#     if item%sort[0] not in amari:\n#       amari.append(item%sort[0])\n#   last_sort0 = sort[0]\n#   sort = sorted(amari[:])\n#   sort.append(last_sort0)\n\n# print(last_sort0-amari[0])\n\nwhile len(sort) != 1:\n  for i in range(1,len(sort)):\n    sort[i] = sort[i]%sort[0]\n  sort = [j for j in sorted(sort) if j != 0]\n\nprint(sort[0])", "label": 0, "name1": "s946619292.py", "name2": "s006625656.py"}, {"id": 12, "code1": "S = input()\nodd = S[0::2]\neven = S[1::2]\nans = 'No'\n\nif 'L' not in odd:\n    if 'R' not in even:\n        ans = 'Yes'\n\nprint(ans)", "code2": "S = input()\n\nflag = 'Yes'\nfor i in range(len(S)):\n    if i%2 == 0:\n        if S[i] == 'R' or S[i] == 'U' or S[i] == 'D':\n            pass\n        else:\n            flag = 'No'\n            break\n    if i%2 == 1:\n        if S[i] == 'L' or S[i] == 'U' or S[i] == 'D':\n            pass\n        else:\n            flag = 'No'\n            break\n\nprint(flag)\n", "label": 1, "name1": "s134920706.py", "name2": "s961835833.py"}, {"id": 35, "code1": "def main():\n    N, A, B = map(int, input().split())\n    X = map(int, input().split())\n\n    ret = 0\n    curr = next(X)\n    for x in X:\n        ret += min((x - curr) * A, B)\n        curr = x\n    print(ret)\n\n\nif __name__ == '__main__':\n    main()\n", "code2": "from sys import stderr\nfrom functools import reduce\nfrom operator import add\ndef f(): return [int(i) for i in input().split()]\ndef debug(*x): stderr.write(reduce(add,repr(x)).strip(\"()\\',\")+'\\n')\n\nn,a,b = f()\nx = sorted(f())\nans = 0\n\nfor i in range(n-1):\n    if (x[i+1] - x[i])*a > b:\n        ans += b\n    else:\n        ans += (x[i+1]-x[i])*a\n\nprint(ans)", "label": 1, "name1": "s627561056.py", "name2": "s856958039.py"}, {"id": 57, "code1": "# -*- coding: utf-8 -*-\n'import sys'\n'import math'\ni=int(4)\nt=0\nwhile i:\n    t+=int(input())\n    i-=1\nprint(int(t/60))\nprint(t%60)", "code2": "a = int(input())\nb = int(input())\nc = int(input())\nd = int(input())\n\nt = a+b+c+d\nx = t // 60\ny = t - (x*60)\nprint(x)\nprint(y)\n", "label": 1, "name1": "s417833494.py", "name2": "s681424325.py"}, {"id": 344, "code1": "import bisect\n\nans = \"IMPOSSIBLE\"\nn, m = map(int, input().split())\nac = []\nbc = []\nfor _ in range(m):\n    a, b = map(int, input().split())\n    if min(a, b) == 1:\n        ac.append(max(a, b))\n    elif max(a, b) == n:\n        bc.append(min(a, b))\nac = list(sorted(ac))\nbc = list(sorted(bc))\nfor c in ac:\n    i = bisect.bisect_left(bc, c)\n    if i < len(bc) and bc[i] == c:\n        ans = ans[2:]\n        break\nprint(ans)", "code2": "N,M = map(int,input().split())\nab = [[int(i) for i in input().split()] for _ in range(M)]\n\nA = []\nB = [0]*(N+1)\nfor a,b in ab:\n  if a==1:\n    A.append(b)\n  if b==N:\n    B[a]=1\n\nfor a in A:\n  if B[a]==1:\n    print(\"POSSIBLE\")\n    break\nelse:\n  print(\"IMPOSSIBLE\")", "label": 1, "name1": "s723688485.py", "name2": "s913769144.py"}, {"id": 301, "code1": "class Unionfind:\n     \n    def __init__(self,n):\n        self.uf = [-1]*n\n \n    def find(self,x):\n        if self.uf[x] < 0:\n            return x\n        else:\n            self.uf[x] = self.find(self.uf[x])\n            return self.uf[x]\n \n    def same(self,x,y):\n        return self.find(x) == self.find(y)\n \n    def union(self,x,y):\n        x = self.find(x)\n        y = self.find(y)\n        if x == y:\n            return False\n        if self.uf[x] > self.uf[y]:\n            x,y = y,x\n        self.uf[x] += self.uf[y]\n        self.uf[y] = x\n        return True\n \n    def size(self,x):\n        x = self.find(x)\n        return -self.uf[x]\n\nn,m = map(int,input().split())\n\nu = Unionfind(n)\ncount = 0\nfor i in range(m):\n    a,b = map(int,input().split())\n    a -= 1\n    b -= 1\n    u.union(a,b)\n\ns = set()\nfor i in range(n):\n    s.add(u.find(i))\nprint(len(s)-1)", "code2": "import sys\nimport heapq, math\nfrom itertools import zip_longest, permutations, combinations, combinations_with_replacement\nfrom itertools import accumulate, dropwhile, takewhile, groupby\nfrom functools import lru_cache\nfrom copy import deepcopy\n\nclass UnionFind:\n\n    def __init__(self, n: int):\n        self._n = n\n        self._parents = [i for i in range(n)]\n        self._rank = [1 for _ in range(n)]\n\n    def unite(self, x: int, y: int) -> None:\n        px = self.find(x)\n        py = self.find(y)\n\n        # \u4e00\u81f4\u3057\u3066\u3044\u306a\u3044\u3068\u304d\u306f\u30ea\u30f3\u30af\u3092\u3064\u3051\u308b\n        if px != py:\n            self._link(px, py)\n\n    def _link(self, x: int, y: int):\n        if self._rank[x] < self._rank[y]:\n            self._parents[x] = y\n        elif self._rank[x] > self._rank[y]:\n            self._parents[y] = x\n        else:\n            self._parents[x] = y\n            self._rank[y] += 1\n\n    def same(self, x: int, y: int) -> bool:\n        px = self.find(x)\n        py = self.find(y)\n        return px == py\n\n    def find(self, x: int) -> int:\n        if self._parents[x] == x:\n            return x\n\n        self._parents[x] = self.find(self._parents[x])\n        return self._parents[x]\n\nN, M = map(int, input().split())\nuf = UnionFind(N + 1)\n\nfor i in range(M):\n    A, B = map(int, input().split())\n    uf.unite(A, B)\n\ns = set()\nfor i in range(1, N + 1):\n    s.add(uf.find(i))\n\nprint(len(s) - 1)\n", "label": 1, "name1": "s213272363.py", "name2": "s182405502.py"}, {"id": 45, "code1": "def solve():\n    N = int(input())\n    A = list(map(int, input().split()))\n    b = 0\n    c = 0\n    d = 0\n    for a in A:\n        if a == b:\n            c += 1\n        if a != b:\n            d += c//2\n            b = a\n            c = 1\n    d += c//2\n    b = a\n    c = 0\n    print(d)\n    \n\nif __name__ == '__main__':\n    solve()", "code2": "n=int(input())\na=list(map(int,input().split()))\nans=0\nfor i in range(n-1):\n    if a[i]==a[i+1]:\n        a[i+1]=-1\n        ans+=1\nprint(ans)", "label": 1, "name1": "s237957783.py", "name2": "s300532690.py"}, {"id": 850, "code1": "# -*- coding: utf-8 -*-\n\"\"\"\nhttp://judge.u-aizu.ac.jp/onlinejudge/description.jsp?id=0138\n\n\"\"\"\nimport sys\nfrom sys import stdin\nfrom operator import itemgetter\ninput = stdin.readline\n\ndef solve(data):\n    data.sort(key=itemgetter(1))\n    top2 = data[:2]\n    others = data[2:]\n    return top2, others         #  ??????2?????\u00a8????????\\??????id??\u00a8?????????????????????\n\n\ndef main(args):\n    others_results = []\n    for _ in range(3):\n        round_results = []\n        for _ in range(8):\n            id, time = input().split()\n            round_results.append([int(id), float(time)])\n        top2, others = solve(round_results)\n        others_results.extend(others)\n\n        # ????????????2???????????\u00b1\n        for id, time in top2:\n            print('{} {}'.format(id, time))\n\n    # ????????????3?????\\?????????????????????2???????????\u00b1\n    top2, others = solve(others_results)\n    for id, time in top2:\n        print('{} {}'.format(id, time))\n\n\nif __name__ == '__main__':\n    main(sys.argv[1:])", "code2": "import sys\nfrom fractions import gcd\ninput = sys.stdin.readline\n\nN = int(input())\nA = list(map(int,input().split()))\n\nf = A[0]\nfor i in range(1,N):\n  f = gcd(f,A[i])\n  \nprint(f)", "label": 0, "name1": "s481502029.py", "name2": "s433540614.py"}, {"id": 470, "code1": "n=int(input())\na=list(map(int,input().split()))\nb=list(map(int,input().split()))\n\nsum1=0\nsum2=0\n\nfor i,j in zip(a,b):\n  if i>j:\n    sum1+=(i-j)\n  elif i<j:\n    sum2+=(j-i)//2\n\nprint('Yes' if sum1<=sum2 else 'No')", "code2": "import sys\nreadline = sys.stdin.readline\nsys.setrecursionlimit(10**8)\nmod = 10**9+7\n#mod = 998244353\nINF = 10**18\neps = 10**-7\n\nN = int(readline())\nA = list(map(int,readline().split()))\nB = list(map(int,readline().split()))\nK = sum(B)-sum(A)\nfor a,b in zip(A,B):\n    if a < b:\n        K -= (b-a+1)//2\nprint('Yes' if K >= 0 else 'No')\n\n\n", "label": 1, "name1": "s390816173.py", "name2": "s897100598.py"}, {"id": 313, "code1": "import sys\nsys.setrecursionlimit(10**7) #\u518d\u5e30\u95a2\u6570\u306e\u4e0a\u9650,10**5\u4ee5\u4e0a\u306e\u5834\u5408python\nimport math\nfrom copy import copy, deepcopy\nfrom copy import deepcopy as dcp\nfrom operator import itemgetter\nfrom bisect import bisect_left, bisect, bisect_right#2\u5206\u63a2\u7d22\n#bisect_left(l,x), bisect(l,x)#a\u306f\u30bd\u30fc\u30c8\u6e08\u307f\u3067\u3042\u308b\u5fc5\u8981\u3042\u308a\u3002a\u306e\u4e2d\u304b\u3089x\u672a\u6e80\u306e\u8981\u7d20\u6570\u3092\u8fd4\u3059\u3002right\u3060\u3068\u4ee5\u4e0b\nfrom collections import deque, defaultdict\n#deque(l), pop(), append(x), popleft(), appendleft(x)\n#q.rotate(n)\u3067 \u2192 \u306bn\u56de\u30ed\u30fc\u30c6\u30fc\u30c8\nfrom collections import Counter#\u6587\u5b57\u5217\u3092\u500b\u6570\u30ab\u30a6\u30f3\u30c8\u8f9e\u66f8\u306b\u3001\n#S=Counter(l),S.most_common(x),S.keys(),S.values(),S.items()\nfrom itertools import accumulate,combinations,permutations,product#\u7d2f\u7a4d\u548c\n#list(accumulate(l))\nfrom heapq import heapify,heappop,heappush\n#heapify(q),heappush(q,a),heappop(q) #q=heapify(q)\u3068\u3057\u306a\u3044\u3053\u3068\u3001\u8fd4\u308a\u5024\u306fNone\nfrom functools import reduce,lru_cache#pypy\u3067\u3082\u3046\u3054\u304f\n#@lru_cache(maxsize = None)#maxsize\u306f\u4fdd\u5b58\u3059\u308b\u30c7\u30fc\u30bf\u6570\u306e\u6700\u5927\u5024\u30012**n\u304c\u6700\u3082\u9ad8\u52b9\u7387\nfrom decimal import Decimal\n\ndef input(): \n    x=sys.stdin.readline()\n    return x[:-1] if x[-1]==\"\\n\" else x\ndef printe(*x):print(\"## \",*x,file=sys.stderr)\ndef printl(li): _=print(*li, sep=\"\\n\") if li else None\ndef argsort(s, return_sorted=False): \n    inds=sorted(range(len(s)), key=lambda k: s[k])\n    if return_sorted: return inds, [s[i] for i in inds]\n    return inds\ndef alp2num(c,cap=False): return ord(c)-97 if not cap else ord(c)-65\ndef num2alp(i,cap=False): return chr(i+97) if not cap else chr(i+65)\ndef matmat(A,B):\n    K,N,M=len(B),len(A),len(B[0])\n    return [[sum([(A[i][k]*B[k][j]) for k in range(K)]) for j in range(M)] for i in range(N)]\ndef matvec(M,v):\n    N,size=len(v),len(M)\n    return [sum([M[i][j]*v[j] for j in range(N)]) for i in range(size)]\ndef T(M):\n    n,m=len(M),len(M[0])\n    return [[M[j][i] for j in range(n)] for i in range(m)]\ndef binr(x): return bin(x)[2:]\ndef bitcount(x): #x\u306f64bit\u6574\u6570\n    x= x - ((x >> 1) & 0x5555555555555555)\n    x= (x & 0x3333333333333333) + ((x >> 2) & 0x3333333333333333)\n    x= (x + (x >> 4)) & 0x0f0f0f0f0f0f0f0f \n    x+= (x >> 8); x+= (x >> 16); x+= (x >> 32) \n    return x & 0x7f\n\ndef main():\n    mod = 1000000007\n    #w.sort(key=itemgetter(1),reverse=True)  #\u4e8c\u500b\u76ee\u306e\u8981\u7d20\u3067\u964d\u9806\u4e26\u3073\u66ff\u3048\n\n    #N = int(input())\n    a,b,c = map(int, input().split())\n\n\n    print(max(0,c-(a-b)))\n\n\n\nif __name__ == \"__main__\":\n    main()", "code2": "A,B,C=map(int,input().split())\nprint(C-(A-B) if A-B<=C else 0)", "label": 1, "name1": "s948835843.py", "name2": "s211234758.py"}, {"id": 476, "code1": "N = int(input())\nA = list(map(int, input().split()))\nB = list(map(int, input().split()))\n\nplus_2 = 0\nminus = 0\nfor a, b in zip(A, B):\n    if a < b:\n        plus_2 += (b-a)//2\n    else:\n        minus += a-b\n\nif plus_2 >= minus:\n    print('Yes')\nelse:\n    print('No')", "code2": "import sys\n\n# import re\nimport math\nimport collections\n# import decimal\nimport bisect\nimport itertools\nimport fractions\n# import functools\nimport copy\nimport heapq\nimport decimal\n# import statistics\nimport queue\n\nsys.setrecursionlimit(10000001)\nINF = 10 ** 16\nMOD = 10 ** 9 + 7\n\nni = lambda: int(sys.stdin.readline())\nns = lambda: map(int, sys.stdin.readline().split())\nna = lambda: list(map(int, sys.stdin.readline().split()))\n\n\n# ===CODE===\n\n\ndef main():\n    n = ni()\n    a = na()\n    b = na()\n\n    a_cnt = 0\n    b_cnt = 0\n\n    for ai, bi in zip(a, b):\n        tmp = bi - ai\n        if tmp < 0:\n            b_cnt += abs(tmp)\n        elif tmp > 0:\n            a_cnt += (tmp + 1) // 2\n            b_cnt += tmp % 2\n        # print(ai, bi, a_cnt, b_cnt)\n\n    print(\"Yes\" if a_cnt >= b_cnt else \"No\")\n\n\nif __name__ == '__main__':\n    main()\n", "label": 1, "name1": "s301247411.py", "name2": "s409771408.py"}, {"id": 181, "code1": "a, b = map(int, input().split())\n\nprint(a - int(a > b))\n\n", "code2": "a,b=map(int,input().split())\nif b >= a:\n  print(a)\nelse:\n  print(a-1)", "label": 1, "name1": "s523849066.py", "name2": "s714654685.py"}, {"id": 397, "code1": "input()\ns = sorted(map(int, raw_input().split()))\nfor i in s:\n    print i,", "code2": "#coding:utf-8\n\nn = input()\nl = map(int, raw_input(). split())\nl.sort()\nfor i in xrange(n):\n    print(l[i]),", "label": 1, "name1": "s503541745.py", "name2": "s666694142.py"}, {"id": 537, "code1": "t =0\nfor a in range(4):\n  y = int(input())\n  t += y\nc = t\ng=0\nwhile True:\n if c <0: break\n else:\n  c-=60\n  g+=1\ng-=1\nprint g\nprint t%60", "code2": "while(True):\n    n = int(input())\n    if not n: break\n    maxind = 0\n    maxnum = 0\n    for _ in range(n):\n        a,b,c = map(int,input().split())\n        if maxnum < b+c: maxind=a; maxnum=b+c\n    print(maxind,maxnum)\n", "label": 0, "name1": "s359341708.py", "name2": "s695355783.py"}, {"id": 714, "code1": "import sys\n\n\n#\u4e92\u3044\u306b\u7d20\u306aa,b\u306b\u3064\u3044\u3066\u3001a*x+b*y=1\u306e\u4e00\u3064\u306e\u89e3\ndef extgcd(a, b):\n    r = [1, 0, a]\n    w = [0, 1, b]\n    while w[2] != 1:\n        q = r[2] // w[2]\n        r2 = w\n        w2 = [r[0] - q * w[0], r[1] - q * w[1], r[2] - q * w[2]]\n        r = r2\n        w = w2\n    #[x,y]\n    return [w[0], w[1]]\n\n\n# a\u306e\u9006\u5143(mod m)\u3092\u6c42\u3081\u308b\u3002(a\u3068m\u306f\u4e92\u3044\u306b\u7d20\u3067\u3042\u308b\u3053\u3068\u304c\u524d\u63d0)\ndef mod_inv(a, m):\n    x = extgcd(a, m)[0]\n    return (m + x % m) % m\n\n\nreadline = sys.stdin.readline\nMOD_NUM = 10**6 + 3\n\nQ = int(readline())\nq_array = [list(map(int, readline().split())) for i in range(Q)]\nans_array = []\n\nfactorial = [1] * MOD_NUM\nfactorial_inv = [1] * MOD_NUM\n\ntmp = 1\nfor i in range(2, MOD_NUM):\n    tmp = tmp * i % MOD_NUM\n    factorial[i] = tmp\n    factorial_inv[i] = mod_inv(tmp, MOD_NUM)\n\nfor q in q_array:\n    x, d, n = q\n    # print(x, d, n)\n    if x == 0:\n        ans_array.append(\"0\\n\")\n        continue\n    if d == 0:\n        ans = pow(x, n, MOD_NUM)\n        ans_array.append(str(ans) + \"\\n\")\n    else:\n        x_start = x * mod_inv(d, MOD_NUM) % MOD_NUM\n        if x_start + n > MOD_NUM:\n            ans_array.append(\"0\\n\")\n        else:\n            ans = factorial[x_start + n - 1] * factorial_inv[\n                x_start - 1] * pow(d, n, MOD_NUM) % MOD_NUM\n            ans_array.append(str(ans) + \"\\n\")\n\nsys.stdout.writelines(ans_array)", "code2": "s=input()\nn=len(s)\nl=[[] for _ in range(2**(n-1))]\nfor b in range(2**(n-1)):\n    x=b\n    for i in range(n-1):\n        if x%2==1:\n            l[b].append(1)\n        else:\n            l[b].append(0)\n        x//=2\n#print(l)\nindexes=[[] for _ in range(2**(n-1))]\nfor k in range(2**(n-1)):\n    indexes[k]=[i for i, x in enumerate(l[k]) if x == 1]\n#print(indexes)\nSUM=0\nfor j in range(2**(n-1)):\n    L=len(indexes[j])\n    if L==0:\n        SUM+=int(s)\n        #print(SUM)\n    else:\n        SUM+=int(s[:indexes[j][0]+1])\n        #print(SUM)\n        SUM+=int(s[indexes[j][L-1]+1:])\n        #print(SUM)\n        if L>1:\n            for h in range(L-1):\n                SUM+=int(s[indexes[j][h]+1:indexes[j][h+1]+1])\n                #print(SUM)\nprint(SUM)", "label": 0, "name1": "s261991889.py", "name2": "s307853353.py"}, {"id": 487, "code1": "l = len(set(list(map(int, input().split()))))\nif l == 2:\n  print(\"Yes\")\nelse:\n  print(\"No\")", "code2": "import sys\nfrom collections import defaultdict, Counter, deque\nfrom itertools import accumulate, permutations, combinations\nfrom operator import itemgetter\nfrom bisect import bisect_left, bisect_right, bisect\nfrom heapq import heappop, heappush\nfrom fractions import gcd\nfrom math import ceil, floor, sqrt, cos, sin, pi\nfrom copy import deepcopy\n\n# If you use recursive call, uncomment this code\n#sys.setrecursionlimit(10**6)\n\ndef main():\n    nums = set(map(int, input().split()))\n    if len(nums) == 2:\n        print(\"Yes\")\n    else:\n        print(\"No\")\n\n\nif __name__ == '__main__':\n    main()\n", "label": 1, "name1": "s571170465.py", "name2": "s765543700.py"}, {"id": 354, "code1": "from sys import stdin, setrecursionlimit\n\n\ndef main():\n    input = stdin.buffer.readline\n    x, y = map(int, input().split())\n    count = 0\n    tmp = x\n    while tmp <= y:\n        tmp *= 2\n        count += 1\n    print(count)\n\n\nif __name__ == \"__main__\":\n    setrecursionlimit(10000)\n    main()\n", "code2": "\nX, Y = list(map(int, input().split()))\n\nans = 0\nwhile X <= Y:\n\tX *= 2\n\tans += 1\n\nprint(ans)", "label": 1, "name1": "s379690682.py", "name2": "s831535184.py"}, {"id": 71, "code1": "# AOJ 0217 Walking in the Hospital\n# Python3 2018.6.23 bal4u\n\nwhile 1:\n\tn = int(input())\n\tif n == 0: break\n\tdmax = 0\n\tfor i in range(n):\n\t\tp, d1, d2 = map(int, input().split())\n\t\tif d1+d2 > dmax: id, dmax = p, d1+d2\n\tprint(id, dmax)\n", "code2": "while True:\n    N=int(input())\n    if N== 0:\n        break\n    B=0\n    V=0\n    for i in range(N):\n        p,d,g=map(int,input().split())\n        S=d+g\n        if S>V:\n            V=S\n            B=p\n    print(B,V)\n", "label": 1, "name1": "s876770513.py", "name2": "s184789126.py"}, {"id": 496, "code1": "#!/usr/bin/env python3\n\n#import\n#import math\n#import numpy as np\nN = int(input())\nS = list(input())\n\nre = S.count(\"E\")\nrw = N - re\nle = 0\nlw = 0\n\nans = 10**9\n\nfor i in range(N):\n    if S[i] == \"E\":\n        re -= 1\n        ans = min(ans, re + lw)\n        le += 1\n    else:\n        rw -= 1        \n        ans = min(ans, re + lw)\n        lw += 1\n\nprint(ans)\n\n\n", "code2": "n = int(input())\ns = input()\nleft = [0]\nright = [0]\nfor i in range(n):\n    if s[i] == 'W':\n        tmp = left[-1] + 1\n        left.append(tmp)\n    else:\n        left.append(left[-1])\n    if s[n-1-i] == 'E':\n        tmp = right[-1] + 1\n        right.append(tmp)\n    else:\n        right.append(right[-1])\nmi = 10**18\nright = right[::-1]\nfor i in range(n+1):\n    if mi > left[i] + right[i]:\n        mi = left[i] + right[i]\nprint(mi)", "label": 1, "name1": "s258995068.py", "name2": "s487064711.py"}, {"id": 503, "code1": "N = int(input())\n\ntotal = sum(list(map(int, str(N))))\n\nif total % 9 == 0:\n  print('Yes')\nelse:\n  print('No')\n", "code2": "S = input()\n\nflag = 'Yes'\nfor i in range(len(S)):\n    if i%2 == 0:\n        if S[i] == 'R' or S[i] == 'U' or S[i] == 'D':\n            pass\n        else:\n            flag = 'No'\n            break\n    if i%2 == 1:\n        if S[i] == 'L' or S[i] == 'U' or S[i] == 'D':\n            pass\n        else:\n            flag = 'No'\n            break\n\nprint(flag)\n", "label": 0, "name1": "s525082295.py", "name2": "s961835833.py"}, {"id": 22, "code1": "H,W = map(int,input().split())\n#print(H)\nans = 1\n \n \nif H*W%2 == 0:\n    ans = int(H*W/2)\nelse:\n    ans = int(H*W//2 + 1)\n#output\nif H == 1:\n    ans = 1\nif W == 1:\n    ans = 1\nprint(ans)", "code2": "h,w= map(int, input().split())\n\nif h==1 or w==1:\n    print(1)\n    exit()\n\nif w%2==0:\n    print((w//2)*h)\n\nelse:\n    if h%2==0:\n        print((h//2)*w)\n    else:\n        print((h//2)*w+(w//2)+1)", "label": 1, "name1": "s137900528.py", "name2": "s773266940.py"}, {"id": 349, "code1": "def inpl(): return list(map(int, input().split()))\nN, M = inpl()\nf, n = set(), set()\nfor i in range(M):\n    temp = inpl()\n    if 1 in temp:\n        f.add(temp[1])\n    if N in temp:\n        n.add(temp[0])\nif len(f & n) > 0:\n    print('POSSIBLE')\nelse:\n    print('IMPOSSIBLE')", "code2": "from collections import defaultdict as dd\ndef main():\n    N, M = map(int, input().split())\n\n    D = dd(list)\n\n    for m in range(M):\n        a, b = map(int, input().split())\n        D[a-1].append(b-1)\n\n    for d in D[0]:\n        if N-1 in D[d]:\n            print('POSSIBLE')\n            return\n\n    print('IMPOSSIBLE')\n        \n\nif __name__ == \"__main__\":\n    # global stime\n    # stime = time.clock()\n    main()", "label": 1, "name1": "s278593598.py", "name2": "s966091942.py"}, {"id": 520, "code1": "n,a,b = map(int, input().split())\nXs = list(map(int, input().split()))\n\nds = [0] * (n+10)\nfor i in range(n-1):\n    cost1 = a*(Xs[i+1] - Xs[i])\n    cost2 = b\n    ds[i+1] = ds[i] + min(cost1, cost2)\nprint(ds[n-1])", "code2": "while(1):\n    n = int(input())\n    if n == 0:\n        break\n    s = [float(i) for i in input().split()]\n    m = sum(s)/n\n    a = (sum([(i- m)**2 for i in s])/n)**0.5\n    print(\"{:.8f}\".format(a))\n", "label": 0, "name1": "s039990138.py", "name2": "s123853064.py"}, {"id": 948, "code1": "D=int(input())\nc=list(map(int,input().split()))\ns=[list(map(int,input().split())) for _ in range(D)]\n\nlast=[0]*26\n\n\nfor d in range(1,D+1):\n    ans=[]\n    for choice in range(1,27):\n        ans_tmp=0\n        ans_tmp+=s[d-1][choice-1]\n        for i in range(26):\n            if i+1==choice:\n                continue\n            ans_tmp-=c[i]*(d-last[i])*max(2,(D-d)//36)\n        ans.append((ans_tmp,choice))\n    _,case=max(ans)\n    last[case-1]=d\n    print(case)\n\n", "code2": "#!/usr/bin/env pypy\n\nimport sys\nfrom typing import Any, Callable, Deque, Dict, List, Mapping, Optional, Sequence, Set, Tuple, TypeVar, Union\n# import time\n# import math\n# import numpy as np\n# import scipy.sparse.csgraph as cs            # csgraph_from_dense(ndarray, null_value=inf), bellman_ford(G, return_predecessors=True), dijkstra, floyd_warshall\n# import random                                # random, uniform, randint, randrange, shuffle, sample\n# import string                                # ascii_lowercase, ascii_uppercase, ascii_letters, digits, hexdigits\n# import re                                    # re.compile(pattern) => ptn obj; p.search(s), p.match(s), p.finditer(s) => match obj; p.sub(after, s)\n# from bisect import bisect_left, bisect_right # bisect_left(a, x, lo=0, hi=len(a)) returns i such that all(val<x for val in a[lo:i]) and all(val>-=x for val in a[i:hi]).\n# from collections import deque                # deque class. deque(L): dq.append(x), dq.appendleft(x), dq.pop(), dq.popleft(), dq.rotate()\n# from collections import defaultdict          # subclass of dict. defaultdict(facroty)\n# from collections import Counter              # subclass of dict. Counter(iter): c.elements(), c.most_common(n), c.subtract(iter)\n# from datetime import date, datetime          # date.today(), date(year,month,day) => date obj; datetime.now(), datetime(year,month,day,hour,second,microsecond) => datetime obj; subtraction => timedelta obj\n# from datetime.datetime import strptime       # strptime('2019/01/01 10:05:20', '%Y/%m/%d/ %H:%M:%S') returns datetime obj\n# from datetime import timedelta               # td.days, td.seconds, td.microseconds, td.total_seconds(). abs function is also available.\n# from copy import copy, deepcopy              # use deepcopy to copy multi-dimentional matrix without reference\n# from functools import reduce                 # reduce(f, iter[, init])\n# from functools import lru_cache              # @lrucache ...arguments of functions should be able to be keys of dict (e.g. list is not allowed)\n# from heapq import heapify, heappush, heappop # built-in list. heapify(L) changes list in-place to min-heap in O(n), heappush(heapL, x) and heappop(heapL) in O(lgn).\n# from heapq import nlargest, nsmallest        # nlargest(n, iter[, key]) returns k-largest-list in O(n+klgn).\n# from itertools import count, cycle, repeat   # count(start[,step]), cycle(iter), repeat(elm[,n])\n# from itertools import groupby                # [(k, list(g)) for k, g in groupby('000112')] returns [('0',['0','0','0']), ('1',['1','1']), ('2',['2'])]\n# from itertools import starmap                # starmap(pow, [[2,5], [3,2]]) returns [32, 9]\n# from itertools import product, permutations  # product(iter, repeat=n), permutations(iter[,r])\n# from itertools import combinations, combinations_with_replacement\n# from itertools import accumulate             # accumulate(iter[, f])\n# from operator import itemgetter              # itemgetter(1), itemgetter('key')\n# from fractions import Fraction               # Fraction(a, b) => a / b \u2208 Q. note: Fraction(0.1) do not returns Fraciton(1, 10). Fraction('0.1') returns Fraction(1, 10)\n\n\n\ndef main():\n    Num = Union[int, float]\n    mod = 1000000007                # 10^9+7\n    inf = float('inf')              # sys.float_info.max = 1.79e+308\n    # inf = 2 ** 63 - 1             # (for fast JIT compile in PyPy) 9.22e+18\n    sys.setrecursionlimit(10**6)    # 1000 -> 1000000\n    def input(): return sys.stdin.readline().rstrip()\n    def ii():    return int(input())\n    def isp():   return input().split()\n    def mi():    return map(int, input().split())\n    def mi_0():  return map(lambda x: int(x)-1, input().split())\n    def lmi():   return list(map(int, input().split()))\n    def lmi_0(): return list(map(lambda x: int(x)-1, input().split()))\n    def li():    return list(input())\n\n\n    def check(n, m, k):\n        for i in range(n + 1):\n            for j in range(m + 1):\n                if i * j + (n - i) * (m - j) == k:\n                    return True\n        return False\n    \n    \n    n, m, k = mi()\n    print('Yes') if check(n, m, k) else print('No')\n        \n\n\nif __name__ == \"__main__\":\n    main()\n", "label": 0, "name1": "s931339849.py", "name2": "s894514161.py"}, {"id": 438, "code1": "from collections import defaultdict\n\nclass Unionfind:\n\n    __slots__ = ['parents','sizes']\n\n    def __init__(self, n):\n        self.parents = list(range(n))\n        self.sizes = [1]*n\n\n    def root(self, x):\n        if self.parents[x] == x:\n            return x\n        else:\n            root_x = self.root(self.parents[x])\n            self.parents[x] = root_x\n            return root_x\n\n    def unite(self, x, y):\n        x = self.root(x); y = self.root(y)\n        if x == y:\n            return\n        if self.sizes[x] < self.sizes[y]:\n            x, y = y, x\n        self.sizes[x] += self.sizes[y]\n        self.parents[y] = x\n\n    def same(self, x, y):\n        return self.root(x) == self.root(y)\n\n    # \u96c6\u5408\u81ea\u4f53\u306e\u6570 ({1,2}, {3}, {4} : kind -> 3)\n    def kind(self):\n        for v in range(N):\n            self.root(v)\n        return len(list(set(self.parents)))\n\n    # x\u304c\u5c5e\u3059\u308b\u96c6\u5408\u306e\u8981\u7d20\u306e\u6570\u3000({1,2,3} : size(2) -> 3)\n    def size(self, x):\n        self.sizes[x] = self.sizes[self.root(x)]\n        return self.sizes[x]\n\nN, K, L = map(int,input().split())\nroad = Unionfind(N)\ntrain = Unionfind(N)\n\nfor _ in range(K):\n    p, q = map(int,input().split())\n    p -= 1; q -= 1\n    road.unite(p, q)\n\nfor _ in range(L):\n    r, s = map(int,input().split())\n    r -= 1; s -= 1\n    train.unite(r, s)\n\ncnt = defaultdict(int)\n\nfor i in range(N):\n    key = (road.root(i), train.root(i))\n    cnt[key] += 1\n\nans_list = []\nfor i in range(N):\n    key = (road.root(i), train.root(i))\n    ans = cnt[key]\n    ans_list.append(ans)\n\nprint(*ans_list)", "code2": "import sys\nfrom collections import deque, Counter\nsys.setrecursionlimit(1000000)\nN, K, L = map(int, input().split())\npq = [list(map(int, input().split())) for _ in range(K)]\nrs = [list(map(int, input().split())) for _ in range(L)]\n\nG_r = [[] for _ in range(N+1)]\nfor elem in pq:\n    G_r[elem[0]].append(elem[1])\n    G_r[elem[1]].append(elem[0])\nG_t = [[] for _ in range(N+1)]\nfor elem in rs:\n    G_t[elem[0]].append(elem[1])\n    G_t[elem[1]].append(elem[0])\n\n\nfield_r = [None]*(N+1)\n\n\ndef dfs_r(i, idx):\n    q = deque()\n    q.append(i)\n    field_r[i] = idx\n    while q:\n        tmp = q.pop()\n        for pos in G_r[tmp]:\n            if field_r[pos] is None:\n                field_r[pos] = idx\n                q.append(pos)\n            else:\n                continue\nidx = 0\nfor i in range(1, N+1):\n    if field_r[i] is None:\n        dfs_r(i, idx)\n        idx += 1\n\n\nfield_t = [None]*(N+1)\n\n\ndef dfs_t(i, idx):\n    q = deque()\n    q.append(i)\n    field_t[i] = idx\n    while q:\n        tmp = q.pop()\n        for pos in G_t[tmp]:\n            if field_t[pos] is None:\n                field_t[pos] = idx\n                q.append(pos)\n            else:\n                continue\nidx = 0\nfor i in range(1, N+1):\n    if field_t[i] is None:\n        dfs_t(i, idx)\n        idx += 1\n\nm = list(zip(field_r[1:], field_t[1:]))\ncnt = Counter(m)\nans = []\nfor elem in list(m):\n    ans.append(cnt[elem])\nprint(' '.join(map(str, ans)))\n", "label": 1, "name1": "s028456939.py", "name2": "s645452029.py"}, {"id": 373, "code1": "AI, AO, _, AJ, AL, _, _ = map(int, input().split())\n\nodd = AI % 2 + AJ % 2 + AL % 2\nif odd == 0 or odd == 3:\n    print(AI + AO + AJ + AL)\nelif odd == 1:\n    print(AI + AO + AJ + AL - 1)\nelse:\n    if AI + AJ + AL == 2:\n        print(AO)\n    else:\n        print(AI + AO + AJ + AL - 1)\n", "code2": "I,O,T,J,L,S,Z=map(int,input().split())\nA=((I-1)//2)*2+O+((J-1)//2)*2+((L-1)//2)*2+3\nB=(I//2)*2+O+(J//2)*2+(L//2)*2\nif I==0 or J==0 or L==0:\n  print(B)\nelse:\n  print(max(A,B))\n", "label": 1, "name1": "s383965736.py", "name2": "s908614160.py"}, {"id": 381, "code1": "H,W = list(map(int,input().split()))\n\na = [input() for i in range(H)]\n\nb = [[] for i in range(H)]\nr = [[] for i in range(H)]\nfor i in range(H):\n    for j in range(W):\n        if i==0:\n            b[i].append(\"#\")\n            r[i].append(\".\")\n        elif i==H-1:\n            b[i].append(\".\")\n            r[i].append(\"#\")\n        elif a[i][j]==\"#\":\n            b[i].append(\"#\")\n            r[i].append(\"#\")\n        elif j%2==0:\n            b[i].append(\".\")\n            r[i].append(\"#\")\n        elif j%2==1:\n            b[i].append(\"#\")\n            r[i].append(\".\")\n\nfor i in range(H):\n    ans = \"\"\n    for j in range(W):\n        ans = ans+b[i][j]\n\n    print(ans)\nprint(\"\")\n\nfor i in range(H):\n    ans = \"\"\n    for j in range(W):\n        ans = ans+r[i][j]\n\n    print(ans)\n", "code2": "h, w = map(int, input().split())\na = [list(input()) for i in range(h)]\nta = [[\".\"] * w for i in range(h)]\nao = [[\".\"] * w for i in range(h)]\nfor i in range(h):\n    if i % 2 == 0:\n        for j in range(w - 1):\n            ta[i][j] = \"#\"\n        ao[i][-1] = \"#\"\n    else:\n        for j in range(1, w):\n            ao[i][j] = \"#\"\n        ta[i][0] = \"#\"\nfor i in range(h):\n    for j in range(w):\n        if a[i][j] == \"#\":\n            ta[i][j] = \"#\"\n            ao[i][j] = \"#\"\nfor i in range(h):\n    print(*ta[i], sep=\"\")\nprint()\nfor i in range(h):\n    print(*ao[i], sep=\"\")", "label": 1, "name1": "s413122754.py", "name2": "s319820171.py"}, {"id": 599, "code1": "y = [True for i in range(250001)]\ny[0] = y[1] = False\nfor i in range(2, 500):\n    if y[i]:\n        for j in range(2, 250000 // i + 1):\n            y[i * j] = False\nwhile True:\n    n = int(input())\n    if n == 0:\n        break\n    print(y[n + 1 : n * 2 + 1].count(True))\n", "code2": "q = int(input())\nquest = [tuple(map(int, input().split())) for _ in range(q)]\nfor a, b in quest:\n    m = a*b\n    l = int((m - 1) ** (1/2))\n    # check float\n    if l * l >= m:\n        l -= 1\n    elif (l+1) * (l+1) < m:\n        l += 1\n    if a == b:\n        print((a-1) * 2)\n    elif (l+1) * l < m:\n        print(l*2 - 1)\n    else:\n        print(l*2 - 2)\n", "label": 0, "name1": "s889149636.py", "name2": "s200942919.py"}, {"id": 791, "code1": "from collections import defaultdict\n\nclass Unionfind:\n\n    __slots__ = ['parents','sizes']\n\n    def __init__(self, n):\n        self.parents = list(range(n))\n        self.sizes = [1]*n\n\n    def root(self, x):\n        if self.parents[x] == x:\n            return x\n        else:\n            root_x = self.root(self.parents[x])\n            self.parents[x] = root_x\n            return root_x\n\n    def unite(self, x, y):\n        x = self.root(x); y = self.root(y)\n        if x == y:\n            return\n        if self.sizes[x] < self.sizes[y]:\n            x, y = y, x\n        self.sizes[x] += self.sizes[y]\n        self.parents[y] = x\n\n    def same(self, x, y):\n        return self.root(x) == self.root(y)\n\n    # \u96c6\u5408\u81ea\u4f53\u306e\u6570 ({1,2}, {3}, {4} : kind -> 3)\n    def kind(self):\n        for v in range(N):\n            self.root(v)\n        return len(list(set(self.parents)))\n\n    # x\u304c\u5c5e\u3059\u308b\u96c6\u5408\u306e\u8981\u7d20\u306e\u6570\u3000({1,2,3} : size(2) -> 3)\n    def size(self, x):\n        self.sizes[x] = self.sizes[self.root(x)]\n        return self.sizes[x]\n\nN, K, L = map(int,input().split())\nroad = Unionfind(N)\ntrain = Unionfind(N)\n\nfor _ in range(K):\n    p, q = map(int,input().split())\n    p -= 1; q -= 1\n    road.unite(p, q)\n\nfor _ in range(L):\n    r, s = map(int,input().split())\n    r -= 1; s -= 1\n    train.unite(r, s)\n\ncnt = defaultdict(int)\n\nfor i in range(N):\n    key = (road.root(i), train.root(i))\n    cnt[key] += 1\n\nans_list = []\nfor i in range(N):\n    key = (road.root(i), train.root(i))\n    ans = cnt[key]\n    ans_list.append(ans)\n\nprint(*ans_list)", "code2": "m=10**9+7\ni=s=r=0\nf=1\ninput()\na=input().split()\nfor x in a:i+=1;s+=pow(i,m-2,m);r+=int(x)*~-s+int(a[-i])*s;f=f*i%m\nprint(r*f%m)", "label": 0, "name1": "s028456939.py", "name2": "s072063122.py"}, {"id": 510, "code1": "import sys\n\ns = list(input())\n\nfor i in range(len(s)):\n  if i % 2 == 1:\n    if s[i] == \"L\" or s[i] == \"U\"or s[i] == \"D\":\n      continue\n    else:\n      print(\"No\")\n      sys.exit()\n  else:\n    if s[i] == \"R\" or s[i] == \"U\"or s[i] == \"D\":\n      continue\n    else:\n      print(\"No\")\n      sys.exit()\n\nprint(\"Yes\")", "code2": "\ndef resolve():\n    N, A, B = map(int, input().split())\n    X = list(map(int, input().split()))\n\n    ans = 0\n    for i in range(N - 1):\n        res = min((X[i + 1] - X[i]) * A, B)\n        ans += res\n        \n    print(ans)\n\n\nif __name__ == \"__main__\":\n    resolve()", "label": 0, "name1": "s904714457.py", "name2": "s398154186.py"}, {"id": 156, "code1": "import sys\n\nimport bisect\n\n# from collections import Counter, deque, defaultdict\n\n# import copy\n# from heapq import heappush, heappop, heapify\n# from fractions import gcd\n# import itertools\n# from operator import attrgetter, itemgetter\nimport math\n\n# import numpy as np\n\nreadline = sys.stdin.readline\nMOD = 10 ** 9 + 7\nINF = float('INF')\nsys.setrecursionlimit(10 ** 5)\n\n\ndef main():\n    q = int(input())\n\n    for i in range(q):\n        a, b = list(map(int, readline().split()))\n\n        if a > b:\n            a, b = b, a\n\n        if a == b or a + 1 == b:\n            print(2 * a - 2)\n        else:\n            ab = a * b\n            ok = 0\n            ng = int(ab ** 0.5) + 1000000\n            while abs(ng - ok) > 1:\n                mid = (ok + ng) // 2\n                if mid ** 2 < ab:\n                    ok = mid\n                else:\n                    ng = mid\n            c = ok\n\n            if c * (c + 1) < ab:\n                print(2 * c - 1)\n            else:\n                print(2 * c - 2)\n\n\nif __name__ == '__main__':\n    main()\n", "code2": "q = int(input())\nquest = [tuple(map(int, input().split())) for _ in range(q)]\nfor a, b in quest:\n    m = a*b\n    l = int((m - 1) ** (1/2))\n    # check float\n    if l * l >= m:\n        l -= 1\n    elif (l+1) * (l+1) < m:\n        l += 1\n    if a == b:\n        print((a-1) * 2)\n    elif (l+1) * l < m:\n        print(l*2 - 1)\n    else:\n        print(l*2 - 2)\n", "label": 1, "name1": "s587240804.py", "name2": "s200942919.py"}, {"id": 229, "code1": "n=int(raw_input())\ng=[[1000000]*n for _ in xrange(n)]\nfor i in xrange(n):\n    g[i][i]=0\nfor i in xrange(n):\n    r=map(int,raw_input().split())\n    for j in r[2:]:\n        g[r[0]-1][j-1]=1\nfor k in xrange(n):\n    for i in xrange(n):\n        for j in xrange(n):\n            g[i][j]=min(g[i][j],g[i][k]+g[k][j])\nm=int(raw_input())\nfor i in xrange(m):\n    s,d,v=map(int,raw_input().split())\n    s-=1\n    d-=1\n    if g[s][d]<v:\n        print(g[s][d]+1)\n    else:\n        print('NA')", "code2": "from collections import deque\n\nn = int(input())\nrlst = [None] * (n + 1)\nfor _ in range(n):\n  lst = list(map(int, input().split()))\n  r = lst[0]\n  lst = lst[2:]\n  rlst[r] = lst\n\np = int(input())\n\nfor _ in range(p):\n  s, d, v = map(int, input().split())\n  visited = [False] * (n + 1)\n  visited[s] = True\n  que = deque()\n  que.append((s, 0))\n  while que:\n    node, dist = que.popleft()\n    if node == d:\n      if dist < v:\n        print(dist + 1)\n      else:\n        print(\"NA\")\n      break\n    for to in rlst[node]:\n      if not visited[to]:\n        que.append((to, dist + 1))\n        visited[to] = True\n  else:\n    print(\"NA\")\n", "label": 1, "name1": "s227640621.py", "name2": "s423232212.py"}, {"id": 51, "code1": "N = int(input())\nAs = list(map(int,input().split()))\ncounts = []\nnow = As[0]\ncount = 1\nfor a in range(1,len(As)):\n    if As[a]==now:\n        count+=1\n        if a == len(As)-1:\n            counts.append(count)\n    else:\n        counts.append(count)\n        count =1\n        now = As[a]\nprint(sum([i//2 for i in counts]))", "code2": "n = int(input())\na = list(map(int, input().split()))\nL = len(a)\n\nans = 0\nfor i in range(1, L) :\n    if(a[i] == a[i-1]) :\n        a[i] = -1\n        ans += 1\n\nprint(ans)", "label": 1, "name1": "s736034553.py", "name2": "s691982040.py"}, {"id": 231, "code1": "# AOJ 0144 Packet Transportation\n# Python3 2018.6.23 bal4u\n\nINF = 0x7fffffff\nn = int(input())\narr = [[INF for j in range(n)] for i in range(n)]\nfor i in range(n):\n\ta = list(map(int, input().split()))\n\tx, k = a[0]-1, a[1]\n\tfor j in range(k):\n\t\ty = a[j+2]-1\n\t\tarr[x][y] = 1\nfor k in range(n):\n\tarr[k][k] = 0\n\tfor i in range(n):\n\t\tif arr[i][k] >= INF: continue\n\t\tfor j in range(n):\n\t\t\tif arr[k][j] >= INF: continue\n\t\t\tarr[i][j] = min(arr[i][j], arr[i][k] + arr[k][j])\np = int(input())\nfor i in range(p):\n\ts, d, v = map(int, input().split())\n\ts,d = s-1, d-1\n\tprint(arr[s][d]+1 if arr[s][d] < v else \"NA\")\n", "code2": "from collections import deque\n\nn = int(input())\nrlst = [None] * (n + 1)\nfor _ in range(n):\n  lst = list(map(int, input().split()))\n  r = lst[0]\n  lst = lst[2:]\n  rlst[r] = lst\n\np = int(input())\n\nfor _ in range(p):\n  s, d, v = map(int, input().split())\n  visited = [False] * (n + 1)\n  visited[s] = True\n  que = deque()\n  que.append((s, 0))\n  while que:\n    node, dist = que.popleft()\n    if node == d:\n      if dist < v:\n        print(dist + 1)\n      else:\n        print(\"NA\")\n      break\n    for to in rlst[node]:\n      if not visited[to]:\n        que.append((to, dist + 1))\n        visited[to] = True\n  else:\n    print(\"NA\")\n", "label": 1, "name1": "s881383078.py", "name2": "s423232212.py"}, {"id": 971, "code1": "import bisect\nn=int(input())\na=list(map(int,input().split()))\nb=list(map(int,input().split()))\nc=list(map(int,input().split()))\na.sort()\nb.sort()\nc.sort()\nans=0\nfor k in b:\n    i=bisect.bisect_left(a,k)\n    j=bisect.bisect_right(c,k)\n    if 0<i and j!=len(c):\n        ans+=i*(n-j)\nprint(ans)", "code2": "n,a,b= map(int,input().split())\nsh = sorted([int(input()) for i in range(n)],reverse=True)\nsumh = sum(sh)\ndef nibu(t):\n    rt=0\n    for i in range(n):\n        temp = -1*(-1*max(0,sh[i]-t*b)//(a-b))\n        if temp>0:rt+=temp\n        else:break\n        if rt>t:return False\n    return True if t>=rt else False\nl=max(sh)//a\nr=max(sh)//b+1\nwhile r-l!=1:\n    m = (l+r)//2\n    if nibu(m):r=m\n    else:l=m\nprint(r)\n", "label": 0, "name1": "s334484624.py", "name2": "s242197255.py"}, {"id": 759, "code1": "import sys\ninput = sys.stdin.readline\na, b, x = [int(x) for x in input().split()]\nB = 1 + b // x\nif a == 0:\n    print(B)\nelif a % x == 0:\n    A = 1 + a // x\n    print(B - A + 1)\nelse:\n    A = 1 + a // x\n    print(B - A)\n", "code2": "input()\ns = sorted(map(int, raw_input().split()))\nfor i in s:\n    print i,", "label": 0, "name1": "s444272977.py", "name2": "s503541745.py"}, {"id": 288, "code1": "N,M = map(int,(input().split()))\nX = list(map(int,(input().split())))\nX.sort()\nif M > N:\n    dist = [X[i+1]-X[i] for i in range(M - 1)]\n    dist.sort(reverse = True)\n    del dist[0:N-1]\n    print(sum(dist))\nelse:\n print(0)", "code2": "import sys\ninput = sys.stdin.readline\n\nn, m = map(int, input().split())\nl = list(map(int, input().split()))\n\nif n >= m:\n    print(0)\n    sys.exit()\n    \nl.sort()\nle = len(l) - 1\nnl = [0] * le\nfor i in range(0, len(l) - 1):\n    nl[i] = l[i + 1] - l[i]\n    \nnl.sort()\nprint(sum(nl[:le - n + 1]))", "label": 1, "name1": "s025338416.py", "name2": "s202166785.py"}, {"id": 193, "code1": "from sys import stdin\n\n\ndef main():\n    input = lambda: stdin.readline()[:-1]\n    N = int(input())\n    A = list(map(int, input().split()))\n\n    A.sort(reverse=1)\n    d, m = divmod(N, 2)\n    n = [2] * (d + m)\n    n[-1], n[0] = n[-1] - m, 1\n    ans = 0\n    for i, k in enumerate(n):\n        ans += A[i] * k\n    print(ans)\n\n\nmain()\n", "code2": "n=int(input())\nl=list(map(int,input().split()))\nl.sort()\n\nsum=l[-1]\nfor i in range(1,n//2):\n  sum+=2*l[-1-i]\nif n%2!=0:\n  sum+=l[n//2]\nprint(sum)", "label": 1, "name1": "s775405634.py", "name2": "s279247107.py"}, {"id": 443, "code1": "# coding:utf-8\n\nimport sys\n\n\ninput = sys.stdin.readline\nINF = float('inf')\nMOD = 10 ** 9 + 7\n\n\ndef inpl(): return list(map(int, input().split()))\n\n\n# a\u306ep\u4e57\u3092\u6c42\u3081\u308b\u30a2\u30eb\u30b4\u30ea\u30ba\u30e0\n# MOD\u7248\ndef pow_mod(a, p):\n    if p == 0: return 1\n\n    if p % 2 == 0:\n        half_p = p // 2\n        half = pow_mod(a, half_p)\n        return half * half % MOD\n    else:\n        return a * pow_mod(a, p - 1) % MOD\n\n\ndef solve(N, A):\n    # \u968e\u4e57N!\u3092\u6c42\u3081\u308b\n    fact = [1] * N\n    for i in range(1, N):\n        fact[i] = fact[i - 1] * (i + 1) % MOD\n\n    # 1/N!\u306e\u9006\u5143\u3092\u6c42\u3081\u308b\n    fact_inv = [1] * N\n    fact_inv[-1] = pow_mod(fact[-1], MOD - 2)\n    for i in range(N - 1, 0, -1):\n        tmp = fact_inv[i] * (i + 1)\n        tmp %= MOD\n        fact_inv[i - 1] = tmp\n\n    # 1/k\u3092\u6c42\u3081\u308b\n    inv = [1]\n    for i in range(1, N):\n        inv.append((fact[i - 1] * fact_inv[i]) % MOD)\n\n    # 1/k\u306e\u7d2f\u7a4d\u548c\u3092\u6c42\u3081\u308b\n    inv_sum = [1]\n    for i in range(1, N):\n        inv_sum.append((inv_sum[-1] + inv[i]) % MOD)\n\n    # \u7d2f\u7a4d\u548c\u306e\u7d50\u679c\u3092\u4fc2\u6570\u3068\u3057\u3066Ai\u306b\u639b\u3051\u3066\u3001\u52a0\u7b97\u3059\u308b\n    ans = 0\n    for i in range(N):\n        ans += A[i] * (inv_sum[i] + inv_sum[N - 1 - i] - 1)\n        ans %= MOD\n\n    # ans\u306bN!\u3092\u639b\u3051\u305f\u3082\u306e\u3092\u8fd4\u3059\n    return ans * fact[-1] % MOD\n\n\nN = int(input())\nA = inpl()\nprint(solve(N, A))\n", "code2": "import sys\ninput = sys.stdin.readline\nN = int(input())\na = list(map(int, input().split()))\nmod = 10 ** 9 + 7\n\nclass Factorial:\n  def __init__(self, n, mod):\n    self.f = [1]\n    for i in range(1, n + 1):\n      self.f.append(self.f[-1] * i % mod)\n    self.i = [pow(self.f[-1], mod - 2, mod)]\n    for i in range(1, n + 1)[: : -1]:\n      self.i.append(self.i[-1] * i % mod)\n    self.i.reverse()\n  def factorial(self, i):\n    return self.f[i]\n  def ifactorial(self, i):\n    return self.i[i]\n  def combi(self, n, k):\n    return self.f[n] * self.i[n - k] % mod * self.i[k] % mod\n\nf = Factorial(N, mod)\nrevs = [0] * (N + 1)\nfor i in range(N): revs[i + 1] = (revs[i] + pow(i + 1, mod - 2, mod)) % mod\ndp = [0] * N\nfor i in range(N):\n  l = i + 1\n  r = N - i\n  dp[i] = f.factorial(N) * (revs[l] + revs[r] - revs[1]) % mod * a[i] % mod\nres = 0\nfor i in range(N):\n  res += dp[i]\n  res %= mod\nprint(res)", "label": 1, "name1": "s535253599.py", "name2": "s759175616.py"}, {"id": 271, "code1": "l=[]\nwhile True:\n    tmp=map(int,raw_input().split())\n    if sum(tmp)==0:\n        break\n    l.append(tmp)\n\nfor n,x in l:\n    c=0\n    for i in range(1,n):\n        for j in range(i+1,n):\n            k=x-i-j\n            if j<k<=n:\n                c+=1\n    print c", "code2": "while True:\n    n,x = map(int,raw_input().split())\n    count = 0;\n    if n == 0 and x == 0:break\n    for i in range(1,n + 1):\n        for j in range(1,n + 1):\n            if i == j:break\n            for k in range(1,n + 1):\n                if j == k:break\n                if i + j + k == x:\n                    count+=1\n                    break\n    print count", "label": 1, "name1": "s427641012.py", "name2": "s748079428.py"}, {"id": 178, "code1": "# coding: utf-8\ndef check(a,b):\n    if (a,b) in memo:\n        return memo[(a,b)]\n    if 0<=a<h and 0<=b<w and field[a][b].isdigit():\n        x=check(a+1,b)\n        y=check(a,b+1)\n        memo[(a,b)]=field[a][b]+(x if len(x)>len(y) else x if len(x)==len(y) and len(x)!=0 and int(x)>int(y) else y)\n        return field[a][b]+(x if len(x)>len(y) else x if len(x)==len(y) and len(x)!=0 and int(x)>int(y) else y)\n    else:\n        return ''\nwhile 1:\n    w,h=map(int,input().split())\n    if w==0:\n        break\n    field=[]\n    for i in range(h):\n        field.append(list(input()))\n    ans='0'\n    memo={}\n    for i in range(h):\n        for j in range(w):\n            if field[i][j]!='0' and field[i][j].isdigit():\n                tmp=check(i,j)\n                if int(ans)<int(tmp):\n                    ans=tmp\n    print(ans)\n", "code2": "import math,string,itertools,fractions,heapq,collections,re,array,bisect,sys,random,time,copy,functools\n\nsys.setrecursionlimit(10**7)\ninf = 10**20\neps = 1.0 / 10**10\nmod = 998244353\n\ndef LI(): return [int(x) for x in sys.stdin.readline().split()]\ndef LI_(): return [int(x)-1 for x in sys.stdin.readline().split()]\ndef LF(): return [float(x) for x in sys.stdin.readline().split()]\ndef LS(): return sys.stdin.readline().split()\ndef I(): return int(sys.stdin.readline())\ndef F(): return float(sys.stdin.readline())\ndef S(): return input()\ndef pf(s): return print(s, flush=True)\n\n\ndef main():\n    rr = []\n\n    while True:\n        w,h = LI()\n        if w == 0 and h == 0:\n            break\n        a = [[c for c in S()] for _ in range(h)]\n        t = [[0]*w for i in range(h)]\n        r = 0\n        for i in range(h):\n            for j in range(w):\n                c = a[i][j]\n                if not ('0' <= c <= '9'):\n                    continue\n                d = int(c) + t[i][j] * 10\n                if r < d:\n                    r = d\n                if i < h-1 and t[i+1][j] < d:\n                    t[i+1][j] = d\n                if j < w-1 and t[i][j+1] < d:\n                    t[i][j+1] = d\n        rr.append(r)\n\n    return '\\n'.join(map(str, rr))\n\n\nprint(main())\n\n\n", "label": 1, "name1": "s573602328.py", "name2": "s100075082.py"}, {"id": 757, "code1": "H,W = list(map(int,input().split()))\n\na = [input() for i in range(H)]\n\nb = [[] for i in range(H)]\nr = [[] for i in range(H)]\nfor i in range(H):\n    for j in range(W):\n        if i==0:\n            b[i].append(\"#\")\n            r[i].append(\".\")\n        elif i==H-1:\n            b[i].append(\".\")\n            r[i].append(\"#\")\n        elif a[i][j]==\"#\":\n            b[i].append(\"#\")\n            r[i].append(\"#\")\n        elif j%2==0:\n            b[i].append(\".\")\n            r[i].append(\"#\")\n        elif j%2==1:\n            b[i].append(\"#\")\n            r[i].append(\".\")\n\nfor i in range(H):\n    ans = \"\"\n    for j in range(W):\n        ans = ans+b[i][j]\n\n    print(ans)\nprint(\"\")\n\nfor i in range(H):\n    ans = \"\"\n    for j in range(W):\n        ans = ans+r[i][j]\n\n    print(ans)\n", "code2": "n = input()\nfor i in sorted(map(int, raw_input().split())):\n print i ,", "label": 0, "name1": "s413122754.py", "name2": "s740416119.py"}, {"id": 211, "code1": "n = int(input())\nsa,sb=[int(it) for it in input().split()]\nfor i in range(n-1):\n  a,b=[int(it) for it in input().split()]\n  r =  max( sa//a + (1 if sa%a!=0 else 0),sb//b+(1 if sb%b!=0 else 0) )\n  sa = r*a\n  sb = r*b\nprint (sa+sb)", "code2": "# WA math.ceil\u306f\u6d6e\u52d5\u5c0f\u6570\u70b9\u6f14\u7b97\u306e\u5f71\u97ff\u3092\u53d7\u3051\u308b\u306e\u3067\u3001\u6b63\u3057\u304f\u5207\u308a\u4e0a\u3052\u3067\u304d\u306a\u3044\u3068\u304d\u304c\u3042\u308b\n# >>> math.ceil((12345678901234*456+0.1)/12345678901234)\n# 456\n# >>> math.ceil((12345678901234*456+1)/12345678901234)\n# 457\n\nimport math\n\nn = int(input())\nvote_ratio = [ list(map(int, input().split())) for _ in range(n)]\n# print(vote_ratio)\n\n# ans = vote_ratio[0] \u306f\u540c\u3058\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u3092\u53c2\u7167\u3057\u3066\u3057\u307e\u3046\u306e\u3067\u907f\u3051\u308b\nans = [vote_ratio[0][0], vote_ratio[0][1]]\n\nfor i in range(1,n):\n\tbairitsu = max(ans[0] // vote_ratio[i][0], ans[1] // vote_ratio[i][1])\n\tif vote_ratio[i][0] * bairitsu < ans[0] \\\n\tor vote_ratio[i][1] * bairitsu < ans[1]:\n\t\tbairitsu += 1\n\tans = [vote_ratio[i][0] * bairitsu, vote_ratio[i][1] * bairitsu]\n\nprint(sum(ans))\n", "label": 1, "name1": "s718859988.py", "name2": "s651516806.py"}, {"id": 309, "code1": "a, b, c = map(int, input().split())\nans = c - (a - b)\n\nif ans >= 0:\n    print(ans)\nelse:\n    print(0)", "code2": "import sys\nsys.setrecursionlimit(10**7) #\u518d\u5e30\u95a2\u6570\u306e\u4e0a\u9650,10**5\u4ee5\u4e0a\u306e\u5834\u5408python\nimport math\nfrom copy import copy, deepcopy\nfrom copy import deepcopy as dcp\nfrom operator import itemgetter\nfrom bisect import bisect_left, bisect, bisect_right#2\u5206\u63a2\u7d22\n#bisect_left(l,x), bisect(l,x)#a\u306f\u30bd\u30fc\u30c8\u6e08\u307f\u3067\u3042\u308b\u5fc5\u8981\u3042\u308a\u3002a\u306e\u4e2d\u304b\u3089x\u672a\u6e80\u306e\u8981\u7d20\u6570\u3092\u8fd4\u3059\u3002right\u3060\u3068\u4ee5\u4e0b\nfrom collections import deque, defaultdict\n#deque(l), pop(), append(x), popleft(), appendleft(x)\n#q.rotate(n)\u3067 \u2192 \u306bn\u56de\u30ed\u30fc\u30c6\u30fc\u30c8\nfrom collections import Counter#\u6587\u5b57\u5217\u3092\u500b\u6570\u30ab\u30a6\u30f3\u30c8\u8f9e\u66f8\u306b\u3001\n#S=Counter(l),S.most_common(x),S.keys(),S.values(),S.items()\nfrom itertools import accumulate,combinations,permutations,product#\u7d2f\u7a4d\u548c\n#list(accumulate(l))\nfrom heapq import heapify,heappop,heappush\n#heapify(q),heappush(q,a),heappop(q) #q=heapify(q)\u3068\u3057\u306a\u3044\u3053\u3068\u3001\u8fd4\u308a\u5024\u306fNone\nfrom functools import reduce,lru_cache#pypy\u3067\u3082\u3046\u3054\u304f\n#@lru_cache(maxsize = None)#maxsize\u306f\u4fdd\u5b58\u3059\u308b\u30c7\u30fc\u30bf\u6570\u306e\u6700\u5927\u5024\u30012**n\u304c\u6700\u3082\u9ad8\u52b9\u7387\nfrom decimal import Decimal\n\ndef input(): \n    x=sys.stdin.readline()\n    return x[:-1] if x[-1]==\"\\n\" else x\ndef printe(*x):print(\"## \",*x,file=sys.stderr)\ndef printl(li): _=print(*li, sep=\"\\n\") if li else None\ndef argsort(s, return_sorted=False): \n    inds=sorted(range(len(s)), key=lambda k: s[k])\n    if return_sorted: return inds, [s[i] for i in inds]\n    return inds\ndef alp2num(c,cap=False): return ord(c)-97 if not cap else ord(c)-65\ndef num2alp(i,cap=False): return chr(i+97) if not cap else chr(i+65)\ndef matmat(A,B):\n    K,N,M=len(B),len(A),len(B[0])\n    return [[sum([(A[i][k]*B[k][j]) for k in range(K)]) for j in range(M)] for i in range(N)]\ndef matvec(M,v):\n    N,size=len(v),len(M)\n    return [sum([M[i][j]*v[j] for j in range(N)]) for i in range(size)]\ndef T(M):\n    n,m=len(M),len(M[0])\n    return [[M[j][i] for j in range(n)] for i in range(m)]\ndef binr(x): return bin(x)[2:]\ndef bitcount(x): #x\u306f64bit\u6574\u6570\n    x= x - ((x >> 1) & 0x5555555555555555)\n    x= (x & 0x3333333333333333) + ((x >> 2) & 0x3333333333333333)\n    x= (x + (x >> 4)) & 0x0f0f0f0f0f0f0f0f \n    x+= (x >> 8); x+= (x >> 16); x+= (x >> 32) \n    return x & 0x7f\n\ndef main():\n    mod = 1000000007\n    #w.sort(key=itemgetter(1),reverse=True)  #\u4e8c\u500b\u76ee\u306e\u8981\u7d20\u3067\u964d\u9806\u4e26\u3073\u66ff\u3048\n\n    #N = int(input())\n    a,b,c = map(int, input().split())\n\n\n    print(max(0,c-(a-b)))\n\n\n\nif __name__ == \"__main__\":\n    main()", "label": 1, "name1": "s855957951.py", "name2": "s948835843.py"}, {"id": 311, "code1": "a, b, c = map(int, input().split())\nans = c - (a - b)\n\nif ans >= 0:\n    print(ans)\nelse:\n    print(0)", "code2": "A,B,C=map(int,input().split())\nprint(C-(A-B) if A-B<=C else 0)", "label": 1, "name1": "s855957951.py", "name2": "s211234758.py"}, {"id": 177, "code1": "# coding: utf-8\ndef check(a,b):\n    if (a,b) in memo:\n        return memo[(a,b)]\n    if 0<=a<h and 0<=b<w and field[a][b].isdigit():\n        x=check(a+1,b)\n        y=check(a,b+1)\n        memo[(a,b)]=field[a][b]+(x if len(x)>len(y) else x if len(x)==len(y) and len(x)!=0 and int(x)>int(y) else y)\n        return field[a][b]+(x if len(x)>len(y) else x if len(x)==len(y) and len(x)!=0 and int(x)>int(y) else y)\n    else:\n        return ''\nwhile 1:\n    w,h=map(int,input().split())\n    if w==0:\n        break\n    field=[]\n    for i in range(h):\n        field.append(list(input()))\n    ans='0'\n    memo={}\n    for i in range(h):\n        for j in range(w):\n            if field[i][j]!='0' and field[i][j].isdigit():\n                tmp=check(i,j)\n                if int(ans)<int(tmp):\n                    ans=tmp\n    print(ans)\n", "code2": "while 1:\n    W,H = map(int,raw_input().split())\n    if W == 0: break\n    C = [list(raw_input()) for _ in xrange(H)]\n    dp = [[0]*W for _ in xrange(H)]\n    ans = 0\n    for h in xrange(H):\n        for w in xrange(W):\n            if C[h][w].isdigit():\n                dp[h][w] = max(dp[h][w],int(C[h][w]))\n                if w > 0: dp[h][w] = max(dp[h][w],int(str(dp[h][w-1])+C[h][w]))\n                if h > 0: dp[h][w] = max(dp[h][w],int(str(dp[h-1][w])+C[h][w]))\n    print max(max(i) for i in dp)", "label": 1, "name1": "s573602328.py", "name2": "s193534037.py"}, {"id": 816, "code1": "n=int(input())\na=list(map(int,input().split()))\nb=list(map(int,input().split()))\n\nsum1=0\nsum2=0\n\nfor i,j in zip(a,b):\n  if i>j:\n    sum1+=(i-j)\n  elif i<j:\n    sum2+=(j-i)//2\n\nprint('Yes' if sum1<=sum2 else 'No')", "code2": "l = len(set(list(map(int, input().split()))))\nif l == 2:\n  print(\"Yes\")\nelse:\n  print(\"No\")", "label": 0, "name1": "s390816173.py", "name2": "s571170465.py"}, {"id": 689, "code1": "tree = [ [] for _ in range(4) ]\n\nfor i in range(3):\n    a, b = map(int, input().split())\n    a -= 1; b -= 1;\n    tree[a].append(b)\n    tree[b].append(a)\n\nfor i in range(4):\n    visited = [ False for _ in range(4) ]\n    cur = i\n    visited[cur] = True\n    for j in range(3):\n        for v in tree[cur]:\n            if not visited[v]:\n                next_v = v\n                break\n        visited[next_v] = True\n        cur = next_v\n\nprint ( \"YES\" if all(visited) else \"NO\" )\n", "code2": "import numpy as np\nn,m = map(int, input().split())\nX = sorted(np.array(input().split(), dtype = np.int64))\nX = sorted(np.diff(X))\nif m-n >= 0:\n    ans = sum(X[:m-n])\nelse:\n    ans = 0\nprint(ans)", "label": 0, "name1": "s679343249.py", "name2": "s052852893.py"}, {"id": 584, "code1": "import sys\nsys.setrecursionlimit(2147483647)\nINF=float(\"inf\")\nMOD=10**9+7\ninput=lambda :sys.stdin.readline().rstrip()\ndef resolve():\n    n,k=map(int,input().split())\n    A=list(map(int,input().split()))\n    dp=[0]*(k+1)\n    for i in range(k):\n        if dp[i]: continue\n        for j in range(n):\n            if i+A[j]<=k: dp[i+A[j]]=1\n    print(\"First\" if dp[k] else \"Second\")\nresolve()", "code2": "num = list(map(int, input().split()))\nnum.sort()\n\nx = num[2] * 3 - sum(num)\n\nif x%2 == 0:\n  ans = int(x/2)\nelse:\n  ans = int(x//2 + 2)\n\nprint(ans)\n", "label": 0, "name1": "s270542298.py", "name2": "s512155836.py"}, {"id": 903, "code1": "N = int(input())\nanswer = N\nwhile 1:\n    if all([answer%n for n in range(2,answer)]):\n        print(answer)\n        exit()\n    else:\n        answer += 1\n", "code2": "H,W = map(int,input().split())\nA = [input() for i in range(H)]\nfrom collections import Counter\nctr = Counter()\nfor row in A:\n    ctr.update(row)\n\nif H%2==0 and W%2==0:\n    print('Yes' if all(v%4==0 for v in ctr.values()) else 'No')\n    exit()\n\nif H%2==0 or W%2==0:\n    if H%2: H,W = W,H\n    if any(v%2 for v in ctr.values()):\n        print('No')\n        exit()\n    pair = 0\n    for v in ctr.values():\n        if v%4==2:\n            pair += 1\n    print('Yes' if pair*2 <= H else 'No')\n\nelse:\n    odd = 0\n    for k in ctr.keys():\n        if ctr[k]%2:\n            odd += 1\n            ctr[k] -= 1\n    if odd != 1:\n        print('No')\n        exit()\n    pair = 0\n    for v in ctr.values():\n        if v%4==2:\n            pair += 1\n    print('Yes' if pair*2 <= H+W-2 else 'No')", "label": 0, "name1": "s134494492.py", "name2": "s065097494.py"}, {"id": 896, "code1": "for i in range(1000):\n    print (\"Hello World\")", "code2": "N = int(input())\n\nM = N -1\nflg = 0\nwhile flg == 0:\n  M += 1\n  flg = 1\n  for n in range(2,M-1):\n    if M%n == 0:\n      flg = 0\n      break\n\nprint(M)", "label": 0, "name1": "s918569906.py", "name2": "s785657279.py"}, {"id": 265, "code1": "a,b,c,k=map(int,input().split())\n\nif k <= a:\n    print(k)\nelif k <= a+b:\n    print(a)\nelse:\n    print(a-(k-(a+b)))", "code2": "A, B, C, K = list(map(int, input().split()))\nif A <= K:\n  ans = A\nelse:\n  ans = K\nK -= A \nK -= B\nif K > 0:\n  ans -= K\nprint(ans)", "label": 1, "name1": "s019552488.py", "name2": "s691371673.py"}, {"id": 137, "code1": "int_list = list(map(int, input().split(' ')))\n\nmax_int = max(int_list)\n\ncnt = 0\nfor i in range(3):\n    if i < max_int:\n        cnt_tmp = (max_int - int_list[i]) // 2\n        int_list[i] += 2 * cnt_tmp\n        cnt += cnt_tmp\n\nmin_int = min(int_list)\nint_list2 = sorted([i - min_int for i in int_list])\n\nif int_list2 == [0, 0, 0]:\n    print(cnt)\nelif int_list2 == [0, 0, 1]:\n    print(cnt + 1)\nelse:\n    print(cnt + 2)", "code2": "import numpy as np\n\ndef input_numbers():\n    temp = list(map(int, input().split()))\n    return temp\n\ndef GCD(a, b):\n    if(a < b):\n        temp = a\n        a = b\n        b = temp\n    a = a % b\n    if(a == 0):\n        return b\n    else:\n        return GCD(a, b)\n\nnumbers = input_numbers()\n\nnumbers.sort()\n\ncount = 0\n\ncount += numbers[2] - numbers[1]\nnumbers[0] += numbers[2] - numbers[1]\nnumbers[1] = numbers[2]\n\ndiff = numbers[2] - numbers[0]\n\nif(diff % 2 == 0):\n    count += (diff // 2)\n\nelse:\n    numbers[1] += 1\n    numbers[2] += 1\n    count += 1\n\n    diff = numbers[2] - numbers[0]\n    count += (diff // 2)\n\nprint(count)", "label": 1, "name1": "s608249305.py", "name2": "s782702570.py"}, {"id": 611, "code1": "X = input()\n\ns_cnt = 0\nt_cnt = 0\n\nans = 0\n\nfor n in range(len(X)):\n  if X[n] == \"S\":\n    s_cnt += 1\n  else:\n    t_cnt += 1\n  ans = max(ans,t_cnt-s_cnt)\nprint(ans*2)", "code2": "# coding: utf-8\ndef check(a,b):\n    if (a,b) in memo:\n        return memo[(a,b)]\n    if 0<=a<h and 0<=b<w and field[a][b].isdigit():\n        x=check(a+1,b)\n        y=check(a,b+1)\n        memo[(a,b)]=field[a][b]+(x if len(x)>len(y) else x if len(x)==len(y) and len(x)!=0 and int(x)>int(y) else y)\n        return field[a][b]+(x if len(x)>len(y) else x if len(x)==len(y) and len(x)!=0 and int(x)>int(y) else y)\n    else:\n        return ''\nwhile 1:\n    w,h=map(int,input().split())\n    if w==0:\n        break\n    field=[]\n    for i in range(h):\n        field.append(list(input()))\n    ans='0'\n    memo={}\n    for i in range(h):\n        for j in range(w):\n            if field[i][j]!='0' and field[i][j].isdigit():\n                tmp=check(i,j)\n                if int(ans)<int(tmp):\n                    ans=tmp\n    print(ans)\n", "label": 0, "name1": "s239717601.py", "name2": "s573602328.py"}, {"id": 956, "code1": "print(input().count(\"2\"))", "code2": "# ABC099D - Good Grid\nimport sys\ninput = sys.stdin.readline\n\nfrom collections import defaultdict\nfrom itertools import product\n\n\ndef main():\n    N, C = map(int, input().split())\n    D = [0] + list([0] + list(map(int, input().split())) for _ in range(C))\n    grid = tuple(tuple(map(int, input().split())) for _ in range(N))\n    cost = {i: defaultdict(int) for i in range(3)}\n    for i, g in enumerate(grid):\n        for j, x in enumerate(g):\n            cost[(i + j) % 3][x] += 1\n    dist = [[] for _ in range(3)]\n    for i, tgt in product(range(3), range(1, C + 1)):\n        cur = sum(D[src][tgt] * cnt for src, cnt in cost[i].items())\n        dist[i].append(cur)\n    ans = 1 << 60\n    for i, j in product(range(C), repeat=2):\n        if i == j:\n            continue\n        cur = dist[0][i] + dist[1][j]\n        cur += min(x for k, x in enumerate(dist[2]) if k not in (i, j))\n        ans = min(ans, cur)\n    print(ans)\n\n\nif __name__ == \"__main__\":\n    main()", "label": 0, "name1": "s249513812.py", "name2": "s120577952.py"}, {"id": 625, "code1": "a, b = map(int, input().split())\nif a > b:\n    print(a-1)\nelse:\n    print(a)", "code2": "n = int(input())\nt = list(map(int, input().split()))\na = list(map(int, input().split()))\nmod = 10 ** 9 + 7\n\nans, frag = 1, 0\nfor i in range(n):\n    if t[i] == a[i] == t[-1] == a[0]:\n        frag = 1\n    if 0 < i < n - 1 and t[i - 1] == t[i] and a[i] == a[i + 1]:\n        ans = ans * min(t[i], a[i]) % mod\nprint(ans * frag)\n", "label": 0, "name1": "s737717931.py", "name2": "s894086979.py"}, {"id": 774, "code1": "n = int(input())\ndat = list(map(int,input().split()))\n\ndat = [0] + dat + [0]\ntotal = 0\ncur = 0\nfor i in range(n + 2):\n    total += abs(cur - dat[i])\n    cur = dat[i]\ntotal += abs(cur)\ncur = 0\nfor i in range(n):\n    j = i + 1\n    if dat[j-1] < dat[j] < dat[j+1]:\n        # \u9593\u306b\u631f\u307e\u308c\u3066\u3044\u308b\u30d1\u30bf\u30fc\u30f3\uff11\n        #print(\"pat1\")\n        print(total)\n    elif dat[j-1] > dat[j] > dat[j+1]:\n        # \u9593\u306b\u631f\u307e\u308c\u3066\u3044\u308b\u30d1\u30bf\u30fc\u30f32\n        #print(\"pat2\")\n        print(total)\n    else:\n        # \u3053\u306e\u5834\u5408\u306f\u9593\u306b\u631f\u307e\u308c\u3066\u3044\u306a\u3044\n        #print(\"{0} {1} {2}\".format(total, abs(dat[j-1] -dat[j]) , abs(dat[j-1] -dat[j+1])))\n        print(total - abs(dat[j-1] -dat[j]) - abs(dat[j] -dat[j+1]) + abs(dat[j-1] - dat[j+1]))\n", "code2": "import math,string,itertools,fractions,heapq,collections,re,array,bisect,sys,random,time,copy,functools\n\nsys.setrecursionlimit(10**7)\ninf = 10**20\neps = 1.0 / 10**10\nmod = 998244353\ndd = [(0,-1),(1,0),(0,1),(-1,0)]\nddn = [(0,-1),(1,-1),(1,0),(1,1),(0,1),(-1,-1),(-1,0),(-1,1)]\n\ndef LI(): return [int(x) for x in sys.stdin.readline().split()]\ndef LI_(): return [int(x)-1 for x in sys.stdin.readline().split()]\ndef LF(): return [float(x) for x in sys.stdin.readline().split()]\ndef LS(): return sys.stdin.readline().split()\ndef I(): return int(sys.stdin.readline())\ndef F(): return float(sys.stdin.readline())\ndef S(): return input()\ndef pf(s): return print(s, flush=True)\n\n\ndef main():\n    rr = []\n\n    while True:\n        n = I()\n        if n == 0:\n            break\n\n        a = [S().split(':') for _ in range(n)]\n        ts = set([c[0] for c in a])\n        ms = {}\n        for t,m in a:\n            ms[t] = m[:-1].split(',')\n\n        fm = {}\n        def f(c):\n            if c in fm:\n                return fm[c]\n            if c in ts:\n                s = set()\n                for k in ms[c]:\n                    s |= f(k)\n                fm[c] = s\n                return s\n            fm[c] = set([c])\n            return fm[c]\n\n        r = f(a[0][0])\n\n        rr.append(len(r))\n\n    return '\\n'.join(map(str,rr))\n\n\nprint(main())\n\n\n", "label": 0, "name1": "s576885295.py", "name2": "s451877142.py"}, {"id": 204, "code1": "N = int(raw_input())\nT_list = map(int, raw_input().split())\nA_list = map(int, raw_input().split())\n\nlow_list = [1]*N\nhigh_list = [1]*N\n\nt_now = 0\nfor i in range(N):\n    if T_list[i] > t_now:\n        t_now = T_list[i]\n        low_list[i] = T_list[i]\n        high_list[i] = T_list[i]\n    else:\n        high_list[i] = T_list[i]\na_now = 0\nfor j in range(N):\n    i = N - 1 - j\n    if A_list[i] > a_now:\n        a_now = A_list[i]\n        low_list[i] = max(A_list[i], low_list[i])\n        high_list[i] = min(A_list[i], high_list[i])\n    else:\n        high_list[i] = min(A_list[i], high_list[i])\n    \nres = 1\nfor i in range(N):\n    if high_list[i] < low_list[i]:\n        res = 0\n        break\n    else:\n        res = res*(high_list[i] - low_list[i] + 1) % 1000000007\n\nprint res", "code2": "# \u5165\u529b\nimport sys\nstdin = sys.stdin\n\ndef li(): return [int(x) for x in stdin.readline().split()]\ndef li_(): return [int(x)-1 for x in stdin.readline().split()]\ndef lf(): return [float(x) for x in stdin.readline().split()]\ndef ls(): return stdin.readline().split()\ndef ns(): return stdin.readline().rstrip()\ndef lc(): return list(ns())\ndef ni(): return int(ns())\ndef nf(): return float(ns())\n\nn = ni()\nt = li()\na = li()\n\nMOD = 10**9 + 7\n\n# T,A \u306e\u66f4\u65b0\u3068\u77db\u76fe\u3092\u78ba\u8a8d\nt_modified = [0]*n\na_modified = [0]*n\nt_modified[0] = 1\na_modified[-1] = 1\nconsistent = True\n\nif max(a) != max(t):\n    consistent = False\n\nfor i in range(n-1):\n    if t[i+1] != t[i]:\n        t_modified[i+1] = 1\n        \n        if t[i+1] > a[i+1]:\n            consistent = False\n            \n    if a[i] != a[i+1]:\n        a_modified[i] = 1\n        \n        if a[i] > t[i]:\n            consistent = False\n\n# \u66f4\u65b0\u304c\u3042\u3063\u305f\u70b9\u306f1\u901a\u308a\u3001\u7121\u304b\u3063\u305f\u70b9\u306fmin(ti,ai)\u901a\u308a\u306e\u9ad8\u3055\u304c\u8003\u3048\u3089\u308c\u308b      \nans = 1\nfor i in range(n):\n    if t_modified[i] == 0 and a_modified[i] == 0:\n        ans = (ans * min(t[i], a[i])) % MOD\n\nif consistent:\n    print(ans)\nelse:\n    print(0)", "label": 1, "name1": "s251140241.py", "name2": "s440436566.py"}, {"id": 753, "code1": "h, w = map(int, input().split())\na = [list(input()) for _ in range(h)]\nu = [[\".\"] * w for _ in range(h)]\nv = [[\".\"] * w for _ in range(h)]\nfor i in range(h):\n    for j in range(w):\n        if a[i][j] == \"#\":\n            u[i][j], v[i][j] = \"#\", \"#\"\n        else:\n            if i == 0:\n                u[i][j] = \"#\"\n            elif i == h - 1:\n                v[i][j] = \"#\"\n            else:\n                if j % 2 == 0:\n                    u[i][j] = \"#\"\n                else:\n                    v[i][j] = \"#\"\nfor s in u:\n    print(\"\".join(s))\nprint()\nfor t in v:\n    print(\"\".join(t))", "code2": "import sys\ninput = sys.stdin.readline\na, b, x = [int(x) for x in input().split()]\nB = 1 + b // x\nif a == 0:\n    print(B)\nelif a % x == 0:\n    A = 1 + a // x\n    print(B - A + 1)\nelse:\n    A = 1 + a // x\n    print(B - A)\n", "label": 0, "name1": "s080897842.py", "name2": "s444272977.py"}, {"id": 236, "code1": "# -*- coding: utf-8 -*-\nimport sys\nfrom sys import stdin\nimport math\n\nn, k = map(int, stdin.readline().split())\nw = list([int(stdin.readline().rstrip()) for i in range(n)])\n\ndef main2():\n  def is_ok():\n    cnt_track = w_tmp = 0\n    for w_i in w:\n      w_tmp += w_i\n      if w_tmp > m:\n        w_tmp = w_i\n        cnt_track += 1\n        if cnt_track >= k:\n          return 0\n    return 1\n\n  r = sum(w)\n  l = max(math.ceil(r/k),max(w))\n  while l < r:\n    m = (l + r) // 2\n    # print(\"%d %d %d \" % (l, r, m))\n    if is_ok():\n      r = m\n    else:\n      l = m + 1\n  print(r)\n\nif __name__ == '__main__':\n  main2()\n\n", "code2": "\n\ndef p(k,w,maxP):\n    count = 1\n    tmpWeight = 0\n    for x in w:\n        if tmpWeight+x <= maxP:\n            tmpWeight += x\n        else:\n            count += 1\n            if count > k :\n                return False\n            tmpWeight = x\n    \n\n    return True\n\n\n\n\nn,k = map(int,input().split())\n\n\nw = []\n\nfor _ in range(n):\n    w.append((int)(input()))\nrangeMax = sum(w)\nrangeMin = max(w)\nrangeMid = 0\nwhile rangeMin < rangeMax:\n    rangeMid = (rangeMax + rangeMin)//2\n    '''print(p(k,w,rangeMid))\n    print(p(k,w,rangeMid+1))\n    print(\"---\")\n    '''\n    if p(k,w,rangeMid) == True:\n        rangeMax = rangeMid\n    else:\n        rangeMid += 1\n        rangeMin = rangeMid\n\nprint(rangeMid)", "label": 1, "name1": "s518389793.py", "name2": "s671940499.py"}, {"id": 446, "code1": "mod=1000000007\nn=input()\na=map(int, raw_input().split())\nfac=[1]\nfor i in range(1, 100001):\n\tfac.append(fac[-1]*i%mod)\ninv=[0, 1]\nfor i in range(2, 100001):\n\tinv.append(-(mod/i)*inv[mod%i]%mod)\ninv_sum=[0]\nfor i in range(1, 100000):\n\tinv_sum.append((inv_sum[-1]+inv[i+1])%mod)\nresult=0\nfor i in range(n):\n\tresult+=(inv_sum[i]+1+inv_sum[n-i-1])*a[i]%mod\n\tresult%=mod\nprint result*fac[n]%mod\n", "code2": "# coding:utf-8\n\nimport sys\n\n\ninput = sys.stdin.readline\nINF = float('inf')\nMOD = 10 ** 9 + 7\n\n\ndef inpl(): return list(map(int, input().split()))\n\n\n# a\u306ep\u4e57\u3092\u6c42\u3081\u308b\u30a2\u30eb\u30b4\u30ea\u30ba\u30e0\n# MOD\u7248\ndef pow_mod(a, p):\n    if p == 0: return 1\n\n    if p % 2 == 0:\n        half_p = p // 2\n        half = pow_mod(a, half_p)\n        return half * half % MOD\n    else:\n        return a * pow_mod(a, p - 1) % MOD\n\n\ndef solve(N, A):\n    # 1/1 + 1/2 + 1/3 + ... + 1/N\u306e\u7d2f\u7a4d\u548c\u3092\u6c42\u3081\u3066\u304a\u304f\n    inv_sum = [0]\n    for i in range(N):\n        inv_sum.append((inv_sum[-1] + pow_mod(i + 1, MOD - 2)) % MOD)\n    del inv_sum[0]\n\n    # \u5404i\u306b\u3064\u3044\u3066\u3001\u03a3(j=1, N) 1/(|j - i| + 1)\u3092\u6c42\u3081\u3066\u3001\n    # \u305d\u308c\u3089\u3092\u4fc2\u6570\u3068\u3057\u3066A[i]\u306b\u639b\u3051\u3001\u52a0\u7b97\u3059\u308b\n    ans = 0\n    for i in range(N):\n        ans += + A[i] * (inv_sum[N - 1 - i] + inv_sum[i] - 1)\n        ans %= MOD\n\n    # \u968e\u4e57N!\u3092\u6c42\u3081\u308b\n    fact = 1\n    for i in range(N):\n        fact *= (i + 1)\n        fact %= MOD\n\n    return ans * fact % MOD\n\n\nN = int(input())\nA = inpl()\nprint(solve(N, A))\n", "label": 1, "name1": "s393644468.py", "name2": "s076241625.py"}, {"id": 102, "code1": "import math\na, b, C = map(float, input().split())\nC = C / 180 * math.pi\nprint('%.06f' % (a * b * math.sin(C) / 2))\nprint('%.06f' % ((a**2 + b**2 -2*a*b*math.cos(C))**(1/2) + a + b))\nprint('%.06f' % (b*math.sin(C)))", "code2": "import math\na, b, c = map(int, input().split())\nh = b * math.sin(math.radians(c))\nprint(a * h / 2)\nprint(a + b + math.sqrt((a-b*math.cos(math.radians(c)))**2 + h**2))\nprint(h)\n\n", "label": 1, "name1": "s950542255.py", "name2": "s253160566.py"}, {"id": 980, "code1": "n,a,b= map(int,input().split())\nsh = sorted([int(input()) for i in range(n)],reverse=True)\nsumh = sum(sh)\ndef nibu(t):\n    rt=0\n    for i in range(n):\n        temp = -1*(-1*max(0,sh[i]-t*b)//(a-b))\n        if temp>0:rt+=temp\n        else:break\n        if rt>t:return False\n    return True if t>=rt else False\nl=max(sh)//a\nr=max(sh)//b+1\nwhile r-l!=1:\n    m = (l+r)//2\n    if nibu(m):r=m\n    else:l=m\nprint(r)\n", "code2": "import sys\nstdin = sys.stdin\n \nsys.setrecursionlimit(10**5) \n \ndef li(): return map(int, stdin.readline().split())\ndef li_(): return map(lambda x: int(x)-1, stdin.readline().split())\ndef lf(): return map(float, stdin.readline().split())\ndef ls(): return stdin.readline().split()\ndef ns(): return stdin.readline().rstrip()\ndef lc(): return list(ns())\ndef ni(): return int(stdin.readline())\ndef nf(): return float(stdin.readline())\n\nfrom heapq import heappush, heappop\n\nn = ni()\nd = list(li())\n\ndef isok(dur: int, d: list):\n    pque = [24]\n    for di in d:\n        heappush(pque, di)\n\n    cur = 0\n    while pque:\n        tmp = heappop(pque)\n        if tmp - cur < dur and tmp >= 12:\n            return False\n        \n        elif tmp - cur < dur:\n            heappush(pque, 24-tmp)\n            \n        else:\n            cur = tmp\n        \n    return True\n\nans = 13\nfor cand in range(12, -1, -1):\n    if isok(cand, d):\n        ans = cand\n        break\n        \nprint(ans) ", "label": 0, "name1": "s242197255.py", "name2": "s479594239.py"}, {"id": 405, "code1": "n = int(input())\ndat = list(map(int,input().split()))\n\ndat = [0] + dat + [0]\ntotal = 0\ncur = 0\nfor i in range(n + 2):\n    total += abs(cur - dat[i])\n    cur = dat[i]\ntotal += abs(cur)\ncur = 0\nfor i in range(n):\n    j = i + 1\n    if dat[j-1] < dat[j] < dat[j+1]:\n        # \u9593\u306b\u631f\u307e\u308c\u3066\u3044\u308b\u30d1\u30bf\u30fc\u30f3\uff11\n        #print(\"pat1\")\n        print(total)\n    elif dat[j-1] > dat[j] > dat[j+1]:\n        # \u9593\u306b\u631f\u307e\u308c\u3066\u3044\u308b\u30d1\u30bf\u30fc\u30f32\n        #print(\"pat2\")\n        print(total)\n    else:\n        # \u3053\u306e\u5834\u5408\u306f\u9593\u306b\u631f\u307e\u308c\u3066\u3044\u306a\u3044\n        #print(\"{0} {1} {2}\".format(total, abs(dat[j-1] -dat[j]) , abs(dat[j-1] -dat[j+1])))\n        print(total - abs(dat[j-1] -dat[j]) - abs(dat[j] -dat[j+1]) + abs(dat[j-1] - dat[j+1]))\n", "code2": "iN = int(input())\naA = [0] + [int(_) for _ in input().split()] + [0]\niAll = sum(map(lambda i :abs(aA[i+1]-aA[i]),range(iN+1)))\nprint(\"\\n\".join(map(lambda i:str( iAll - abs(aA[i-1]-aA[i]) - abs(aA[i]-aA[i+1]) + abs(aA[i-1]-aA[i+1])), range(1,iN+1))))\n", "label": 1, "name1": "s576885295.py", "name2": "s167602198.py"}, {"id": 232, "code1": "# AOJ 0144 Packet Transportation\n# Python3 2018.6.23 bal4u\n\nINF = 0x7fffffff\nn = int(input())\narr = [[INF for j in range(n)] for i in range(n)]\nfor i in range(n):\n\ta = list(map(int, input().split()))\n\tx, k = a[0]-1, a[1]\n\tfor j in range(k):\n\t\ty = a[j+2]-1\n\t\tarr[x][y] = 1\nfor k in range(n):\n\tarr[k][k] = 0\n\tfor i in range(n):\n\t\tif arr[i][k] >= INF: continue\n\t\tfor j in range(n):\n\t\t\tif arr[k][j] >= INF: continue\n\t\t\tarr[i][j] = min(arr[i][j], arr[i][k] + arr[k][j])\np = int(input())\nfor i in range(p):\n\ts, d, v = map(int, input().split())\n\ts,d = s-1, d-1\n\tprint(arr[s][d]+1 if arr[s][d] < v else \"NA\")\n", "code2": "def solve(A):\n  s,d,v = A\n  C = [-1 for _ in [0]*(n+1)]\n  c = 1\n  C[s] = c\n  SP = M[s]\n  while 1:\n    if SP==[]: return \"NA\"\n    c += 1\n    X = []\n    for p in SP:\n      if C[p]>0: continue\n      C[p] = c\n      for e in M[p]:\n        if C[e]<0 and e not in SP: X.append(e)\n      if p==d:\n        if C[p]>v: return \"NA\"\n        else: return C[p]\n    SP = X\n\nn = int(raw_input())\nM = {}\n\nfor _ in [0]*n:\n  x = map(int, raw_input().split())\n  M[x[0]]=x[2:]\nfor _ in [0]*int(raw_input()):\n  print solve(map(int,raw_input().split()))", "label": 1, "name1": "s881383078.py", "name2": "s192964997.py"}, {"id": 569, "code1": "import math\na, b, c = map(int, input().split())\nh = b * math.sin(math.radians(c))\nprint(a * h / 2)\nprint(a + b + math.sqrt((a-b*math.cos(math.radians(c)))**2 + h**2))\nprint(h)\n\n", "code2": "a,b,c=map(int,input().split())\nif (a>c and b<c) or (a<c and b>c):\n  print(\"Yes\")\nelse:\n  print(\"No\")", "label": 0, "name1": "s253160566.py", "name2": "s473634907.py"}, {"id": 23, "code1": "H,W = map(int,input().split())\n#print(H)\nans = 1\n \n \nif H*W%2 == 0:\n    ans = int(H*W/2)\nelse:\n    ans = int(H*W//2 + 1)\n#output\nif H == 1:\n    ans = 1\nif W == 1:\n    ans = 1\nprint(ans)", "code2": "h,w = map(int, input().split())\nif h ==1 or w == 1:\n    print('1')\nelse:\n    if h % 2 != 0:\n        if w % 2 != 0:\n            ans = (h * w) // 2 + 1\n        else:\n            ans = w / 2 * h\n    else:\n        ans = h / 2 * w\n    print(int(ans))", "label": 1, "name1": "s137900528.py", "name2": "s801200714.py"}, {"id": 371, "code1": "i,o,t,j,l,s,z = map(int,input().split())\na = 2*(i//2+j//2+l//2)\nif i>0 and j>0 and l>0:\n    i,j,l = i-1,j-1,l-1\n    b = 2*(i//2+j//2+l//2)\n    print(o+max(a,b+3))\nelse:\n    print(o+a)\n", "code2": "I,O,T,J,L,S,Z=map(int,input().split())\nA=((I-1)//2)*2+O+((J-1)//2)*2+((L-1)//2)*2+3\nB=(I//2)*2+O+(J//2)*2+(L//2)*2\nif I==0 or J==0 or L==0:\n  print(B)\nelse:\n  print(max(A,B))\n", "label": 1, "name1": "s273049490.py", "name2": "s908614160.py"}, {"id": 964, "code1": "n,c=map(int,input().split())\nd=[list(map(int,input().split()))for _ in range(c)]\ncc=[list(map(int,input().split()))for _ in range(n)]\nans=10**15\ncnt=[[0]*c for _ in range(3)]\nfor i in range(n):\n\tfor j in range(n):\n\t\tcnt[(i+j)%3][cc[i][j]-1]+=1\nfor i in range(c):\n\tfor j in range(c):\n\t\tfor k in range(c):\n\t\t\tpre_ans=0\n\t\t\tif i==j or j==k or k==i:\n\t\t\t\tcontinue\n\t\t\tfor l in range(3):\n\t\t\t\tfor m in range(c):\n\t\t\t\t\tif l%3==0 and m!=i:\n\t\t\t\t\t\tpre_ans+=cnt[l][m]*d[m][i]\n\t\t\t\t\telif l%3==1 and m!=j:\n\t\t\t\t\t\tpre_ans+=cnt[l][m]*d[m][j]\n\t\t\t\t\telif l%3==2 and m!=k:\n\t\t\t\t\t\tpre_ans+=cnt[l][m]*d[m][k]\n\t\t\tans=min(ans,pre_ans)\nprint(ans)", "code2": "from bisect import bisect_left\nfrom bisect import bisect_right\nN = int(input())\nA = sorted(list(map(int,input().split())))\nB = sorted(list(map(int,input().split())))\nC = sorted(list(map(int,input().split())))\n\nans = 0\nfor i in range(N):\n  ans += bisect_left(A, B[i]) * (N - bisect_right(C, B[i]))\n  \nprint(ans)", "label": 0, "name1": "s044679078.py", "name2": "s313857544.py"}, {"id": 340, "code1": "import sys\nif sys.platform =='ios':\n\tsys.stdin=open('Untitled.txt')\ninput = sys.stdin.readline\n\n# \u53c2\u7167URL:https://qiita.com/gogotealove/items/11f9e83218926211083a\n\n# n = [int(x) for x in input().rstrip()]\n# op_cnt = len(n) - 1  # \u3059\u304d\u9593\u306e\u500b\u6570\n# ans2 = []\n# for i in range(2 ** op_cnt):\n#     op = [\"\"] * op_cnt  # \u3042\u3089\u304b\u3058\u3081 [\"-\", \"-\", \"-\"] \u3068\u3044\u3046\u30ea\u30b9\u30c8\u3092\u4f5c\u3063\u3066\u304a\u304f\n#     for j in range(op_cnt):\n#         if ((i >> j) & 1):\n#             op[op_cnt - 1 - j] = \"+\"  # \u30d5\u30e9\u30b0\u304c\u7acb\u3063\u3066\u3044\u305f\u7b87\u6240\u3092 \"+\" \u3067\u4e0a\u66f8\u304d\n#     ans2.append(op)\n# for a in ans2:\n# \tprint(a)\n\nS = input().rstrip() # \u5165\u529b\u5024 \"1234\\n\" \u3092 \"1234\"\u306b\nn = len(S)-1 # \u30aa\u30da\u30ec\u30fc\u30bf\u304c\u5165\u308a\u3046\u308b\u9699\u9593\u306flen(S)-1\n\nops = []\nfor i in range(2**n): # \u5404\u9699\u9593\u306b\u5bfe\u3057\u3066\u3001 +\u3059\u308b\u3057\u306a\u3044\u306e2\u901a\u308a\u304c\u3042\u308b\u306e\u3067\u30012^n \u56de\u30eb\u30fc\u30d7\n\top = [\"\"] * n # \u3042\u3089\u304b\u3058\u3081\u30ea\u30b9\u30c8\u3092\u4f5c\u6210\n\tfor j in range(n):\n\t\tif((i>>j) & 1) == 1:  # \u9806\u306b\u53f3\u306b\u30b7\u30d5\u30c8\u3055\u305b\u6700\u4e0b\u4f4dbit\u306e\u30c1\u30a7\u30c3\u30af\u3092\u884c\u3046\n\t\t\top[n-1-j] = \"+\" # \u30d5\u30e9\u30b0\u304c\u7acb\u3063\u3066\u3044\u305f\u3089op\u306e\u5024\u3092\u66f8\u304d\u63db\u3048\u308b\n\tops.append(op)\n\n# \u3053\u3053\u307e\u3067\u3067 ops \u306e\u4e2d\u306b\u3042\u308a\u3046\u308b\u7d44\u307f\u5408\u308f\u305b\u304c\u5217\u6319\u3055\u308c\u308b\uff08\u4ee5\u4e0b\u306flen(S)-1==3\u306e\u4f8b\uff09\n# ['', '', '']\n# ['', '', '+']\n# ['', '+', '']\n# ['', '+', '+']\n# ['+', '', '']\n# ['+', '', '+']\n# ['+', '+', '']\n# ['+', '+', '+']\n\nans = 0\nfor o in ops:\n\ts = [s for s in S]\n\tfor k in range(len(o)):\n\t\ts.insert(2*k+1, o[k])\n\tans += eval(''.join(s)) # eval \u3092\u5229\u7528\u3059\u308b\u3053\u3068\u3067\u6587\u5b57\u5217\u3092\u5f0f\u3068\u3057\u3066\u8a55\u4fa1\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u308b\n\nprint(ans)", "code2": "S = list(input())\nN = len(S)\n\nfrom itertools import product\nLS = list(product([0,1], repeat=N-1))\nout = 0\nfor L in LS:\n    T = S[0]\n    for i in range(N-1):\n        if L[i]==1:\n            T += \"+\"+S[i+1]\n        else:\n            T += S[i+1]\n    A = list(map(int,T.split(\"+\")))\n    out += sum(A)\nprint(out)", "label": 1, "name1": "s854607235.py", "name2": "s603233292.py"}, {"id": 351, "code1": "x, y = map(int, input().split())\ncnt = 1\nwhile True:\n    if x > y:\n        print(cnt - 1)\n        exit()\n    else:\n        x *= 2\n        cnt += 1\n", "code2": "from sys import stdin, setrecursionlimit\n\n\ndef main():\n    input = stdin.buffer.readline\n    x, y = map(int, input().split())\n    count = 0\n    tmp = x\n    while tmp <= y:\n        tmp *= 2\n        count += 1\n    print(count)\n\n\nif __name__ == \"__main__\":\n    setrecursionlimit(10000)\n    main()\n", "label": 1, "name1": "s788055694.py", "name2": "s379690682.py"}, {"id": 574, "code1": "a,b,c = map(int, input().split())\n\nprint(\"Yes\" if a<c<b or b<c<a else \"No\")", "code2": "\n\ndef main():\n    n, K = map(int, input().split())\n    a = list(map(int, input().split()))\n\n    # dp[i] is true if First player wins with i tiles left\n    dp = [False]*(K+1)\n    for k in range(1, K+1):\n        for i in a:\n            if k >= i and not dp[k-i]:\n                dp[k] = True\n    print(['Second', 'First'][dp[K]])\n\n\nif __name__ == \"__main__\":\n    main()\n", "label": 0, "name1": "s135661044.py", "name2": "s700864010.py"}, {"id": 610, "code1": "X = input()\ns_cnt = 0\nans = 0\nfor s in X:\n    if s=='S':\n        s_cnt += 1\n    else:\n        if s_cnt > 0:\n            ans += 1\n            s_cnt -= 1\n\nprint(len(X) - 2*ans)", "code2": "while 1:\n\tW, H = map(int,raw_input().split(\" \"))\n\tif W == H == 0: \n\t\tbreak\n\tfield = [[c for c in raw_input()] for _ in range(H)]\n\tsecret = [0, \"\"]\n\tfor j in range(H):\n\t\tfor i in range(W):\n\t\t\tif not field[j][i].isdigit():\n\t\t\t\tcontinue\n\t\t\tleft = top = \"\"\n\t\t\tif i > 0 and field[j][i-1].isdigit() and field[j][i-1] != \"0\":\n\t\t\t\tleft = field[j][i-1]\n\t\t\tif j > 0 and field[j-1][i].isdigit() and field[j-1][i] != \"0\":\n\t\t\t\ttop = field[j-1][i]\n\t\t\tif len(left) == len(top):\n\t\t\t\tfield[j][i] = (left if left > top else top) + field[j][i]\n\t\t\telse :\n\t\t\t\tfield[j][i] = (left if len(left) > len(top) else top) + field[j][i]\n\t\t\tlength = len(field[j][i])\n\t\t\tif length > secret[0]:\n\t\t\t\tsecret[1] = field[j][i]\n\t\t\t\tsecret[0] = length\n\t\t\telif length == secret[0] and field[j][i] > secret[1]:\n\t\t\t\tsecret[1] = field[j][i]\n\tprint secret[1]", "label": 0, "name1": "s514074837.py", "name2": "s782922064.py"}, {"id": 88, "code1": "import sys\nimport collections as col\nnum = []\nfor line in sys.stdin:\n\ttako = line[:-1].split(\",\")\n\tnum.append(tako[1])\ntako = col.Counter(num)\na = tako[\"O\"]\ntako[\"O\"] = tako[\"AB\"]\ntako[\"AB\"] = a\nfor i in tako.items():\n\tprint i[1]", "code2": "try:\n    a = ['A', 'B', 'AB', 'O']\n    b = {s: 0 for s in a}\n    while True:\n        b[raw_input().split(',')[1]] += 1\nexcept EOFError:\n    pass\nfor s in a:\n    print b[s]", "label": 1, "name1": "s223119670.py", "name2": "s465440062.py"}, {"id": 29, "code1": "\ndef resolve():\n    N, A, B = map(int, input().split())\n    X = list(map(int, input().split()))\n\n    ans = 0\n    for i in range(N - 1):\n        res = min((X[i + 1] - X[i]) * A, B)\n        ans += res\n        \n    print(ans)\n\n\nif __name__ == \"__main__\":\n    resolve()", "code2": "n,a,b=map(int,input().split())\nx=list(map(int,input().split()))\nans=0\npre_x=x[0]\nfor i in range(1,n):\n    xi=x[i]\n    if((xi-pre_x)*a >= b):\n        ans+=b\n    else:\n        ans+=(xi-pre_x)*a\n    pre_x=xi\nprint(ans)", "label": 1, "name1": "s398154186.py", "name2": "s590352263.py"}, {"id": 752, "code1": "I,O,R,J,L,S,Z=map(int,input().split())\na=(I//2+J//2+L//2)*2\nb=0\nif I*J*L!=0:b=(2*((I-1)//2+(J-1)//2+(L-1)//2)+3)\nprint(max(a,b)+O)", "code2": "start, end, div = list(map(int, input().strip().split()))\n\ncount = end // div - start //div\n\nif start % div == 0:\n  count += 1\nprint(count)", "label": 0, "name1": "s966423542.py", "name2": "s009071418.py"}, {"id": 654, "code1": "inf = 2**31\n\nn = int(raw_input())\nG = [[inf]*n for _ in range(n)]\nref = {}\ninputs = [map(int,raw_input().split()) for _ in range(n)]\nfor i in range(n): ref[inputs[i][0]] = i\nfor i in range(n):\n    for j in inputs[i][2:]:\n        G[i][ref[j]] = 1\n        \nfor k in range(n):\n    for i in range(n):\n        for j in range(n):\n            G[i][j] = min(G[i][j],G[i][k]+G[k][j])\n            \np = int(raw_input())\nfor loop in range(p):\n    s,d,v = map(int,raw_input().split())\n    dist = G[ref[s]][ref[d]]\n    print dist+1 if dist+1 <= v else \"NA\"", "code2": "#!/usr/bin/env python3\n#CODE FESTIVAL 2016 A\n\nimport sys\nimport math\nimport bisect\nsys.setrecursionlimit(1000000000)\nfrom heapq import heappush, heappop\nfrom collections import defaultdict\nfrom itertools import accumulate\nfrom collections import Counter\nfrom collections import deque\nfrom operator import itemgetter\nfrom itertools import permutations\nmod = 10**9 + 7\ndef I(): return int(sys.stdin.readline())\ndef LI(): return list(map(int,sys.stdin.readline().split()))\n\nn = I()\na = LI()\nx = []\nfor i in range(n):\n    if i+1 > a[i]:\n        x.append((a[i],i+1))\n    else:\n        x.append((i+1,a[i]))\nprint(n-len(list(set(x))))\n", "label": 0, "name1": "s378122232.py", "name2": "s190944842.py"}, {"id": 672, "code1": "S = list(input())\nT = list(input())\n\nS.reverse()\nT.reverse()\nflag = False\n\nfor i in range(len(S)-len(T)+1):\n    for j in range(len(T)):\n        if S[j+i] == T[j] or S[j+i] == '?':\n            pass\n        else:\n            break\n\n        if j == len(T)-1:\n            flag = True\n            for k in range(len(T)):\n                if S[k+i] == '?':\n                    S[k+i] = T[k]\n            break\n    if flag:\n        break\n\nif flag:\n    for i in range(len(S)):\n        if S[i] == '?':\n            S[i] = 'a'\n    S.reverse()\n    print(''.join(S))\n\nelse:\n    print('UNRESTORABLE')\n\n\n\n", "code2": "l=[]\nwhile True:\n    tmp=map(int,raw_input().split())\n    if sum(tmp)==0:\n        break\n    l.append(tmp)\n\nfor n,x in l:\n    c=0\n    for i in range(1,n):\n        for j in range(i+1,n):\n            k=x-i-j\n            if j<k<=n:\n                c+=1\n    print c", "label": 0, "name1": "s456382222.py", "name2": "s427641012.py"}, {"id": 44, "code1": "while True:\n    n = int(input())\n    if n == 0:\n        break\n    scores = list(map(int, input().split()))\n    m = sum(scores) / n\n    dev = list((i - m) for i in scores)\n    var = sum((i ** 2) for i in dev) / n\n    stdev = var ** 0.5\n    print(stdev)\n\n", "code2": "import math\n\nwhile True:\n    n = input()\n    \n    if n == \"0\":\n        break\n    else:\n        score = list(map(float, input().split()))\n        m = sum(score)/len(score)\n        for i in range(len(score)):\n            score[i] = (score[i]-m)**2\n    answer = math.sqrt(sum(score)/len(score))\n    print(answer)", "label": 1, "name1": "s320188133.py", "name2": "s235708458.py"}, {"id": 369, "code1": "i,o,t,j,l,s,z = map(int,input().split())\na = 2*(i//2+j//2+l//2)\nif i>0 and j>0 and l>0:\n    i,j,l = i-1,j-1,l-1\n    b = 2*(i//2+j//2+l//2)\n    print(o+max(a,b+3))\nelse:\n    print(o+a)\n", "code2": "AI, AO, _, AJ, AL, _, _ = map(int, input().split())\n\nodd = AI % 2 + AJ % 2 + AL % 2\nif odd == 0 or odd == 3:\n    print(AI + AO + AJ + AL)\nelif odd == 1:\n    print(AI + AO + AJ + AL - 1)\nelse:\n    if AI + AJ + AL == 2:\n        print(AO)\n    else:\n        print(AI + AO + AJ + AL - 1)\n", "label": 1, "name1": "s273049490.py", "name2": "s383965736.py"}, {"id": 837, "code1": "N = int(input())\nA = list(map(int,input().split()))\ncnt = 0\nfor i in range(N):\n    minj = i\n    for j in range(i+1,N):\n        if A[j] < A[minj]:\n            minj = j\n    if i != minj:\n        A[i],A[minj] = A[minj],A[i]\n        cnt += 1\nprint(*A)\nprint(cnt)\n\n", "code2": "from bisect import bisect_left, bisect\nn, l, t = map(int, input().split())\nants = [list(map(int, input().split())) for _ in range(n)]\nbnts = []\ndiff = []\n\nfor i in range(n):\n\tx, w = ants[i][0], 3 - 2*ants[i][1]\n\tbnts.append((x + t*w) % l)\n\tif i == 0:\n\t\tzero = bnts[-1]\n\tif ants[i][1] != ants[0][1]:\n\t\tif ants[0][1] == 1:\n\t\t\tdiff.append(x - ants[0][0])\n\t\telse:\n\t\t\tdiff.append(l - (x - ants[0][0]))\n\nbnts.sort()\nnum = 0\nquo, mod = t//l, t%l\nnum += quo * len(diff) * 2\ndiff.sort()\ndiff += [d+l for d in diff]\n#num += bisect_left(diff, mod*2)\nnum += bisect(diff, mod*2)\nnum %= n\nfor i in range(n):\n\tif bnts[i] == zero:\n\t\tif ants[0][1] == 1:\n\t\t\ttrue_zero = (i-num) % n\n\t\telse:\n\t\t\tif i < n-1:\n\t\t\t\tif bnts[i+1] == zero:\n\t\t\t\t\t#pass\n\t\t\t\t\tnum -= 1\n\t\t\ttrue_zero = (i+num) % n\n\nans = bnts[true_zero:] + bnts[:true_zero]\nprint(*ans, sep=\"\\n\")", "label": 0, "name1": "s412559133.py", "name2": "s998286865.py"}, {"id": 290, "code1": "N,M = map(int,(input().split()))\nX = list(map(int,(input().split())))\nX.sort()\nif M > N:\n    dist = [X[i+1]-X[i] for i in range(M - 1)]\n    dist.sort(reverse = True)\n    del dist[0:N-1]\n    print(sum(dist))\nelse:\n print(0)", "code2": "N,M = map(int,input().split())\nX = list(map(int,input().split()))\nX.sort()\nif N>=M: print(0);exit()\nif N==1: print(X[-1]-X[0]);exit()\nL = []\nfor i in range(len(X)-1):\n    L.append(X[i+1]-X[i])\nL.sort()\nL = L[:-(N-1)]\nprint(sum(L))", "label": 1, "name1": "s025338416.py", "name2": "s964881422.py"}, {"id": 502, "code1": "num = input()\n\nnum = str(num)\n\nlist_num = list(num)\n\nlist_num = [int(s) for s in list_num]\n\nans = 0\n\nfor n in list_num:\n    ans += n\n    ans  = ans%9\n\nif ans==0:\n    print(\"Yes\")\nelse:\n    print(\"No\")\n", "code2": "S = input()\nodd = S[0::2]\neven = S[1::2]\nans = 'No'\n\nif 'L' not in odd:\n    if 'R' not in even:\n        ans = 'Yes'\n\nprint(ans)", "label": 0, "name1": "s383833581.py", "name2": "s134920706.py"}, {"id": 433, "code1": "def inpl(): return [int(i) for i in input().split()]\nclass UnionFind():\n    def __init__(self, num):\n        self.par = [-1 for _ in range(num)]\n    \n    def find(self, x):\n        if self.par[x] < 0:\n            return x\n        else:\n            x = self.par[x]\n            return self.find(x)\n    \n    def union(self, x, y):\n        rx = self.find(x)\n        ry = self.find(y)\n        if rx != ry:\n            if self.par[rx] < self.par[ry]:\n                self.par[ry] = rx\n            if self.par[rx] > self.par[ry]:\n                self.par[rx] = ry\n            else:\n                self.par[rx] -= 1\n                self.par[ry] = rx\n        return\n\nN, K, L = inpl()\nufk = UnionFind(N)\nfor i in range(K):\n    p, q = inpl()\n    ufk.union(p-1, q-1)\n\nufr = UnionFind(N)\nfor i in range(L):\n    r, s = inpl()\n    ufr.union(r-1, s-1)\n\nfrom collections import defaultdict\nans = defaultdict(lambda: 0)\nfor i in range(N):\n    ans[ufk.find(i),ufr.find(i)] +=1\nAns = [0 for _ in range(N)]\nfor i in range(N):\n    Ans[i] = ans[ufk.find(i),ufr.find(i)]\nprint(*Ans)", "code2": "from collections import defaultdict\n\nclass Unionfind:\n\n    __slots__ = ['parents','sizes']\n\n    def __init__(self, n):\n        self.parents = list(range(n))\n        self.sizes = [1]*n\n\n    def root(self, x):\n        if self.parents[x] == x:\n            return x\n        else:\n            root_x = self.root(self.parents[x])\n            self.parents[x] = root_x\n            return root_x\n\n    def unite(self, x, y):\n        x = self.root(x); y = self.root(y)\n        if x == y:\n            return\n        if self.sizes[x] < self.sizes[y]:\n            x, y = y, x\n        self.sizes[x] += self.sizes[y]\n        self.parents[y] = x\n\n    def same(self, x, y):\n        return self.root(x) == self.root(y)\n\n    # \u96c6\u5408\u81ea\u4f53\u306e\u6570 ({1,2}, {3}, {4} : kind -> 3)\n    def kind(self):\n        for v in range(N):\n            self.root(v)\n        return len(list(set(self.parents)))\n\n    # x\u304c\u5c5e\u3059\u308b\u96c6\u5408\u306e\u8981\u7d20\u306e\u6570\u3000({1,2,3} : size(2) -> 3)\n    def size(self, x):\n        self.sizes[x] = self.sizes[self.root(x)]\n        return self.sizes[x]\n\nN, K, L = map(int,input().split())\nroad = Unionfind(N)\ntrain = Unionfind(N)\n\nfor _ in range(K):\n    p, q = map(int,input().split())\n    p -= 1; q -= 1\n    road.unite(p, q)\n\nfor _ in range(L):\n    r, s = map(int,input().split())\n    r -= 1; s -= 1\n    train.unite(r, s)\n\ncnt = defaultdict(int)\n\nfor i in range(N):\n    key = (road.root(i), train.root(i))\n    cnt[key] += 1\n\nans_list = []\nfor i in range(N):\n    key = (road.root(i), train.root(i))\n    ans = cnt[key]\n    ans_list.append(ans)\n\nprint(*ans_list)", "label": 1, "name1": "s236967102.py", "name2": "s028456939.py"}, {"id": 61, "code1": "a = int(input())\nb = int(input())\nc = int(input())\nd = int(input())\n\nt = a+b+c+d\nx = t // 60\ny = t - (x*60)\nprint(x)\nprint(y)\n", "code2": "# coding: utf-8\n# Your code here!\nn1=int(input())\nn2=int(input())\nn3=int(input())\nn4=int(input())\n\nn=sum((n1,n2,n3,n4))\n\nx=n//60\ny=n-(x*60)\n\nprint(x)\nprint(y)\n", "label": 1, "name1": "s681424325.py", "name2": "s520795772.py"}, {"id": 292, "code1": "import sys\ninput = sys.stdin.readline\n\nn, m = map(int, input().split())\nl = list(map(int, input().split()))\n\nif n >= m:\n    print(0)\n    sys.exit()\n    \nl.sort()\nle = len(l) - 1\nnl = [0] * le\nfor i in range(0, len(l) - 1):\n    nl[i] = l[i + 1] - l[i]\n    \nnl.sort()\nprint(sum(nl[:le - n + 1]))", "code2": "N,M = map(int,input().split())\nX = list(map(int,input().split()))\nX.sort()\nif N>=M: print(0);exit()\nif N==1: print(X[-1]-X[0]);exit()\nL = []\nfor i in range(len(X)-1):\n    L.append(X[i+1]-X[i])\nL.sort()\nL = L[:-(N-1)]\nprint(sum(L))", "label": 1, "name1": "s202166785.py", "name2": "s964881422.py"}, {"id": 106, "code1": "import math\na, b, c = map(int, input().split())\nh = b * math.sin(math.radians(c))\nprint(a * h / 2)\nprint(a + b + math.sqrt((a-b*math.cos(math.radians(c)))**2 + h**2))\nprint(h)\n\n", "code2": "import math\na,b,c = map(float, input().split())\nC = math.radians(c)\nS = a*b*math.sin(C)*0.5\nL = (a**2 + b**2 - 2.0*a*b*math.cos(C))**0.5+a+b\nh = 2*S/a\n\nprint(S)\nprint(L)\nprint(h)\n\n", "label": 1, "name1": "s253160566.py", "name2": "s252034794.py"}, {"id": 560, "code1": "import sys\nimport collections as col\nnum = []\nfor line in sys.stdin:\n\ttako = line[:-1].split(\",\")\n\tnum.append(tako[1])\ntako = col.Counter(num)\na = tako[\"O\"]\ntako[\"O\"] = tako[\"AB\"]\ntako[\"AB\"] = a\nfor i in tako.items():\n\tprint i[1]", "code2": "import math\na, b, c = map(int, input().split())\nh = b * math.sin(math.radians(c))\nprint(a * h / 2)\nprint(a + b + math.sqrt((a-b*math.cos(math.radians(c)))**2 + h**2))\nprint(h)\n\n", "label": 0, "name1": "s223119670.py", "name2": "s253160566.py"}, {"id": 216, "code1": "import itertools\n\nN = int(input())\nP = tuple(map(int, input().split()))\nQ = tuple(map(int, input().split()))\n\nfor i, pat in enumerate(itertools.permutations(range(1, N + 1)), N):\n    if pat == P:\n        a = i\n    if pat == Q:\n        b = i\n\nans = abs(a - b)\n\nprint(ans)\n", "code2": "from itertools import permutations\nn = int(input())\np = tuple(map(int, input().split()))\nq = tuple(map(int, input().split()))\n\nfor n, i in enumerate(permutations(sorted(p))):\n    if i == p:\n        pn = n\n\nfor n, i in enumerate(permutations(sorted(q))):\n    if i == q:\n        qn = n\nprint(abs(pn-qn))\n", "label": 1, "name1": "s509770499.py", "name2": "s199679379.py"}, {"id": 804, "code1": "nm = [0,31,29,31,30,31,30,31,31,30,31,30]\nwhile True:\n\n    m,d = map(int,raw_input().split(\" \"))\n\n    if m == 0:\n        break\n    else:\n        nd = 0\n        for i in range(m):\n           nd += nm[i]\n\n        nd += d\n        n = nd%7\n        if n == 1:\n            print \"Thursday\"\n        elif n == 2:\n            print \"Friday\"\n        elif n == 3:\n            print \"Saturday\"\n        elif n == 4:\n            print \"Sunday\"\n        elif n == 5:\n            print \"Monday\"\n        elif n == 6:\n            print \"Tuesday\"\n        else:                                                                                                                                                                                                \n            print \"Wednesday\"", "code2": "n=int(input())\na=list(map(int,input().split()))\nb=list(map(int,input().split()))\n\nsum1=0\nsum2=0\n\nfor i,j in zip(a,b):\n  if i>j:\n    sum1+=(i-j)\n  elif i<j:\n    sum2+=(j-i)//2\n\nprint('Yes' if sum1<=sum2 else 'No')", "label": 0, "name1": "s504491910.py", "name2": "s390816173.py"}, {"id": 826, "code1": "A, B, C = map(int, input().split())\nprint('Yes' if len(set([A, B, C])) == 2 else 'No')", "code2": "n=int(input())\ns=input()\n\nE=[0 for i in range(n)]\nW=[0 for i in range(n)]\n\ncnt=0\nfor i in range(n):\n    W[i]=cnt\n    if s[i]==\"W\":\n        cnt+=1\n\ncnt=0   \nfor i in range(n):\n    E[n-1-i]=cnt\n    if s[n-1-i]==\"E\":\n        cnt+=1\n\nmini=10**8\nfor i in range(n):\n    mini=min(mini,E[i]+W[i])\n\nprint(mini)", "label": 0, "name1": "s278209661.py", "name2": "s614583596.py"}, {"id": 722, "code1": "a,b,c=map(int,input().split())\nprint(min(a+b,b+c,c+a))\n", "code2": "def inpl(): return list(map(int, input().split()))\nN, M = inpl()\nf, n = set(), set()\nfor i in range(M):\n    temp = inpl()\n    if 1 in temp:\n        f.add(temp[1])\n    if N in temp:\n        n.add(temp[0])\nif len(f & n) > 0:\n    print('POSSIBLE')\nelse:\n    print('IMPOSSIBLE')", "label": 0, "name1": "s997903196.py", "name2": "s278593598.py"}, {"id": 775, "code1": "iN = int(input())\naA = [0] + [int(_) for _ in input().split()] + [0]\niAll = sum(map(lambda i :abs(aA[i+1]-aA[i]),range(iN+1)))\nprint(\"\\n\".join(map(lambda i:str( iAll - abs(aA[i-1]-aA[i]) - abs(aA[i]-aA[i+1]) + abs(aA[i-1]-aA[i+1])), range(1,iN+1))))\n", "code2": "#!/usr/bin/env python3\nfrom collections import defaultdict,deque\nfrom heapq import heappush, heappop\nfrom bisect import bisect_left, bisect_right\nimport sys, random, itertools, math\nsys.setrecursionlimit(10**5)\ninput = sys.stdin.readline\nsqrt = math.sqrt\ndef LI(): return list(map(int, input().split()))\ndef LF(): return list(map(float, input().split()))\ndef LI_(): return list(map(lambda x: int(x)-1, input().split()))\ndef II(): return int(input())\ndef IF(): return float(input())\ndef LS(): return list(map(list, input().split()))\ndef S(): return list(input().rstrip())\ndef IR(n): return [II() for _ in range(n)]\ndef LIR(n): return [LI() for _ in range(n)]\ndef FR(n): return [IF() for _ in range(n)]\ndef LFR(n): return [LI() for _ in range(n)]\ndef LIR_(n): return [LI_() for _ in range(n)]\ndef SR(n): return [input().rstrip()[:-1] for _ in range(n)]\ndef LSR(n): return [LS() for _ in range(n)]\nmod = 1000000007\ninf = 1e10\n\n#solve\ndef solve():\n    n = II()\n    if n == 0:\n        return False\n    group = set()\n    go_group = set()\n    member = set()\n    d = defaultdict(int)\n    g = SR(n)\n    for gi in g:\n        group.add(gi.split(\":\")[0])\n        d[gi.split(\":\")[0]] = gi.split(\":\")[1].split(\",\")\n    C = defaultdict(int)\n    def s(g):\n        for gi in g:\n            if gi in group:\n                if C[gi]:\n                    continue\n                C[gi] = 1\n                s(d[gi])\n            else:\n                member.add(gi)\n    s(d[g[0].split(\":\")[0]])\n    print(len(member))\n    return True\n\n#main\nif __name__ == '__main__':\n    while solve():\n        pass\n\n", "label": 0, "name1": "s167602198.py", "name2": "s728275108.py"}, {"id": 767, "code1": "#coding:utf-8\n\nn = input()\nl = map(int, raw_input(). split())\nl.sort()\nfor i in xrange(n):\n    print(l[i]),", "code2": "n = int(input())\na = list(map(int, input().split()))\na.insert(n,0)\na.insert(0,0)\nsum = 0\nfor i in range(n+1):\n    sum += abs(a[i+1] -a[i])\nfor i in range(n):\n    print(sum - abs(a[i+1] - a[i]) - abs(a[i+2] - a[i+1]) + abs(a[i+2] - a[i]))", "label": 0, "name1": "s666694142.py", "name2": "s465741499.py"}, {"id": 18, "code1": "h, w = map(int, input().split())\n\neven_rows = h // 2\nodd_rows = (h+1) // 2\n\nif w > 1 and h > 1:\n    ans = 0\n    ans += w // 2 * even_rows\n    ans += (w+1) // 2 * odd_rows\n\n    print(ans)\nelse:\n    print(1)", "code2": "H,W = map(int,input().split())\n#print(H)\nans = 1\n \n \nif H*W%2 == 0:\n    ans = int(H*W/2)\nelse:\n    ans = int(H*W//2 + 1)\n#output\nif H == 1:\n    ans = 1\nif W == 1:\n    ans = 1\nprint(ans)", "label": 1, "name1": "s554703184.py", "name2": "s137900528.py"}, {"id": 945, "code1": "D=int(input())\nc=list(map(int,input().split()))\ns=[list(map(int,input().split())) for _ in range(D)]\n\nlast=[0]*26\n\n\nfor d in range(1,D+1):\n    ans=[]\n    for choice in range(1,27):\n        ans_tmp=0\n        ans_tmp+=s[d-1][choice-1]\n        for i in range(26):\n            if i+1==choice:\n                continue\n            ans_tmp-=c[i]*(d-last[i])*max(2,(D-d)//36)\n        ans.append((ans_tmp,choice))\n    _,case=max(ans)\n    last[case-1]=d\n    print(case)\n\n", "code2": "#!/usr/bin/env python3\nimport sys, math, itertools, collections, bisect\ninput = lambda: sys.stdin.buffer.readline().rstrip().decode('utf-8')\ninf = float('inf') ;mod = 10**9+7\nmans = inf ;ans = 0 ;count = 0 ;pro = 1\n\nn=input()\nC=collections.Counter(n)\nprint(C[\"2\"])", "label": 0, "name1": "s931339849.py", "name2": "s618561619.py"}, {"id": 81, "code1": "import sys\nd={'A\\n':0,'B\\n':0,'AB\\n':0,'O\\n':0}\nfor e in sys.stdin:d[e.split(',')[1]]+=1\nfor b in d:print(d[b])\n", "code2": "z,x,c,v=0,0,0,0\nwhile True:\n  try:\n    q,w = map(str,raw_input().split(\",\"))\n    if w == \"A\":z+=1\n    elif w == \"B\":x+=1\n    elif w ==\"AB\":c+=1\n    elif w ==\"O\": v+=1\n  except EOFError: \n    print \"%d\\n%d\\n%d\\n%d\"%(z,x,c,v)\n    break", "label": 1, "name1": "s566437610.py", "name2": "s960711709.py"}, {"id": 459, "code1": "N = int(input())\nimport sys\nsys.setrecursionlimit(N+10)\n\nes = [[] for _ in range(N)]\nfor i in range(N-1):\n    a,b = map(int, input().split())\n    a,b = a-1, b-1\n    es[a].append(b)\n    es[b].append(a)\n\n\"\"\"\n\u76f8\u624b\u306e\u53d6\u308c\u308b\u30de\u30b9\u76ee\u3092\u6e1b\u3089\u3059\u3088\u3046\u306b\u3068\u308b\u3068\u3088\u3044\n\u76f8\u624b\u3088\u308a\u305d\u306e\u30de\u30b9\u306b\u8fd1\u3051\u308c\u3070\u305d\u306e\u30de\u30b9\u3092\u53d6\u5f97\u3067\u304d\u308b\n\u30d5\u30a7\u30cd\u30c3\u30af\u304f\u3093\u3001\u3059\u306c\u3051\u541b\u306b\u3064\u3044\u3066\u521d\u671f\u5730\u70b9\u304b\u3089\u305d\u308c\u305e\u308c\u3078\u306e\u8ddd\u96e2\u304c\u5fc5\u8981\n\"\"\"\ndef solve(now, depth, depth_list, es, visited):\n    visited[now] = True\n    depth_list[now] = depth\n    for next in es[now]:\n        if visited[next] == False:            \n            solve(next, depth+1, depth_list, es, visited)\n\ndepth_list_F = [0] * N\nvisited_F = [False] * N\nsolve(0, 0, depth_list_F, es, visited_F)\n\ndepth_list_S = [0] * N\nvisited_S = [False] * N\nsolve(N-1, 0, depth_list_S, es, visited_S)\n\ncnt_F = cnt_S = 0\nfor f,s in zip(depth_list_F, depth_list_S):\n    if f <= s:\n        cnt_F += 1 # \u30d5\u30a7\u30cd\u30c3\u30af\u541b\u304b\u3089\u59cb\u3081\u308b\u306e\u3067\u540c\u3058\u8ddd\u96e2\u306a\u3089\u30d5\u30a7\u30cd\u30c3\u30af\u541b\u304c\u3068\u308b\n    else:\n        cnt_S += 1\n\nif cnt_F > cnt_S:\n    print(\"Fennec\")\nelse:\n    print(\"Snuke\")", "code2": "import sys,queue,math,copy,itertools,bisect,collections\nfrom heapq import *\n\ndef main():\n    sys.setrecursionlimit(10**7)\n    INF = 10**18\n    MOD = 10**9 + 7\n    LI = lambda : [int(x) for x in sys.stdin.readline().split()]\n    NI = lambda : int(sys.stdin.readline())\n\n    N = NI()\n    root = [[] for _ in range(N)]\n    for _ in range(N-1):\n        a,b = LI()\n        root[a-1].append(b-1)\n        root[b-1].append(a-1)\n\n    node = [-1 for _ in range(N)]\n    q = []\n    q.append((0,0))\n    node[0] = 0\n    while q:\n        u,num = q.pop()\n        for v in root[u]:\n            if node[v] < 0:\n                node[v] = num+1\n                if v == N-1:\n                    q = []\n                    break\n                q.append((v,num+1))\n    c = node[N-1]\n    u = N-1\n    pu = 0\n    while c > (node[N-1])//2:\n        for v in root[u]:\n            if node[v] != c-1: continue\n            pu = u\n            u = v\n            c -= 1\n            break\n\n    p = u\n    node = [-1 for _ in range(N)]\n    node[p] = 0\n    node[pu] = 1\n    cnt = [0,0]\n    for i in range(2):\n        if i == 0:\n            q.append(p)\n        else:\n            q.append(pu)\n        while q:\n            u = q.pop()\n            for v in root[u]:\n                if node[v] < 0:\n                    node[v] = i\n                    q.append(v)\n                    cnt[i] += 1\n    if cnt[0] > cnt[1]:\n        print('Fennec')\n    else:\n        print('Snuke')\n\nif __name__ == '__main__':\n    main()", "label": 1, "name1": "s940891501.py", "name2": "s905380406.py"}, {"id": 944, "code1": "n = int(input())\nA = list(map(int, input().split()))\nl = 1\nr = 2*n\nwhile l < r-1:\n    mid = (l+r)//2\n    B = []\n    C = []\n    for i in range(0,2*n-1):\n        B.append(A[i] >= mid)\n        C.append(0)\n    for i in range(1,2*n-1):\n        if B[i-1] == B[i]:\n            C[i] = 1\n    for i in range(0,2*n-2):\n        if B[i+1] == B[i]:\n            C[i] = 1\n    mi = 2*n\n    ans = False\n    for i in range(0,2*n-1):\n        if C[i] == 1:\n            if abs(i-n+1) < mi:\n                mi = abs(i-n+1)\n                ans = B[i]\n    if mi == 2*n:   #specialfall\n        ans = ((n+1)%2)^B[n-1]\n    if ans == True:\n        l = mid\n    else:\n        r = mid\nprint(l)\n        \n", "code2": "print(input().count(\"2\"))", "label": 0, "name1": "s087982630.py", "name2": "s249513812.py"}, {"id": 21, "code1": "H,W = map(int,input().split())\n#print(H)\nans = 1\n \n \nif H*W%2 == 0:\n    ans = int(H*W/2)\nelse:\n    ans = int(H*W//2 + 1)\n#output\nif H == 1:\n    ans = 1\nif W == 1:\n    ans = 1\nprint(ans)", "code2": "from math import *\nn,m=map(int,input().split())\nif(n==1 or m==1):\n    print(1)\nelse:\n    print(ceil((n*m)/2))\n", "label": 1, "name1": "s137900528.py", "name2": "s965203099.py"}, {"id": 342, "code1": "import bisect\n\nans = \"IMPOSSIBLE\"\nn, m = map(int, input().split())\nac = []\nbc = []\nfor _ in range(m):\n    a, b = map(int, input().split())\n    if min(a, b) == 1:\n        ac.append(max(a, b))\n    elif max(a, b) == n:\n        bc.append(min(a, b))\nac = list(sorted(ac))\nbc = list(sorted(bc))\nfor c in ac:\n    i = bisect.bisect_left(bc, c)\n    if i < len(bc) and bc[i] == c:\n        ans = ans[2:]\n        break\nprint(ans)", "code2": "# ABC068C - Cat Snuke and a Voyage (ARC079C)\ndef main():\n    N, M, *AB = map(int, open(0).read().split())\n    from_1, to_N = set(), set()\n    for a, b in zip(*[iter(AB)] * 2):\n        if a == 1:\n            from_1.add(b)\n        if b == N:\n            to_N.add(a)\n    flg = from_1 & to_N  # intermediate point of both 1, N exists?\n    print(\"POSSIBLE\" if flg else \"IMPOSSIBLE\")\n\n\nif __name__ == \"__main__\":\n    main()", "label": 1, "name1": "s723688485.py", "name2": "s726342129.py"}, {"id": 274, "code1": "while 1:\n\tn , x = map(int , raw_input().split())\n\tif n == x == 0:\n\t\tbreak\n\telse :\n\t\tcnt = 0\n\t\tfor i in range(1,n - 1):\n\t\t\tfor j in range(i + 1 , n):\n\t\t\t\tfor k in range(j + 1, n + 1):\n#\t\t\t\t\tprint i,j,k\n\t\t\t\t\tif i + j + k == x:\n#\t\t\t\t\t\tprint i,j,k\n\t\t\t\t\t\tcnt += 1\n\t\tprint cnt", "code2": "while True:\n\tn,x = map(int,raw_input().split())\n\tif n==x==0:\n\t\tbreak\n\tans=0\n\tfor i in xrange(1,n+1):\n\t\tfor j in xrange(i+1,n+1):\n\t\t\tfor k in xrange(j+1,n+1):\n\t\t\t\tif i+j+k==x:\n\t\t\t\t\tans+=1\n\tprint ans", "label": 1, "name1": "s558630368.py", "name2": "s718411118.py"}, {"id": 860, "code1": "N = int(input())\nA = list(map(int, input().split()))\nsort = sorted(A)\n# amari = []\n# while len(amari) != 1:\n#   amari.clear()\n#   if 0 in sort: sort.remove(0)\n#   for item in sort:\n#     if item%sort[0] not in amari:\n#       amari.append(item%sort[0])\n#   last_sort0 = sort[0]\n#   sort = sorted(amari[:])\n#   sort.append(last_sort0)\n\n# print(last_sort0-amari[0])\n\nwhile len(sort) != 1:\n  for i in range(1,len(sort)):\n    sort[i] = sort[i]%sort[0]\n  sort = [j for j in sorted(sort) if j != 0]\n\nprint(sort[0])", "code2": "# AOJ 1503: Numbers\n# Python3 2018.7.13 bal4u\n\nimport sys\nn = int(input())\nif n == 1: print(4, 2, sep='\\n'); sys.exit(0)\nans = 1\nfor i in range(2, n+2): ans *= i\nprint(ans+2)\nfor i in range(2, n+2): print(i)\n", "label": 0, "name1": "s006625656.py", "name2": "s590878073.py"}, {"id": 538, "code1": "# -*- coding: utf-8 -*-\n'import sys'\n'import math'\ni=int(4)\nt=0\nwhile i:\n    t+=int(input())\n    i-=1\nprint(int(t/60))\nprint(t%60)", "code2": "while True:\n    data = {}\n    n = input()\n    if n == 0:\n        break\n    for i in range(n):\n        tmp = raw_input()\n        tmp_data = tmp.split(\" \")\n        if i == 0:\n            data.update({tmp_data[0] : int(tmp_data[1]) + int(tmp_data[2])})\n        else:\n            flag = False\n            for j in data.iterkeys():\n                if data[j] < int(tmp_data[1]) + int(tmp_data[2]):\n                    flag = True\n                if flag:\n                    data.clear()\n                    data.update({tmp_data[0] : int(tmp_data[1]) + int(tmp_data[2])})\n\n    for key in data.iterkeys():\n        print \"%s %d\" % (key, data[key])", "label": 0, "name1": "s417833494.py", "name2": "s667605741.py"}, {"id": 718, "code1": "import sys\ndef input(): return sys.stdin.readline().strip()\n\n\ndef main():\n    a, b, c = map(int, input().split())\n    m = max(a, b, c)\n    print(a + b + c - m)\n\n\nif __name__ == \"__main__\":\n    main()\n", "code2": "S = input()\n\nl = len(S)\nS_list = list(map(int, S))\n\nans = 0\n\nfor i in range(l):\n    num = int(S_list[-i-1])\n\n    for j in range(i+1):\n        ans += num * (10 ** (j)) * (2 ** (max(l-1-j-1, l-1-i)))\n\nprint(ans)\n", "label": 0, "name1": "s149362178.py", "name2": "s174681493.py"}, {"id": 616, "code1": "while 1:\n\tW, H = map(int,raw_input().split(\" \"))\n\tif W == H == 0: \n\t\tbreak\n\tfield = [[c for c in raw_input()] for _ in range(H)]\n\tsecret = [0, \"\"]\n\tfor j in range(H):\n\t\tfor i in range(W):\n\t\t\tif not field[j][i].isdigit():\n\t\t\t\tcontinue\n\t\t\tleft = top = \"\"\n\t\t\tif i > 0 and field[j][i-1].isdigit() and field[j][i-1] != \"0\":\n\t\t\t\tleft = field[j][i-1]\n\t\t\tif j > 0 and field[j-1][i].isdigit() and field[j-1][i] != \"0\":\n\t\t\t\ttop = field[j-1][i]\n\t\t\tif len(left) == len(top):\n\t\t\t\tfield[j][i] = (left if left > top else top) + field[j][i]\n\t\t\telse :\n\t\t\t\tfield[j][i] = (left if len(left) > len(top) else top) + field[j][i]\n\t\t\tlength = len(field[j][i])\n\t\t\tif length > secret[0]:\n\t\t\t\tsecret[1] = field[j][i]\n\t\t\t\tsecret[0] = length\n\t\t\telif length == secret[0] and field[j][i] > secret[1]:\n\t\t\t\tsecret[1] = field[j][i]\n\tprint secret[1]", "code2": "a, b = map(int, input().split())\nif a > b:\n    print(a-1)\nelse:\n    print(a)", "label": 0, "name1": "s782922064.py", "name2": "s737717931.py"}, {"id": 891, "code1": "count = 0\nwhile count < 1000:\n\tprint \"Hello World\"\n\tcount = count + 1", "code2": "a, b = map(int,input().split())\nc = (a-b) * 100 + b * 1900\nprint(c * 2 ** b)\n", "label": 0, "name1": "s042038863.py", "name2": "s630865419.py"}, {"id": 673, "code1": "s = list(input())\nt = list(input())\nans = [-1, -1]\nif len(t) <= len(s):\n    for i in range(len(s) - len(t) + 1):\n        c = 1\n        for j in range(len(t)):\n            if s[i + j] != \"?\" and t[j] != s[i + j]:\n                c = 0\n                break\n        if c == 1:\n            ans = [i, i + len(t)]\n\nif ans != [-1, -1]:\n    k = []\n    for i in range(len(s)):\n        if ans[0] <= i < ans[1]:\n            k.append(t[i - ans[0]])\n        else:\n            if s[i] == \"?\":\n                k.append(\"a\")\n            else:\n                k.append(s[i])\n    print(\"\".join(k))\nelse:\n    print(\"UNRESTORABLE\")\n", "code2": "while 1:\n\tn , x = map(int , raw_input().split())\n\tif n == x == 0:\n\t\tbreak\n\telse :\n\t\tcnt = 0\n\t\tfor i in range(1,n - 1):\n\t\t\tfor j in range(i + 1 , n):\n\t\t\t\tfor k in range(j + 1, n + 1):\n#\t\t\t\t\tprint i,j,k\n\t\t\t\t\tif i + j + k == x:\n#\t\t\t\t\t\tprint i,j,k\n\t\t\t\t\t\tcnt += 1\n\t\tprint cnt", "label": 0, "name1": "s590642866.py", "name2": "s558630368.py"}, {"id": 224, "code1": "n = int(input())\np = tuple(map(int, input().split()))\nq = tuple(map(int, input().split()))\n\nimport itertools\nr = list(itertools.permutations(range(1, n+1)))\n\np_place = r.index(p)\nq_place = r.index(q)\nanswer = abs(p_place-q_place)\nprint(answer)", "code2": "def factorial(n):\n    ret = 1\n    for i in range(n):\n        ret *= (i + 1)\n    return ret\n\ndef calc_order(A, N):\n    l = [i + 1 for i in range(N)]\n    order = 1\n    for i in range(N):\n        a = A[i]\n        len_l = N - i\n        index = l.index(a)\n        # print(a, index, factorial(len_l - 1), order)\n        order += index * factorial(len_l - 1)\n        del l[index]\n    return order\n\ndef main():\n    N = int(input())\n    P = list(map(int, input().split()))\n    Q = list(map(int, input().split()))\n    ord_p = calc_order(P, N)\n    ord_q = calc_order(Q, N)\n    ans = abs(ord_p - ord_q)\n    # print(ord_p, ord_q)\n    print(ans)\n\nif __name__ == '__main__':\n    main()\n", "label": 1, "name1": "s558804624.py", "name2": "s991537819.py"}, {"id": 196, "code1": "import math\nN = int(input())\nA = list(map(int,input().split()))\nA.sort(reverse = True)\n\nans = 0\nfor i in range(1,N):\n  a = math.floor(i/2)\n  ans += A[a]\n    \nprint(ans)", "code2": "import sys\nimport time\nimport math\nst = time.perf_counter()\ndef inpl():\n    return list(map(int, input().split()))\n# ------------------------------\n\nN = int(input())\nA = inpl()\n\nA.sort()\nA.reverse()\n\nans = 0\nN -= 1\nfor i in range(len(A)):\n\tif i == 0: t = 1\n\telse : t = 2\n\tfor _ in range(t):\n\t\tans += A[i]\n\t\tN -= 1\n\t\tif N == 0:\n\t\t\tbreak\n\tif N == 0:\n\t\tbreak\n\nprint(ans)\n\n\n# ------------------------------\ned = time.perf_counter()\nprint('time:', ed-st, file=sys.stderr)\n", "label": 1, "name1": "s069304778.py", "name2": "s767002376.py"}, {"id": 601, "code1": "#!/usr/bin/env python\n# -*- coding: utf-8 -*-\nimport math\n\ndef sieve_of_erastosthenes(num):\n    input_list = [False if i % 2 == 0 or i % 3 == 0 or i % 5 == 0 else True for i in range(num)]\n    input_list[0] = input_list[1] = False\n    input_list[2] = input_list[3] = input_list[5] = True\n    sqrt = math.sqrt(num)\n\n    for serial in range(3, num, 2):\n        if serial >= sqrt:\n            return input_list\n        for s in range(serial ** 2, num, serial): \n            input_list[s] = False\n\nprimeTable = sieve_of_erastosthenes((10**6))\n\nwhile True:\n    n = int(input())\n    if n == 0:\n        break\n    print(sum([1 if primeTable[i] == True else 0 for i in range(n+1,2*n+1)]))", "code2": "X = input()\ns_cnt = 0\nans = 0\nfor s in X:\n    if s=='S':\n        s_cnt += 1\n    else:\n        if s_cnt > 0:\n            ans += 1\n            s_cnt -= 1\n\nprint(len(X) - 2*ans)", "label": 0, "name1": "s839739261.py", "name2": "s514074837.py"}, {"id": 416, "code1": "import sys\nimport fractions\nfrom collections import Counter, deque, defaultdict\nfrom math import factorial\nimport heapq, bisect\nimport math\nimport itertools\nsys.setrecursionlimit(10 ** 5 + 10)\nINF = 10**15 +5\ndef input(): return sys.stdin.readline().strip()\ndef INT(): return int(input())\ndef MAP(): return map(int, input().split())\ndef LIST(): return list(map(int, input().split()))\n\nn = INT()\nt = [0]*n\nfor i in range(n):\n    t[i] = INT()\n\ndef lcm(a,b):\n    gcd = fractions.gcd(a,b)\n    a//=gcd\n    b//=gcd\n    return a*b*gcd\n    \nif n == 1:\n    print(t[0])\n    sys.exit()\n\nres = lcm(t[0],t[1])\nfor i in range(1,n-1):\n    res = lcm(res, t[i+1])\n\nprint(res)\n\n\n", "code2": "from functools import reduce\n\ndef gcd(a, b):\n  while b > 0:\n    a, b = b, a%b\n  return a\n\ndef lcm(x, y):\n  return (x * y) // gcd(x, y)\n\ndef lcm_list(numbers):\n  return reduce(lcm, numbers, 1)\n\nn = [int(input()) for _ in range(int(input()))]\nprint(lcm_list(n))", "label": 1, "name1": "s491119021.py", "name2": "s973589852.py"}, {"id": 738, "code1": "x, y = map(int, input().split())\ncnt = 1\nwhile True:\n    if x > y:\n        print(cnt - 1)\n        exit()\n    else:\n        x *= 2\n        cnt += 1\n", "code2": "i,o,t,j,l,s,z = map(int,input().split())\na = 2*(i//2+j//2+l//2)\nif i>0 and j>0 and l>0:\n    i,j,l = i-1,j-1,l-1\n    b = 2*(i//2+j//2+l//2)\n    print(o+max(a,b+3))\nelse:\n    print(o+a)\n", "label": 0, "name1": "s788055694.py", "name2": "s273049490.py"}, {"id": 556, "code1": "z,x,c,v=0,0,0,0\nwhile True:\n  try:\n    q,w = map(str,raw_input().split(\",\"))\n    if w == \"A\":z+=1\n    elif w == \"B\":x+=1\n    elif w ==\"AB\":c+=1\n    elif w ==\"O\": v+=1\n  except EOFError: \n    print \"%d\\n%d\\n%d\\n%d\"%(z,x,c,v)\n    break", "code2": "n,k = map(int, input().split())\namari=n%k\nn=min(amari, k-amari)\nprint(n)", "label": 0, "name1": "s960711709.py", "name2": "s328388206.py"}, {"id": 583, "code1": "\n\ndef main():\n    n, K = map(int, input().split())\n    a = list(map(int, input().split()))\n\n    # dp[i] is true if First player wins with i tiles left\n    dp = [False]*(K+1)\n    for k in range(1, K+1):\n        for i in a:\n            if k >= i and not dp[k-i]:\n                dp[k] = True\n    print(['Second', 'First'][dp[K]])\n\n\nif __name__ == \"__main__\":\n    main()\n", "code2": "A,B,C=map(int,input().split())\nans = 1\nif (A%2 != B%2) and (A%2 == C%2):\n  A += 1\n  C += 1\nelif (A%2 == B%2) and (A%2 != C%2):\n  A += 1\n  B += 1\nelif (A%2 != B%2) and (B%2 == C%2):\n  C += 1\n  B += 1\nelse:\n  ans = 0\nL = [A,B,C]\nL.sort()\nans += (L[2]-L[1])//2 + (L[2]-L[0])//2\nprint( ans )\n", "label": 0, "name1": "s700864010.py", "name2": "s612094036.py"}, {"id": 75, "code1": "#coding:utf-8\nimport numpy as np\nn = int(input())\n\n\na = np.ones((2,1)).astype(np.int)\na[-1][-1]+len(a)\ni = 1\nwhile(1):\n    if len(a)>=500:\n        break\n    if n==a[-1][-1]:\n        print (\"Yes\")\n        print (len(a))\n        for line in a:\n            print (i,\" \".join(line.astype(np.str).tolist()))\n        exit()\n    i+=1\n    temp = int((1/2)*i*(i+1))\n    add = np.array((list(range(temp-i+1,temp+1))))\n\n    a = np.c_[a,add]\n    a = np.r_[a,add.reshape(1,-1)]\nprint (\"No\")\n", "code2": "def main():\n    n=int(input())\n    m=int((2*n)**0.5)\n    if m*(m+1)==n*2:\n        print(\"Yes\")\n        m+=1\n        print(m)\n    else:\n        print(\"No\")\n        exit()\n    \n    ans=[[m-1] for i in range(m)]\n    c=1\n    for i in range(m):\n        for j in range(i+1,m):\n            ans[i].append(c)\n            ans[j].append(c)\n            c+=1\n    for i in ans:\n        print(\" \".join(map(str,i)))\n\n\nif __name__ == '__main__':\n    main()\n\n\n\n\n\n\n", "label": 1, "name1": "s037954477.py", "name2": "s694753497.py"}, {"id": 887, "code1": "#!/usr/bin/env python3\nimport sys\nsys.setrecursionlimit(10**8)\nINF = float(\"inf\")\n\n\ndef solve(K: int, A: int, B: int):\n    for s in range(A, B+1):\n        if s % K == 0:\n            print(\"OK\")\n            return\n    print(\"NG\")\n    return\n\n\ndef main():\n\n    def iterate_tokens():\n        for line in sys.stdin:\n            for word in line.split():\n                yield word\n    tokens = iterate_tokens()\n    K = int(next(tokens))  # type: int\n    A = int(next(tokens))  # type: int\n    B = int(next(tokens))  # type: int\n    solve(K, A, B)\n\n\nif __name__ == '__main__':\n    main()\n", "code2": "for i in range(1000):\n    print (\"Hello World\")", "label": 0, "name1": "s658779563.py", "name2": "s918569906.py"}, {"id": 42, "code1": "while True:\n    n = int(input())\n    if n == 0:\n        break\n    scores = list(map(int, input().split()))\n    m = sum(scores) / n\n    dev = list((i - m) for i in scores)\n    var = sum((i ** 2) for i in dev) / n\n    stdev = var ** 0.5\n    print(stdev)\n\n", "code2": "while True:\n    n=int(input())\n    if n == 0:\n        break\n    a=list(map(int, input().split()))\n    m=sum(a)/n\n    std=0\n    for i in range(n):\n       std+=(a[i]-m)**2\n    std/=n\n    print(std**0.5)\n    \n", "label": 1, "name1": "s320188133.py", "name2": "s611963790.py"}, {"id": 379, "code1": "h, w = map(int, input().split())\na = [list(input()) for _ in range(h)]\nu = [[\".\"] * w for _ in range(h)]\nv = [[\".\"] * w for _ in range(h)]\nfor i in range(h):\n    for j in range(w):\n        if a[i][j] == \"#\":\n            u[i][j], v[i][j] = \"#\", \"#\"\n        else:\n            if i == 0:\n                u[i][j] = \"#\"\n            elif i == h - 1:\n                v[i][j] = \"#\"\n            else:\n                if j % 2 == 0:\n                    u[i][j] = \"#\"\n                else:\n                    v[i][j] = \"#\"\nfor s in u:\n    print(\"\".join(s))\nprint()\nfor t in v:\n    print(\"\".join(t))", "code2": "h, w = map(int, input().split())\na = [list(input()) for i in range(h)]\nta = [[\".\"] * w for i in range(h)]\nao = [[\".\"] * w for i in range(h)]\nfor i in range(h):\n    if i % 2 == 0:\n        for j in range(w - 1):\n            ta[i][j] = \"#\"\n        ao[i][-1] = \"#\"\n    else:\n        for j in range(1, w):\n            ao[i][j] = \"#\"\n        ta[i][0] = \"#\"\nfor i in range(h):\n    for j in range(w):\n        if a[i][j] == \"#\":\n            ta[i][j] = \"#\"\n            ao[i][j] = \"#\"\nfor i in range(h):\n    print(*ta[i], sep=\"\")\nprint()\nfor i in range(h):\n    print(*ao[i], sep=\"\")", "label": 1, "name1": "s080897842.py", "name2": "s319820171.py"}, {"id": 275, "code1": "while 1:\n\tn , x = map(int , raw_input().split())\n\tif n == x == 0:\n\t\tbreak\n\telse :\n\t\tcnt = 0\n\t\tfor i in range(1,n - 1):\n\t\t\tfor j in range(i + 1 , n):\n\t\t\t\tfor k in range(j + 1, n + 1):\n#\t\t\t\t\tprint i,j,k\n\t\t\t\t\tif i + j + k == x:\n#\t\t\t\t\t\tprint i,j,k\n\t\t\t\t\t\tcnt += 1\n\t\tprint cnt", "code2": "while True:\n    n,x = map(int, raw_input().split())\n    if n == 0 and x == 0: break\n    c = 0\n    for i in range(1, min(n-1,x/3)):\n        for j in range(i+1, min(n,x/2)):\n            for k in range(j+1, n+1):\n                ijk = i + j + k\n                if ijk == x:\n                    c += 1\n                    break\n                elif ijk > x: break\n    print c    ", "label": 1, "name1": "s558630368.py", "name2": "s024615011.py"}, {"id": 505, "code1": "num = input()\n\nnum = str(num)\n\nlist_num = list(num)\n\nlist_num = [int(s) for s in list_num]\n\nans = 0\n\nfor n in list_num:\n    ans += n\n    ans  = ans%9\n\nif ans==0:\n    print(\"Yes\")\nelse:\n    print(\"No\")\n", "code2": "H,W = map(int,input().split())\n#print(H)\nans = 1\n \n \nif H*W%2 == 0:\n    ans = int(H*W/2)\nelse:\n    ans = int(H*W//2 + 1)\n#output\nif H == 1:\n    ans = 1\nif W == 1:\n    ans = 1\nprint(ans)", "label": 0, "name1": "s383833581.py", "name2": "s137900528.py"}, {"id": 293, "code1": "import sys\ninput = sys.stdin.readline\n\nn, m = map(int, input().split())\nl = list(map(int, input().split()))\n\nif n >= m:\n    print(0)\n    sys.exit()\n    \nl.sort()\nle = len(l) - 1\nnl = [0] * le\nfor i in range(0, len(l) - 1):\n    nl[i] = l[i + 1] - l[i]\n    \nnl.sort()\nprint(sum(nl[:le - n + 1]))", "code2": "N, M = map(int, input().split())\nX = list(map(int, input().split()))\nX.sort()\nd = []\nif N > M:\n    N = M\nfor i in range(M - 1):\n    d.append(abs(X[i + 1] - X[i]))\nd.sort()\nprint(sum(d[:M - N]))\n", "label": 1, "name1": "s202166785.py", "name2": "s821901077.py"}, {"id": 237, "code1": "import math, sys\n\ndef loadable(w, n, k, p, wsum):\n    wait = 0\n    for i in range(n):\n        wait += w[i]\n        wsum -= w[i]\n        if wait > p:\n            k -= 1\n            wait = w[i]\n            if k == 0 or p < wsum / k:\n                return False\n    return True\n\nn, k = map(int, sys.stdin.readline().split())\nw = [int(sys.stdin.readline()) for _ in range(n)]\n\nwsum = sum(w)\n\np = max(int(math.ceil(wsum / k)), max(w))\npre_f = p -1\npre_s = None\n\nwhile True:\n    if loadable(w, n, k, p, wsum):\n        pre_s = p\n    else:\n        pre_f = p\n\n    if pre_s != None and pre_s - pre_f == 1:\n            break\n    \n    if pre_s:\n        p = int((pre_s + pre_f) / 2)\n    else:\n        p = math.ceil(p * 1.01)\n    \nprint(pre_s)", "code2": "N, K = map(int, input().split())\nW = [int(input()) for w in range(N)]\n\ndef check(p):\n    i = 0\n    for _ in range(K):\n        s = 0\n        while s + W[i] <= p:\n            s += W[i]\n            i += 1\n            if i == N:\n                return N\n    return i\n\nleft = 0\nright = 100000 * 10000\nmid = 0\nwhile 1 < right - left:\n    mid = (left + right) / 2\n    v = check(mid)\n    if v >= N:\n        right = mid\n    else:\n        left = mid\n\nprint(int(right))\n", "label": 1, "name1": "s671645015.py", "name2": "s152551733.py"}, {"id": 652, "code1": "n=int(raw_input())\ng=[[1000000]*n for _ in xrange(n)]\nfor i in xrange(n):\n    g[i][i]=0\nfor i in xrange(n):\n    r=map(int,raw_input().split())\n    for j in r[2:]:\n        g[r[0]-1][j-1]=1\nfor k in xrange(n):\n    for i in xrange(n):\n        for j in xrange(n):\n            g[i][j]=min(g[i][j],g[i][k]+g[k][j])\nm=int(raw_input())\nfor i in xrange(m):\n    s,d,v=map(int,raw_input().split())\n    s-=1\n    d-=1\n    if g[s][d]<v:\n        print(g[s][d]+1)\n    else:\n        print('NA')", "code2": "import math, sys\n\ndef loadable(w, n, k, p, wsum):\n    wait = 0\n    for i in range(n):\n        wait += w[i]\n        wsum -= w[i]\n        if wait > p:\n            k -= 1\n            wait = w[i]\n            if k == 0 or p < wsum / k:\n                return False\n    return True\n\nn, k = map(int, sys.stdin.readline().split())\nw = [int(sys.stdin.readline()) for _ in range(n)]\n\nwsum = sum(w)\n\np = max(int(math.ceil(wsum / k)), max(w))\npre_f = p -1\npre_s = None\n\nwhile True:\n    if loadable(w, n, k, p, wsum):\n        pre_s = p\n    else:\n        pre_f = p\n\n    if pre_s != None and pre_s - pre_f == 1:\n            break\n    \n    if pre_s:\n        p = int((pre_s + pre_f) / 2)\n    else:\n        p = math.ceil(p * 1.01)\n    \nprint(pre_s)", "label": 0, "name1": "s227640621.py", "name2": "s671645015.py"}, {"id": 551, "code1": "def main():\n    n=int(input())\n    m=int((2*n)**0.5)\n    if m*(m+1)==n*2:\n        print(\"Yes\")\n        m+=1\n        print(m)\n    else:\n        print(\"No\")\n        exit()\n    \n    ans=[[m-1] for i in range(m)]\n    c=1\n    for i in range(m):\n        for j in range(i+1,m):\n            ans[i].append(c)\n            ans[j].append(c)\n            c+=1\n    for i in ans:\n        print(\" \".join(map(str,i)))\n\n\nif __name__ == '__main__':\n    main()\n\n\n\n\n\n\n", "code2": "import sys\nimport collections as col\nnum = []\nfor line in sys.stdin:\n\ttako = line[:-1].split(\",\")\n\tnum.append(tako[1])\ntako = col.Counter(num)\na = tako[\"O\"]\ntako[\"O\"] = tako[\"AB\"]\ntako[\"AB\"] = a\nfor i in tako.items():\n\tprint i[1]", "label": 0, "name1": "s694753497.py", "name2": "s223119670.py"}, {"id": 637, "code1": "n = int(input())\nt = list(map(int, input().split()))\na = list(map(int, input().split()))\nmod = 10 ** 9 + 7\n\nans, frag = 1, 0\nfor i in range(n):\n    if t[i] == a[i] == t[-1] == a[0]:\n        frag = 1\n    if 0 < i < n - 1 and t[i - 1] == t[i] and a[i] == a[i + 1]:\n        ans = ans * min(t[i], a[i]) % mod\nprint(ans * frag)\n", "code2": "from itertools import permutations\nn = int(input())\np = tuple(map(int, input().split()))\nq = tuple(map(int, input().split()))\n\nfor n, i in enumerate(permutations(sorted(p))):\n    if i == p:\n        pn = n\n\nfor n, i in enumerate(permutations(sorted(q))):\n    if i == q:\n        qn = n\nprint(abs(pn-qn))\n", "label": 0, "name1": "s894086979.py", "name2": "s199679379.py"}, {"id": 923, "code1": "# ARC075C - Bugged (ABC063C)\ndef main():\n    n = int(input())\n    lst = list(map(int, [input().rstrip() for _ in range(n)]))\n    total = sum(lst)\n    if total % 10 != 0:\n        print(total)\n    else:\n        ans = 0\n        for i in set(lst):\n            if (total - i) % 10 != 0:\n                ans = max(ans, total - i)\n        print(ans)\n\n\nif __name__ == \"__main__\":\n    main()", "code2": "N = int(input())\nMOD = 10**9 + 7\n\nfact = [1]*(N+1)\n\nfor i in range(1, N+1):\n    fact[i] = r = i*fact[i-1] % MOD\n\ncnts = [0]*(N+1)\nrev = 1\nfor K in range(N-1, (N+1)//2-1, -1):\n    cnts[K] = fact[K]*fact[K-1]*rev % MOD\n    rev = rev * (2*K-N) * (2*K-N-1) % MOD\n\nans = 0\nfor K in range((N+1)//2, N):\n    ans += (cnts[K] - cnts[K-1]) * K % MOD\n    ans %= MOD\nans = (ans * pow(fact[N-2], MOD-2, MOD)) % MOD\nprint(ans)", "label": 0, "name1": "s165497353.py", "name2": "s911857403.py"}, {"id": 149, "code1": "#!/usr/bin/env python\n# -*- coding: utf-8 -*-\nimport math\n\ndef sieve_of_erastosthenes(num):\n    input_list = [False if i % 2 == 0 or i % 3 == 0 or i % 5 == 0 else True for i in range(num)]\n    input_list[0] = input_list[1] = False\n    input_list[2] = input_list[3] = input_list[5] = True\n    sqrt = math.sqrt(num)\n\n    for serial in range(3, num, 2):\n        if serial >= sqrt:\n            return input_list\n        for s in range(serial ** 2, num, serial): \n            input_list[s] = False\n\nprimeTable = sieve_of_erastosthenes((10**6))\n\nwhile True:\n    n = int(input())\n    if n == 0:\n        break\n    print(sum([1 if primeTable[i] == True else 0 for i in range(n+1,2*n+1)]))", "code2": "m=246912\np=[1]*m\np[0]=p[1]=0\nfor i in range(2,int(m**0.5)+1):\n    if p[i]:\n        for j in range(i*i,m,i):\n            p[j]=0\nwhile 1:\n    n=int(input())\n    if n==0:break\n    print(sum(p[n+1:2*n+1]))", "label": 1, "name1": "s839739261.py", "name2": "s770583749.py"}, {"id": 588, "code1": "from collections import defaultdict, deque, Counter\nfrom heapq import heappush, heappop, heapify\nfrom bisect import bisect_right, bisect_left\nimport random\nfrom itertools import permutations, accumulate, combinations, product\nimport sys\nimport string\nfrom bisect import bisect_left, bisect_right\nfrom math import factorial, ceil, floor, gamma, log\nfrom operator import mul\nfrom functools import reduce\nfrom copy import deepcopy\n\nsys.setrecursionlimit(2147483647)\nINF = 10 ** 20\ndef LI(): return list(map(int, sys.stdin.readline().split()))\ndef I(): return int(sys.stdin.readline())\ndef LS(): return sys.stdin.buffer.readline().rstrip().split()\ndef S(): return sys.stdin.buffer.readline().rstrip().decode('utf-8')\ndef IR(n): return [I() for i in range(n)]\ndef LIR(n): return [LI() for i in range(n)]\ndef SR(n): pass\ndef LSR(n): return [LS() for i in range(n)]\ndef SRL(n): return [list(S()) for i in range(n)]\ndef MSRL(n): return [[int(j) for j in list(S())] for i in range(n)]\nmod = 10 ** 9 + 7\n\nn = I()\n\nfac = [1] * (n + 1)\ninv = [1] * (n + 1)\nfor j in range(1, n + 1):\n    fac[j] = fac[j-1] * j % mod\n\n\ninv[n] = pow(fac[n], mod-2, mod)\nfor j in range(n-1, -1, -1):\n    inv[j] = inv[j+1] * (j+1) % mod\n\n\ndef comb(n, r):\n    if r > n or n < 0 or r < 0:\n        return 0\n    return fac[n] * inv[n - r] * inv[r] % mod\n\ns = input()\ndp = [[0] * n for _ in range(n)]\ndp[0][0] = 1\nfor i in range(1, n):\n    ret = 0\n    if s[i - 1] == \"<\":\n        for j in range(i - 1, -1, -1):\n            ret += dp[i - 1][j]\n            ret %= mod\n            dp[i][j] = ret\n    else:\n        for j in range(i):\n            ret += dp[i - 1][j]\n            dp[i][j + 1] = ret\n        dp[i][i] = ret\n\nprint(sum(dp[-1]) % mod)\n", "code2": "\n\ndef isPrime(n):\n    if n <= 1:\n        return False \n    if n == 2:\n        return True\n    if n % 2 == 0:\n        return False\n\n    i = 3\n    while i * i <= n :\n        if n % i == 0:\n            return False \n        i += 1\n\n    return True        \n# end of isPrime\n\nwhile True:\n    n = input()\n    if n == 0:break\n\n    ans = 0\n    for i in range(n + 1, n * 2 + 1):\n        if isPrime(i):ans += 1\n\n    print ans", "label": 0, "name1": "s321259797.py", "name2": "s415543076.py"}, {"id": 815, "code1": "N = int(input())\nA = list(map(int, input().split()))\nB = list(map(int, input().split()))\n\nplus_2 = 0\nminus = 0\nfor a, b in zip(A, B):\n    if a < b:\n        plus_2 += (b-a)//2\n    else:\n        minus += a-b\n\nif plus_2 >= minus:\n    print('Yes')\nelse:\n    print('No')", "code2": "#\n# abc054 c\n#\n\nimport sys\nfrom io import StringIO\nimport unittest\nimport itertools\n\n\nclass TestClass(unittest.TestCase):\n    def assertIO(self, input, output):\n        stdout, stdin = sys.stdout, sys.stdin\n        sys.stdout, sys.stdin = StringIO(), StringIO(input)\n        resolve()\n        sys.stdout.seek(0)\n        out = sys.stdout.read()[:-1]\n        sys.stdout, sys.stdin = stdout, stdin\n        self.assertEqual(out, output)\n\n    def test_\u5165\u529b\u4f8b_1(self):\n        input = \"\"\"3 3\n1 2\n1 3\n2 3\"\"\"\n        output = \"\"\"2\"\"\"\n        self.assertIO(input, output)\n\n    def test_\u5165\u529b\u4f8b_2(self):\n        input = \"\"\"7 7\n1 3\n2 7\n3 4\n4 5\n4 6\n5 6\n6 7\"\"\"\n        output = \"\"\"1\"\"\"\n        self.assertIO(input, output)\n\n\ndef resolve():\n    N, M = map(int, input().split())\n    P = [list(map(int, input().split())) for _ in range(M)]\n\n    R = itertools.permutations(range(1, N+1))\n\n    ans = 0\n    for r in R:\n        flag = True\n        r = list(r)\n        if r[0] != 1:\n            break\n        for i in range(1, N):\n            for p in P:\n                if (r[i-1] == p[0] and r[i] == p[1]) or (r[i-1] == p[1] and r[i] == p[0]):\n                    break\n            else:\n                flag = False\n        if flag == True:\n            ans += 1\n\n    print(ans)\n\n\nif __name__ == \"__main__\":\n    # unittest.main()\n    resolve()\n", "label": 0, "name1": "s301247411.py", "name2": "s851959667.py"}, {"id": 356, "code1": "from sys import stdin, setrecursionlimit\n\n\ndef main():\n    input = stdin.buffer.readline\n    x, y = map(int, input().split())\n    count = 0\n    tmp = x\n    while tmp <= y:\n        tmp *= 2\n        count += 1\n    print(count)\n\n\nif __name__ == \"__main__\":\n    setrecursionlimit(10000)\n    main()\n", "code2": "X,Y = map(int,input().split())\na = X\nans = 1\nwhile True:\n    a *= 2\n    if a > Y: break\n    ans += 1\nprint(ans)\n", "label": 1, "name1": "s379690682.py", "name2": "s536240149.py"}, {"id": 191, "code1": "n = int(input())\nS = list(map(int, input().split()))\ns = sorted(S, reverse=True)\n\nif n %2 ==0:\n  l = n/2\n  m = s[0]\n  s = s[1:int(l)]\n  p = sum(s)\n  o = p*2 + m \n  print(o)\nelse:\n  l = (n+1)/2\n  m = s[0]\n  q = s[int(l)-1]\n  s = s[1:int(l-1)]\n  p = sum(s)\n  o = p*2 + m +q\n  print(o)\n  ", "code2": "n=int(input())\nl=list(map(int,input().split()))\nl.sort()\n\nsum=l[-1]\nfor i in range(1,n//2):\n  sum+=2*l[-1-i]\nif n%2!=0:\n  sum+=l[n//2]\nprint(sum)", "label": 1, "name1": "s142787879.py", "name2": "s279247107.py"}, {"id": 862, "code1": "from sys import stdin\ninput = stdin.readline\n\n\ndef main():\n  N, M = list(map(int, input().split()))\n  PS = []\n  for i in range(M):\n    p, s = input().split()\n    PS.append((int(p)-1, s))\n\n  penas = [0]*(N)\n  is_ac = [0]*(N)\n  for i in range(M):\n    p, s = PS[i]\n    if s == 'AC':\n      is_ac[p] = True\n    elif not is_ac[p]:\n      penas[p] += 1\n\n  num_ac = sum(is_ac)\n  num_pe = 0\n\n  for i in range(N):\n    if is_ac[i]:\n      num_pe += penas[i]\n\n  print(num_ac, num_pe)\n\n\nif(__name__ == '__main__'):\n  main()\n", "code2": "# -*- coding: utf-8 -*-\n\nimport sys\nimport os\nimport math\n\nn = int(input())\nif n == 1:\n    # 4\n    print(4)\n    print(2)\nelif n == 2:\n    # 8, 9\n    print(8)\n    print(4)\n    print(3)\nelse:\n    a = 1\n    for i in range(1, n + 2):\n        a *= i\n    print(a - n - 1)\n\n    for i in range(n + 1, 1, -1):\n        print(i)", "label": 0, "name1": "s655608530.py", "name2": "s101680760.py"}, {"id": 846, "code1": "from bisect import bisect_left, bisect\nn, l, t = map(int, input().split())\nants = [list(map(int, input().split())) for _ in range(n)]\nbnts = []\ndiff = []\n\nfor i in range(n):\n\tx, w = ants[i][0], 3 - 2*ants[i][1]\n\tbnts.append((x + t*w) % l)\n\tif i == 0:\n\t\tzero = bnts[-1]\n\tif ants[i][1] != ants[0][1]:\n\t\tif ants[0][1] == 1:\n\t\t\tdiff.append(x - ants[0][0])\n\t\telse:\n\t\t\tdiff.append(l - (x - ants[0][0]))\n\nbnts.sort()\nnum = 0\nquo, mod = t//l, t%l\nnum += quo * len(diff) * 2\ndiff.sort()\ndiff += [d+l for d in diff]\n#num += bisect_left(diff, mod*2)\nnum += bisect(diff, mod*2)\nnum %= n\nfor i in range(n):\n\tif bnts[i] == zero:\n\t\tif ants[0][1] == 1:\n\t\t\ttrue_zero = (i-num) % n\n\t\telse:\n\t\t\tif i < n-1:\n\t\t\t\tif bnts[i+1] == zero:\n\t\t\t\t\t#pass\n\t\t\t\t\tnum -= 1\n\t\t\ttrue_zero = (i+num) % n\n\nans = bnts[true_zero:] + bnts[:true_zero]\nprint(*ans, sep=\"\\n\")", "code2": "from fractions import gcd \n\n\nn = int(input())\nl = list(map(int, input().split()))\nnum = 0\nfor i in range(len(l)):\n    num = gcd(num, l[i])\n\nprint(num)", "label": 0, "name1": "s998286865.py", "name2": "s849557734.py"}, {"id": 192, "code1": "from sys import stdin\n\n\ndef main():\n    input = lambda: stdin.readline()[:-1]\n    N = int(input())\n    A = list(map(int, input().split()))\n\n    A.sort(reverse=1)\n    d, m = divmod(N, 2)\n    n = [2] * (d + m)\n    n[-1], n[0] = n[-1] - m, 1\n    ans = 0\n    for i, k in enumerate(n):\n        ans += A[i] * k\n    print(ans)\n\n\nmain()\n", "code2": "import math\nN = int(input())\nA = list(map(int,input().split()))\nA.sort(reverse = True)\n\nans = 0\nfor i in range(1,N):\n  a = math.floor(i/2)\n  ans += A[a]\n    \nprint(ans)", "label": 1, "name1": "s775405634.py", "name2": "s069304778.py"}, {"id": 217, "code1": "import itertools\n\nN = int(input())\nP = tuple(map(int, input().split()))\nQ = tuple(map(int, input().split()))\n\nfor i, pat in enumerate(itertools.permutations(range(1, N + 1)), N):\n    if pat == P:\n        a = i\n    if pat == Q:\n        b = i\n\nans = abs(a - b)\n\nprint(ans)\n", "code2": "n = int(input())\np = tuple(map(int, input().split()))\nq = tuple(map(int, input().split()))\n\nimport itertools\nr = list(itertools.permutations(range(1, n+1)))\n\np_place = r.index(p)\nq_place = r.index(q)\nanswer = abs(p_place-q_place)\nprint(answer)", "label": 1, "name1": "s509770499.py", "name2": "s558804624.py"}, {"id": 43, "code1": "while True:\n    n = int(input())\n    if n == 0:\n        break\n    scores = list(map(int, input().split()))\n    m = sum(scores) / n\n    dev = list((i - m) for i in scores)\n    var = sum((i ** 2) for i in dev) / n\n    stdev = var ** 0.5\n    print(stdev)\n\n", "code2": "import sys\nimport math\n\ndef str_input():\n    S = raw_input()\n    if S[len(S)-1] == \"\\r\":\n        return S[:len(S)-1]\n    return S\n\ndef float_to_str(num):\n    return str(\"{:.10f}\".format(num))\n\ndef list_input(tp):\n    return map(tp, str_input().split())\n\n# # # # # # # # # # # # # # # # # # # # # # # # #\n\nwhile 1:\n    n = input()\n\n    if n == 0:\n        break\n\n    s = list_input(float)\n    m = sum(s) / n\n    s = map(lambda x: x-m, s)\n    s = map(lambda x: x*x, s)\n    s = map(lambda x: x/n, s)\n    \n    print float_to_str(math.sqrt(sum(s)))", "label": 1, "name1": "s320188133.py", "name2": "s976131338.py"}, {"id": 326, "code1": "a,b,c = map(int,input().split())\n\nprint(min(a+b,b+c,c+a))\n", "code2": "a, b, c = map(int, input().split())\nprint(min(a + b, a + c, b + c))", "label": 1, "name1": "s223078477.py", "name2": "s641848335.py"}, {"id": 697, "code1": "import sys\ninput = sys.stdin.readline\n\nn, m = map(int, input().split())\nl = list(map(int, input().split()))\n\nif n >= m:\n    print(0)\n    sys.exit()\n    \nl.sort()\nle = len(l) - 1\nnl = [0] * le\nfor i in range(0, len(l) - 1):\n    nl[i] = l[i + 1] - l[i]\n    \nnl.sort()\nprint(sum(nl[:le - n + 1]))", "code2": "a, b, c = map(int, input().split())\nans = c - (a - b)\n\nif ans >= 0:\n    print(ans)\nelse:\n    print(0)", "label": 0, "name1": "s202166785.py", "name2": "s855957951.py"}, {"id": 580, "code1": "\n\ndef main():\n    n, K = map(int, input().split())\n    a = list(map(int, input().split()))\n\n    # dp[i] is true if First player wins with i tiles left\n    dp = [False]*(K+1)\n    for k in range(1, K+1):\n        for i in a:\n            if k >= i and not dp[k-i]:\n                dp[k] = True\n    print(['Second', 'First'][dp[K]])\n\n\nif __name__ == \"__main__\":\n    main()\n", "code2": "def f(n, s):\n    md = 10 ** 9 + 7\n    dp = [1] * n\n    for i in range(n - 1):\n        if s[i] == \"<\":\n            L = dp[0]\n            for dpi in range(1, n - i - 1):\n                dp[dpi] = L = (dp[dpi] + L) % md\n            dp = dp[:-1]\n        else:\n            R = dp[-1]\n            for dpi in range(n - i - 2, 0, -1):\n                dp[dpi] = R = (dp[dpi] + R) % md\n            dp = dp[1:]\n    print(dp[0])\n\n\nn = int(input())\ns = input()\nf(n, s)\n", "label": 0, "name1": "s700864010.py", "name2": "s415178183.py"}, {"id": 76, "code1": "#coding:utf-8\nimport numpy as np\nn = int(input())\n\n\na = np.ones((2,1)).astype(np.int)\na[-1][-1]+len(a)\ni = 1\nwhile(1):\n    if len(a)>=500:\n        break\n    if n==a[-1][-1]:\n        print (\"Yes\")\n        print (len(a))\n        for line in a:\n            print (i,\" \".join(line.astype(np.str).tolist()))\n        exit()\n    i+=1\n    temp = int((1/2)*i*(i+1))\n    add = np.array((list(range(temp-i+1,temp+1))))\n\n    a = np.c_[a,add]\n    a = np.r_[a,add.reshape(1,-1)]\nprint (\"No\")\n", "code2": "import sys\n\nread = sys.stdin.read\nreadline = sys.stdin.readline\nreadlines = sys.stdin.readlines\nsys.setrecursionlimit(10 ** 9)\nINF = 1 << 60\n\n\ndef main():\n    N = int(readline())\n    K = int((1 + (8 * N + 1) ** 0.5) / 2)\n    if not N == K * (K - 1) // 2:\n        print('No')\n        return\n\n    num = 1\n    ans = [[0] * (K - 1) for _ in range(K - 1)]\n    for i in range(K - 1):\n        for j in range(i + 1):\n            ans[i][j] = ans[j][i] = num\n            num += 1\n    \n    print('Yes')\n    print(K)\n    for row in ans:\n        print(K - 1, *row)\n    tmp = [ans[i][i] for i in range(K - 1)]\n    print(K - 1, *tmp)\n\n\nif __name__ == '__main__':\n    main()\n", "label": 1, "name1": "s037954477.py", "name2": "s987242186.py"}, {"id": 105, "code1": "import math\na, b, c = map(int, input().split())\nh = b * math.sin(math.radians(c))\nprint(a * h / 2)\nprint(a + b + math.sqrt((a-b*math.cos(math.radians(c)))**2 + h**2))\nprint(h)\n\n", "code2": "a, b, C =map(float,input().split())\nimport math\nsinC = math.sin(math.radians(C))\nS = a*b*sinC*0.5\nc = (a**2 + b**2 -2*a*b*math.cos(math.radians(C)))**0.5\nL = a+b+c\nh = S*2/a\nprint(S)\nprint(L)\nprint(h)\n", "label": 1, "name1": "s253160566.py", "name2": "s788805416.py"}, {"id": 677, "code1": "a,b,c,k=map(int,input().split())\nc_=max(0,k-a-b)\na_=min(a,k)\nprint(a_-c_)", "code2": "while True:\n    n,x = map(int,raw_input().split())\n    count = 0;\n    if n == 0 and x == 0:break\n    for i in range(1,n + 1):\n        for j in range(1,n + 1):\n            if i == j:break\n            for k in range(1,n + 1):\n                if j == k:break\n                if i + j + k == x:\n                    count+=1\n                    break\n    print count", "label": 0, "name1": "s535747622.py", "name2": "s748079428.py"}, {"id": 970, "code1": "from bisect import bisect_left\nfrom bisect import bisect_right\nN = int(input())\nA = sorted(list(map(int,input().split())))\nB = sorted(list(map(int,input().split())))\nC = sorted(list(map(int,input().split())))\n\nans = 0\nfor i in range(N):\n  ans += bisect_left(A, B[i]) * (N - bisect_right(C, B[i]))\n  \nprint(ans)", "code2": "# coding: utf-8\n# Your code here!\nn,a,b=map(int,input().split())\nh=[]\nfor i in range(n):\n    x=int(input())\n    h.append(x)\n\ndef check(t):\n    c=0\n    for i in range(n):\n        c+=1+(max(0,h[i]-b*t)-1)//(a-b)\n    return t>=c\n\nl=0\nr=3+max(h)//b\nwhile r-l>1:\n    mid=(r-l)//2+l\n    if check(mid):\n        r=mid\n    else:\n        l=mid\nans=l\nif check(r):\n    ans=r\nprint(ans)\n\n", "label": 0, "name1": "s313857544.py", "name2": "s031897610.py"}, {"id": 408, "code1": "iN = int(input())\naA = [0] + [int(_) for _ in input().split()] + [0]\niAll = sum(map(lambda i :abs(aA[i+1]-aA[i]),range(iN+1)))\nprint(\"\\n\".join(map(lambda i:str( iAll - abs(aA[i-1]-aA[i]) - abs(aA[i]-aA[i+1]) + abs(aA[i-1]-aA[i+1])), range(1,iN+1))))\n", "code2": "n = int(input())\na = list(map(int, input().split()))\na.insert(n,0)\na.insert(0,0)\nsum = 0\nfor i in range(n+1):\n    sum += abs(a[i+1] -a[i])\nfor i in range(n):\n    print(sum - abs(a[i+1] - a[i]) - abs(a[i+2] - a[i+1]) + abs(a[i+2] - a[i]))", "label": 1, "name1": "s167602198.py", "name2": "s465741499.py"}, {"id": 882, "code1": "a,b=input().split()\nprint(\"H\" if a == \"H\" and b == \"H\" or a == \"D\" and b == \"D\" else \"D\")", "code2": "count = 0\nwhile count < 1000:\n\tprint \"Hello World\"\n\tcount = count + 1", "label": 0, "name1": "s207996026.py", "name2": "s042038863.py"}, {"id": 412, "code1": "n = int(input())\na = list(map(int, input().split()))\na.insert(n,0)\na.insert(0,0)\nsum = 0\nfor i in range(n+1):\n    sum += abs(a[i+1] -a[i])\nfor i in range(n):\n    print(sum - abs(a[i+1] - a[i]) - abs(a[i+2] - a[i+1]) + abs(a[i+2] - a[i]))", "code2": "n=int(input())\na=list(map(int,input().split()))\na.insert(0,0)\na.append(0)\nc=0\nx=0\nfor i in range(n+1):\n    c+=abs(a[i+1]-a[i])\nfor i in range(1,n+1):\n    x=c\n    x+=abs(a[i+1]-a[i-1])\n    x-=abs(a[i+1]-a[i])\n    x-=abs(a[i]-a[i-1])\n    print(x)\n", "label": 1, "name1": "s465741499.py", "name2": "s587620024.py"}, {"id": 728, "code1": "import sys\nif sys.platform =='ios':\n\tsys.stdin=open('Untitled.txt')\ninput = sys.stdin.readline\n\n# \u53c2\u7167URL:https://qiita.com/gogotealove/items/11f9e83218926211083a\n\n# n = [int(x) for x in input().rstrip()]\n# op_cnt = len(n) - 1  # \u3059\u304d\u9593\u306e\u500b\u6570\n# ans2 = []\n# for i in range(2 ** op_cnt):\n#     op = [\"\"] * op_cnt  # \u3042\u3089\u304b\u3058\u3081 [\"-\", \"-\", \"-\"] \u3068\u3044\u3046\u30ea\u30b9\u30c8\u3092\u4f5c\u3063\u3066\u304a\u304f\n#     for j in range(op_cnt):\n#         if ((i >> j) & 1):\n#             op[op_cnt - 1 - j] = \"+\"  # \u30d5\u30e9\u30b0\u304c\u7acb\u3063\u3066\u3044\u305f\u7b87\u6240\u3092 \"+\" \u3067\u4e0a\u66f8\u304d\n#     ans2.append(op)\n# for a in ans2:\n# \tprint(a)\n\nS = input().rstrip() # \u5165\u529b\u5024 \"1234\\n\" \u3092 \"1234\"\u306b\nn = len(S)-1 # \u30aa\u30da\u30ec\u30fc\u30bf\u304c\u5165\u308a\u3046\u308b\u9699\u9593\u306flen(S)-1\n\nops = []\nfor i in range(2**n): # \u5404\u9699\u9593\u306b\u5bfe\u3057\u3066\u3001 +\u3059\u308b\u3057\u306a\u3044\u306e2\u901a\u308a\u304c\u3042\u308b\u306e\u3067\u30012^n \u56de\u30eb\u30fc\u30d7\n\top = [\"\"] * n # \u3042\u3089\u304b\u3058\u3081\u30ea\u30b9\u30c8\u3092\u4f5c\u6210\n\tfor j in range(n):\n\t\tif((i>>j) & 1) == 1:  # \u9806\u306b\u53f3\u306b\u30b7\u30d5\u30c8\u3055\u305b\u6700\u4e0b\u4f4dbit\u306e\u30c1\u30a7\u30c3\u30af\u3092\u884c\u3046\n\t\t\top[n-1-j] = \"+\" # \u30d5\u30e9\u30b0\u304c\u7acb\u3063\u3066\u3044\u305f\u3089op\u306e\u5024\u3092\u66f8\u304d\u63db\u3048\u308b\n\tops.append(op)\n\n# \u3053\u3053\u307e\u3067\u3067 ops \u306e\u4e2d\u306b\u3042\u308a\u3046\u308b\u7d44\u307f\u5408\u308f\u305b\u304c\u5217\u6319\u3055\u308c\u308b\uff08\u4ee5\u4e0b\u306flen(S)-1==3\u306e\u4f8b\uff09\n# ['', '', '']\n# ['', '', '+']\n# ['', '+', '']\n# ['', '+', '+']\n# ['+', '', '']\n# ['+', '', '+']\n# ['+', '+', '']\n# ['+', '+', '+']\n\nans = 0\nfor o in ops:\n\ts = [s for s in S]\n\tfor k in range(len(o)):\n\t\ts.insert(2*k+1, o[k])\n\tans += eval(''.join(s)) # eval \u3092\u5229\u7528\u3059\u308b\u3053\u3068\u3067\u6587\u5b57\u5217\u3092\u5f0f\u3068\u3057\u3066\u8a55\u4fa1\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u308b\n\nprint(ans)", "code2": "\nX, Y = list(map(int, input().split()))\n\nans = 0\nwhile X <= Y:\n\tX *= 2\n\tans += 1\n\nprint(ans)", "label": 0, "name1": "s854607235.py", "name2": "s831535184.py"}, {"id": 838, "code1": "N = int(input())\narray = list(map(int, input().split()))\ncnt = 0 \nfor i in range(N):\n\tminij = i \n\tfor j in range(i, N):\n\t\tif array[j] < array[minij]:\n\t\t\tminij = j \n\tif minij != i:\n\t\tarray[i], array[minij] = array[minij], array[i]\n\t\tcnt += 1\n\nprint(' '.join(map(str, array)))\nprint( \"%d\" % (cnt))\n\n", "code2": "N,L,T=map(int,input().split())\nX=[0 for i in range(N)]\nW=[0 for i in range(N)]\nD=0\nfor i in range(N):\n    X[i],W[i]=map(int,input().split())\n    W[i]=-2*W[i]+3\n    D+=(X[i]+T*W[i])//L\nD%=N\nY=sorted([((T*W[i])+X[i])%L for i in range(N)])\nfor i in range(N):\n    print(Y[(D+i)%N])", "label": 0, "name1": "s260667176.py", "name2": "s426678095.py"}, {"id": 187, "code1": "a,b=map(int,input().split())\nif b >= a:\n  print(a)\nelse:\n  print(a-1)", "code2": "a,b=map(int,input().split());print(a-(a>b))", "label": 1, "name1": "s714654685.py", "name2": "s930325906.py"}, {"id": 693, "code1": "N,M = map(int,(input().split()))\nX = list(map(int,(input().split())))\nX.sort()\nif M > N:\n    dist = [X[i+1]-X[i] for i in range(M - 1)]\n    dist.sort(reverse = True)\n    del dist[0:N-1]\n    print(sum(dist))\nelse:\n print(0)", "code2": "class UnionFind():\n  def __init__(self, n):\n    self.n = n\n    self.parents = [-1] * n\n\n  def find(self, x):\n    if self.parents[x] < 0:\n      return x\n    else:\n      self.parents[x] = self.find(self.parents[x])\n      return self.parents[x]\n\n  def union(self, x, y):\n    x = self.find(x)\n    y = self.find(y)\n\n    if x == y:\n      return\n\n    if self.parents[x] > self.parents[y]:\n      x, y = y, x\n\n    self.parents[x] += self.parents[y]\n    self.parents[y] = x\n\n  def size(self, x):\n    return -self.parents[self.find(x)]\n\n  def same(self, x, y):\n    return self.find(x) == self.find(y)\n\n  def members(self, x):\n    root = self.find(x)\n    return [i for i in range(self.n) if self.find(i) == root]\n\n  def roots(self):\n    return [i for i, x in enumerate(self.parents) if x < 0]\n\n  def group_count(self):\n    return len(self.roots())\n\n  def all_group_members(self):\n    return {r: self.members(r) for r in self.roots()}\n\n  def __str__(self):\n    return '\\n'.join('{}: {}'.format(r, self.members(r)) for r in self.roots())\n\nn, m = map(int, input().split())\nuf = UnionFind(n)\n\nfor _ in range(m):\n  a, b = map(int, input().split())\n  uf.union(a-1,b-1)\n  \nprint(uf.group_count() - 1)\n\n", "label": 0, "name1": "s025338416.py", "name2": "s813737955.py"}, {"id": 715, "code1": "import sys\n#input = sys.stdin.readline\n\ndef inpl(): return list(map(int, input().split()))\nQ = int(input())\n \nMOD = 10**6 + 3\ndef cmb(n, r, mod):\n    if ( r<0 or r>n ):\n        return 0\n    \n    r = min(r, n-r)\n    return g1[n] * g2[r] * g2[n-r] % mod\n \nsize = MOD + 1\ng1, g2, inverse = [0]*size, [0]*size, [0]*size\n \ng1[:2] = [1, 1] # \u5143\u30c6\u30fc\u30d6\u30eb\ng2[:2] = [1, 1] #\u9006\u5143\u30c6\u30fc\u30d6\u30eb\ninverse[:2] = [0, 1] #\u9006\u5143\u30c6\u30fc\u30d6\u30eb\u8a08\u7b97\u7528\u30c6\u30fc\u30d6\u30eb\n\nfor i in range(2, size):\n    g1[i] =  ( g1[i-1] * i ) % MOD \n    inverse[i] = (-inverse[MOD % i] * (MOD//i) ) % MOD \n    g2[i] =  (g2[i-1] * inverse[i]) % MOD\n\nfor _ in range(Q):\n    x, d, n = inpl()\n    xd = x*inverse[d]%MOD\n    if d != 0:\n        if n < ((MOD-x)*inverse[d] + 1)%MOD:\n            n = n%MOD\n            print((g1[(xd + n - 1)%MOD] * g2[(xd-1)%MOD] * pow(d, n, MOD))%MOD)\n        else:\n            print(0)\n    else:\n        print(pow(x, n, MOD))", "code2": "S = input()\n\nl = len(S)\nS_list = list(map(int, S))\n\nans = 0\n\nfor i in range(l):\n    num = int(S_list[-i-1])\n\n    for j in range(i+1):\n        ans += num * (10 ** (j)) * (2 ** (max(l-1-j-1, l-1-i)))\n\nprint(ans)\n", "label": 0, "name1": "s890996219.py", "name2": "s174681493.py"}, {"id": 392, "code1": "a,b,x=map(int,input().split())\n\nq1,r1=divmod(a,x)\nq2,_=divmod(b,x)\n\nprint(q2-q1+(r1==0))", "code2": "a,b,x = map(int,input().split())\ndef count(c):\n  if c==0:\n    return 0\n  return c//x\nprint(count(b)-count(a-1))", "label": 1, "name1": "s935190491.py", "name2": "s912221426.py"}, {"id": 612, "code1": "a=b=0\nfor i in input():c=i==\"T\";d=a>0;a+=1-c-c*d;b+=c*(1-d)\nprint(a+b)", "code2": "a, b = map(int, input().split())\n\nprint(a - int(a > b))\n\n", "label": 0, "name1": "s373261912.py", "name2": "s523849066.py"}, {"id": 958, "code1": "n,m,k=map(int,input().split())\nn,m=min(n,m),max(n,m)\nfor i in range(n//2+n%2):\n  num,dem=k-i*m,n-2*i\n  if num%dem or not(0<=num//dem<=m):continue\n  print(\"Yes\");exit()\nprint(\"No\")", "code2": "n,c=map(int,input().split())\nd=[list(map(int,input().split()))for _ in range(c)]\ncc=[list(map(int,input().split()))for _ in range(n)]\nans=10**15\ncnt=[[0]*c for _ in range(3)]\nfor i in range(n):\n\tfor j in range(n):\n\t\tcnt[(i+j)%3][cc[i][j]-1]+=1\nfor i in range(c):\n\tfor j in range(c):\n\t\tfor k in range(c):\n\t\t\tpre_ans=0\n\t\t\tif i==j or j==k or k==i:\n\t\t\t\tcontinue\n\t\t\tfor l in range(3):\n\t\t\t\tfor m in range(c):\n\t\t\t\t\tif l%3==0 and m!=i:\n\t\t\t\t\t\tpre_ans+=cnt[l][m]*d[m][i]\n\t\t\t\t\telif l%3==1 and m!=j:\n\t\t\t\t\t\tpre_ans+=cnt[l][m]*d[m][j]\n\t\t\t\t\telif l%3==2 and m!=k:\n\t\t\t\t\t\tpre_ans+=cnt[l][m]*d[m][k]\n\t\t\tans=min(ans,pre_ans)\nprint(ans)", "label": 0, "name1": "s659941727.py", "name2": "s044679078.py"}, {"id": 734, "code1": "def inpl(): return list(map(int, input().split()))\nN, M = inpl()\nf, n = set(), set()\nfor i in range(M):\n    temp = inpl()\n    if 1 in temp:\n        f.add(temp[1])\n    if N in temp:\n        n.add(temp[0])\nif len(f & n) > 0:\n    print('POSSIBLE')\nelse:\n    print('IMPOSSIBLE')", "code2": "from heapq import heappush,heappop\nINF=10**18\nn,m,r=map(int,input().split())\ne=[[] for _ in range(n)]\nd=[INF]*n\nfor i in range(m):\n  a,b,c=map(int,input().split())\n  e[a].append((b,c))\nq=[]\nheappush(q,(0,r))\nd[r]=0\nwhile q:\n  dist,node=heappop(q)\n  for to,cost in e[node]:\n    if d[to]>cost+dist:\n      d[to]=cost+dist\n      heappush(q,(d[to],to))\nfor i in d:\n  if i!=INF:print(i)\n  else:print('INF')\n", "label": 0, "name1": "s278593598.py", "name2": "s737089154.py"}, {"id": 423, "code1": "import math,string,itertools,fractions,heapq,collections,re,array,bisect,sys,random,time,copy,functools\n\nsys.setrecursionlimit(10**7)\ninf = 10**20\neps = 1.0 / 10**10\nmod = 998244353\ndd = [(0,-1),(1,0),(0,1),(-1,0)]\nddn = [(0,-1),(1,-1),(1,0),(1,1),(0,1),(-1,-1),(-1,0),(-1,1)]\n\ndef LI(): return [int(x) for x in sys.stdin.readline().split()]\ndef LI_(): return [int(x)-1 for x in sys.stdin.readline().split()]\ndef LF(): return [float(x) for x in sys.stdin.readline().split()]\ndef LS(): return sys.stdin.readline().split()\ndef I(): return int(sys.stdin.readline())\ndef F(): return float(sys.stdin.readline())\ndef S(): return input()\ndef pf(s): return print(s, flush=True)\n\n\ndef main():\n    rr = []\n\n    while True:\n        n = I()\n        if n == 0:\n            break\n\n        a = [S().split(':') for _ in range(n)]\n        ts = set([c[0] for c in a])\n        ms = {}\n        for t,m in a:\n            ms[t] = m[:-1].split(',')\n\n        fm = {}\n        def f(c):\n            if c in fm:\n                return fm[c]\n            if c in ts:\n                s = set()\n                for k in ms[c]:\n                    s |= f(k)\n                fm[c] = s\n                return s\n            fm[c] = set([c])\n            return fm[c]\n\n        r = f(a[0][0])\n\n        rr.append(len(r))\n\n    return '\\n'.join(map(str,rr))\n\n\nprint(main())\n\n\n", "code2": "#!/usr/bin/env python3\nfrom collections import defaultdict,deque\nfrom heapq import heappush, heappop\nfrom bisect import bisect_left, bisect_right\nimport sys, random, itertools, math\nsys.setrecursionlimit(10**5)\ninput = sys.stdin.readline\nsqrt = math.sqrt\ndef LI(): return list(map(int, input().split()))\ndef LF(): return list(map(float, input().split()))\ndef LI_(): return list(map(lambda x: int(x)-1, input().split()))\ndef II(): return int(input())\ndef IF(): return float(input())\ndef LS(): return list(map(list, input().split()))\ndef S(): return list(input().rstrip())\ndef IR(n): return [II() for _ in range(n)]\ndef LIR(n): return [LI() for _ in range(n)]\ndef FR(n): return [IF() for _ in range(n)]\ndef LFR(n): return [LI() for _ in range(n)]\ndef LIR_(n): return [LI_() for _ in range(n)]\ndef SR(n): return [input().rstrip()[:-1] for _ in range(n)]\ndef LSR(n): return [LS() for _ in range(n)]\nmod = 1000000007\ninf = 1e10\n\n#solve\ndef solve():\n    n = II()\n    if n == 0:\n        return False\n    group = set()\n    go_group = set()\n    member = set()\n    d = defaultdict(int)\n    g = SR(n)\n    for gi in g:\n        group.add(gi.split(\":\")[0])\n        d[gi.split(\":\")[0]] = gi.split(\":\")[1].split(\",\")\n    C = defaultdict(int)\n    def s(g):\n        for gi in g:\n            if gi in group:\n                if C[gi]:\n                    continue\n                C[gi] = 1\n                s(d[gi])\n            else:\n                member.add(gi)\n    s(d[g[0].split(\":\")[0]])\n    print(len(member))\n    return True\n\n#main\nif __name__ == '__main__':\n    while solve():\n        pass\n\n", "label": 1, "name1": "s451877142.py", "name2": "s728275108.py"}, {"id": 937, "code1": "import itertools\nimport itertools\nimport os\nimport sys\nfrom collections import deque\n\nimport numpy as np\n\nif os.getenv(\"LOCAL\"):\n    sys.stdin = open(\"_in.txt\", \"r\")\n\nsys.setrecursionlimit(2147483647)\nINF = float(\"inf\")\nIINF = 10 ** 18\nMOD = 10 ** 9 + 7\n\nH, W = list(map(int, sys.stdin.readline().split()))\nS = [list(sys.stdin.readline().rstrip()) for _ in range(H)]\nseen = np.zeros((H, W), dtype=bool)\n\nans = 0\nfor h, w in itertools.product(range(H), range(W)):\n    if seen[h][w]:\n        continue\n    que = deque()\n    que.append((h, w))\n    black = white = 0\n    while que:\n        h, w = que.popleft()\n        if seen[h][w]:\n            continue\n        seen[h][w] = True\n        if S[h][w] == '#':\n            black += 1\n        else:\n            white += 1\n        for dh, dw in zip((h + 1, h - 1, h, h), (w, w, w + 1, w - 1)):\n            if 0 <= dh < H and 0 <= dw < W and not seen[dh][dw]:\n                if S[h][w] != S[dh][dw]:\n                    que.append((dh, dw))\n    ans += black * white\nprint(ans)\n", "code2": "import  numpy as np\nD = int(input())\nc = np.array(list(map(int, input().split())))\ns = [list(map(int, input().split())) for _ in range(D)]\nlast_d = np.array([0]*len(c))\n\nans = 0\nfor i in range(D):\n  cc = c*(last_d+i+1)\n  max_c = max(cc)\n  index = np.argmax(cc)\n  print(index + 1)\n  last_d[index] = -(i+1)\n  ans += s[i][index]\n  cc[index] = 0\n  for j in cc:\n    ans -= j\n", "label": 0, "name1": "s726328939.py", "name2": "s137637436.py"}, {"id": 382, "code1": "H,W = list(map(int,input().split()))\n\na = [input() for i in range(H)]\n\nb = [[] for i in range(H)]\nr = [[] for i in range(H)]\nfor i in range(H):\n    for j in range(W):\n        if i==0:\n            b[i].append(\"#\")\n            r[i].append(\".\")\n        elif i==H-1:\n            b[i].append(\".\")\n            r[i].append(\"#\")\n        elif a[i][j]==\"#\":\n            b[i].append(\"#\")\n            r[i].append(\"#\")\n        elif j%2==0:\n            b[i].append(\".\")\n            r[i].append(\"#\")\n        elif j%2==1:\n            b[i].append(\"#\")\n            r[i].append(\".\")\n\nfor i in range(H):\n    ans = \"\"\n    for j in range(W):\n        ans = ans+b[i][j]\n\n    print(ans)\nprint(\"\")\n\nfor i in range(H):\n    ans = \"\"\n    for j in range(W):\n        ans = ans+r[i][j]\n\n    print(ans)\n", "code2": "# coding:utf-8\n\nINF = float('inf')\n\n\ndef inpl(): return list(map(int, input().split()))\n\n\nH, W = inpl()\n\nX = [list(input()) for _ in range(H)]\n\nA = [['.' for _ in range(W)] for _ in range(H)]\nB = [['.' for _ in range(W)] for _ in range(H)]\ntmp = ['#' for _ in range(W - 1)]\nfor i in range(H):\n    if i % 2 == 0:\n        A[i][:-1] = tmp\n        B[i][-1] = '#'\n    else:\n        B[i][1:] = tmp\n        A[i][0] = '#'\n\nfor h in range(H):\n    for w in range(W):\n        if X[h][w] == '#':\n            A[h][w] = '#'\n            B[h][w] = '#'\n\nfor a in A:\n    print(''.join(a))\nprint('')\nfor b in B:\n    print(''.join(b))\n", "label": 1, "name1": "s413122754.py", "name2": "s776974411.py"}, {"id": 678, "code1": "A, B, C, K = list(map(int,input().split()))\nif K <= A:\n  print(K)\nelif K <= (A + B):\n  print(A)\nelif K <= (A + B + C):\n  print(2*A + B - K)\nelse:\n  print(A + B - C)", "code2": "deg = [0] * 4\nfor _ in range(3):\n    a, b = map(int, input().split())\n    deg[a - 1] += 1\n    deg[b - 1] += 1\nif all(x <= 2 for x in deg):\n    print(\"YES\")\nelse:\n    print(\"NO\")\n", "label": 0, "name1": "s098797347.py", "name2": "s546079663.py"}, {"id": 925, "code1": "N=int(input())\ns=[]\nfor _ in range(N):\n    s.append(int(input()))\n\ns=sorted(s)\nimport sys\nif sum(s)%10!=0:\n    print(sum(s))\n    sys.exit()\nelse:\n    ans=sum(s)\n    for i in range(len(s)):\n        if s[i]%10==0:\n            pass\n        else:\n            ans-=s[i]\n            print(ans)\n            sys.exit()\nprint(0)\n        ", "code2": "import itertools\nimport itertools\nimport os\nimport sys\nfrom collections import deque\n\nimport numpy as np\n\nif os.getenv(\"LOCAL\"):\n    sys.stdin = open(\"_in.txt\", \"r\")\n\nsys.setrecursionlimit(2147483647)\nINF = float(\"inf\")\nIINF = 10 ** 18\nMOD = 10 ** 9 + 7\n\nH, W = list(map(int, sys.stdin.readline().split()))\nS = [list(sys.stdin.readline().rstrip()) for _ in range(H)]\nseen = np.zeros((H, W), dtype=bool)\n\nans = 0\nfor h, w in itertools.product(range(H), range(W)):\n    if seen[h][w]:\n        continue\n    que = deque()\n    que.append((h, w))\n    black = white = 0\n    while que:\n        h, w = que.popleft()\n        if seen[h][w]:\n            continue\n        seen[h][w] = True\n        if S[h][w] == '#':\n            black += 1\n        else:\n            white += 1\n        for dh, dw in zip((h + 1, h - 1, h, h), (w, w, w + 1, w - 1)):\n            if 0 <= dh < H and 0 <= dw < W and not seen[dh][dw]:\n                if S[h][w] != S[dh][dw]:\n                    que.append((dh, dw))\n    ans += black * white\nprint(ans)\n", "label": 0, "name1": "s166405755.py", "name2": "s726328939.py"}, {"id": 122, "code1": "\n\ndef main():\n    n, K = map(int, input().split())\n    a = list(map(int, input().split()))\n\n    # dp[i] is true if First player wins with i tiles left\n    dp = [False]*(K+1)\n    for k in range(1, K+1):\n        for i in a:\n            if k >= i and not dp[k-i]:\n                dp[k] = True\n    print(['Second', 'First'][dp[K]])\n\n\nif __name__ == \"__main__\":\n    main()\n", "code2": "n,k = map(int,input().split())\na = list(map(int,input().split()))\ndp = [False]*(k+1)\nfor i in range(1,k+1):\n    for j in range(n):\n        if i-a[j]<0:\n            break\n        if dp[i-a[j]]==False:\n            dp[i] = True\n            break\nif dp[k]==True:\n    print(\"First\")\nelse:\n    print(\"Second\")\n", "label": 1, "name1": "s700864010.py", "name2": "s370455728.py"}, {"id": 712, "code1": "import sys\n#input = sys.stdin.readline\n\ndef inpl(): return list(map(int, input().split()))\nQ = int(input())\n \nMOD = 10**6 + 3\ndef cmb(n, r, mod):\n    if ( r<0 or r>n ):\n        return 0\n    \n    r = min(r, n-r)\n    return g1[n] * g2[r] * g2[n-r] % mod\n \nsize = MOD + 1\ng1, g2, inverse = [0]*size, [0]*size, [0]*size\n \ng1[:2] = [1, 1] # \u5143\u30c6\u30fc\u30d6\u30eb\ng2[:2] = [1, 1] #\u9006\u5143\u30c6\u30fc\u30d6\u30eb\ninverse[:2] = [0, 1] #\u9006\u5143\u30c6\u30fc\u30d6\u30eb\u8a08\u7b97\u7528\u30c6\u30fc\u30d6\u30eb\n\nfor i in range(2, size):\n    g1[i] =  ( g1[i-1] * i ) % MOD \n    inverse[i] = (-inverse[MOD % i] * (MOD//i) ) % MOD \n    g2[i] =  (g2[i-1] * inverse[i]) % MOD\n\nfor _ in range(Q):\n    x, d, n = inpl()\n    xd = x*inverse[d]%MOD\n    if d != 0:\n        if n < ((MOD-x)*inverse[d] + 1)%MOD:\n            n = n%MOD\n            print((g1[(xd + n - 1)%MOD] * g2[(xd-1)%MOD] * pow(d, n, MOD))%MOD)\n        else:\n            print(0)\n    else:\n        print(pow(x, n, MOD))", "code2": "import sys\ndef input(): return sys.stdin.readline().strip()\n\n\ndef main():\n    a, b, c = map(int, input().split())\n    m = max(a, b, c)\n    print(a + b + c - m)\n\n\nif __name__ == \"__main__\":\n    main()\n", "label": 0, "name1": "s890996219.py", "name2": "s149362178.py"}, {"id": 694, "code1": "import sys\ninput = sys.stdin.readline\n\nn, m = map(int, input().split())\nl = list(map(int, input().split()))\n\nif n >= m:\n    print(0)\n    sys.exit()\n    \nl.sort()\nle = len(l) - 1\nnl = [0] * le\nfor i in range(0, len(l) - 1):\n    nl[i] = l[i + 1] - l[i]\n    \nnl.sort()\nprint(sum(nl[:le - n + 1]))", "code2": "class Unionfind:\n     \n    def __init__(self,n):\n        self.uf = [-1]*n\n \n    def find(self,x):\n        if self.uf[x] < 0:\n            return x\n        else:\n            self.uf[x] = self.find(self.uf[x])\n            return self.uf[x]\n \n    def same(self,x,y):\n        return self.find(x) == self.find(y)\n \n    def union(self,x,y):\n        x = self.find(x)\n        y = self.find(y)\n        if x == y:\n            return False\n        if self.uf[x] > self.uf[y]:\n            x,y = y,x\n        self.uf[x] += self.uf[y]\n        self.uf[y] = x\n        return True\n \n    def size(self,x):\n        x = self.find(x)\n        return -self.uf[x]\n\nn,m = map(int,input().split())\n\nu = Unionfind(n)\ncount = 0\nfor i in range(m):\n    a,b = map(int,input().split())\n    a -= 1\n    b -= 1\n    u.union(a,b)\n\ns = set()\nfor i in range(n):\n    s.add(u.find(i))\nprint(len(s)-1)", "label": 0, "name1": "s202166785.py", "name2": "s213272363.py"}, {"id": 221, "code1": "from itertools import permutations\nn = int(input())\np = tuple(map(int, input().split()))\nq = tuple(map(int, input().split()))\n\nfor n, i in enumerate(permutations(sorted(p))):\n    if i == p:\n        pn = n\n\nfor n, i in enumerate(permutations(sorted(q))):\n    if i == q:\n        qn = n\nprint(abs(pn-qn))\n", "code2": "from itertools import permutations\nN = int(input())\nP = tuple(map(int, input().split()))\nQ = tuple(map(int, input().split()))\ni = a = b = 0\nfor x in permutations(range(1, N+1), N):\n  i += 1\n  if x == P:\n    a = i\n  if x == Q:\n    b = i\nprint(abs(a - b))", "label": 1, "name1": "s199679379.py", "name2": "s989424908.py"}, {"id": 653, "code1": "# AOJ 0144 Packet Transportation\n# Python3 2018.6.23 bal4u\n\nINF = 0x7fffffff\nn = int(input())\narr = [[INF for j in range(n)] for i in range(n)]\nfor i in range(n):\n\ta = list(map(int, input().split()))\n\tx, k = a[0]-1, a[1]\n\tfor j in range(k):\n\t\ty = a[j+2]-1\n\t\tarr[x][y] = 1\nfor k in range(n):\n\tarr[k][k] = 0\n\tfor i in range(n):\n\t\tif arr[i][k] >= INF: continue\n\t\tfor j in range(n):\n\t\t\tif arr[k][j] >= INF: continue\n\t\t\tarr[i][j] = min(arr[i][j], arr[i][k] + arr[k][j])\np = int(input())\nfor i in range(p):\n\ts, d, v = map(int, input().split())\n\ts,d = s-1, d-1\n\tprint(arr[s][d]+1 if arr[s][d] < v else \"NA\")\n", "code2": "N, K = map(int, input().split())\nW = [int(input()) for w in range(N)]\n\ndef check(p):\n    i = 0\n    for _ in range(K):\n        s = 0\n        while s + W[i] <= p:\n            s += W[i]\n            i += 1\n            if i == N:\n                return N\n    return i\n\nleft = 0\nright = 100000 * 10000\nmid = 0\nwhile 1 < right - left:\n    mid = (left + right) / 2\n    v = check(mid)\n    if v >= N:\n        right = mid\n    else:\n        left = mid\n\nprint(int(right))\n", "label": 0, "name1": "s881383078.py", "name2": "s152551733.py"}, {"id": 685, "code1": "while 1:\n\tn , x = map(int , raw_input().split())\n\tif n == x == 0:\n\t\tbreak\n\telse :\n\t\tcnt = 0\n\t\tfor i in range(1,n - 1):\n\t\t\tfor j in range(i + 1 , n):\n\t\t\t\tfor k in range(j + 1, n + 1):\n#\t\t\t\t\tprint i,j,k\n\t\t\t\t\tif i + j + k == x:\n#\t\t\t\t\t\tprint i,j,k\n\t\t\t\t\t\tcnt += 1\n\t\tprint cnt", "code2": "import sys\ninput = sys.stdin.readline\n\nn, m = map(int, input().split())\nl = list(map(int, input().split()))\n\nif n >= m:\n    print(0)\n    sys.exit()\n    \nl.sort()\nle = len(l) - 1\nnl = [0] * le\nfor i in range(0, len(l) - 1):\n    nl[i] = l[i + 1] - l[i]\n    \nnl.sort()\nprint(sum(nl[:le - n + 1]))", "label": 0, "name1": "s558630368.py", "name2": "s202166785.py"}, {"id": 953, "code1": "print(input().count(\"2\"))", "code2": "n, m, k = map(int, input().split())\n \nans = \"No\"\nfor i in range(n + 1):\n    for j in range(m + 1):\n        if i * (m - j) + j * (n - i) == k:\n            ans = \"Yes\"\nprint(ans)", "label": 0, "name1": "s249513812.py", "name2": "s425111362.py"}, {"id": 477, "code1": "import itertools\n\ndef is_edge_exists(node1, node2, edges):\n\tfor edge in edges:\n\t\tif node1 in edge and node2 in edge:\n\t\t\treturn True\n\treturn False\n\ndef route_count(route, edges):\n\tif route[0]!=1:\n\t\treturn 0\n\tfor i in range(len(route)-1):\n\t\tif not is_edge_exists(route[i], route[i+1], edges):\n\t\t\treturn 0\n\treturn 1\n\nN, M = map(int, input().split())\nedges = [list(map(int, input().split())) for i in range(M)]\nnodes = [i+1 for i in range(N)]\nroutes = list(itertools.permutations(nodes))\n\nans = 0\nfor route in routes:\n\tans += route_count(route, edges)\nprint(ans)", "code2": "N,M=map(int,input().split())\ngraph=[[] for _ in range(N)]\nfor _ in range(M):\n    a,b=map(int,input().split())\n    graph[a-1].append(b-1)\n    graph[b-1].append(a-1)\n\nvisited=[False]*N\nvisited[0]=True\n\ndef dfs(v,N,visited):\n    if all(visited):\n        return 1\n    \n    ret=0\n    for new_v in graph[v]:\n        if visited[new_v]:\n            continue\n        \n        visited[new_v]=True\n        ret+=dfs(new_v,N,visited)\n        visited[new_v]=False\n    \n    return ret\n\nprint(dfs(0,N,visited))", "label": 1, "name1": "s952388313.py", "name2": "s866159978.py"}, {"id": 336, "code1": "S = input()\n\nl = len(S)\nS_list = list(map(int, S))\n\nans = 0\n\nfor i in range(l):\n    num = int(S_list[-i-1])\n\n    for j in range(i+1):\n        ans += num * (10 ** (j)) * (2 ** (max(l-1-j-1, l-1-i)))\n\nprint(ans)\n", "code2": "import sys\nif sys.platform =='ios':\n\tsys.stdin=open('Untitled.txt')\ninput = sys.stdin.readline\n\n# \u53c2\u7167URL:https://qiita.com/gogotealove/items/11f9e83218926211083a\n\n# n = [int(x) for x in input().rstrip()]\n# op_cnt = len(n) - 1  # \u3059\u304d\u9593\u306e\u500b\u6570\n# ans2 = []\n# for i in range(2 ** op_cnt):\n#     op = [\"\"] * op_cnt  # \u3042\u3089\u304b\u3058\u3081 [\"-\", \"-\", \"-\"] \u3068\u3044\u3046\u30ea\u30b9\u30c8\u3092\u4f5c\u3063\u3066\u304a\u304f\n#     for j in range(op_cnt):\n#         if ((i >> j) & 1):\n#             op[op_cnt - 1 - j] = \"+\"  # \u30d5\u30e9\u30b0\u304c\u7acb\u3063\u3066\u3044\u305f\u7b87\u6240\u3092 \"+\" \u3067\u4e0a\u66f8\u304d\n#     ans2.append(op)\n# for a in ans2:\n# \tprint(a)\n\nS = input().rstrip() # \u5165\u529b\u5024 \"1234\\n\" \u3092 \"1234\"\u306b\nn = len(S)-1 # \u30aa\u30da\u30ec\u30fc\u30bf\u304c\u5165\u308a\u3046\u308b\u9699\u9593\u306flen(S)-1\n\nops = []\nfor i in range(2**n): # \u5404\u9699\u9593\u306b\u5bfe\u3057\u3066\u3001 +\u3059\u308b\u3057\u306a\u3044\u306e2\u901a\u308a\u304c\u3042\u308b\u306e\u3067\u30012^n \u56de\u30eb\u30fc\u30d7\n\top = [\"\"] * n # \u3042\u3089\u304b\u3058\u3081\u30ea\u30b9\u30c8\u3092\u4f5c\u6210\n\tfor j in range(n):\n\t\tif((i>>j) & 1) == 1:  # \u9806\u306b\u53f3\u306b\u30b7\u30d5\u30c8\u3055\u305b\u6700\u4e0b\u4f4dbit\u306e\u30c1\u30a7\u30c3\u30af\u3092\u884c\u3046\n\t\t\top[n-1-j] = \"+\" # \u30d5\u30e9\u30b0\u304c\u7acb\u3063\u3066\u3044\u305f\u3089op\u306e\u5024\u3092\u66f8\u304d\u63db\u3048\u308b\n\tops.append(op)\n\n# \u3053\u3053\u307e\u3067\u3067 ops \u306e\u4e2d\u306b\u3042\u308a\u3046\u308b\u7d44\u307f\u5408\u308f\u305b\u304c\u5217\u6319\u3055\u308c\u308b\uff08\u4ee5\u4e0b\u306flen(S)-1==3\u306e\u4f8b\uff09\n# ['', '', '']\n# ['', '', '+']\n# ['', '+', '']\n# ['', '+', '+']\n# ['+', '', '']\n# ['+', '', '+']\n# ['+', '+', '']\n# ['+', '+', '+']\n\nans = 0\nfor o in ops:\n\ts = [s for s in S]\n\tfor k in range(len(o)):\n\t\ts.insert(2*k+1, o[k])\n\tans += eval(''.join(s)) # eval \u3092\u5229\u7528\u3059\u308b\u3053\u3068\u3067\u6587\u5b57\u5217\u3092\u5f0f\u3068\u3057\u3066\u8a55\u4fa1\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u308b\n\nprint(ans)", "label": 1, "name1": "s174681493.py", "name2": "s854607235.py"}, {"id": 120, "code1": "\n\ndef main():\n    n, K = map(int, input().split())\n    a = list(map(int, input().split()))\n\n    # dp[i] is true if First player wins with i tiles left\n    dp = [False]*(K+1)\n    for k in range(1, K+1):\n        for i in a:\n            if k >= i and not dp[k-i]:\n                dp[k] = True\n    print(['Second', 'First'][dp[K]])\n\n\nif __name__ == \"__main__\":\n    main()\n", "code2": "import sys\nsys.setrecursionlimit(2147483647)\nINF=float(\"inf\")\nMOD=10**9+7\ninput=lambda :sys.stdin.readline().rstrip()\ndef resolve():\n    n,k=map(int,input().split())\n    A=list(map(int,input().split()))\n    dp=[0]*(k+1)\n    for i in range(k):\n        if dp[i]: continue\n        for j in range(n):\n            if i+A[j]<=k: dp[i+A[j]]=1\n    print(\"First\" if dp[k] else \"Second\")\nresolve()", "label": 1, "name1": "s700864010.py", "name2": "s270542298.py"}, {"id": 68, "code1": "while True:\n    data = {}\n    n = input()\n    if n == 0:\n        break\n    for i in range(n):\n        tmp = raw_input()\n        tmp_data = tmp.split(\" \")\n        if i == 0:\n            data.update({tmp_data[0] : int(tmp_data[1]) + int(tmp_data[2])})\n        else:\n            flag = False\n            for j in data.iterkeys():\n                if data[j] < int(tmp_data[1]) + int(tmp_data[2]):\n                    flag = True\n                if flag:\n                    data.clear()\n                    data.update({tmp_data[0] : int(tmp_data[1]) + int(tmp_data[2])})\n\n    for key in data.iterkeys():\n        print \"%s %d\" % (key, data[key])", "code2": "while True:\n    num = int(input())\n    if num == 0:\n        break\n    \n    m = 0\n    mp = None\n    for _ in range(num):\n        p, d1, d2  = [int(x) for x in input().split()]\n        if d1 + d2 > m:\n            m = d1 + d2\n            mp = p\n    print(mp,m)\n", "label": 1, "name1": "s667605741.py", "name2": "s098046872.py"}, {"id": 100, "code1": "from enum import Enum\nimport sys\nimport math\n\n\nA,B,DEGREE = map(int,input().split())\n\nrad = math.radians(DEGREE)\n\nS = A*B*math.sin(rad)/2.0\nC = math.sqrt(A*A+B*B-2*A*B*math.cos(rad))\nh = 2*S/A\n\nprint(\"%.10f %.10f %.10f\"%(S,A+B+C,h))\n\n", "code2": "import math\na, b, c = map(int, input().split())\nh = b * math.sin(math.radians(c))\nprint(a * h / 2)\nprint(a + b + math.sqrt((a-b*math.cos(math.radians(c)))**2 + h**2))\nprint(h)\n\n", "label": 1, "name1": "s944812786.py", "name2": "s253160566.py"}, {"id": 703, "code1": "class Unionfind:\n     \n    def __init__(self,n):\n        self.uf = [-1]*n\n \n    def find(self,x):\n        if self.uf[x] < 0:\n            return x\n        else:\n            self.uf[x] = self.find(self.uf[x])\n            return self.uf[x]\n \n    def same(self,x,y):\n        return self.find(x) == self.find(y)\n \n    def union(self,x,y):\n        x = self.find(x)\n        y = self.find(y)\n        if x == y:\n            return False\n        if self.uf[x] > self.uf[y]:\n            x,y = y,x\n        self.uf[x] += self.uf[y]\n        self.uf[y] = x\n        return True\n \n    def size(self,x):\n        x = self.find(x)\n        return -self.uf[x]\n\nn,m = map(int,input().split())\n\nu = Unionfind(n)\ncount = 0\nfor i in range(m):\n    a,b = map(int,input().split())\n    a -= 1\n    b -= 1\n    u.union(a,b)\n\ns = set()\nfor i in range(n):\n    s.add(u.find(i))\nprint(len(s)-1)", "code2": "import sys\n#input = sys.stdin.readline\n\ndef inpl(): return list(map(int, input().split()))\nQ = int(input())\n \nMOD = 10**6 + 3\ndef cmb(n, r, mod):\n    if ( r<0 or r>n ):\n        return 0\n    \n    r = min(r, n-r)\n    return g1[n] * g2[r] * g2[n-r] % mod\n \nsize = MOD + 1\ng1, g2, inverse = [0]*size, [0]*size, [0]*size\n \ng1[:2] = [1, 1] # \u5143\u30c6\u30fc\u30d6\u30eb\ng2[:2] = [1, 1] #\u9006\u5143\u30c6\u30fc\u30d6\u30eb\ninverse[:2] = [0, 1] #\u9006\u5143\u30c6\u30fc\u30d6\u30eb\u8a08\u7b97\u7528\u30c6\u30fc\u30d6\u30eb\n\nfor i in range(2, size):\n    g1[i] =  ( g1[i-1] * i ) % MOD \n    inverse[i] = (-inverse[MOD % i] * (MOD//i) ) % MOD \n    g2[i] =  (g2[i-1] * inverse[i]) % MOD\n\nfor _ in range(Q):\n    x, d, n = inpl()\n    xd = x*inverse[d]%MOD\n    if d != 0:\n        if n < ((MOD-x)*inverse[d] + 1)%MOD:\n            n = n%MOD\n            print((g1[(xd + n - 1)%MOD] * g2[(xd-1)%MOD] * pow(d, n, MOD))%MOD)\n        else:\n            print(0)\n    else:\n        print(pow(x, n, MOD))", "label": 0, "name1": "s213272363.py", "name2": "s890996219.py"}, {"id": 90, "code1": "n,k = map(int,input().split())\nprint(min(n%k,-((n%k)-k)))", "code2": "n,k = map(int, input().split())\namari=n%k\nn=min(amari, k-amari)\nprint(n)", "label": 1, "name1": "s413819466.py", "name2": "s328388206.py"}, {"id": 91, "code1": "n,k = map(int,input().split())\nprint(min(n%k,-((n%k)-k)))", "code2": "n,k=map(int,input().split())\nx=n%k\nprint(min(x,abs(x-k)))", "label": 1, "name1": "s413819466.py", "name2": "s584027827.py"}, {"id": 821, "code1": "#\n# abc054 c\n#\n\nimport sys\nfrom io import StringIO\nimport unittest\nimport itertools\n\n\nclass TestClass(unittest.TestCase):\n    def assertIO(self, input, output):\n        stdout, stdin = sys.stdout, sys.stdin\n        sys.stdout, sys.stdin = StringIO(), StringIO(input)\n        resolve()\n        sys.stdout.seek(0)\n        out = sys.stdout.read()[:-1]\n        sys.stdout, sys.stdin = stdout, stdin\n        self.assertEqual(out, output)\n\n    def test_\u5165\u529b\u4f8b_1(self):\n        input = \"\"\"3 3\n1 2\n1 3\n2 3\"\"\"\n        output = \"\"\"2\"\"\"\n        self.assertIO(input, output)\n\n    def test_\u5165\u529b\u4f8b_2(self):\n        input = \"\"\"7 7\n1 3\n2 7\n3 4\n4 5\n4 6\n5 6\n6 7\"\"\"\n        output = \"\"\"1\"\"\"\n        self.assertIO(input, output)\n\n\ndef resolve():\n    N, M = map(int, input().split())\n    P = [list(map(int, input().split())) for _ in range(M)]\n\n    R = itertools.permutations(range(1, N+1))\n\n    ans = 0\n    for r in R:\n        flag = True\n        r = list(r)\n        if r[0] != 1:\n            break\n        for i in range(1, N):\n            for p in P:\n                if (r[i-1] == p[0] and r[i] == p[1]) or (r[i-1] == p[1] and r[i] == p[0]):\n                    break\n            else:\n                flag = False\n        if flag == True:\n            ans += 1\n\n    print(ans)\n\n\nif __name__ == \"__main__\":\n    # unittest.main()\n    resolve()\n", "code2": "import sys\nfrom collections import defaultdict, Counter, deque\nfrom itertools import accumulate, permutations, combinations\nfrom operator import itemgetter\nfrom bisect import bisect_left, bisect_right, bisect\nfrom heapq import heappop, heappush\nfrom fractions import gcd\nfrom math import ceil, floor, sqrt, cos, sin, pi\nfrom copy import deepcopy\n\n# If you use recursive call, uncomment this code\n#sys.setrecursionlimit(10**6)\n\ndef main():\n    nums = set(map(int, input().split()))\n    if len(nums) == 2:\n        print(\"Yes\")\n    else:\n        print(\"No\")\n\n\nif __name__ == '__main__':\n    main()\n", "label": 0, "name1": "s851959667.py", "name2": "s765543700.py"}, {"id": 247, "code1": "N = int(input())\na = list(map(int, input().split()))\n\nans = 0\nfor i in range(N):\n  if a[a[i]-1] == i+1:\n    ans += 1\nprint(ans//2)", "code2": "N = int(input())\nAs = list(map(int, input().split()))\nAs = [a-1 for a in As]\nr = 0\nfor i in range(N):\n  j = As[i]\n  if i < j and i == As[j]:\n    r += 1\nprint(r)\n", "label": 1, "name1": "s364926848.py", "name2": "s017164630.py"}, {"id": 82, "code1": "import sys\nd={'A\\n':0,'B\\n':0,'AB\\n':0,'O\\n':0}\nfor e in sys.stdin:d[e.split(',')[1]]+=1\nfor b in d:print(d[b])\n", "code2": "import sys\nimport collections as col\nnum = []\nfor line in sys.stdin:\n\ttako = line[:-1].split(\",\")\n\tnum.append(tako[1])\ntako = col.Counter(num)\na = tako[\"O\"]\ntako[\"O\"] = tako[\"AB\"]\ntako[\"AB\"] = a\nfor i in tako.items():\n\tprint i[1]", "label": 1, "name1": "s566437610.py", "name2": "s223119670.py"}, {"id": 429, "code1": "# coding: utf-8\ndef addset(args):\n    global a\n    for m in args:\n        if dic[m]==1:\n            a.add(m)\n        else:\n            if m not in used:\n                used.add(m)\n                addset(dc[m])\n \nwhile True:\n    n=int(input())\n    if n==0:\n        break\n    dic={}\n    first=[]\n    dc={}\n    for i in range(n):\n        g,m=input().split(':')\n        m=m.rstrip('.').split(',')\n        dc[g]=m\n        if i==0:\n            first.append(g)\n            first+=m\n        dic[g]=2\n        for mem in m:\n            if mem not in dic:\n                dic[mem]=1\n    a=set()\n    used=set()\n    addset(first[1:])\n    print(len(a))\n", "code2": "#!/usr/bin/env python3\n\nimport sys\nimport math\nimport re\nfrom bisect import bisect_right as br\nfrom bisect import bisect_left as bl\nsys.setrecursionlimit(1000000)\nfrom heapq import heappush, heappop,heappushpop\nfrom collections import defaultdict\nfrom itertools import accumulate\nfrom collections import Counter\nfrom collections import deque\nfrom operator import itemgetter\nfrom itertools import permutations\nmod = 10**9 + 7\ninf = float('inf')\ndef I(): return int(sys.stdin.readline())\ndef LI(): return list(map(int,sys.stdin.readline().split()))\n\nwhile 1:\n    n = I()\n    if n == 0:\n        quit()\n    f = defaultdict(dict)\n    t = defaultdict(lambda : False)\n    ch = defaultdict(lambda : False)\n    stack = []\n    for i in range(n):\n        x = input()[:-1].split(':')\n        y = x[1].split(',')\n        x = x[0]\n        for j in y:\n            f[x][j] = 1\n            if i != 0:\n                continue\n            stack.append(j)\n    ans = 0\n    while stack:\n        x = stack.pop()\n        if ch[x]:\n            continue\n        ch[x] = True\n        if len(f[x]) == 0 and not t[x]:\n            ans += 1\n            t[x] = True\n            continue\n        for i,j in f[x].items():\n            stack.append(i)\n    print(ans)\n", "label": 1, "name1": "s673127686.py", "name2": "s732192628.py"}, {"id": 294, "code1": "import numpy as np\nn,m = map(int, input().split())\nX = sorted(np.array(input().split(), dtype = np.int64))\nX = sorted(np.diff(X))\nif m-n >= 0:\n    ans = sum(X[:m-n])\nelse:\n    ans = 0\nprint(ans)", "code2": "N,M = map(int,input().split())\nX = list(map(int,input().split()))\nX.sort()\nif N>=M: print(0);exit()\nif N==1: print(X[-1]-X[0]);exit()\nL = []\nfor i in range(len(X)-1):\n    L.append(X[i+1]-X[i])\nL.sort()\nL = L[:-(N-1)]\nprint(sum(L))", "label": 1, "name1": "s052852893.py", "name2": "s964881422.py"}, {"id": 420, "code1": "N = int(input())\n\ndef gcd(a, b):\n    while b:\n        a, b = b, a % b\n    return a\n\ndef lcm(a, b):\n    return a * b // gcd(a, b)\n\ns = int(input())\nfor i in range(N - 1):\n    tmp = int(input())\n    s = lcm(s, tmp)\n\nprint(s)\n", "code2": "from functools import reduce\n\ndef gcd(a, b):\n  while b > 0:\n    a, b = b, a%b\n  return a\n\ndef lcm(x, y):\n  return (x * y) // gcd(x, y)\n\ndef lcm_list(numbers):\n  return reduce(lcm, numbers, 1)\n\nn = [int(input()) for _ in range(int(input()))]\nprint(lcm_list(n))", "label": 1, "name1": "s550486741.py", "name2": "s973589852.py"}, {"id": 544, "code1": "while True:\n    data = {}\n    n = input()\n    if n == 0:\n        break\n    for i in range(n):\n        tmp = raw_input()\n        tmp_data = tmp.split(\" \")\n        if i == 0:\n            data.update({tmp_data[0] : int(tmp_data[1]) + int(tmp_data[2])})\n        else:\n            flag = False\n            for j in data.iterkeys():\n                if data[j] < int(tmp_data[1]) + int(tmp_data[2]):\n                    flag = True\n                if flag:\n                    data.clear()\n                    data.update({tmp_data[0] : int(tmp_data[1]) + int(tmp_data[2])})\n\n    for key in data.iterkeys():\n        print \"%s %d\" % (key, data[key])", "code2": "#coding:utf-8\nimport numpy as np\nn = int(input())\n\n\na = np.ones((2,1)).astype(np.int)\na[-1][-1]+len(a)\ni = 1\nwhile(1):\n    if len(a)>=500:\n        break\n    if n==a[-1][-1]:\n        print (\"Yes\")\n        print (len(a))\n        for line in a:\n            print (i,\" \".join(line.astype(np.str).tolist()))\n        exit()\n    i+=1\n    temp = int((1/2)*i*(i+1))\n    add = np.array((list(range(temp-i+1,temp+1))))\n\n    a = np.c_[a,add]\n    a = np.r_[a,add.reshape(1,-1)]\nprint (\"No\")\n", "label": 0, "name1": "s667605741.py", "name2": "s037954477.py"}, {"id": 183, "code1": "a, b = map(int, input().split())\nif a > b:\n    print(a-1)\nelse:\n    print(a)", "code2": "a,b=map(int,input().split())\nif b >= a:\n  print(a)\nelse:\n  print(a-1)", "label": 1, "name1": "s737717931.py", "name2": "s714654685.py"}, {"id": 913, "code1": "h,w=map(int,input().split())\n\na=[]\nfor _ in range(h):\n    a+=list(input())\n\nfour=(h//2)*(w//2)\ntwo=h%2*w//2+w%2*h//2\none=(h%2)*(w%2)\n\nimport collections\nc = collections.Counter(a)\n\n#print(four,two,one)\nd=list(c.values())\nd.sort()\n\nfor item in d:\n    if item==1:\n        if one==1:\n            one-=1\n        else:\n            print(\"No\")\n            exit()\n    elif item==2:\n        if two>0:\n            two-=1\n        else:\n            print(\"No\")\n            exit()\n    elif item==3:\n        if one==1 and two>0:\n            one-=1\n            two-=1\n        else:\n            print(\"No\")\n            exit()\n    else:\n        if item%2==1:\n            if one==0:\n                print(\"No\")\n                exit()\n            else:\n                item-=1\n                one-=1\n        #print(item,four,two,one)\n        while item>=4 and four>0:\n            item-=4\n            four-=1\n        #print(item,four,two,one)\n        \n        while item>=2:\n            item-=2\n            two-=1\n        #print(item,four,two,one)\n    \nif one==0 and two==0 and four==0:\n    print(\"Yes\")\nelse:\n    print(\"No\")\n        \n\n\n\n", "code2": "N=int(input())\ns=[]\nfor _ in range(N):\n    s.append(int(input()))\n\ns=sorted(s)\nimport sys\nif sum(s)%10!=0:\n    print(sum(s))\n    sys.exit()\nelse:\n    ans=sum(s)\n    for i in range(len(s)):\n        if s[i]%10==0:\n            pass\n        else:\n            ans-=s[i]\n            print(ans)\n            sys.exit()\nprint(0)\n        ", "label": 0, "name1": "s741760295.py", "name2": "s166405755.py"}, {"id": 898, "code1": "N,M=map(int,input().split())\n\n\nm=2**M\nans=0\ni=1\nwhile True:\n        k=( (1*((1/m))) * ((( (m-1)/m)**(i-1)) )) * ( 1900*M*i +(N-M)*100*i)#       +( (1*((1/m))) * ((( (m-1)/m)**(i-1)) )) *\n        ans+=k\n        i+=1\n        if(i>10000):\n                break\n\nprint(int(ans+0.5))", "code2": "x = int(input())\ndef is_prime(x):\n    if x <= 1:\n        return False\n    for i in range(2, int(x**0.5)+1):\n        if x % i == 0:\n            return False\n    return True\n\nwhile(not is_prime(x)):\n    x += 1\nprint(x)\n", "label": 0, "name1": "s967172030.py", "name2": "s723102572.py"}, {"id": 845, "code1": "N, L, T = map(int, input().split())\nants = []\ntouch = 0  # \u3059\u3079\u3066\u306e\u87fb\u304c0\u3092\u901a\u308b\u5408\u8a08\u6570\n\nfor i in range(N):\n    x, w = map(int, input().split())\n    if w == 1:  # \u6642\u8a08\u56de\u308a\n        touch += (x + T) // L  # 0\u3092\u901a\u308b\u56de\u6570\n        x1 = (x + T) % L       # \u6700\u7d42\u7684\u306a\u5ea7\u6a19\n    else:\n        touch += (x - T) // L  # 0\u3092\u901a\u308b\u56de\u6570\n        x1 = (x - T) % L\n    ants.append(x1)\ntouch = touch % N  # 0\u306b\u3044\u305f\u87fb\u306eindex\nants.sort()\nants = ants[touch:]+ants[:touch]\n\nprint(\" \".join(map(str, ants)))", "code2": "l = [[], [], []]\nans = []\nfor i in range(3):\n  for j in range(8):\n    s = raw_input().split()\n    l[i].append([float(s[1]), int(s[0])])\nfor i in range(3):\n  l[i].sort()\n  ans.append(l[i].pop(0))\n  ans.append(l[i].pop(0))\nl = l[0] + l[1] + l[2]\nl.sort()\nans.append(l.pop(0))\nans.append(l.pop(0))\nfor n in ans:\n  print str(n[1]) + \" \" + str(n[0])", "label": 0, "name1": "s946619292.py", "name2": "s549811190.py"}, {"id": 214, "code1": "n = input()\np, q = [-1, -1]\nfor i in xrange(n):\n    t, a = map(int, raw_input().split())\n    if p == -1 or q == -1:\n        p = t\n        q = a\n        continue\n    if t >= p and a >= q:\n        p = t\n        q = a\n    else:\n        z = max(p / t + (p % t != 0), q / a + (q % a != 0))\n        p = t * z\n        q = a * z\nprint p + q\n\n", "code2": "N = int(input())\nL = []\nfor i in range(N):\n  L.append(list(map(int,input().split())))\nA = 1\nB = 1\nfor i in range(N):\n  k = max(-(-A//L[i][0]),-(-B//L[i][1]))\n  A = L[i][0]*k\n  B = L[i][1]*k\nprint(A+B)", "label": 1, "name1": "s412403305.py", "name2": "s422928466.py"}, {"id": 391, "code1": "a,b,x=map(int,input().split())\n\nq1,r1=divmod(a,x)\nq2,_=divmod(b,x)\n\nprint(q2-q1+(r1==0))", "code2": "a, b, x = map(int, input().split()) \n\nn = b // x\nm = (a-1) // x\n\nprint(n-m)", "label": 1, "name1": "s935190491.py", "name2": "s514746443.py"}, {"id": 235, "code1": "# -*- coding: utf-8 -*-\nimport sys\nfrom sys import stdin\nimport math\n\nn, k = map(int, stdin.readline().split())\nw = list([int(stdin.readline().rstrip()) for i in range(n)])\n\ndef main2():\n  def is_ok():\n    cnt_track = w_tmp = 0\n    for w_i in w:\n      w_tmp += w_i\n      if w_tmp > m:\n        w_tmp = w_i\n        cnt_track += 1\n        if cnt_track >= k:\n          return 0\n    return 1\n\n  r = sum(w)\n  l = max(math.ceil(r/k),max(w))\n  while l < r:\n    m = (l + r) // 2\n    # print(\"%d %d %d \" % (l, r, m))\n    if is_ok():\n      r = m\n    else:\n      l = m + 1\n  print(r)\n\nif __name__ == '__main__':\n  main2()\n\n", "code2": "N, K = map(int, input().split())\nW = [int(input()) for w in range(N)]\n\ndef check(p):\n    i = 0\n    for _ in range(K):\n        s = 0\n        while s + W[i] <= p:\n            s += W[i]\n            i += 1\n            if i == N:\n                return N\n    return i\n\nleft = 0\nright = 100000 * 10000\nmid = 0\nwhile 1 < right - left:\n    mid = (left + right) / 2\n    v = check(mid)\n    if v >= N:\n        right = mid\n    else:\n        left = mid\n\nprint(int(right))\n", "label": 1, "name1": "s518389793.py", "name2": "s152551733.py"}, {"id": 276, "code1": "while True:\n    n,x = map(int,raw_input().split())\n    count = 0;\n    if n == 0 and x == 0:break\n    for i in range(1,n + 1):\n        for j in range(1,n + 1):\n            if i == j:break\n            for k in range(1,n + 1):\n                if j == k:break\n                if i + j + k == x:\n                    count+=1\n                    break\n    print count", "code2": "while True:\n\tn,x = map(int,raw_input().split())\n\tif n==x==0:\n\t\tbreak\n\tans=0\n\tfor i in xrange(1,n+1):\n\t\tfor j in xrange(i+1,n+1):\n\t\t\tfor k in xrange(j+1,n+1):\n\t\t\t\tif i+j+k==x:\n\t\t\t\t\tans+=1\n\tprint ans", "label": 1, "name1": "s748079428.py", "name2": "s718411118.py"}, {"id": 535, "code1": "n=int(input())\na=list(map(int,input().split()))\nans=0\nfor i in range(n-1):\n    if a[i]==a[i+1]:\n        a[i+1]=-1\n        ans+=1\nprint(ans)", "code2": "while True:\n    data = {}\n    n = input()\n    if n == 0:\n        break\n    for i in range(n):\n        tmp = raw_input()\n        tmp_data = tmp.split(\" \")\n        if i == 0:\n            data.update({tmp_data[0] : int(tmp_data[1]) + int(tmp_data[2])})\n        else:\n            flag = False\n            for j in data.iterkeys():\n                if data[j] < int(tmp_data[1]) + int(tmp_data[2]):\n                    flag = True\n                if flag:\n                    data.clear()\n                    data.update({tmp_data[0] : int(tmp_data[1]) + int(tmp_data[2])})\n\n    for key in data.iterkeys():\n        print \"%s %d\" % (key, data[key])", "label": 0, "name1": "s300532690.py", "name2": "s667605741.py"}, {"id": 605, "code1": "q = int(input())\nquest = [tuple(map(int, input().split())) for _ in range(q)]\nfor a, b in quest:\n    m = a*b\n    l = int((m - 1) ** (1/2))\n    # check float\n    if l * l >= m:\n        l -= 1\n    elif (l+1) * (l+1) < m:\n        l += 1\n    if a == b:\n        print((a-1) * 2)\n    elif (l+1) * l < m:\n        print(l*2 - 1)\n    else:\n        print(l*2 - 2)\n", "code2": "X = input()\n\ns_cnt = 0\nt_cnt = 0\n\nans = 0\n\nfor n in range(len(X)):\n  if X[n] == \"S\":\n    s_cnt += 1\n  else:\n    t_cnt += 1\n  ans = max(ans,t_cnt-s_cnt)\nprint(ans*2)", "label": 0, "name1": "s200942919.py", "name2": "s239717601.py"}, {"id": 257, "code1": "s = list(input())\nt = list(input())\nans = [-1, -1]\nif len(t) <= len(s):\n    for i in range(len(s) - len(t) + 1):\n        c = 1\n        for j in range(len(t)):\n            if s[i + j] != \"?\" and t[j] != s[i + j]:\n                c = 0\n                break\n        if c == 1:\n            ans = [i, i + len(t)]\n\nif ans != [-1, -1]:\n    k = []\n    for i in range(len(s)):\n        if ans[0] <= i < ans[1]:\n            k.append(t[i - ans[0]])\n        else:\n            if s[i] == \"?\":\n                k.append(\"a\")\n            else:\n                k.append(s[i])\n    print(\"\".join(k))\nelse:\n    print(\"UNRESTORABLE\")\n", "code2": "nl = lambda: list(map(int, input().split()))\nsl = lambda: input().split()\nn = lambda: int(input())\ns = lambda: input()\n\nS = s()\nT = s()\n\ncands = set()\nfor i in range(len(S) - len(T) + 1):\n    match = True\n    for j in range(len(T)):\n        if S[i+j] == T[j] or S[i+j] == '?':\n            continue\n        match = False\n        break\n    if match:\n        cand = S[:i] + T + S[i+len(T):]\n        scand = ''\n        for c in cand:\n            if c == '?':\n                scand += 'a'\n            else:\n                scand += c\n        cands.add(scand)\n\nif len(cands) == 0:\n    print('UNRESTORABLE')\nelse:\n    print(sorted(list(cands))[0])\n", "label": 1, "name1": "s590642866.py", "name2": "s617830873.py"}, {"id": 710, "code1": "import sys\nsys.setrecursionlimit(10**7) #\u518d\u5e30\u95a2\u6570\u306e\u4e0a\u9650,10**5\u4ee5\u4e0a\u306e\u5834\u5408python\nimport math\nfrom copy import copy, deepcopy\nfrom copy import deepcopy as dcp\nfrom operator import itemgetter\nfrom bisect import bisect_left, bisect, bisect_right#2\u5206\u63a2\u7d22\n#bisect_left(l,x), bisect(l,x)#a\u306f\u30bd\u30fc\u30c8\u6e08\u307f\u3067\u3042\u308b\u5fc5\u8981\u3042\u308a\u3002a\u306e\u4e2d\u304b\u3089x\u672a\u6e80\u306e\u8981\u7d20\u6570\u3092\u8fd4\u3059\u3002right\u3060\u3068\u4ee5\u4e0b\nfrom collections import deque, defaultdict\n#deque(l), pop(), append(x), popleft(), appendleft(x)\n#q.rotate(n)\u3067 \u2192 \u306bn\u56de\u30ed\u30fc\u30c6\u30fc\u30c8\nfrom collections import Counter#\u6587\u5b57\u5217\u3092\u500b\u6570\u30ab\u30a6\u30f3\u30c8\u8f9e\u66f8\u306b\u3001\n#S=Counter(l),S.most_common(x),S.keys(),S.values(),S.items()\nfrom itertools import accumulate,combinations,permutations,product#\u7d2f\u7a4d\u548c\n#list(accumulate(l))\nfrom heapq import heapify,heappop,heappush\n#heapify(q),heappush(q,a),heappop(q) #q=heapify(q)\u3068\u3057\u306a\u3044\u3053\u3068\u3001\u8fd4\u308a\u5024\u306fNone\nfrom functools import reduce,lru_cache#pypy\u3067\u3082\u3046\u3054\u304f\n#@lru_cache(maxsize = None)#maxsize\u306f\u4fdd\u5b58\u3059\u308b\u30c7\u30fc\u30bf\u6570\u306e\u6700\u5927\u5024\u30012**n\u304c\u6700\u3082\u9ad8\u52b9\u7387\nfrom decimal import Decimal\n\ndef input(): \n    x=sys.stdin.readline()\n    return x[:-1] if x[-1]==\"\\n\" else x\ndef printe(*x):print(\"## \",*x,file=sys.stderr)\ndef printl(li): _=print(*li, sep=\"\\n\") if li else None\ndef argsort(s, return_sorted=False): \n    inds=sorted(range(len(s)), key=lambda k: s[k])\n    if return_sorted: return inds, [s[i] for i in inds]\n    return inds\ndef alp2num(c,cap=False): return ord(c)-97 if not cap else ord(c)-65\ndef num2alp(i,cap=False): return chr(i+97) if not cap else chr(i+65)\ndef matmat(A,B):\n    K,N,M=len(B),len(A),len(B[0])\n    return [[sum([(A[i][k]*B[k][j]) for k in range(K)]) for j in range(M)] for i in range(N)]\ndef matvec(M,v):\n    N,size=len(v),len(M)\n    return [sum([M[i][j]*v[j] for j in range(N)]) for i in range(size)]\ndef T(M):\n    n,m=len(M),len(M[0])\n    return [[M[j][i] for j in range(n)] for i in range(m)]\ndef binr(x): return bin(x)[2:]\ndef bitcount(x): #x\u306f64bit\u6574\u6570\n    x= x - ((x >> 1) & 0x5555555555555555)\n    x= (x & 0x3333333333333333) + ((x >> 2) & 0x3333333333333333)\n    x= (x + (x >> 4)) & 0x0f0f0f0f0f0f0f0f \n    x+= (x >> 8); x+= (x >> 16); x+= (x >> 32) \n    return x & 0x7f\n\ndef main():\n    mod = 1000000007\n    #w.sort(key=itemgetter(1),reverse=True)  #\u4e8c\u500b\u76ee\u306e\u8981\u7d20\u3067\u964d\u9806\u4e26\u3073\u66ff\u3048\n\n    #N = int(input())\n    a,b,c = map(int, input().split())\n\n\n    print(max(0,c-(a-b)))\n\n\n\nif __name__ == \"__main__\":\n    main()", "code2": "a,b,c=map(int,input().split())\nprint(min(a+b,b+c,c+a))\n", "label": 0, "name1": "s948835843.py", "name2": "s997903196.py"}, {"id": 348, "code1": "def inpl(): return list(map(int, input().split()))\nN, M = inpl()\nf, n = set(), set()\nfor i in range(M):\n    temp = inpl()\n    if 1 in temp:\n        f.add(temp[1])\n    if N in temp:\n        n.add(temp[0])\nif len(f & n) > 0:\n    print('POSSIBLE')\nelse:\n    print('IMPOSSIBLE')", "code2": "N,M = map(int,input().split())\nab = [[int(i) for i in input().split()] for _ in range(M)]\n\nA = []\nB = [0]*(N+1)\nfor a,b in ab:\n  if a==1:\n    A.append(b)\n  if b==N:\n    B[a]=1\n\nfor a in A:\n  if B[a]==1:\n    print(\"POSSIBLE\")\n    break\nelse:\n  print(\"IMPOSSIBLE\")", "label": 1, "name1": "s278593598.py", "name2": "s913769144.py"}, {"id": 147, "code1": "#!/usr/bin/env python\n# -*- coding: utf-8 -*-\nimport math\n\ndef sieve_of_erastosthenes(num):\n    input_list = [False if i % 2 == 0 or i % 3 == 0 or i % 5 == 0 else True for i in range(num)]\n    input_list[0] = input_list[1] = False\n    input_list[2] = input_list[3] = input_list[5] = True\n    sqrt = math.sqrt(num)\n\n    for serial in range(3, num, 2):\n        if serial >= sqrt:\n            return input_list\n        for s in range(serial ** 2, num, serial): \n            input_list[s] = False\n\nprimeTable = sieve_of_erastosthenes((10**6))\n\nwhile True:\n    n = int(input())\n    if n == 0:\n        break\n    print(sum([1 if primeTable[i] == True else 0 for i in range(n+1,2*n+1)]))", "code2": "y = [True for i in range(250001)]\ny[0] = y[1] = False\nfor i in range(2, 500):\n    if y[i]:\n        for j in range(2, 250000 // i + 1):\n            y[i * j] = False\nwhile True:\n    n = int(input())\n    if n == 0:\n        break\n    print(y[n + 1 : n * 2 + 1].count(True))\n", "label": 1, "name1": "s839739261.py", "name2": "s889149636.py"}, {"id": 314, "code1": "import sys\nsys.setrecursionlimit(10**7) #\u518d\u5e30\u95a2\u6570\u306e\u4e0a\u9650,10**5\u4ee5\u4e0a\u306e\u5834\u5408python\nimport math\nfrom copy import copy, deepcopy\nfrom copy import deepcopy as dcp\nfrom operator import itemgetter\nfrom bisect import bisect_left, bisect, bisect_right#2\u5206\u63a2\u7d22\n#bisect_left(l,x), bisect(l,x)#a\u306f\u30bd\u30fc\u30c8\u6e08\u307f\u3067\u3042\u308b\u5fc5\u8981\u3042\u308a\u3002a\u306e\u4e2d\u304b\u3089x\u672a\u6e80\u306e\u8981\u7d20\u6570\u3092\u8fd4\u3059\u3002right\u3060\u3068\u4ee5\u4e0b\nfrom collections import deque, defaultdict\n#deque(l), pop(), append(x), popleft(), appendleft(x)\n#q.rotate(n)\u3067 \u2192 \u306bn\u56de\u30ed\u30fc\u30c6\u30fc\u30c8\nfrom collections import Counter#\u6587\u5b57\u5217\u3092\u500b\u6570\u30ab\u30a6\u30f3\u30c8\u8f9e\u66f8\u306b\u3001\n#S=Counter(l),S.most_common(x),S.keys(),S.values(),S.items()\nfrom itertools import accumulate,combinations,permutations,product#\u7d2f\u7a4d\u548c\n#list(accumulate(l))\nfrom heapq import heapify,heappop,heappush\n#heapify(q),heappush(q,a),heappop(q) #q=heapify(q)\u3068\u3057\u306a\u3044\u3053\u3068\u3001\u8fd4\u308a\u5024\u306fNone\nfrom functools import reduce,lru_cache#pypy\u3067\u3082\u3046\u3054\u304f\n#@lru_cache(maxsize = None)#maxsize\u306f\u4fdd\u5b58\u3059\u308b\u30c7\u30fc\u30bf\u6570\u306e\u6700\u5927\u5024\u30012**n\u304c\u6700\u3082\u9ad8\u52b9\u7387\nfrom decimal import Decimal\n\ndef input(): \n    x=sys.stdin.readline()\n    return x[:-1] if x[-1]==\"\\n\" else x\ndef printe(*x):print(\"## \",*x,file=sys.stderr)\ndef printl(li): _=print(*li, sep=\"\\n\") if li else None\ndef argsort(s, return_sorted=False): \n    inds=sorted(range(len(s)), key=lambda k: s[k])\n    if return_sorted: return inds, [s[i] for i in inds]\n    return inds\ndef alp2num(c,cap=False): return ord(c)-97 if not cap else ord(c)-65\ndef num2alp(i,cap=False): return chr(i+97) if not cap else chr(i+65)\ndef matmat(A,B):\n    K,N,M=len(B),len(A),len(B[0])\n    return [[sum([(A[i][k]*B[k][j]) for k in range(K)]) for j in range(M)] for i in range(N)]\ndef matvec(M,v):\n    N,size=len(v),len(M)\n    return [sum([M[i][j]*v[j] for j in range(N)]) for i in range(size)]\ndef T(M):\n    n,m=len(M),len(M[0])\n    return [[M[j][i] for j in range(n)] for i in range(m)]\ndef binr(x): return bin(x)[2:]\ndef bitcount(x): #x\u306f64bit\u6574\u6570\n    x= x - ((x >> 1) & 0x5555555555555555)\n    x= (x & 0x3333333333333333) + ((x >> 2) & 0x3333333333333333)\n    x= (x + (x >> 4)) & 0x0f0f0f0f0f0f0f0f \n    x+= (x >> 8); x+= (x >> 16); x+= (x >> 32) \n    return x & 0x7f\n\ndef main():\n    mod = 1000000007\n    #w.sort(key=itemgetter(1),reverse=True)  #\u4e8c\u500b\u76ee\u306e\u8981\u7d20\u3067\u964d\u9806\u4e26\u3073\u66ff\u3048\n\n    #N = int(input())\n    a,b,c = map(int, input().split())\n\n\n    print(max(0,c-(a-b)))\n\n\n\nif __name__ == \"__main__\":\n    main()", "code2": "#!/usr/bin/python3\n# -*- coding: utf-8 -*-\n\n\n\nA,B,C = map(int, input().split())\nprint(C-min(A-B,C))", "label": 1, "name1": "s948835843.py", "name2": "s357517671.py"}, {"id": 312, "code1": "import sys\nsys.setrecursionlimit(10**7) #\u518d\u5e30\u95a2\u6570\u306e\u4e0a\u9650,10**5\u4ee5\u4e0a\u306e\u5834\u5408python\nimport math\nfrom copy import copy, deepcopy\nfrom copy import deepcopy as dcp\nfrom operator import itemgetter\nfrom bisect import bisect_left, bisect, bisect_right#2\u5206\u63a2\u7d22\n#bisect_left(l,x), bisect(l,x)#a\u306f\u30bd\u30fc\u30c8\u6e08\u307f\u3067\u3042\u308b\u5fc5\u8981\u3042\u308a\u3002a\u306e\u4e2d\u304b\u3089x\u672a\u6e80\u306e\u8981\u7d20\u6570\u3092\u8fd4\u3059\u3002right\u3060\u3068\u4ee5\u4e0b\nfrom collections import deque, defaultdict\n#deque(l), pop(), append(x), popleft(), appendleft(x)\n#q.rotate(n)\u3067 \u2192 \u306bn\u56de\u30ed\u30fc\u30c6\u30fc\u30c8\nfrom collections import Counter#\u6587\u5b57\u5217\u3092\u500b\u6570\u30ab\u30a6\u30f3\u30c8\u8f9e\u66f8\u306b\u3001\n#S=Counter(l),S.most_common(x),S.keys(),S.values(),S.items()\nfrom itertools import accumulate,combinations,permutations,product#\u7d2f\u7a4d\u548c\n#list(accumulate(l))\nfrom heapq import heapify,heappop,heappush\n#heapify(q),heappush(q,a),heappop(q) #q=heapify(q)\u3068\u3057\u306a\u3044\u3053\u3068\u3001\u8fd4\u308a\u5024\u306fNone\nfrom functools import reduce,lru_cache#pypy\u3067\u3082\u3046\u3054\u304f\n#@lru_cache(maxsize = None)#maxsize\u306f\u4fdd\u5b58\u3059\u308b\u30c7\u30fc\u30bf\u6570\u306e\u6700\u5927\u5024\u30012**n\u304c\u6700\u3082\u9ad8\u52b9\u7387\nfrom decimal import Decimal\n\ndef input(): \n    x=sys.stdin.readline()\n    return x[:-1] if x[-1]==\"\\n\" else x\ndef printe(*x):print(\"## \",*x,file=sys.stderr)\ndef printl(li): _=print(*li, sep=\"\\n\") if li else None\ndef argsort(s, return_sorted=False): \n    inds=sorted(range(len(s)), key=lambda k: s[k])\n    if return_sorted: return inds, [s[i] for i in inds]\n    return inds\ndef alp2num(c,cap=False): return ord(c)-97 if not cap else ord(c)-65\ndef num2alp(i,cap=False): return chr(i+97) if not cap else chr(i+65)\ndef matmat(A,B):\n    K,N,M=len(B),len(A),len(B[0])\n    return [[sum([(A[i][k]*B[k][j]) for k in range(K)]) for j in range(M)] for i in range(N)]\ndef matvec(M,v):\n    N,size=len(v),len(M)\n    return [sum([M[i][j]*v[j] for j in range(N)]) for i in range(size)]\ndef T(M):\n    n,m=len(M),len(M[0])\n    return [[M[j][i] for j in range(n)] for i in range(m)]\ndef binr(x): return bin(x)[2:]\ndef bitcount(x): #x\u306f64bit\u6574\u6570\n    x= x - ((x >> 1) & 0x5555555555555555)\n    x= (x & 0x3333333333333333) + ((x >> 2) & 0x3333333333333333)\n    x= (x + (x >> 4)) & 0x0f0f0f0f0f0f0f0f \n    x+= (x >> 8); x+= (x >> 16); x+= (x >> 32) \n    return x & 0x7f\n\ndef main():\n    mod = 1000000007\n    #w.sort(key=itemgetter(1),reverse=True)  #\u4e8c\u500b\u76ee\u306e\u8981\u7d20\u3067\u964d\u9806\u4e26\u3073\u66ff\u3048\n\n    #N = int(input())\n    a,b,c = map(int, input().split())\n\n\n    print(max(0,c-(a-b)))\n\n\n\nif __name__ == \"__main__\":\n    main()", "code2": "A, B, C = map(int, input().split())\nX = C - (A - B)\nif X >= 0:\n    print(X)\nelse:\n    print(0)", "label": 1, "name1": "s948835843.py", "name2": "s835397152.py"}, {"id": 432, "code1": "def inpl(): return [int(i) for i in input().split()]\nclass UnionFind():\n    def __init__(self, num):\n        self.par = [-1 for _ in range(num)]\n    \n    def find(self, x):\n        if self.par[x] < 0:\n            return x\n        else:\n            x = self.par[x]\n            return self.find(x)\n    \n    def union(self, x, y):\n        rx = self.find(x)\n        ry = self.find(y)\n        if rx != ry:\n            if self.par[rx] < self.par[ry]:\n                self.par[ry] = rx\n            if self.par[rx] > self.par[ry]:\n                self.par[rx] = ry\n            else:\n                self.par[rx] -= 1\n                self.par[ry] = rx\n        return\n\nN, K, L = inpl()\nufk = UnionFind(N)\nfor i in range(K):\n    p, q = inpl()\n    ufk.union(p-1, q-1)\n\nufr = UnionFind(N)\nfor i in range(L):\n    r, s = inpl()\n    ufr.union(r-1, s-1)\n\nfrom collections import defaultdict\nans = defaultdict(lambda: 0)\nfor i in range(N):\n    ans[ufk.find(i),ufr.find(i)] +=1\nAns = [0 for _ in range(N)]\nfor i in range(N):\n    Ans[i] = ans[ufk.find(i),ufr.find(i)]\nprint(*Ans)", "code2": "# \u9802\u70b9 v \u306e\u6240\u5c5e\u3059\u308b\u30b0\u30eb\u30fc\u30d7\u3092\u8abf\u3079\u308b\ndef root(v, uni):\n  if uni[v] < 0:  # v \u304c\u89aa\u306e\u5834\u5408\n    return v\n  else:           # v \u304c\u5b50\u306e\u5834\u5408\n    uni[v] = root(uni[v], uni)  # \u89aa\u306eroot\u3092\u8abf\u3079\u308b\n    return uni[v]\n\n# \u9802\u70b9 a \u3068\u9802\u70b9 b \u3092\u3064\u306a\u3050\u3002\u3082\u3068\u3082\u3068\u540c\u3058\u30b0\u30eb\u30fc\u30d7\u306e\u3068\u304d\u3001False \u3092\u8fd4\u3059\ndef connect(a, b, uni):\n  # \u307e\u305a\u306f\u305d\u308c\u305e\u308c\u6839\u306e\u756a\u53f7\u306b\u7f6e\u304d\u63db\u3048\u308b\n  ra = root(a, uni)\n  rb = root(b, uni)\n  if ra == rb:  # a \u3068 b \u304c\u305d\u3082\u305d\u3082\u540c\u3058\u30b0\u30eb\u30fc\u30d7\u306b\u5c5e\u3057\u3066\u3044\u308b\u306a\u3089\u5373\u7d42\u4e86\n    return False\n\t\n  # ra \u3092\u5927\u304d\u306a\u30b0\u30eb\u30fc\u30d7\u306b\u3057\u305f\u3044\u306e\u3067\u3001\u9006\u3067\u3042\u308c\u3070\u5165\u308c\u66ff\u3048\u308b\n  if uni[ra] > uni[rb]: # rb\u306e\u65b9\u304c\u8981\u7d20\u6570\u304c\u591a\u3051\u308c\u3070\n    tmp = ra\n    ra  = rb \n    rb  = tmp\n\n  # ra \u3068 rb \u3092\u7d50\u5408\u3057\u3001rb \u306e\u89aa\u3092 ra \u3068\u3059\u308b\n  uni[ra] += uni[rb]\n  uni[rb] = ra\n  return True\n      \n##\nN, K, L = map(int, input().split())\n\nroad = [-1]*(N+1)\nrail = [-1]*(N+1)\n\nfor i in range(K):\n  a, b = map(int, input().split())\n  connect(a, b, road)\n\nfor i in range(L):\n  a, b = map(int, input().split())\n  connect(a, b, rail)\n\n\n##\ndp = [0]*(N+1)\nfor i in range(1, N+1):\n  dp[i] = (root(i, road), root(i, rail))\n\ndic = {}\nfor i in range(1, N+1):\n  key = dp[i]\n  if key not in dic:\n    dic[key] = 1\n  else:\n    dic[key] += 1\n\nfor i in range(1, N+1):\n  ans = dic[dp[i]]\n  if i == N:\n    print(ans)\n  else:\n    print(ans, end=\" \")\n", "label": 1, "name1": "s236967102.py", "name2": "s866905054.py"}, {"id": 245, "code1": "#!/usr/bin/env python3\n#CODE FESTIVAL 2016 A\n\nimport sys\nimport math\nimport bisect\nsys.setrecursionlimit(1000000000)\nfrom heapq import heappush, heappop\nfrom collections import defaultdict\nfrom itertools import accumulate\nfrom collections import Counter\nfrom collections import deque\nfrom operator import itemgetter\nfrom itertools import permutations\nmod = 10**9 + 7\ndef I(): return int(sys.stdin.readline())\ndef LI(): return list(map(int,sys.stdin.readline().split()))\n\nn = I()\na = LI()\nx = []\nfor i in range(n):\n    if i+1 > a[i]:\n        x.append((a[i],i+1))\n    else:\n        x.append((i+1,a[i]))\nprint(n-len(list(set(x))))\n", "code2": "N = int(input())\nAs = list(map(int, input().split()))\nAs = [a-1 for a in As]\nr = 0\nfor i in range(N):\n  j = As[i]\n  if i < j and i == As[j]:\n    r += 1\nprint(r)\n", "label": 1, "name1": "s190944842.py", "name2": "s017164630.py"}, {"id": 661, "code1": "import math, sys\n\ndef loadable(w, n, k, p, wsum):\n    wait = 0\n    for i in range(n):\n        wait += w[i]\n        wsum -= w[i]\n        if wait > p:\n            k -= 1\n            wait = w[i]\n            if k == 0 or p < wsum / k:\n                return False\n    return True\n\nn, k = map(int, sys.stdin.readline().split())\nw = [int(sys.stdin.readline()) for _ in range(n)]\n\nwsum = sum(w)\n\np = max(int(math.ceil(wsum / k)), max(w))\npre_f = p -1\npre_s = None\n\nwhile True:\n    if loadable(w, n, k, p, wsum):\n        pre_s = p\n    else:\n        pre_f = p\n\n    if pre_s != None and pre_s - pre_f == 1:\n            break\n    \n    if pre_s:\n        p = int((pre_s + pre_f) / 2)\n    else:\n        p = math.ceil(p * 1.01)\n    \nprint(pre_s)", "code2": "s = list(input())\nt = list(input())\nans = [-1, -1]\nif len(t) <= len(s):\n    for i in range(len(s) - len(t) + 1):\n        c = 1\n        for j in range(len(t)):\n            if s[i + j] != \"?\" and t[j] != s[i + j]:\n                c = 0\n                break\n        if c == 1:\n            ans = [i, i + len(t)]\n\nif ans != [-1, -1]:\n    k = []\n    for i in range(len(s)):\n        if ans[0] <= i < ans[1]:\n            k.append(t[i - ans[0]])\n        else:\n            if s[i] == \"?\":\n                k.append(\"a\")\n            else:\n                k.append(s[i])\n    print(\"\".join(k))\nelse:\n    print(\"UNRESTORABLE\")\n", "label": 0, "name1": "s671645015.py", "name2": "s590642866.py"}, {"id": 387, "code1": "import sys\ninput = sys.stdin.readline\na, b, x = [int(x) for x in input().split()]\nB = 1 + b // x\nif a == 0:\n    print(B)\nelif a % x == 0:\n    A = 1 + a // x\n    print(B - A + 1)\nelse:\n    A = 1 + a // x\n    print(B - A)\n", "code2": "a,b,x=map(int,input().split())\n\nq1,r1=divmod(a,x)\nq2,_=divmod(b,x)\n\nprint(q2-q1+(r1==0))", "label": 1, "name1": "s444272977.py", "name2": "s935190491.py"}, {"id": 709, "code1": "a, b, c = map(int, input().split())\nans = c - (a - b)\n\nif ans >= 0:\n    print(ans)\nelse:\n    print(0)", "code2": "import sys\ndef input(): return sys.stdin.readline().strip()\n\n\ndef main():\n    a, b, c = map(int, input().split())\n    m = max(a, b, c)\n    print(a + b + c - m)\n\n\nif __name__ == \"__main__\":\n    main()\n", "label": 0, "name1": "s855957951.py", "name2": "s149362178.py"}, {"id": 626, "code1": "a,b=map(int,input().split())\nif b >= a:\n  print(a)\nelse:\n  print(a-1)", "code2": "N = int(raw_input())\nT_list = map(int, raw_input().split())\nA_list = map(int, raw_input().split())\n\nlow_list = [1]*N\nhigh_list = [1]*N\n\nt_now = 0\nfor i in range(N):\n    if T_list[i] > t_now:\n        t_now = T_list[i]\n        low_list[i] = T_list[i]\n        high_list[i] = T_list[i]\n    else:\n        high_list[i] = T_list[i]\na_now = 0\nfor j in range(N):\n    i = N - 1 - j\n    if A_list[i] > a_now:\n        a_now = A_list[i]\n        low_list[i] = max(A_list[i], low_list[i])\n        high_list[i] = min(A_list[i], high_list[i])\n    else:\n        high_list[i] = min(A_list[i], high_list[i])\n    \nres = 1\nfor i in range(N):\n    if high_list[i] < low_list[i]:\n        res = 0\n        break\n    else:\n        res = res*(high_list[i] - low_list[i] + 1) % 1000000007\n\nprint res", "label": 0, "name1": "s714654685.py", "name2": "s251140241.py"}, {"id": 798, "code1": "# coding:utf-8\n\nimport sys\n\n\ninput = sys.stdin.readline\nINF = float('inf')\nMOD = 10 ** 9 + 7\n\n\ndef inpl(): return list(map(int, input().split()))\n\n\n# a\u306ep\u4e57\u3092\u6c42\u3081\u308b\u30a2\u30eb\u30b4\u30ea\u30ba\u30e0\n# MOD\u7248\ndef pow_mod(a, p):\n    if p == 0: return 1\n\n    if p % 2 == 0:\n        half_p = p // 2\n        half = pow_mod(a, half_p)\n        return half * half % MOD\n    else:\n        return a * pow_mod(a, p - 1) % MOD\n\n\ndef solve(N, A):\n    # \u968e\u4e57N!\u3092\u6c42\u3081\u308b\n    fact = [1] * N\n    for i in range(1, N):\n        fact[i] = fact[i - 1] * (i + 1) % MOD\n\n    # 1/N!\u306e\u9006\u5143\u3092\u6c42\u3081\u308b\n    fact_inv = [1] * N\n    fact_inv[-1] = pow_mod(fact[-1], MOD - 2)\n    for i in range(N - 1, 0, -1):\n        tmp = fact_inv[i] * (i + 1)\n        tmp %= MOD\n        fact_inv[i - 1] = tmp\n\n    # 1/k\u3092\u6c42\u3081\u308b\n    inv = [1]\n    for i in range(1, N):\n        inv.append((fact[i - 1] * fact_inv[i]) % MOD)\n\n    # 1/k\u306e\u7d2f\u7a4d\u548c\u3092\u6c42\u3081\u308b\n    inv_sum = [1]\n    for i in range(1, N):\n        inv_sum.append((inv_sum[-1] + inv[i]) % MOD)\n\n    # \u7d2f\u7a4d\u548c\u306e\u7d50\u679c\u3092\u4fc2\u6570\u3068\u3057\u3066Ai\u306b\u639b\u3051\u3066\u3001\u52a0\u7b97\u3059\u308b\n    ans = 0\n    for i in range(N):\n        ans += A[i] * (inv_sum[i] + inv_sum[N - 1 - i] - 1)\n        ans %= MOD\n\n    # ans\u306bN!\u3092\u639b\u3051\u305f\u3082\u306e\u3092\u8fd4\u3059\n    return ans * fact[-1] % MOD\n\n\nN = int(input())\nA = inpl()\nprint(solve(N, A))\n", "code2": "N = int(input())\nimport sys\nsys.setrecursionlimit(N+10)\n\nes = [[] for _ in range(N)]\nfor i in range(N-1):\n    a,b = map(int, input().split())\n    a,b = a-1, b-1\n    es[a].append(b)\n    es[b].append(a)\n\n\"\"\"\n\u76f8\u624b\u306e\u53d6\u308c\u308b\u30de\u30b9\u76ee\u3092\u6e1b\u3089\u3059\u3088\u3046\u306b\u3068\u308b\u3068\u3088\u3044\n\u76f8\u624b\u3088\u308a\u305d\u306e\u30de\u30b9\u306b\u8fd1\u3051\u308c\u3070\u305d\u306e\u30de\u30b9\u3092\u53d6\u5f97\u3067\u304d\u308b\n\u30d5\u30a7\u30cd\u30c3\u30af\u304f\u3093\u3001\u3059\u306c\u3051\u541b\u306b\u3064\u3044\u3066\u521d\u671f\u5730\u70b9\u304b\u3089\u305d\u308c\u305e\u308c\u3078\u306e\u8ddd\u96e2\u304c\u5fc5\u8981\n\"\"\"\ndef solve(now, depth, depth_list, es, visited):\n    visited[now] = True\n    depth_list[now] = depth\n    for next in es[now]:\n        if visited[next] == False:            \n            solve(next, depth+1, depth_list, es, visited)\n\ndepth_list_F = [0] * N\nvisited_F = [False] * N\nsolve(0, 0, depth_list_F, es, visited_F)\n\ndepth_list_S = [0] * N\nvisited_S = [False] * N\nsolve(N-1, 0, depth_list_S, es, visited_S)\n\ncnt_F = cnt_S = 0\nfor f,s in zip(depth_list_F, depth_list_S):\n    if f <= s:\n        cnt_F += 1 # \u30d5\u30a7\u30cd\u30c3\u30af\u541b\u304b\u3089\u59cb\u3081\u308b\u306e\u3067\u540c\u3058\u8ddd\u96e2\u306a\u3089\u30d5\u30a7\u30cd\u30c3\u30af\u541b\u304c\u3068\u308b\n    else:\n        cnt_S += 1\n\nif cnt_F > cnt_S:\n    print(\"Fennec\")\nelse:\n    print(\"Snuke\")", "label": 0, "name1": "s535253599.py", "name2": "s940891501.py"}, {"id": 417, "code1": "def gcd(x,y):\n    a=max(x,y)\n    b=min(x,y)\n    if a%b==0:\n        return b\n    else:\n        return gcd(b,a%b)\n\ndef lcm(x,y):\n    return (x*y)//gcd(x,y)\n\nN=int(input())\nans=1\nfor i in range(N):\n    ans=lcm(ans,int(input()))\nprint(ans)\n", "code2": "N = int(input())\n\ndef gcd(a, b):\n    while b:\n        a, b = b, a % b\n    return a\n\ndef lcm(a, b):\n    return a * b // gcd(a, b)\n\ns = int(input())\nfor i in range(N - 1):\n    tmp = int(input())\n    s = lcm(s, tmp)\n\nprint(s)\n", "label": 1, "name1": "s751000860.py", "name2": "s550486741.py"}, {"id": 240, "code1": "N, K = map(int, input().split())\nW = [int(input()) for w in range(N)]\n\ndef check(p):\n    i = 0\n    for _ in range(K):\n        s = 0\n        while s + W[i] <= p:\n            s += W[i]\n            i += 1\n            if i == N:\n                return N\n    return i\n\nleft = 0\nright = 100000 * 10000\nmid = 0\nwhile 1 < right - left:\n    mid = (left + right) / 2\n    v = check(mid)\n    if v >= N:\n        right = mid\n    else:\n        left = mid\n\nprint(int(right))\n", "code2": "\n\ndef p(k,w,maxP):\n    count = 1\n    tmpWeight = 0\n    for x in w:\n        if tmpWeight+x <= maxP:\n            tmpWeight += x\n        else:\n            count += 1\n            if count > k :\n                return False\n            tmpWeight = x\n    \n\n    return True\n\n\n\n\nn,k = map(int,input().split())\n\n\nw = []\n\nfor _ in range(n):\n    w.append((int)(input()))\nrangeMax = sum(w)\nrangeMin = max(w)\nrangeMid = 0\nwhile rangeMin < rangeMax:\n    rangeMid = (rangeMax + rangeMin)//2\n    '''print(p(k,w,rangeMid))\n    print(p(k,w,rangeMid+1))\n    print(\"---\")\n    '''\n    if p(k,w,rangeMid) == True:\n        rangeMax = rangeMid\n    else:\n        rangeMid += 1\n        rangeMin = rangeMid\n\nprint(rangeMid)", "label": 1, "name1": "s152551733.py", "name2": "s671940499.py"}, {"id": 578, "code1": "a,b,c=map(int,input().split())\nif (a>c and b<c) or (a<c and b>c):\n  print(\"Yes\")\nelse:\n  print(\"No\")", "code2": "import sys\nread = sys.stdin.buffer.read\nreadline = sys.stdin.buffer.readline\nreadlines = sys.stdin.buffer.readlines\n\nimport numpy as np\n\nN = int(readline())\nS = read().rstrip().decode('utf-8')\n\nMOD = 10**9 + 7\n\n\"\"\"\n\u30fb\u6700\u5f8c\u306b\u4f7f\u3063\u305f\u6570\u306b\u5bfe\u3057\u3066\u3001\u4e0b\u5074\u306b\u6b8b\u3063\u3066\u3044\u308b\u500b\u6570 -> \u6570\u3048\u4e0a\u3052\n\"\"\"\n\ndp = np.ones(N,np.int64) # \u5de6\u7aef\n\nfor s in S:\n    prev = dp\n    if s == '<':\n        # 0,1,...,n\u304cdp[n]\u306b\u9077\u79fb\u3059\u308b\n        dp = prev[:-1].cumsum()\n    else:\n        # n+1,n+2,...\u304cdp[n]\u306b\u9077\u79fb\u3059\u308b\n        dp = prev[1:][::-1].cumsum()[::-1]\n    dp %= MOD\n\nanswer = dp[0]\nprint(answer)", "label": 0, "name1": "s473634907.py", "name2": "s898339720.py"}, {"id": 418, "code1": "def gcd(x,y):\n    a=max(x,y)\n    b=min(x,y)\n    if a%b==0:\n        return b\n    else:\n        return gcd(b,a%b)\n\ndef lcm(x,y):\n    return (x*y)//gcd(x,y)\n\nN=int(input())\nans=1\nfor i in range(N):\n    ans=lcm(ans,int(input()))\nprint(ans)\n", "code2": "from functools import reduce\n\ndef gcd(a, b):\n  while b > 0:\n    a, b = b, a%b\n  return a\n\ndef lcm(x, y):\n  return (x * y) // gcd(x, y)\n\ndef lcm_list(numbers):\n  return reduce(lcm, numbers, 1)\n\nn = [int(input()) for _ in range(int(input()))]\nprint(lcm_list(n))", "label": 1, "name1": "s751000860.py", "name2": "s973589852.py"}, {"id": 95, "code1": "n,k = map(int, input().split())\namari=n%k\nn=min(amari, k-amari)\nprint(n)", "code2": "n, k = map(int, input().split())\nprint(min(n % k, k - (n % k)))\n", "label": 1, "name1": "s328388206.py", "name2": "s724434402.py"}, {"id": 332, "code1": "a,b,c=map(int,input().split())\nprint(min(a+b,b+c,c+a))\n", "code2": "a,b,c=map(int,input().split())\nprint(a+b+c-max(a,b,c))\n", "label": 1, "name1": "s997903196.py", "name2": "s103668115.py"}, {"id": 943, "code1": "N=int(input())\na=list(map(int,input().split()))\ndef cond(n):\n    L=(0,-1)\n    for i in range(1,N):\n        if a[i]>=n and a[i-1]>=n:\n            L=(i,1)\n        elif a[i]<n and a[i-1]<n:\n            L=(i,0)\n\n    R=(2*N-1,-1)\n    for i in range(2*N-3,N-2,-1):\n        if a[i]>=n and a[i+1]>=n:\n            R=(i,1)\n        elif a[i]<n and a[i+1]<n:\n            R=(i,0)\n\n    if L[1]==-1 and R[1]==-1:\n        return a[0]>=n\n    elif L[1]==-1:\n        return R[1]==1\n    elif R[1]==-1:\n        return L[1]==1\n    elif L[1]==R[1]:\n        return R[1]==1\n    else:\n        if L[1]==0:\n            return N-1-L[0]>R[0]-(N-1)\n        else:\n            return N-1-L[0]<R[0]-(N-1)\n\n\nstart=1\nend=2*N-1\nwhile end-start>1:\n    test=(end+start)//2\n    if cond(test):\n        start=test\n    else:\n        end=test\nif cond(end):\n    print(end)\nelse:\n    print(start)", "code2": "n = input()\ncnt = 0\nfor i in range(len(n)):\n    if n[i] == '2':\n        cnt += 1\nprint(cnt)", "label": 0, "name1": "s882473833.py", "name2": "s798013515.py"}, {"id": 737, "code1": "\nX, Y = list(map(int, input().split()))\n\nans = 0\nwhile X <= Y:\n\tX *= 2\n\tans += 1\n\nprint(ans)", "code2": "from heapq import heappush,heappop\nINF=10**18\nn,m,r=map(int,input().split())\ne=[[] for _ in range(n)]\nd=[INF]*n\nfor i in range(m):\n  a,b,c=map(int,input().split())\n  e[a].append((b,c))\nq=[]\nheappush(q,(0,r))\nd[r]=0\nwhile q:\n  dist,node=heappop(q)\n  for to,cost in e[node]:\n    if d[to]>cost+dist:\n      d[to]=cost+dist\n      heappush(q,(d[to],to))\nfor i in d:\n  if i!=INF:print(i)\n  else:print('INF')\n", "label": 0, "name1": "s831535184.py", "name2": "s737089154.py"}, {"id": 278, "code1": "while True:\n    n,x = map(int,raw_input().split())\n    count = 0;\n    if n == 0 and x == 0:break\n    for i in range(1,n + 1):\n        for j in range(1,n + 1):\n            if i == j:break\n            for k in range(1,n + 1):\n                if j == k:break\n                if i + j + k == x:\n                    count+=1\n                    break\n    print count", "code2": "while True:\n    cnt = 0\n    n, x = map(int, input().split())\n    if n == x == 0:\n        break\n    for i in range(1, n - 1):\n        for j in range(i + 1, n):\n            for k in range(j + 1, n + 1):\n                if i + j + k == x:\n                    cnt += 1;\n    print(cnt)", "label": 1, "name1": "s748079428.py", "name2": "s316619513.py"}, {"id": 13, "code1": "S = input()\nodd = S[0::2]\neven = S[1::2]\nans = 'No'\n\nif 'L' not in odd:\n    if 'R' not in even:\n        ans = 'Yes'\n\nprint(ans)", "code2": "steps = input()\n\nodd_steps = [x for i, x in enumerate(steps) if i % 2 == 0]\neven_steps = [x for i, x in enumerate(steps) if i % 2 == 1]\n\nif \"L\" in odd_steps or \"R\" in even_steps:\n  print(\"No\")\nelse:\n  print(\"Yes\")", "label": 1, "name1": "s134920706.py", "name2": "s237740005.py"}, {"id": 384, "code1": "h, w = map(int, input().split())\na = [list(input()) for i in range(h)]\nta = [[\".\"] * w for i in range(h)]\nao = [[\".\"] * w for i in range(h)]\nfor i in range(h):\n    if i % 2 == 0:\n        for j in range(w - 1):\n            ta[i][j] = \"#\"\n        ao[i][-1] = \"#\"\n    else:\n        for j in range(1, w):\n            ao[i][j] = \"#\"\n        ta[i][0] = \"#\"\nfor i in range(h):\n    for j in range(w):\n        if a[i][j] == \"#\":\n            ta[i][j] = \"#\"\n            ao[i][j] = \"#\"\nfor i in range(h):\n    print(*ta[i], sep=\"\")\nprint()\nfor i in range(h):\n    print(*ao[i], sep=\"\")", "code2": "# coding:utf-8\n\nINF = float('inf')\n\n\ndef inpl(): return list(map(int, input().split()))\n\n\nH, W = inpl()\n\nX = [list(input()) for _ in range(H)]\n\nA = [['.' for _ in range(W)] for _ in range(H)]\nB = [['.' for _ in range(W)] for _ in range(H)]\ntmp = ['#' for _ in range(W - 1)]\nfor i in range(H):\n    if i % 2 == 0:\n        A[i][:-1] = tmp\n        B[i][-1] = '#'\n    else:\n        B[i][1:] = tmp\n        A[i][0] = '#'\n\nfor h in range(H):\n    for w in range(W):\n        if X[h][w] == '#':\n            A[h][w] = '#'\n            B[h][w] = '#'\n\nfor a in A:\n    print(''.join(a))\nprint('')\nfor b in B:\n    print(''.join(b))\n", "label": 1, "name1": "s319820171.py", "name2": "s776974411.py"}, {"id": 239, "code1": "import math, sys\n\ndef loadable(w, n, k, p, wsum):\n    wait = 0\n    for i in range(n):\n        wait += w[i]\n        wsum -= w[i]\n        if wait > p:\n            k -= 1\n            wait = w[i]\n            if k == 0 or p < wsum / k:\n                return False\n    return True\n\nn, k = map(int, sys.stdin.readline().split())\nw = [int(sys.stdin.readline()) for _ in range(n)]\n\nwsum = sum(w)\n\np = max(int(math.ceil(wsum / k)), max(w))\npre_f = p -1\npre_s = None\n\nwhile True:\n    if loadable(w, n, k, p, wsum):\n        pre_s = p\n    else:\n        pre_f = p\n\n    if pre_s != None and pre_s - pre_f == 1:\n            break\n    \n    if pre_s:\n        p = int((pre_s + pre_f) / 2)\n    else:\n        p = math.ceil(p * 1.01)\n    \nprint(pre_s)", "code2": "def canLoad(n, k, p):\n    global w\n    load = 0\n    for i in range(n):\n        load += w[i]\n        if load <= p:\n            continue\n        k -= 1\n        if k == 0:\n            return False\n        load = w[i]\n    return True\n\ndef solve(n, k, pmin, pmax):\n    if pmin + 1 >= pmax:\n        return pmax\n    newp = (pmax + pmin) // 2\n    if canLoad(n, k, newp):\n        return solve(n, k, pmin, newp)\n    else:\n        return solve(n, k, newp, pmax)\n\nn, k = map(int, input().split())\nw = [0]*n\nwsum = 0\nwmax = 0\nfor i in range(n):\n    w[i] = int(input())\n    wsum += w[i]\n    if w[i] > wmax:\n        wmax = w[i]\n\n# p \u306e\u6700\u5c0f\u306e\u5019\u88dc\u306f wmax \u3068 ceil(wsum/k) \u306e\u6700\u5927\u5024\npmin = max(wmax, wsum // k if wsum % k == 0 else wsum // k + 1)\npmax = wsum\np = pmin\nif not canLoad(n, k, pmin):\n    p = solve(n, k, pmin, pmax)\nprint(p)\n\n", "label": 1, "name1": "s671645015.py", "name2": "s457118576.py"}, {"id": 914, "code1": "from collections import defaultdict\n\nH,W = map(int,input().split())\na = [[] for _ in range(H)]\nfor i in range(H):\n    a[i] = list(input())\n\nd = defaultdict(int)\nfor i in range(H):\n    for j in range(W):\n        d[a[i][j]] += 1\n\nc4,c2 = 0,0\nfor k in d.keys():\n    c4 += d[k]//4\n    c2 += (d[k]%4)//2\n\nif H%2 + W%2 == 0:\n    if c4 == H*W//4:\n        print(\"Yes\")\n    else:\n        print(\"No\")\nelif H%2 + W%2 == 1:\n    if H%2 == 1:\n        if c4 < (H-1)*W//4:\n            print(\"No\")\n        else:\n            c4 -= (H-1)*W//4\n            c2 += c4*2\n            if c2 == W//2:\n                print(\"Yes\")\n            else:\n                print(\"No\")\n    if W%2 == 1:\n        if c4 < H*(W-1)//4:\n            print(\"No\")\n        else:\n            c4 -= H*(W-1)//4\n            c2 += c4*2\n            if c2 == H//2:\n                print(\"Yes\")\n            else:\n                print(\"No\")\nelse:\n    if c4 < (H-1)*(W-1)//4:\n        print(\"No\")\n    else:\n        c4 -= (H-1)*(W-1)//4\n        c2 += c4*2\n        if c2 == (H-1)//2+(W-1)//2:\n            print(\"Yes\")\n        else:\n            print(\"No\")", "code2": "# ARC075C - Bugged (ABC063C)\ndef main():\n    n = int(input())\n    lst = list(map(int, [input().rstrip() for _ in range(n)]))\n    total = sum(lst)\n    if total % 10 != 0:\n        print(total)\n    else:\n        ans = 0\n        for i in set(lst):\n            if (total - i) % 10 != 0:\n                ans = max(ans, total - i)\n        print(ans)\n\n\nif __name__ == \"__main__\":\n    main()", "label": 0, "name1": "s520771694.py", "name2": "s165497353.py"}, {"id": 437, "code1": "# \u9802\u70b9 v \u306e\u6240\u5c5e\u3059\u308b\u30b0\u30eb\u30fc\u30d7\u3092\u8abf\u3079\u308b\ndef root(v, uni):\n  if uni[v] < 0:  # v \u304c\u89aa\u306e\u5834\u5408\n    return v\n  else:           # v \u304c\u5b50\u306e\u5834\u5408\n    uni[v] = root(uni[v], uni)  # \u89aa\u306eroot\u3092\u8abf\u3079\u308b\n    return uni[v]\n\n# \u9802\u70b9 a \u3068\u9802\u70b9 b \u3092\u3064\u306a\u3050\u3002\u3082\u3068\u3082\u3068\u540c\u3058\u30b0\u30eb\u30fc\u30d7\u306e\u3068\u304d\u3001False \u3092\u8fd4\u3059\ndef connect(a, b, uni):\n  # \u307e\u305a\u306f\u305d\u308c\u305e\u308c\u6839\u306e\u756a\u53f7\u306b\u7f6e\u304d\u63db\u3048\u308b\n  ra = root(a, uni)\n  rb = root(b, uni)\n  if ra == rb:  # a \u3068 b \u304c\u305d\u3082\u305d\u3082\u540c\u3058\u30b0\u30eb\u30fc\u30d7\u306b\u5c5e\u3057\u3066\u3044\u308b\u306a\u3089\u5373\u7d42\u4e86\n    return False\n\t\n  # ra \u3092\u5927\u304d\u306a\u30b0\u30eb\u30fc\u30d7\u306b\u3057\u305f\u3044\u306e\u3067\u3001\u9006\u3067\u3042\u308c\u3070\u5165\u308c\u66ff\u3048\u308b\n  if uni[ra] > uni[rb]: # rb\u306e\u65b9\u304c\u8981\u7d20\u6570\u304c\u591a\u3051\u308c\u3070\n    tmp = ra\n    ra  = rb \n    rb  = tmp\n\n  # ra \u3068 rb \u3092\u7d50\u5408\u3057\u3001rb \u306e\u89aa\u3092 ra \u3068\u3059\u308b\n  uni[ra] += uni[rb]\n  uni[rb] = ra\n  return True\n      \n##\nN, K, L = map(int, input().split())\n\nroad = [-1]*(N+1)\nrail = [-1]*(N+1)\n\nfor i in range(K):\n  a, b = map(int, input().split())\n  connect(a, b, road)\n\nfor i in range(L):\n  a, b = map(int, input().split())\n  connect(a, b, rail)\n\n\n##\ndp = [0]*(N+1)\nfor i in range(1, N+1):\n  dp[i] = (root(i, road), root(i, rail))\n\ndic = {}\nfor i in range(1, N+1):\n  key = dp[i]\n  if key not in dic:\n    dic[key] = 1\n  else:\n    dic[key] += 1\n\nfor i in range(1, N+1):\n  ans = dic[dp[i]]\n  if i == N:\n    print(ans)\n  else:\n    print(ans, end=\" \")\n", "code2": "# D\nclass UnionFind:\n    \"\"\"size(int)\u3092\u6307\u5b9a\n    root(x:int)->int:      \u6839\u3092\u6c42\u3081\u308b\n    unite(x,y:int):        \u8981\u7d20\u3092\u30b0\u30eb\u30fc\u30d7\u306b\u307e\u3068\u3081\u308b \n    isSame(x,y:int)->bool: \u8981\u7d20\u540c\u58eb\u304c\u540c\u3058\u30b0\u30eb\u30fc\u30d7\u304b\u5224\u5b9a\u3059\u308b\n    \"\"\"\n    # \u5206\u96e2\u306f\u3067\u304d\u306a\u3044\n    # \u59cb\u3081\u5404\u8981\u7d20\u306f\u5225\u3005\u306e\u30b0\u30eb\u30fc\u30d7  \n    def __init__(self, size: int):\n        self.par = [-1]*size # \u89aa\u306e\u756a\u53f7\n        for i in range(size):\n            self.par[i] = i  # \u306f\u3058\u3081 \u3059\u3079\u3066\u306e\u9802\u70b9\u304c\u6839\n    \n    def root(self, x: int) -> int:\n        \"\"\"\u6839\u3092\u6c42\u3081\u308b\"\"\"\n        if self.par[x] == x: # if root\n            return x\n        else:\n            self.par[x] = self.root(self.par[x]) # \u7d4c\u8def\u5727\u7e2e\n            return self.par[x]\n    \n    def isSame(self, x:int, y:int)->bool:\n        \"\"\"x \u3068 y \u304c\u540c\u3058\u96c6\u5408\u306b\u5c5e\u3059\u308b\u304b\u5426\u304b\"\"\"\n        return self.root(x)==self.root(y)\n    \n    def unite(self, x:int, y:int):\n        \"\"\"x \u3068 y \u306e\u5c5e\u3059\u308b\u96c6\u5408\u3092\u4f75\u5408\"\"\"\n        x = self.root(x)\n        y = self.root(y)\n        if x == y: return\n        self.par[x] = y\n        \n# ------------------\nN,K,L = map(int, input().split())\nuf_k = UnionFind(N)\nuf_l = UnionFind(N)\nfor _ in range(K):\n    p,q = map(int, input().split())\n    uf_k.unite(p-1, q-1)\nfor _ in range(L):\n    r,s= map(int, input().split())\n    uf_l.unite(r-1, s-1)\n\ncnt = dict()\nfor i in range(N):\n    r_k,r_l = uf_k.root(i), uf_l.root(i)\n    if (r_k,r_l) in cnt.keys():\n        cnt[(r_k,r_l)] += 1\n    else:\n        cnt[(r_k,r_l)] = 1\n\nans = []\nfor i in range(N):\n    r_k,r_l = uf_k.root(i), uf_l.root(i)\n    ans.append(cnt[(r_k,r_l)])\nprint(*ans, sep=\" \", end=\"\\n\")", "label": 1, "name1": "s866905054.py", "name2": "s968458364.py"}, {"id": 607, "code1": "import sys\n\nimport bisect\n\n# from collections import Counter, deque, defaultdict\n\n# import copy\n# from heapq import heappush, heappop, heapify\n# from fractions import gcd\n# import itertools\n# from operator import attrgetter, itemgetter\nimport math\n\n# import numpy as np\n\nreadline = sys.stdin.readline\nMOD = 10 ** 9 + 7\nINF = float('INF')\nsys.setrecursionlimit(10 ** 5)\n\n\ndef main():\n    q = int(input())\n\n    for i in range(q):\n        a, b = list(map(int, readline().split()))\n\n        if a > b:\n            a, b = b, a\n\n        if a == b or a + 1 == b:\n            print(2 * a - 2)\n        else:\n            ab = a * b\n            ok = 0\n            ng = int(ab ** 0.5) + 1000000\n            while abs(ng - ok) > 1:\n                mid = (ok + ng) // 2\n                if mid ** 2 < ab:\n                    ok = mid\n                else:\n                    ng = mid\n            c = ok\n\n            if c * (c + 1) < ab:\n                print(2 * c - 1)\n            else:\n                print(2 * c - 2)\n\n\nif __name__ == '__main__':\n    main()\n", "code2": "while 1:\n\tW, H = map(int,raw_input().split(\" \"))\n\tif W == H == 0: \n\t\tbreak\n\tfield = [[c for c in raw_input()] for _ in range(H)]\n\tsecret = [0, \"\"]\n\tfor j in range(H):\n\t\tfor i in range(W):\n\t\t\tif not field[j][i].isdigit():\n\t\t\t\tcontinue\n\t\t\tleft = top = \"\"\n\t\t\tif i > 0 and field[j][i-1].isdigit() and field[j][i-1] != \"0\":\n\t\t\t\tleft = field[j][i-1]\n\t\t\tif j > 0 and field[j-1][i].isdigit() and field[j-1][i] != \"0\":\n\t\t\t\ttop = field[j-1][i]\n\t\t\tif len(left) == len(top):\n\t\t\t\tfield[j][i] = (left if left > top else top) + field[j][i]\n\t\t\telse :\n\t\t\t\tfield[j][i] = (left if len(left) > len(top) else top) + field[j][i]\n\t\t\tlength = len(field[j][i])\n\t\t\tif length > secret[0]:\n\t\t\t\tsecret[1] = field[j][i]\n\t\t\t\tsecret[0] = length\n\t\t\telif length == secret[0] and field[j][i] > secret[1]:\n\t\t\t\tsecret[1] = field[j][i]\n\tprint secret[1]", "label": 0, "name1": "s587240804.py", "name2": "s782922064.py"}, {"id": 992, "code1": "import sys\nstdin = sys.stdin\n \nsys.setrecursionlimit(10**5) \n \ndef li(): return map(int, stdin.readline().split())\ndef li_(): return map(lambda x: int(x)-1, stdin.readline().split())\ndef lf(): return map(float, stdin.readline().split())\ndef ls(): return stdin.readline().split()\ndef ns(): return stdin.readline().rstrip()\ndef lc(): return list(ns())\ndef ni(): return int(stdin.readline())\ndef nf(): return float(stdin.readline())\n\nfrom heapq import heappush, heappop\n\nn = ni()\nd = list(li())\n\ndef isok(dur: int, d: list):\n    pque = [24]\n    for di in d:\n        heappush(pque, di)\n\n    cur = 0\n    while pque:\n        tmp = heappop(pque)\n        if tmp - cur < dur and tmp >= 12:\n            return False\n        \n        elif tmp - cur < dur:\n            heappush(pque, 24-tmp)\n            \n        else:\n            cur = tmp\n        \n    return True\n\nans = 13\nfor cand in range(12, -1, -1):\n    if isok(cand, d):\n        ans = cand\n        break\n        \nprint(ans) ", "code2": "while 1:\n    t = int(input())\n    if t == 0: break\n    n = int(input())\n    i = 0\n    sum = 0\n    while i < n:\n        s, f = map(int, input().split())\n        a = f - s\n        sum = sum + a\n        i += 1\n    if sum < t:\n        print(t - sum)\n    else:\n        print(\"OK\")\n", "label": 0, "name1": "s479594239.py", "name2": "s795734559.py"}, {"id": 659, "code1": "N, K = map(int, input().split())\nW = [int(input()) for w in range(N)]\n\ndef check(p):\n    i = 0\n    for _ in range(K):\n        s = 0\n        while s + W[i] <= p:\n            s += W[i]\n            i += 1\n            if i == N:\n                return N\n    return i\n\nleft = 0\nright = 100000 * 10000\nmid = 0\nwhile 1 < right - left:\n    mid = (left + right) / 2\n    v = check(mid)\n    if v >= N:\n        right = mid\n    else:\n        left = mid\n\nprint(int(right))\n", "code2": "N = int(input())\nA = [int(_) - 1 for _ in input().split()]\nans = 0\nfor i in range(N):\n    if i < A[i] and A[A[i]] == i:\n        ans += 1\nprint(ans)\n", "label": 0, "name1": "s152551733.py", "name2": "s038697693.py"}, {"id": 390, "code1": "a,b,x=map(int,input().split())\n\nq1,r1=divmod(a,x)\nq2,_=divmod(b,x)\n\nprint(q2-q1+(r1==0))", "code2": "start, end, div = list(map(int, input().strip().split()))\n\ncount = end // div - start //div\n\nif start % div == 0:\n  count += 1\nprint(count)", "label": 1, "name1": "s935190491.py", "name2": "s009071418.py"}, {"id": 34, "code1": "def main():\n    N, A, B = map(int, input().split())\n    X = map(int, input().split())\n\n    ret = 0\n    curr = next(X)\n    for x in X:\n        ret += min((x - curr) * A, B)\n        curr = x\n    print(ret)\n\n\nif __name__ == '__main__':\n    main()\n", "code2": "n,a,b=map(int,input().split())\nlst=list(map(int,input().split()))\n\npin=lst[0]\nans=0\n\nfor i in range(1,n):\n  ans+=min((lst[i]-lst[i-1])*a,b)\n  \nprint(ans)", "label": 1, "name1": "s627561056.py", "name2": "s504779236.py"}, {"id": 831, "code1": "#!/usr/bin/env python3\n\n#import\n#import math\n#import numpy as np\nN = int(input())\nS = list(input())\n\nre = S.count(\"E\")\nrw = N - re\nle = 0\nlw = 0\n\nans = 10**9\n\nfor i in range(N):\n    if S[i] == \"E\":\n        re -= 1\n        ans = min(ans, re + lw)\n        le += 1\n    else:\n        rw -= 1        \n        ans = min(ans, re + lw)\n        lw += 1\n\nprint(ans)\n\n\n", "code2": "N = int(input())\nA = list(map(int,input().split()))\ncnt = 0\nfor i in range(N):\n    minj = i\n    for j in range(i+1,N):\n        if A[j] < A[minj]:\n            minj = j\n    if i != minj:\n        A[i],A[minj] = A[minj],A[i]\n        cnt += 1\nprint(*A)\nprint(cnt)\n\n", "label": 0, "name1": "s258995068.py", "name2": "s412559133.py"}, {"id": 136, "code1": "int_list = list(map(int, input().split(' ')))\n\nmax_int = max(int_list)\n\ncnt = 0\nfor i in range(3):\n    if i < max_int:\n        cnt_tmp = (max_int - int_list[i]) // 2\n        int_list[i] += 2 * cnt_tmp\n        cnt += cnt_tmp\n\nmin_int = min(int_list)\nint_list2 = sorted([i - min_int for i in int_list])\n\nif int_list2 == [0, 0, 0]:\n    print(cnt)\nelif int_list2 == [0, 0, 1]:\n    print(cnt + 1)\nelse:\n    print(cnt + 2)", "code2": "num = list(map(int, input().split()))\nnum.sort()\n\nx = num[2] * 3 - sum(num)\n\nif x%2 == 0:\n  ans = int(x/2)\nelse:\n  ans = int(x//2 + 2)\n\nprint(ans)\n", "label": 1, "name1": "s608249305.py", "name2": "s512155836.py"}, {"id": 603, "code1": "import sys\ninput = sys.stdin.readline\nQ = int(input())\n\ndef check(x, a, b):\n  y = (a <= -(-x // 2)) or (b <= -(-x // 2))\n  z = (a <= (x // 2 + 1)) and (b <= (x // 2 + 1))\n  return (-(-x // 2) + y) * ((x // 2 + 1) + z) < a * b\n\nfor _ in range(Q):\n  a, b = map(int, input().split())\n\n  ok = 0\n  ng = a * b\n  while ng - ok > 1:\n    m = (ok + ng) // 2\n    if check(m, a, b): ok = m\n    else: ng = m\n  print(ok)", "code2": "a=b=0\nfor i in input():c=i==\"T\";d=a>0;a+=1-c-c*d;b+=c*(1-d)\nprint(a+b)", "label": 0, "name1": "s809561228.py", "name2": "s373261912.py"}, {"id": 185, "code1": "a, b = map(int, input().split())\nif a > b:\n    print(a-1)\nelse:\n    print(a)", "code2": "a,b=map(int,input().split());print(a-(a>b))", "label": 1, "name1": "s737717931.py", "name2": "s930325906.py"}, {"id": 777, "code1": "import sys\nimport fractions\nfrom collections import Counter, deque, defaultdict\nfrom math import factorial\nimport heapq, bisect\nimport math\nimport itertools\nsys.setrecursionlimit(10 ** 5 + 10)\nINF = 10**15 +5\ndef input(): return sys.stdin.readline().strip()\ndef INT(): return int(input())\ndef MAP(): return map(int, input().split())\ndef LIST(): return list(map(int, input().split()))\n\nn = INT()\nt = [0]*n\nfor i in range(n):\n    t[i] = INT()\n\ndef lcm(a,b):\n    gcd = fractions.gcd(a,b)\n    a//=gcd\n    b//=gcd\n    return a*b*gcd\n    \nif n == 1:\n    print(t[0])\n    sys.exit()\n\nres = lcm(t[0],t[1])\nfor i in range(1,n-1):\n    res = lcm(res, t[i+1])\n\nprint(res)\n\n\n", "code2": "import math,string,itertools,fractions,heapq,collections,re,array,bisect,sys,random,time,copy,functools\n\nsys.setrecursionlimit(10**7)\ninf = 10**20\neps = 1.0 / 10**10\nmod = 998244353\ndd = [(0,-1),(1,0),(0,1),(-1,0)]\nddn = [(0,-1),(1,-1),(1,0),(1,1),(0,1),(-1,-1),(-1,0),(-1,1)]\n\ndef LI(): return [int(x) for x in sys.stdin.readline().split()]\ndef LI_(): return [int(x)-1 for x in sys.stdin.readline().split()]\ndef LF(): return [float(x) for x in sys.stdin.readline().split()]\ndef LS(): return sys.stdin.readline().split()\ndef I(): return int(sys.stdin.readline())\ndef F(): return float(sys.stdin.readline())\ndef S(): return input()\ndef pf(s): return print(s, flush=True)\n\n\ndef main():\n    rr = []\n\n    while True:\n        n = I()\n        if n == 0:\n            break\n\n        a = [S().split(':') for _ in range(n)]\n        ts = set([c[0] for c in a])\n        ms = {}\n        for t,m in a:\n            ms[t] = m[:-1].split(',')\n\n        fm = {}\n        def f(c):\n            if c in fm:\n                return fm[c]\n            if c in ts:\n                s = set()\n                for k in ms[c]:\n                    s |= f(k)\n                fm[c] = s\n                return s\n            fm[c] = set([c])\n            return fm[c]\n\n        r = f(a[0][0])\n\n        rr.append(len(r))\n\n    return '\\n'.join(map(str,rr))\n\n\nprint(main())\n\n\n", "label": 0, "name1": "s491119021.py", "name2": "s451877142.py"}, {"id": 260, "code1": "import re\n\ns = input().replace('?', '.')\nt = input()\n\nif len(t)>len(s):\n  print('UNRESTORABLE')\nelif len(t)==len(s):\n  if re.match(s, t):\n    print(t)\n  else:\n    print('UNRESTORABLE')\nelse:\n  for i in range(len(s)-len(t)+1):\n    check_str = s[len(s)-len(t)-i:len(s)-i]\n    if re.match(check_str, t):\n      break\n\n  if i==len(s)-len(t):\n    print('UNRESTORABLE')\n  else:\n    ans = s[:len(s)-len(t)-i] + t + s[len(s)-i:]\n    ans = ans.replace('.', 'a')\n    print(ans)", "code2": "s = input()\nt = input()\nS = len(s)\nT = len(t)\nans= ''\nfor i in range(S-T+1):\n    c = 1\n    for j in range(T):\n        if s[i+j] == t[j] or s[i+j] == '?':\n            continue\n        else:\n            c = 0\n    if c :\n        ans = s[0:i] + t + s[i+T:]\nif ans:\n    ans = ans.replace('?','a')\n    print(ans)\nelse:\n    print('UNRESTORABLE')", "label": 1, "name1": "s389752250.py", "name2": "s501602415.py"}, {"id": 286, "code1": "tree = [ [] for _ in range(4) ]\n\nfor i in range(3):\n    a, b = map(int, input().split())\n    a -= 1; b -= 1;\n    tree[a].append(b)\n    tree[b].append(a)\n\nfor i in range(4):\n    visited = [ False for _ in range(4) ]\n    cur = i\n    visited[cur] = True\n    for j in range(3):\n        for v in tree[cur]:\n            if not visited[v]:\n                next_v = v\n                break\n        visited[next_v] = True\n        cur = next_v\n\nprint ( \"YES\" if all(visited) else \"NO\" )\n", "code2": "towns = []\nfor i in range(3):\n    a, b = map(int, input().split())\n    towns.append(a)\n    towns.append(b)\nnums = []\nfor i in range(4):\n    nums.append(towns.count(i+1))\n\nif nums.count(1) == 2:\n    print(\"YES\")\nelse:\n    print(\"NO\")\n    ", "label": 1, "name1": "s679343249.py", "name2": "s337477086.py"}, {"id": 1001, "code1": "while 1:\n    t = int(input())\n    if t == 0: break\n    n = int(input())\n    i = 0\n    sum = 0\n    while i < n:\n        s, f = map(int, input().split())\n        a = f - s\n        sum = sum + a\n        i += 1\n    if sum < t:\n        print(t - sum)\n    else:\n        print(\"OK\")\n", "code2": "N = int(input())\nT, A = map(int, input().split())\nH = list(map(int, input().split()))\n\nans = []\n\nfor H in H:\n    ans.append(abs(T - H * 0.006 - A))\n    \nprint(ans.index(min(ans)) + 1)\n", "label": 0, "name1": "s795734559.py", "name2": "s554526166.py"}, {"id": 924, "code1": "N=int(input())\ns=[]\nfor i in range(N):\n    s.append(int(input()))\ns.sort()\n\nif sum(s)%10!=0:\n    ans=sum(s)\nelse:\n    f=False\n    for si in s:\n        if si%10!=0:\n            ans=sum(s)-si\n            f=True\n            break\n    if not f:\n        ans=0\n\nprint(ans)", "code2": "def aising19_c():\n    from collections import deque\n\n    h, w = (int(x) for x in input().split())\n    color = [[s == '#' for s in str(input())] for _ in range(h)]\n    used = [[False]*w for _ in range(h)]\n\n    ans = 0\n    for i in range(h):\n        for j in range(w):\n            if used[i][j]: continue\n            bk, wt = 0, 0\n            que = deque()\n            used[i][j] = True\n            que.append((i, j))\n            while que:\n                ci, cj = que.popleft()\n                if color[ci][cj]: bk += 1\n                else: wt += 1\n                for di, dj in ((-1,0),(0,-1),(0,1),(1,0)):\n                    ni, nj = ci+di, cj+dj\n                    if ni < 0 or h <= ni or nj < 0 or w <= nj: continue\n                    if color[ci][cj] == color[ni][nj]: continue\n                    if used[ni][nj]: continue\n                    used[ni][nj] = True\n                    que.append((ni, nj))\n            ans += bk * wt\n    print(ans)\n\nif __name__ == '__main__':\n    aising19_c()", "label": 0, "name1": "s777989048.py", "name2": "s472052550.py"}, {"id": 895, "code1": "for i in range(1000):\n    print \"Hello World\"", "code2": "x = int(input())\ndef is_prime(x):\n    if x <= 1:\n        return False\n    for i in range(2, int(x**0.5)+1):\n        if x % i == 0:\n            return False\n    return True\n\nwhile(not is_prime(x)):\n    x += 1\nprint(x)\n", "label": 0, "name1": "s267628664.py", "name2": "s723102572.py"}, {"id": 246, "code1": "N = int(input())\na = list(map(int, input().split()))\n\nans = 0\nfor i in range(N):\n  if a[a[i]-1] == i+1:\n    ans += 1\nprint(ans//2)", "code2": "N = int(input())\nA = [int(_) - 1 for _ in input().split()]\nans = 0\nfor i in range(N):\n    if i < A[i] and A[A[i]] == i:\n        ans += 1\nprint(ans)\n", "label": 1, "name1": "s364926848.py", "name2": "s038697693.py"}, {"id": 528, "code1": "import math\nimport statistics\n\nwhile(1):\n    n=int(input())\n    if(not n):\n        break\n    S=list(map(int,input().split(\" \")))\n    mean=statistics.mean(S)\n    #print(mean)\n    S=list(map(lambda x: (x-mean)**2, S))\n    #print(S)\n    print(math.sqrt(sum(S)/n))\n\n", "code2": "t =0\nfor a in range(4):\n  y = int(input())\n  t += y\nc = t\ng=0\nwhile True:\n if c <0: break\n else:\n  c-=60\n  g+=1\ng-=1\nprint g\nprint t%60", "label": 0, "name1": "s513646243.py", "name2": "s359341708.py"}, {"id": 145, "code1": "\n\ndef isPrime(n):\n    if n <= 1:\n        return False \n    if n == 2:\n        return True\n    if n % 2 == 0:\n        return False\n\n    i = 3\n    while i * i <= n :\n        if n % i == 0:\n            return False \n        i += 1\n\n    return True        \n# end of isPrime\n\nwhile True:\n    n = input()\n    if n == 0:break\n\n    ans = 0\n    for i in range(n + 1, n * 2 + 1):\n        if isPrime(i):ans += 1\n\n    print ans", "code2": "y = [True for i in range(250001)]\ny[0] = y[1] = False\nfor i in range(2, 500):\n    if y[i]:\n        for j in range(2, 250000 // i + 1):\n            y[i * j] = False\nwhile True:\n    n = int(input())\n    if n == 0:\n        break\n    print(y[n + 1 : n * 2 + 1].count(True))\n", "label": 1, "name1": "s415543076.py", "name2": "s889149636.py"}, {"id": 688, "code1": "a, b = [], []\nappear_count = [0] * 4\nfor _ in range(3):\n    _a, _b = map(int, raw_input().split())\n    appear_count[_a - 1] += 1\n    appear_count[_b - 1] += 1\nif max(appear_count) == 3:\n    print \"NO\"\nelse:\n    print \"YES\"", "code2": "import sys\ninput = sys.stdin.readline\n\nn, m = map(int, input().split())\nl = list(map(int, input().split()))\n\nif n >= m:\n    print(0)\n    sys.exit()\n    \nl.sort()\nle = len(l) - 1\nnl = [0] * le\nfor i in range(0, len(l) - 1):\n    nl[i] = l[i + 1] - l[i]\n    \nnl.sort()\nprint(sum(nl[:le - n + 1]))", "label": 0, "name1": "s562629657.py", "name2": "s202166785.py"}, {"id": 249, "code1": "N = int(input())\nA = [int(_) - 1 for _ in input().split()]\nans = 0\nfor i in range(N):\n    if i < A[i] and A[A[i]] == i:\n        ans += 1\nprint(ans)\n", "code2": "N = int(input())\nAs = list(map(int, input().split()))\nAs = [a-1 for a in As]\nr = 0\nfor i in range(N):\n  j = As[i]\n  if i < j and i == As[j]:\n    r += 1\nprint(r)\n", "label": 1, "name1": "s038697693.py", "name2": "s017164630.py"}, {"id": 911, "code1": "from collections import defaultdict\n\nH,W = map(int,input().split())\na = [[] for _ in range(H)]\nfor i in range(H):\n    a[i] = list(input())\n\nd = defaultdict(int)\nfor i in range(H):\n    for j in range(W):\n        d[a[i][j]] += 1\n\nc4,c2 = 0,0\nfor k in d.keys():\n    c4 += d[k]//4\n    c2 += (d[k]%4)//2\n\nif H%2 + W%2 == 0:\n    if c4 == H*W//4:\n        print(\"Yes\")\n    else:\n        print(\"No\")\nelif H%2 + W%2 == 1:\n    if H%2 == 1:\n        if c4 < (H-1)*W//4:\n            print(\"No\")\n        else:\n            c4 -= (H-1)*W//4\n            c2 += c4*2\n            if c2 == W//2:\n                print(\"Yes\")\n            else:\n                print(\"No\")\n    if W%2 == 1:\n        if c4 < H*(W-1)//4:\n            print(\"No\")\n        else:\n            c4 -= H*(W-1)//4\n            c2 += c4*2\n            if c2 == H//2:\n                print(\"Yes\")\n            else:\n                print(\"No\")\nelse:\n    if c4 < (H-1)*(W-1)//4:\n        print(\"No\")\n    else:\n        c4 -= (H-1)*(W-1)//4\n        c2 += c4*2\n        if c2 == (H-1)//2+(W-1)//2:\n            print(\"Yes\")\n        else:\n            print(\"No\")", "code2": "SA = list(input())\nSB = list(input())\nSC = list(input())\nA = 0\nB = 0\nC = 0\nans = \"\"\nturn = \"a\"\nwhile ans == \"\":\n    if turn == \"a\":\n        if A == len(SA):\n            ans = \"A\"\n        else:\n            turn = SA[A]\n        A +=1\n    if turn == \"b\":\n        if B == len(SB):\n            ans = \"B\"\n        else:\n            turn = SB[B]\n        B += 1\n    if turn == \"c\":\n        if C == len(SC):\n            ans = \"C\"\n        else:\n            turn = SC[C]\n        C += 1\nprint(ans)", "label": 0, "name1": "s520771694.py", "name2": "s106587030.py"}, {"id": 50, "code1": "n=int(input())\na=list(map(int,input().split()))\nans=0\nfor i in range(n-1):\n    if a[i]==a[i+1]:\n        a[i+1]=-1\n        ans+=1\nprint(ans)", "code2": "from itertools import groupby\n\nN=int(input())\nA=list(map(int,input().split()))\n\nans = 0\nfor key, group in groupby(A):\n    ans += len(list(group))//2\nprint(ans)", "label": 1, "name1": "s300532690.py", "name2": "s018527258.py"}, {"id": 295, "code1": "import numpy as np\nn,m = map(int, input().split())\nX = sorted(np.array(input().split(), dtype = np.int64))\nX = sorted(np.diff(X))\nif m-n >= 0:\n    ans = sum(X[:m-n])\nelse:\n    ans = 0\nprint(ans)", "code2": "N, M = map(int, input().split())\nX = list(map(int, input().split()))\nX.sort()\nd = []\nif N > M:\n    N = M\nfor i in range(M - 1):\n    d.append(abs(X[i + 1] - X[i]))\nd.sort()\nprint(sum(d[:M - N]))\n", "label": 1, "name1": "s052852893.py", "name2": "s821901077.py"}, {"id": 579, "code1": "n, k  = map(int, input().split())\nA = list(map(int, input().split()))\ndp = [0] * (k + 1)\n\nfor i in range(1, k + 1):\n  if all(dp[i - a] == 1 for a in A if i >= a):\n    dp[i] = 0\n  else:\n    dp[i] = 1\n\nprint(\"First\" if dp[k] == 1 else \"Second\")", "code2": "from collections import defaultdict, deque, Counter\nfrom heapq import heappush, heappop, heapify\nfrom bisect import bisect_right, bisect_left\nimport random\nfrom itertools import permutations, accumulate, combinations, product\nimport sys\nimport string\nfrom bisect import bisect_left, bisect_right\nfrom math import factorial, ceil, floor, gamma, log\nfrom operator import mul\nfrom functools import reduce\nfrom copy import deepcopy\n\nsys.setrecursionlimit(2147483647)\nINF = 10 ** 20\ndef LI(): return list(map(int, sys.stdin.readline().split()))\ndef I(): return int(sys.stdin.readline())\ndef LS(): return sys.stdin.buffer.readline().rstrip().split()\ndef S(): return sys.stdin.buffer.readline().rstrip().decode('utf-8')\ndef IR(n): return [I() for i in range(n)]\ndef LIR(n): return [LI() for i in range(n)]\ndef SR(n): pass\ndef LSR(n): return [LS() for i in range(n)]\ndef SRL(n): return [list(S()) for i in range(n)]\ndef MSRL(n): return [[int(j) for j in list(S())] for i in range(n)]\nmod = 10 ** 9 + 7\n\nn = I()\n\nfac = [1] * (n + 1)\ninv = [1] * (n + 1)\nfor j in range(1, n + 1):\n    fac[j] = fac[j-1] * j % mod\n\n\ninv[n] = pow(fac[n], mod-2, mod)\nfor j in range(n-1, -1, -1):\n    inv[j] = inv[j+1] * (j+1) % mod\n\n\ndef comb(n, r):\n    if r > n or n < 0 or r < 0:\n        return 0\n    return fac[n] * inv[n - r] * inv[r] % mod\n\ns = input()\ndp = [[0] * n for _ in range(n)]\ndp[0][0] = 1\nfor i in range(1, n):\n    ret = 0\n    if s[i - 1] == \"<\":\n        for j in range(i - 1, -1, -1):\n            ret += dp[i - 1][j]\n            ret %= mod\n            dp[i][j] = ret\n    else:\n        for j in range(i):\n            ret += dp[i - 1][j]\n            dp[i][j + 1] = ret\n        dp[i][i] = ret\n\nprint(sum(dp[-1]) % mod)\n", "label": 0, "name1": "s828667405.py", "name2": "s321259797.py"}, {"id": 462, "code1": "import sys,queue,math,copy,itertools,bisect,collections\nfrom heapq import *\n\ndef main():\n    sys.setrecursionlimit(10**7)\n    INF = 10**18\n    MOD = 10**9 + 7\n    LI = lambda : [int(x) for x in sys.stdin.readline().split()]\n    NI = lambda : int(sys.stdin.readline())\n\n    N = NI()\n    root = [[] for _ in range(N)]\n    for _ in range(N-1):\n        a,b = LI()\n        root[a-1].append(b-1)\n        root[b-1].append(a-1)\n\n    node = [-1 for _ in range(N)]\n    q = []\n    q.append((0,0))\n    node[0] = 0\n    while q:\n        u,num = q.pop()\n        for v in root[u]:\n            if node[v] < 0:\n                node[v] = num+1\n                if v == N-1:\n                    q = []\n                    break\n                q.append((v,num+1))\n    c = node[N-1]\n    u = N-1\n    pu = 0\n    while c > (node[N-1])//2:\n        for v in root[u]:\n            if node[v] != c-1: continue\n            pu = u\n            u = v\n            c -= 1\n            break\n\n    p = u\n    node = [-1 for _ in range(N)]\n    node[p] = 0\n    node[pu] = 1\n    cnt = [0,0]\n    for i in range(2):\n        if i == 0:\n            q.append(p)\n        else:\n            q.append(pu)\n        while q:\n            u = q.pop()\n            for v in root[u]:\n                if node[v] < 0:\n                    node[v] = i\n                    q.append(v)\n                    cnt[i] += 1\n    if cnt[0] > cnt[1]:\n        print('Fennec')\n    else:\n        print('Snuke')\n\nif __name__ == '__main__':\n    main()", "code2": "n=int(input())\n\nL=[[] for i in range(n+1)]\n\nfor i in range(n-1):\n    a,b=map(int,input().split())\n    L[a].append(b)\n    L[b].append(a)\n\nfe=[0 for i in range(n+1)]\nque=[(1,0)]\nvisited=[0 for i in range(n+1)]\nvisited[1]=1\nhead=0\n\nwhile len(que)>head:\n    now=que[head]\n    head+=1\n    fe[now[0]]=now[1]\n    for nex in L[now[0]]:\n        if visited[nex]==0:\n            visited[nex]=1\n            que.append((nex,now[1]+1))\n            \nsn=[0 for i in range(n+1)]\nque=[(n,0)]\nvisited=[0 for i in range(n+1)]\nvisited[-1]=1\nhead=0\n\nwhile len(que)>head:\n    now=que[head]\n    head+=1\n    sn[now[0]]=now[1]\n    for nex in L[now[0]]:\n        if visited[nex]==0:\n            visited[nex]=1\n            que.append((nex,now[1]+1))\n\nkaname=[]\nfor i in range(1,n+1):\n    ck=fe[i]-sn[i]\n    if ck==1 or ck==2:\n        kaname.append(i)\n\ncnt=0\nque=[(1,0)]\nvisited=[0 for i in range(n+1)]\nvisited[1]=1\nhead=0\n\nwhile len(que)>head:\n    now=que[head]\n    head+=1\n    cnt+=1\n    for nex in L[now[0]]:\n        if visited[nex]==0 and not nex in kaname:\n            visited[nex]=1\n            que.append((nex,now[1]+1))\n\nif cnt*2>n:\n    print(\"Fennec\")\nelse:\n    print(\"Snuke\")", "label": 1, "name1": "s905380406.py", "name2": "s845599163.py"}, {"id": 173, "code1": "# AOJ 1126: The Secret Number\n# Python3 2018.7.16 bal4u\n\nwhile True:\n\tW, H = map(int, input().split())\n\tif W == 0: break\n\td = [list(input()) for r in range(H)]\n\ta = [[0 for c in range(W)] for r in range(H)]\n\tans = 0\n\tfor r in range(H):\n\t\tfor c in range(W):\n\t\t\tif not d[r][c].isdigit(): continue\n\t\t\ta[r][c] = k = int(d[r][c])\n\t\t\tif c > 0 and d[r][c-1].isdigit():\n\t\t\t\ta[r][c] = a[r][c-1]*10 + k\n\t\t\tif r > 0 and d[r-1][c].isdigit():\n\t\t\t\tt = a[r-1][c]*10 + k\n\t\t\t\ta[r][c] = max(a[r][c], t)\n\t\t\tans = max(ans, a[r][c])\n\tprint(ans);\n\n", "code2": "while 1:\n    W,H = map(int,raw_input().split())\n    if W == 0: break\n    C = [list(raw_input()) for _ in xrange(H)]\n    dp = [[0]*W for _ in xrange(H)]\n    ans = 0\n    for h in xrange(H):\n        for w in xrange(W):\n            if C[h][w].isdigit():\n                dp[h][w] = max(dp[h][w],int(C[h][w]))\n                if w > 0: dp[h][w] = max(dp[h][w],int(str(dp[h][w-1])+C[h][w]))\n                if h > 0: dp[h][w] = max(dp[h][w],int(str(dp[h-1][w])+C[h][w]))\n    print max(max(i) for i in dp)", "label": 1, "name1": "s855726623.py", "name2": "s193534037.py"}, {"id": 383, "code1": "H,W = list(map(int,input().split()))\n\na = [input() for i in range(H)]\n\nb = [[] for i in range(H)]\nr = [[] for i in range(H)]\nfor i in range(H):\n    for j in range(W):\n        if i==0:\n            b[i].append(\"#\")\n            r[i].append(\".\")\n        elif i==H-1:\n            b[i].append(\".\")\n            r[i].append(\"#\")\n        elif a[i][j]==\"#\":\n            b[i].append(\"#\")\n            r[i].append(\"#\")\n        elif j%2==0:\n            b[i].append(\".\")\n            r[i].append(\"#\")\n        elif j%2==1:\n            b[i].append(\"#\")\n            r[i].append(\".\")\n\nfor i in range(H):\n    ans = \"\"\n    for j in range(W):\n        ans = ans+b[i][j]\n\n    print(ans)\nprint(\"\")\n\nfor i in range(H):\n    ans = \"\"\n    for j in range(W):\n        ans = ans+r[i][j]\n\n    print(ans)\n", "code2": "H, W = map(int, input().split())\nG = [list(map(lambda x: x == '#', input().strip())) for _ in range(H)]\nTakahashi = [[False]*W for _ in range(H)]\nAoki = [[False]*W for _ in range(H)]\n\nfor h in range(H):\n    for w in range(W):\n        if w == 0:\n            Takahashi[h][w] = True\n        elif not h & 1:\n            Aoki[h][w] = True\n        if w == W-1:\n            Aoki[h][w] = True\n        elif h & 1:\n            Takahashi[h][w] = True\n        \n        if G[h][w]:\n            Takahashi[h][w] = True\n            Aoki[h][w] = True\n\nprint('\\n'.join([''.join(['#' if s else '.' for s in Takahashi[i]]) for i in range(H)]))\nprint('')\nprint('\\n'.join([''.join(['#' if s else '.' for s in Aoki[i]]) for i in range(H)]))\n#print('\\n'.join([''.join(['#' if s1 & s2 else '.' for s1, s2 in zip(Aoki[i], Takahashi[i])]) for i in range(H)]))\n", "label": 1, "name1": "s413122754.py", "name2": "s192633271.py"}, {"id": 904, "code1": "x = int(input())\ndef is_prime(x):\n    if x <= 1:\n        return False\n    for i in range(2, int(x**0.5)+1):\n        if x % i == 0:\n            return False\n    return True\n\nwhile(not is_prime(x)):\n    x += 1\nprint(x)\n", "code2": "h,w=map(int,input().split())\n\na=[]\nfor _ in range(h):\n    a+=list(input())\n\nfour=(h//2)*(w//2)\ntwo=h%2*w//2+w%2*h//2\none=(h%2)*(w%2)\n\nimport collections\nc = collections.Counter(a)\n\n#print(four,two,one)\nd=list(c.values())\nd.sort()\n\nfor item in d:\n    if item==1:\n        if one==1:\n            one-=1\n        else:\n            print(\"No\")\n            exit()\n    elif item==2:\n        if two>0:\n            two-=1\n        else:\n            print(\"No\")\n            exit()\n    elif item==3:\n        if one==1 and two>0:\n            one-=1\n            two-=1\n        else:\n            print(\"No\")\n            exit()\n    else:\n        if item%2==1:\n            if one==0:\n                print(\"No\")\n                exit()\n            else:\n                item-=1\n                one-=1\n        #print(item,four,two,one)\n        while item>=4 and four>0:\n            item-=4\n            four-=1\n        #print(item,four,two,one)\n        \n        while item>=2:\n            item-=2\n            two-=1\n        #print(item,four,two,one)\n    \nif one==0 and two==0 and four==0:\n    print(\"Yes\")\nelse:\n    print(\"No\")\n        \n\n\n\n", "label": 0, "name1": "s723102572.py", "name2": "s741760295.py"}, {"id": 84, "code1": "z,x,c,v=0,0,0,0\nwhile True:\n  try:\n    q,w = map(str,raw_input().split(\",\"))\n    if w == \"A\":z+=1\n    elif w == \"B\":x+=1\n    elif w ==\"AB\":c+=1\n    elif w ==\"O\": v+=1\n  except EOFError: \n    print \"%d\\n%d\\n%d\\n%d\"%(z,x,c,v)\n    break", "code2": "import sys\nimport collections as col\nnum = []\nfor line in sys.stdin:\n\ttako = line[:-1].split(\",\")\n\tnum.append(tako[1])\ntako = col.Counter(num)\na = tako[\"O\"]\ntako[\"O\"] = tako[\"AB\"]\ntako[\"AB\"] = a\nfor i in tako.items():\n\tprint i[1]", "label": 1, "name1": "s960711709.py", "name2": "s223119670.py"}, {"id": 657, "code1": "# -*- coding: utf-8 -*-\nimport sys\nfrom sys import stdin\nimport math\n\nn, k = map(int, stdin.readline().split())\nw = list([int(stdin.readline().rstrip()) for i in range(n)])\n\ndef main2():\n  def is_ok():\n    cnt_track = w_tmp = 0\n    for w_i in w:\n      w_tmp += w_i\n      if w_tmp > m:\n        w_tmp = w_i\n        cnt_track += 1\n        if cnt_track >= k:\n          return 0\n    return 1\n\n  r = sum(w)\n  l = max(math.ceil(r/k),max(w))\n  while l < r:\n    m = (l + r) // 2\n    # print(\"%d %d %d \" % (l, r, m))\n    if is_ok():\n      r = m\n    else:\n      l = m + 1\n  print(r)\n\nif __name__ == '__main__':\n  main2()\n\n", "code2": "#!/usr/bin/env python3\n#CODE FESTIVAL 2016 A\n\nimport sys\nimport math\nimport bisect\nsys.setrecursionlimit(1000000000)\nfrom heapq import heappush, heappop\nfrom collections import defaultdict\nfrom itertools import accumulate\nfrom collections import Counter\nfrom collections import deque\nfrom operator import itemgetter\nfrom itertools import permutations\nmod = 10**9 + 7\ndef I(): return int(sys.stdin.readline())\ndef LI(): return list(map(int,sys.stdin.readline().split()))\n\nn = I()\na = LI()\nx = []\nfor i in range(n):\n    if i+1 > a[i]:\n        x.append((a[i],i+1))\n    else:\n        x.append((i+1,a[i]))\nprint(n-len(list(set(x))))\n", "label": 0, "name1": "s518389793.py", "name2": "s190944842.py"}, {"id": 922, "code1": "N=int(input())\ns=[]\nfor _ in range(N):\n    s.append(int(input()))\n\ns=sorted(s)\nimport sys\nif sum(s)%10!=0:\n    print(sum(s))\n    sys.exit()\nelse:\n    ans=sum(s)\n    for i in range(len(s)):\n        if s[i]%10==0:\n            pass\n        else:\n            ans-=s[i]\n            print(ans)\n            sys.exit()\nprint(0)\n        ", "code2": "P=10**9+7\ndef egcd(a, b):\n    (x, lastx) = (0, 1)\n    (y, lasty) = (1, 0)\n    while b != 0:\n        q = a // b\n        (a, b) = (b, a % b)\n        (x, lastx) = (lastx - q * x, x)\n        (y, lasty) = (lasty - q * y, y)\n    return (lastx, lasty, a)\ndef inv(x):\n    return egcd(x,P)[0]\nN=int(input())\nFact=[0 for i in range(N+1)]\nFinv=[0 for i in range(N+1)]\nFact[0]=1\nFinv[0]=1\nfor i in range(N):\n    Fact[i+1]=((i+1)*Fact[i])%P\n    Finv[i+1]=(Finv[i]*inv(i+1))%P\nSGN=[0 for i in range(N)]\nans=0\nfor k in range(N):\n    if 2*k-N>=0:\n        SGN[k]=(((Fact[k-1]*Fact[k])%P)*Finv[2*k-N])%P\n        ans=(ans+k*(SGN[k]-SGN[k-1]))%P\nprint(ans)\n", "label": 0, "name1": "s166405755.py", "name2": "s436731704.py"}, {"id": 426, "code1": "#!/usr/bin/env python3\nfrom collections import defaultdict,deque\nfrom heapq import heappush, heappop\nfrom bisect import bisect_left, bisect_right\nimport sys, random, itertools, math\nsys.setrecursionlimit(10**5)\ninput = sys.stdin.readline\nsqrt = math.sqrt\ndef LI(): return list(map(int, input().split()))\ndef LF(): return list(map(float, input().split()))\ndef LI_(): return list(map(lambda x: int(x)-1, input().split()))\ndef II(): return int(input())\ndef IF(): return float(input())\ndef LS(): return list(map(list, input().split()))\ndef S(): return list(input().rstrip())\ndef IR(n): return [II() for _ in range(n)]\ndef LIR(n): return [LI() for _ in range(n)]\ndef FR(n): return [IF() for _ in range(n)]\ndef LFR(n): return [LI() for _ in range(n)]\ndef LIR_(n): return [LI_() for _ in range(n)]\ndef SR(n): return [input().rstrip()[:-1] for _ in range(n)]\ndef LSR(n): return [LS() for _ in range(n)]\nmod = 1000000007\ninf = 1e10\n\n#solve\ndef solve():\n    n = II()\n    if n == 0:\n        return False\n    group = set()\n    go_group = set()\n    member = set()\n    d = defaultdict(int)\n    g = SR(n)\n    for gi in g:\n        group.add(gi.split(\":\")[0])\n        d[gi.split(\":\")[0]] = gi.split(\":\")[1].split(\",\")\n    C = defaultdict(int)\n    def s(g):\n        for gi in g:\n            if gi in group:\n                if C[gi]:\n                    continue\n                C[gi] = 1\n                s(d[gi])\n            else:\n                member.add(gi)\n    s(d[g[0].split(\":\")[0]])\n    print(len(member))\n    return True\n\n#main\nif __name__ == '__main__':\n    while solve():\n        pass\n\n", "code2": "# coding: utf-8\ndef addset(args):\n    global a\n    for m in args:\n        if dic[m]==1:\n            a.add(m)\n        else:\n            if m not in used:\n                used.add(m)\n                addset(dc[m])\n \nwhile True:\n    n=int(input())\n    if n==0:\n        break\n    dic={}\n    first=[]\n    dc={}\n    for i in range(n):\n        g,m=input().split(':')\n        m=m.rstrip('.').split(',')\n        dc[g]=m\n        if i==0:\n            first.append(g)\n            first+=m\n        dic[g]=2\n        for mem in m:\n            if mem not in dic:\n                dic[mem]=1\n    a=set()\n    used=set()\n    addset(first[1:])\n    print(len(a))\n", "label": 1, "name1": "s728275108.py", "name2": "s673127686.py"}, {"id": 430, "code1": "# coding: utf-8\ndef addset(args):\n    global a\n    for m in args:\n        if dic[m]==1:\n            a.add(m)\n        else:\n            if m not in used:\n                used.add(m)\n                addset(dc[m])\n \nwhile True:\n    n=int(input())\n    if n==0:\n        break\n    dic={}\n    first=[]\n    dc={}\n    for i in range(n):\n        g,m=input().split(':')\n        m=m.rstrip('.').split(',')\n        dc[g]=m\n        if i==0:\n            first.append(g)\n            first+=m\n        dic[g]=2\n        for mem in m:\n            if mem not in dic:\n                dic[mem]=1\n    a=set()\n    used=set()\n    addset(first[1:])\n    print(len(a))\n", "code2": "while 1:\n\tn = input()\n\tif n == 0: break\n\tans = {}\n\tfor i in range(n):\n\t\tgroup,name = raw_input().split(\":\")\n\t\tif i == 0: first = group\n\t\tans[group] = set(name[:-1].split(\",\"))\n\t\twhile 1:\n\t\t\tfor key in ans:\n\t\t\t\tflag = 0\n\t\t\t\tif key == first: continue\n\t\t\t\tfor key1 in ans:\n\t\t\t\t\tif key in ans[key1]:\n\t\t\t\t\t\tans[key1] |= ans[key]\n\t\t\t\t\t\tans[key1].discard(key)\n\t\t\t\t\t\tflag = 1\n\t\t\tif flag == 0: break\n\tprint len(ans[first])", "label": 1, "name1": "s673127686.py", "name2": "s281780788.py"}, {"id": 119, "code1": "n, k  = map(int, input().split())\nA = list(map(int, input().split()))\ndp = [0] * (k + 1)\n\nfor i in range(1, k + 1):\n  if all(dp[i - a] == 1 for a in A if i >= a):\n    dp[i] = 0\n  else:\n    dp[i] = 1\n\nprint(\"First\" if dp[k] == 1 else \"Second\")", "code2": "n, k = map(int, input().split())\na_s = list(map(int, input().split()))\ndp = [\"Second\"] * (k + 1)\nfor i in range(k + 1):\n    if dp[i] == \"Second\":\n        for a in a_s:\n            ii = i + a\n            if ii > k:break\n            dp[ii] = \"First\"\nprint(dp[-1])\n", "label": 1, "name1": "s828667405.py", "name2": "s835744397.py"}, {"id": 720, "code1": "a,b,c = map(int,input().split())\n\nprint(min(a+b,b+c,c+a))\n", "code2": "import bisect\n\nans = \"IMPOSSIBLE\"\nn, m = map(int, input().split())\nac = []\nbc = []\nfor _ in range(m):\n    a, b = map(int, input().split())\n    if min(a, b) == 1:\n        ac.append(max(a, b))\n    elif max(a, b) == n:\n        bc.append(min(a, b))\nac = list(sorted(ac))\nbc = list(sorted(bc))\nfor c in ac:\n    i = bisect.bisect_left(bc, c)\n    if i < len(bc) and bc[i] == c:\n        ans = ans[2:]\n        break\nprint(ans)", "label": 0, "name1": "s223078477.py", "name2": "s723688485.py"}, {"id": 995, "code1": "S = input()\nlen_S = len(S)\n\nfor i in range(2, len_S+1, 2):\n    check_S = S[:-i]\n    len_check_S = len(check_S)\n    half = len_check_S//2\n    if check_S[:half] == check_S[half:]:\n        print(len_check_S)\n        break\n", "code2": "while 1:\n    t = int(input())\n    if t == 0: break\n    n = int(input())\n    i = 0\n    sum = 0\n    while i < n:\n        s, f = map(int, input().split())\n        a = f - s\n        sum = sum + a\n        i += 1\n    if sum < t:\n        print(t - sum)\n    else:\n        print(\"OK\")\n", "label": 0, "name1": "s421296451.py", "name2": "s795734559.py"}, {"id": 870, "code1": "# Edit: 2014/10/13\n# Lang: Python3\n# Time: 00.xxs\n\n# File: pc1503.py\n\nfrom functools import reduce\n\nif __name__ == \"__main__\":\n    n = int(input()) # 1<=n<=1,500\n    #n1500 = reduce(lambda x,y: x*y, range(2,1501))+2\n    n1500 = 48119977967797748601669900935813797818348080406726138081308559411630575189001095591292230585206733851868464009619343585194052091124618166270271481881393331431627962810299844149333789044689395510487167879769325303699470467829234399263326545652860748605075746366928323606645492277541120083438086727369377887676000211405318480244354207419604864176969950581435222198851194568984095705945549589054568321792338919149442985919957734792959402499096845643020401869381175603964424333222114125974374817804242633309769804293952870034619354125014210045647664063240162007560108665290568646128342557147350985358724154623253371867470765120422073867963935775258692109753041762094343569050497470353531764481503174750911858230906998361066084787758316110585736013365377431860738572261325738233656835271947352695180865573043834027955539012765489372645042504406597752357481931532872356635411224578334040522294746402829585458478708778346379431862368824819009177091444034885941394319343910223168655869761799669075059527608502465593181398566214786801211651657222004123456498258513120359126022843038535083709796101565934859483203933443308601475813108363074118562404412420191947127585482919172173045961122122701434297870691932154082986945954748251105782181586397275820342101470457300633590139512919549474113721711616912519714191760699935509810254849967087635936181176363954224186031346682928878492872249485456690138831610135377916327940503701400290125509132140782614640495733518048670983360134097860364762638658894873174499870133559364805443430831459505987809215393353387232078177562975021460595422358573128085417162336030235138652735438053034531962620811566019896879275257163988352090874930346115518331202927263708446729394381879888839549731876978682249320628599631628662375508826209854754631984276392670919216923002770077734756077549035942976209159416211581439461484509549370357486770276807687544580164314647595031368948490282897173328013518435758700056425922638411889496527975846052717958044813737086806600171993703579485864029383208714528950303253881360812631162134750100307772634337467012820470715650810714689905121432259528505483053930402217400686061612471659630192434864094539828085677465383026128353771071152304197549798870706139893609140045659756285435787771636258253666592102151236142132724425850991205720020493660580896600891888594659612927724357866265934517615841298789154462249169688860092640284756382431746120357767933119589280468687348061788072986362788582227019465263474828590646048451070702923434422714349595857654843699542321849363652767771978314681013589442955219879702008068934096624650625769705233333462826013860098698155180331145365652453482955497979915586438474687345677874451117702250441711504844638414485210092261397271970571029038581873069951161330495772310508760528249706514238384269808639507080418298318311361373628512041716415196868334254119137139589149597210032153545941114666530498906529240798164804007394775927836045668573993316428972539932745757171947402454257142633700815922407278403640595355142075599446056337986717212316223257763412164180899532722039383244462511410346646148863397237096276822656157561194665545757017429842404840309758925618650507921043007241637877939825811059339138925526124514467627126548126795078784022672860886251974581362141782786407402896309678008909663263987018538107050886193489012497405005820727271232733728141775132722013860591169620692789290456794698409808557447756701311883266010859016027592252397754508251628808293537776536569608111330584797160694847898923196743970244451842702266403326317319092117151143971679500042590269255093130215984418097418435474300467281949798227102529873732749027992079700287275900856241172902880909546551703263202853584498085358955307673717177961902081098618729046348849060249600000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000002\n    print(n1500)\n    for i in range(0,n):\n        print(i+2)", "code2": "a,b=input().split()\nprint(\"H\" if a == \"H\" and b == \"H\" or a == \"D\" and b == \"D\" else \"D\")", "label": 0, "name1": "s021750176.py", "name2": "s207996026.py"}, {"id": 322, "code1": "####################\n#  AC:     ms (PyPy)\n####################\n\ndef main():\n    MOD = 10**6+3\n    # preprocess\n    fac = [None] * (MOD+1)\n    fac[0] = fac[1] = 1\n    for i in range(2, MOD+1):\n        fac[i] = (fac[i-1] * i) % MOD\n\n    Q = int(input())\n    for i in range(Q):\n        x, d, n = map(int, input().split())\n\n        if d == 0:\n            print(pow(x, n, MOD))\n            continue\n        \n        xd = (x * pow(d, MOD-2, MOD)) % MOD\n        if xd == 0 or xd + (n-1) >= MOD:\n            print(0)\n            continue\n\n        print(pow(d, n, MOD) * fac[xd+(n-1)] * pow(fac[xd-1], MOD-2, MOD) % MOD)\n\n\nif __name__ == \"__main__\":\n    main()", "code2": "\n\"\"\"\n\u53ef\u80fd\u6027:\n\u6570\u5b66\u7684\u306bO(1)\u2192\u6fc3\u539a\n\u524d\u6e96\u5099\u3057\u3066\u77ac\u6bba\u2192\u5168\u90e8\u9055\u3046\u304b\u3089\u3042\u308a\u3048\u306a\u3055\u305d\u3046\n\n\u5c55\u958b\u5f0f\u304b\u3089\u8a08\u7b97\uff1f\u2192\u7d50\u5c40n\u9805\u306b\u306a\u3063\u3061\u3083\u3046\u2026\n\n1\u3064\u9805\u304c\u9032\u3080\u3068\u3001mod1000003\u306fd\u500b\u53f3\u306b\u305a\u308c\u308b(\u53f3\u7aef\u3067\u30eb\u30fc\u30d7)\n\u21920\u306b\u6765\u308b\u3053\u3068\u304c\u3042\u308c\u3070\u5fc5\u305a0\n\nd,n\u56fa\u5b9a\u306e\u6642\u3001x1\u306e\u7d50\u679c\u304b\u3089x2\u306e\u7d50\u679c\u3092\u5c0e\u51fa\u3067\u304d\u308c\u3070logN\u3067\u89e3\u3051\u308b\n\u2192\u305d\u3093\u306a\u30b7\u30f3\u30d7\u30eb\u306b\u306f\u3044\u304b\u306a\u305d\u3046\u2026\n\n========\u89e3\u7b54\u3092\u898b\u305f=========\n\uff1f\uff1f\uff1f\uff1f\uff1f\uff1f\n\u5206\u304b\u308b\u3051\u3069\u2026\u3069\u3046\u3044\u3046\u3053\u3068\u2026\n\n\u2192\u7c21\u5358\u306b\u89e3\u3051\u308b\u554f\u984c\u306b\u843d\u3068\u3057\u8fbc\u3080\u306e\u304b\u2026\n\u2192\u5236\u7d04\u304c\u7c21\u5358ver\u3092\u8272\u3005\u8003\u616e\u3057\u3001\u843d\u3068\u3057\u8fbc\u3081\u306a\u3044\u304b\u8003\u3048\u308b\u3079\u304d\u3060\u3063\u305f\n\n\"\"\"\n\ndef inverse(a,mod): #a\u306emod\u3092\u6cd5\u306b\u3057\u305f\u9006\u5143\u3092\u8fd4\u3059\n    return pow(a,mod-2,mod)\n\ndef modfac(n, MOD):\n \n    f = 1\n    factorials = [1]\n    for m in range(1, n + 1):\n        f *= m\n        f %= MOD\n        factorials.append(f)\n    inv = pow(f, MOD - 2, MOD)\n    invs = [1] * (n + 1)\n    invs[n] = inv\n    for m in range(n, 1, -1):\n        inv *= m\n        inv %= MOD\n        invs[m - 1] = inv\n    return factorials, invs\n\n\n\nmod = 10 ** 6 + 3\nfac,inv = modfac(mod-1, mod)\n\n#print (len(inv))\nQ = int(input())\n\nfor i in range(Q):\n\n    x,d,n = map(int,input().split())\n\n    if d == 0:\n        print (pow(x,n,mod))\n        continue\n    elif x == 0:\n        print (0)\n        continue\n    elif n == 1:\n        print (x)\n        continue\n\n    fi = x * inverse(d,mod) % mod\n    \n    if fi+n-1 >= mod or fi % mod == 0:\n        print (0)\n        continue\n\n    #print (pow(d,n,mod) , fac[fi+n-1] , inv[fi-1] , mod)\n    if fi >= 2:\n        print (pow(d,n,mod) * fac[(fi+n-1) % mod] * inv[(fi-1) % mod] % mod)\n    else:\n        print (pow(d,n,mod) * fac[(fi+n-1) % mod]  % mod)\n    \n", "label": 1, "name1": "s606450603.py", "name2": "s126129728.py"}, {"id": 884, "code1": "a, b = input().split()\nif a == 'H':\n    print(b)\nelse:\n    if b == 'H':\n        print('D')\n    else:\n        print('H')", "code2": "for i in range(1000):\n    print (\"Hello World\")", "label": 0, "name1": "s562716029.py", "name2": "s918569906.py"}, {"id": 725, "code1": "import sys\nif sys.platform =='ios':\n\tsys.stdin=open('Untitled.txt')\ninput = sys.stdin.readline\n\n# \u53c2\u7167URL:https://qiita.com/gogotealove/items/11f9e83218926211083a\n\n# n = [int(x) for x in input().rstrip()]\n# op_cnt = len(n) - 1  # \u3059\u304d\u9593\u306e\u500b\u6570\n# ans2 = []\n# for i in range(2 ** op_cnt):\n#     op = [\"\"] * op_cnt  # \u3042\u3089\u304b\u3058\u3081 [\"-\", \"-\", \"-\"] \u3068\u3044\u3046\u30ea\u30b9\u30c8\u3092\u4f5c\u3063\u3066\u304a\u304f\n#     for j in range(op_cnt):\n#         if ((i >> j) & 1):\n#             op[op_cnt - 1 - j] = \"+\"  # \u30d5\u30e9\u30b0\u304c\u7acb\u3063\u3066\u3044\u305f\u7b87\u6240\u3092 \"+\" \u3067\u4e0a\u66f8\u304d\n#     ans2.append(op)\n# for a in ans2:\n# \tprint(a)\n\nS = input().rstrip() # \u5165\u529b\u5024 \"1234\\n\" \u3092 \"1234\"\u306b\nn = len(S)-1 # \u30aa\u30da\u30ec\u30fc\u30bf\u304c\u5165\u308a\u3046\u308b\u9699\u9593\u306flen(S)-1\n\nops = []\nfor i in range(2**n): # \u5404\u9699\u9593\u306b\u5bfe\u3057\u3066\u3001 +\u3059\u308b\u3057\u306a\u3044\u306e2\u901a\u308a\u304c\u3042\u308b\u306e\u3067\u30012^n \u56de\u30eb\u30fc\u30d7\n\top = [\"\"] * n # \u3042\u3089\u304b\u3058\u3081\u30ea\u30b9\u30c8\u3092\u4f5c\u6210\n\tfor j in range(n):\n\t\tif((i>>j) & 1) == 1:  # \u9806\u306b\u53f3\u306b\u30b7\u30d5\u30c8\u3055\u305b\u6700\u4e0b\u4f4dbit\u306e\u30c1\u30a7\u30c3\u30af\u3092\u884c\u3046\n\t\t\top[n-1-j] = \"+\" # \u30d5\u30e9\u30b0\u304c\u7acb\u3063\u3066\u3044\u305f\u3089op\u306e\u5024\u3092\u66f8\u304d\u63db\u3048\u308b\n\tops.append(op)\n\n# \u3053\u3053\u307e\u3067\u3067 ops \u306e\u4e2d\u306b\u3042\u308a\u3046\u308b\u7d44\u307f\u5408\u308f\u305b\u304c\u5217\u6319\u3055\u308c\u308b\uff08\u4ee5\u4e0b\u306flen(S)-1==3\u306e\u4f8b\uff09\n# ['', '', '']\n# ['', '', '+']\n# ['', '+', '']\n# ['', '+', '+']\n# ['+', '', '']\n# ['+', '', '+']\n# ['+', '+', '']\n# ['+', '+', '+']\n\nans = 0\nfor o in ops:\n\ts = [s for s in S]\n\tfor k in range(len(o)):\n\t\ts.insert(2*k+1, o[k])\n\tans += eval(''.join(s)) # eval \u3092\u5229\u7528\u3059\u308b\u3053\u3068\u3067\u6587\u5b57\u5217\u3092\u5f0f\u3068\u3057\u3066\u8a55\u4fa1\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u308b\n\nprint(ans)", "code2": "def inpl(): return list(map(int, input().split()))\nN, M = inpl()\nf, n = set(), set()\nfor i in range(M):\n    temp = inpl()\n    if 1 in temp:\n        f.add(temp[1])\n    if N in temp:\n        n.add(temp[0])\nif len(f & n) > 0:\n    print('POSSIBLE')\nelse:\n    print('IMPOSSIBLE')", "label": 0, "name1": "s854607235.py", "name2": "s278593598.py"}, {"id": 165, "code1": "X = input()\ns_cnt = 0\nans = 0\nfor s in X:\n    if s=='S':\n        s_cnt += 1\n    else:\n        if s_cnt > 0:\n            ans += 1\n            s_cnt -= 1\n\nprint(len(X) - 2*ans)", "code2": "X = input()\n\ns_cnt = 0\nt_cnt = 0\n\nans = 0\n\nfor n in range(len(X)):\n  if X[n] == \"S\":\n    s_cnt += 1\n  else:\n    t_cnt += 1\n  ans = max(ans,t_cnt-s_cnt)\nprint(ans*2)", "label": 1, "name1": "s514074837.py", "name2": "s239717601.py"}, {"id": 36, "code1": "import math\nimport statistics\n\nwhile(1):\n    n=int(input())\n    if(not n):\n        break\n    S=list(map(int,input().split(\" \")))\n    mean=statistics.mean(S)\n    #print(mean)\n    S=list(map(lambda x: (x-mean)**2, S))\n    #print(S)\n    print(math.sqrt(sum(S)/n))\n\n", "code2": "while(1):\n    n = int(input())\n    if n == 0:\n        break\n    s = [float(i) for i in input().split()]\n    m = sum(s)/n\n    a = (sum([(i- m)**2 for i in s])/n)**0.5\n    print(\"{:.8f}\".format(a))\n", "label": 1, "name1": "s513646243.py", "name2": "s123853064.py"}, {"id": 825, "code1": "l = len(set(list(map(int, input().split()))))\nif l == 2:\n  print(\"Yes\")\nelse:\n  print(\"No\")", "code2": "#!/usr/bin/env python3\n\n#import\n#import math\n#import numpy as np\nN = int(input())\nS = list(input())\n\nre = S.count(\"E\")\nrw = N - re\nle = 0\nlw = 0\n\nans = 10**9\n\nfor i in range(N):\n    if S[i] == \"E\":\n        re -= 1\n        ans = min(ans, re + lw)\n        le += 1\n    else:\n        rw -= 1        \n        ans = min(ans, re + lw)\n        lw += 1\n\nprint(ans)\n\n\n", "label": 0, "name1": "s571170465.py", "name2": "s258995068.py"}, {"id": 298, "code1": "class UnionFind():\n  def __init__(self, n):\n    self.n = n\n    self.parents = [-1] * n\n\n  def find(self, x):\n    if self.parents[x] < 0:\n      return x\n    else:\n      self.parents[x] = self.find(self.parents[x])\n      return self.parents[x]\n\n  def union(self, x, y):\n    x = self.find(x)\n    y = self.find(y)\n\n    if x == y:\n      return\n\n    if self.parents[x] > self.parents[y]:\n      x, y = y, x\n\n    self.parents[x] += self.parents[y]\n    self.parents[y] = x\n\n  def size(self, x):\n    return -self.parents[self.find(x)]\n\n  def same(self, x, y):\n    return self.find(x) == self.find(y)\n\n  def members(self, x):\n    root = self.find(x)\n    return [i for i in range(self.n) if self.find(i) == root]\n\n  def roots(self):\n    return [i for i, x in enumerate(self.parents) if x < 0]\n\n  def group_count(self):\n    return len(self.roots())\n\n  def all_group_members(self):\n    return {r: self.members(r) for r in self.roots()}\n\n  def __str__(self):\n    return '\\n'.join('{}: {}'.format(r, self.members(r)) for r in self.roots())\n\nn, m = map(int, input().split())\nuf = UnionFind(n)\n\nfor _ in range(m):\n  a, b = map(int, input().split())\n  uf.union(a-1,b-1)\n  \nprint(uf.group_count() - 1)\n\n", "code2": "class UnionFind():\n    def __init__(self, n):\n        self.n = n\n        self.parents = [-1] * n\n\n    def find(self, x):\n        if self.parents[x] < 0:\n            return x\n        else:\n            self.parents[x] = self.find(self.parents[x])\n            return self.parents[x]\n\n    def union(self, x, y):\n        x = self.find(x)\n        y = self.find(y)\n\n        if x == y:\n            return\n\n        if self.parents[x] > self.parents[y]:\n            x, y = y, x\n\n        self.parents[x] += self.parents[y]\n        self.parents[y] = x\n\n    def size(self, x):\n        return -self.parents[self.find(x)]\n\n    def same(self, x, y):\n        return self.find(x) == self.find(y)\n\n    def members(self, x):\n        root = self.find(x)\n        return [i for i in range(self.n) if self.find(i) == root]\n\n    def roots(self):\n        return [i for i, x in enumerate(self.parents) if x < 0]\n\n    def group_count(self):\n        return len(self.roots())\n\n    def all_group_members(self):\n        return {r: self.members(r) for r in self.roots()}\n\n    def __str__(self):\n        return '\\n'.join('{}: {}'.format(r, self.members(r)) for r in self.roots())\n\nN,M=list(map(int,input().split()))\nNetwork = UnionFind(N)\nfor i in range(M):\n    a,b=list(map(int,input().split()))\n    Network.union(a-1, b-1)\nprint(Network.group_count()-1)", "label": 1, "name1": "s813737955.py", "name2": "s144436411.py"}, {"id": 6, "code1": "N = int(input())\n\ntotal = sum(list(map(int, str(N))))\n\nif total % 9 == 0:\n  print('Yes')\nelse:\n  print('No')\n", "code2": "n = input()\n\nnum = 0\nfor e in n:\n    num += int(e)\n    num %= 9\n\nif num:\n    ans = \"No\"\nelse:\n    ans = \"Yes\"\n\nprint(ans)\n", "label": 1, "name1": "s525082295.py", "name2": "s399175995.py"}, {"id": 559, "code1": "z,x,c,v=0,0,0,0\nwhile True:\n  try:\n    q,w = map(str,raw_input().split(\",\"))\n    if w == \"A\":z+=1\n    elif w == \"B\":x+=1\n    elif w ==\"AB\":c+=1\n    elif w ==\"O\": v+=1\n  except EOFError: \n    print \"%d\\n%d\\n%d\\n%d\"%(z,x,c,v)\n    break", "code2": "import math\na, b, C = map(float, input().split())\nC = C / 180 * math.pi\nprint('%.06f' % (a * b * math.sin(C) / 2))\nprint('%.06f' % ((a**2 + b**2 -2*a*b*math.cos(C))**(1/2) + a + b))\nprint('%.06f' % (b*math.sin(C)))", "label": 0, "name1": "s960711709.py", "name2": "s950542255.py"}, {"id": 830, "code1": "import sys\nfrom collections import defaultdict, Counter, deque\nfrom itertools import accumulate, permutations, combinations\nfrom operator import itemgetter\nfrom bisect import bisect_left, bisect_right, bisect\nfrom heapq import heappop, heappush\nfrom fractions import gcd\nfrom math import ceil, floor, sqrt, cos, sin, pi\nfrom copy import deepcopy\n\n# If you use recursive call, uncomment this code\n#sys.setrecursionlimit(10**6)\n\ndef main():\n    nums = set(map(int, input().split()))\n    if len(nums) == 2:\n        print(\"Yes\")\n    else:\n        print(\"No\")\n\n\nif __name__ == '__main__':\n    main()\n", "code2": "N = int(input())\nA = list(map(int, input().split()))\n\ndef selection_sort(A, N):\n    count = 0\n    for i in range(0, N):\n        min_j = i\n        for j in range(i, N):\n            if A[j] < A[min_j]:\n                min_j = j\n        if min_j != i:\n            count += 1\n        A[i], A[min_j] = A[min_j], A[i]\n    return A, count\n\nA, count = selection_sort(A, N)\nprint(' '.join(map(str, A)))\nprint(count)\n", "label": 0, "name1": "s765543700.py", "name2": "s850451389.py"}, {"id": 859, "code1": "import sys\nfrom fractions import gcd\ninput = sys.stdin.readline\n\nN = int(input())\nA = list(map(int,input().split()))\n\nf = A[0]\nfor i in range(1,N):\n  f = gcd(f,A[i])\n  \nprint(f)", "code2": "# -*- coding: utf-8 -*-\n\nimport sys\nimport os\nimport math\n\nn = int(input())\nif n == 1:\n    # 4\n    print(4)\n    print(2)\nelif n == 2:\n    # 8, 9\n    print(8)\n    print(4)\n    print(3)\nelse:\n    a = 1\n    for i in range(1, n + 2):\n        a *= i\n    print(a - n - 1)\n\n    for i in range(n + 1, 1, -1):\n        print(i)", "label": 0, "name1": "s433540614.py", "name2": "s101680760.py"}, {"id": 719, "code1": "a,b,c=map(int,input().split())\nprint(min(a+b,b+c,c+a))\n", "code2": "import sys\nif sys.platform =='ios':\n\tsys.stdin=open('Untitled.txt')\ninput = sys.stdin.readline\n\n# \u53c2\u7167URL:https://qiita.com/gogotealove/items/11f9e83218926211083a\n\n# n = [int(x) for x in input().rstrip()]\n# op_cnt = len(n) - 1  # \u3059\u304d\u9593\u306e\u500b\u6570\n# ans2 = []\n# for i in range(2 ** op_cnt):\n#     op = [\"\"] * op_cnt  # \u3042\u3089\u304b\u3058\u3081 [\"-\", \"-\", \"-\"] \u3068\u3044\u3046\u30ea\u30b9\u30c8\u3092\u4f5c\u3063\u3066\u304a\u304f\n#     for j in range(op_cnt):\n#         if ((i >> j) & 1):\n#             op[op_cnt - 1 - j] = \"+\"  # \u30d5\u30e9\u30b0\u304c\u7acb\u3063\u3066\u3044\u305f\u7b87\u6240\u3092 \"+\" \u3067\u4e0a\u66f8\u304d\n#     ans2.append(op)\n# for a in ans2:\n# \tprint(a)\n\nS = input().rstrip() # \u5165\u529b\u5024 \"1234\\n\" \u3092 \"1234\"\u306b\nn = len(S)-1 # \u30aa\u30da\u30ec\u30fc\u30bf\u304c\u5165\u308a\u3046\u308b\u9699\u9593\u306flen(S)-1\n\nops = []\nfor i in range(2**n): # \u5404\u9699\u9593\u306b\u5bfe\u3057\u3066\u3001 +\u3059\u308b\u3057\u306a\u3044\u306e2\u901a\u308a\u304c\u3042\u308b\u306e\u3067\u30012^n \u56de\u30eb\u30fc\u30d7\n\top = [\"\"] * n # \u3042\u3089\u304b\u3058\u3081\u30ea\u30b9\u30c8\u3092\u4f5c\u6210\n\tfor j in range(n):\n\t\tif((i>>j) & 1) == 1:  # \u9806\u306b\u53f3\u306b\u30b7\u30d5\u30c8\u3055\u305b\u6700\u4e0b\u4f4dbit\u306e\u30c1\u30a7\u30c3\u30af\u3092\u884c\u3046\n\t\t\top[n-1-j] = \"+\" # \u30d5\u30e9\u30b0\u304c\u7acb\u3063\u3066\u3044\u305f\u3089op\u306e\u5024\u3092\u66f8\u304d\u63db\u3048\u308b\n\tops.append(op)\n\n# \u3053\u3053\u307e\u3067\u3067 ops \u306e\u4e2d\u306b\u3042\u308a\u3046\u308b\u7d44\u307f\u5408\u308f\u305b\u304c\u5217\u6319\u3055\u308c\u308b\uff08\u4ee5\u4e0b\u306flen(S)-1==3\u306e\u4f8b\uff09\n# ['', '', '']\n# ['', '', '+']\n# ['', '+', '']\n# ['', '+', '+']\n# ['+', '', '']\n# ['+', '', '+']\n# ['+', '+', '']\n# ['+', '+', '+']\n\nans = 0\nfor o in ops:\n\ts = [s for s in S]\n\tfor k in range(len(o)):\n\t\ts.insert(2*k+1, o[k])\n\tans += eval(''.join(s)) # eval \u3092\u5229\u7528\u3059\u308b\u3053\u3068\u3067\u6587\u5b57\u5217\u3092\u5f0f\u3068\u3057\u3066\u8a55\u4fa1\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u308b\n\nprint(ans)", "label": 0, "name1": "s997903196.py", "name2": "s854607235.py"}, {"id": 465, "code1": "n=int(input())\n\nL=[[] for i in range(n+1)]\n\nfor i in range(n-1):\n    a,b=map(int,input().split())\n    L[a].append(b)\n    L[b].append(a)\n\nfe=[0 for i in range(n+1)]\nque=[(1,0)]\nvisited=[0 for i in range(n+1)]\nvisited[1]=1\nhead=0\n\nwhile len(que)>head:\n    now=que[head]\n    head+=1\n    fe[now[0]]=now[1]\n    for nex in L[now[0]]:\n        if visited[nex]==0:\n            visited[nex]=1\n            que.append((nex,now[1]+1))\n            \nsn=[0 for i in range(n+1)]\nque=[(n,0)]\nvisited=[0 for i in range(n+1)]\nvisited[-1]=1\nhead=0\n\nwhile len(que)>head:\n    now=que[head]\n    head+=1\n    sn[now[0]]=now[1]\n    for nex in L[now[0]]:\n        if visited[nex]==0:\n            visited[nex]=1\n            que.append((nex,now[1]+1))\n\nkaname=[]\nfor i in range(1,n+1):\n    ck=fe[i]-sn[i]\n    if ck==1 or ck==2:\n        kaname.append(i)\n\ncnt=0\nque=[(1,0)]\nvisited=[0 for i in range(n+1)]\nvisited[1]=1\nhead=0\n\nwhile len(que)>head:\n    now=que[head]\n    head+=1\n    cnt+=1\n    for nex in L[now[0]]:\n        if visited[nex]==0 and not nex in kaname:\n            visited[nex]=1\n            que.append((nex,now[1]+1))\n\nif cnt*2>n:\n    print(\"Fennec\")\nelse:\n    print(\"Snuke\")", "code2": "import sys\ninput = lambda : sys.stdin.readline().rstrip()\nsys.setrecursionlimit(max(1000, 10**9))\nwrite = lambda x: sys.stdout.write(x+\"\\n\")\n\n\n### \u6728\u306e\u8aad\u307f\u8fbc\u307f tree\n\n# \u30b5\u30a4\u30ba\u304c\u5927\u304d\u3044\u3068defaultdict\u304c\u65e9\u3044(for\u6587\u3092\u66f8\u304b\u306a\u304f\u3066\u6e08\u3080)\nfrom collections import defaultdict\nn = int(input())\nns = [[] for _ in range(n)]\nfor _ in range(n-1):\n    u,v = map(int, input().split())\n    u -= 1\n    v -= 1\n    ns[u].append(v)\n    ns[v].append(u)\n    \n### BFS \u5e45\u512a\u5148\u63a2\u7d22\n\ndef bfs(start):\n    from collections import deque\n    q = deque([start])\n    seen = [None] * n\n    seen[start] = 0\n    while q:\n        u = q.pop()\n        d = seen[u]\n        for v in ns[u]:\n            if seen[v] is None:\n                seen[v] = d + 1\n                q.appendleft(v)\n    return seen\nd1 = bfs(0)\nd2 = bfs(n-1)\nv = sum(d1[i]<=d2[i] for i in range(n))\nv2 = n-v\nif v>v2:\n    print(\"Fennec\")\nelse:\n    print(\"Snuke\")", "label": 1, "name1": "s845599163.py", "name2": "s007019675.py"}, {"id": 916, "code1": "from collections import Counter,defaultdict,deque\nfrom heapq import heappop,heappush\nfrom bisect import bisect_left,bisect_right \nimport sys,math,itertools,fractions,pprint\nsys.setrecursionlimit(10**8)\nmod = 10**9+7\nINF = float('inf')\ndef inp(): return int(sys.stdin.readline())\ndef inpl(): return list(map(int, sys.stdin.readline().split()))\n\ns = [list(input()) for _ in range(3)]\nfor i in range(3):\n    s[i] = [ord(x) - ord('a') for x in s[i]][::-1]\nnow = 0\nwhile True:\n    if s[now] == []:\n        print(chr(ord('A') + now))\n        break\n    now = s[now].pop()\n    ", "code2": "N=int(input())\ns=[]\nfor _ in range(N):\n    s.append(int(input()))\n\ns=sorted(s)\nimport sys\nif sum(s)%10!=0:\n    print(sum(s))\n    sys.exit()\nelse:\n    ans=sum(s)\n    for i in range(len(s)):\n        if s[i]%10==0:\n            pass\n        else:\n            ans-=s[i]\n            print(ans)\n            sys.exit()\nprint(0)\n        ", "label": 0, "name1": "s332087520.py", "name2": "s166405755.py"}, {"id": 963, "code1": "\nn,c = map(int, input().split())\nd = []\nfor _ in range(c):\n    a = list(map(int, input().split()))\n    d.append(a)\n\ngrid = [[0 for j in range(c+1)] for i in range(3)]\nfor i in range(n):\n    for j,cc in enumerate(map(int, input().split())):\n        k = j\n        grid[(i+j)%3][cc] += 1\n\nans = float('INF')\n\nfor i in range(1,c+1):\n    for j in range(1,c+1):\n        if i == j:\n            continue\n        for k in range(1,c+1):\n            if i == k or j == k:\n                continue\n            cost = 0\n            for a in range(1,c+1):\n                # print(int(d[a-1][i-1]), grid[0][a], int(d[a-1][j-1]), grid[1][a], int(d[a-1][k-1]), grid[2][a])\n                cost += d[a-1][i-1] * grid[0][a] + d[a-1][j-1] * grid[1][a] + d[a-1][k-1] * grid[2][a]\n            \n            if cost < ans:\n                # print(i,j,k,cost)\n                ans = cost\n\nprint(int(ans))\n", "code2": "import bisect\nn = int(input())\na = list(map(int, input().split()))\nb = list(map(int, input().split()))\nc = list(map(int, input().split()))\nbsort = sorted(b)\ncsort = sorted(c)\nres = 0\nasum = [0] * n\nbsum = [0] * n\nfor i in range(n):\n    asum[i] = n - bisect.bisect_right(bsort, a[i])\nfor i in range(n):\n    bsum[i] = n - bisect.bisect_right(csort, b[i])\nbsum.sort()\ntotal = 0\nfor i in range(n):\n    total += bsum[i]\n    bsum[i] = total\nres = 0\nfor i in range(n):\n    if asum[i] != 0:\n        res += bsum[asum[i] -1]\nprint(res)", "label": 0, "name1": "s856621686.py", "name2": "s514022897.py"}, {"id": 471, "code1": "n=int(input())\nA=[int(i) for i in input().split()]\nB=[int(i) for i in input().split()]\nct1,ct2,ct3=0,0,0\nfor i in range(n):\n  ct1+=(B[i]-A[i])\n  ct2+=max(A[i]-B[i],0)\n  if B[i]>A[i]:\n    ct3+=(B[i]-A[i]-1)//2+1\nprint(\"Yes\" if max(ct2,ct3)<=ct1 else \"No\")", "code2": "N = int(input())\nA = list(map(int, input().split()))\nB = list(map(int, input().split()))\n\nplus_2 = 0\nminus = 0\nfor a, b in zip(A, B):\n    if a < b:\n        plus_2 += (b-a)//2\n    else:\n        minus += a-b\n\nif plus_2 >= minus:\n    print('Yes')\nelse:\n    print('No')", "label": 1, "name1": "s862908490.py", "name2": "s301247411.py"}, {"id": 126, "code1": "from collections import defaultdict, deque, Counter\nfrom heapq import heappush, heappop, heapify\nfrom bisect import bisect_right, bisect_left\nimport random\nfrom itertools import permutations, accumulate, combinations, product\nimport sys\nimport string\nfrom bisect import bisect_left, bisect_right\nfrom math import factorial, ceil, floor, gamma, log\nfrom operator import mul\nfrom functools import reduce\nfrom copy import deepcopy\n\nsys.setrecursionlimit(2147483647)\nINF = 10 ** 20\ndef LI(): return list(map(int, sys.stdin.readline().split()))\ndef I(): return int(sys.stdin.readline())\ndef LS(): return sys.stdin.buffer.readline().rstrip().split()\ndef S(): return sys.stdin.buffer.readline().rstrip().decode('utf-8')\ndef IR(n): return [I() for i in range(n)]\ndef LIR(n): return [LI() for i in range(n)]\ndef SR(n): pass\ndef LSR(n): return [LS() for i in range(n)]\ndef SRL(n): return [list(S()) for i in range(n)]\ndef MSRL(n): return [[int(j) for j in list(S())] for i in range(n)]\nmod = 10 ** 9 + 7\n\nn = I()\n\nfac = [1] * (n + 1)\ninv = [1] * (n + 1)\nfor j in range(1, n + 1):\n    fac[j] = fac[j-1] * j % mod\n\n\ninv[n] = pow(fac[n], mod-2, mod)\nfor j in range(n-1, -1, -1):\n    inv[j] = inv[j+1] * (j+1) % mod\n\n\ndef comb(n, r):\n    if r > n or n < 0 or r < 0:\n        return 0\n    return fac[n] * inv[n - r] * inv[r] % mod\n\ns = input()\ndp = [[0] * n for _ in range(n)]\ndp[0][0] = 1\nfor i in range(1, n):\n    ret = 0\n    if s[i - 1] == \"<\":\n        for j in range(i - 1, -1, -1):\n            ret += dp[i - 1][j]\n            ret %= mod\n            dp[i][j] = ret\n    else:\n        for j in range(i):\n            ret += dp[i - 1][j]\n            dp[i][j + 1] = ret\n        dp[i][i] = ret\n\nprint(sum(dp[-1]) % mod)\n", "code2": "def f(n, s):\n    md = 10 ** 9 + 7\n    dp = [1] * n\n    for i in range(n - 1):\n        if s[i] == \"<\":\n            L = dp[0]\n            for dpi in range(1, n - i - 1):\n                dp[dpi] = L = (dp[dpi] + L) % md\n            dp = dp[:-1]\n        else:\n            R = dp[-1]\n            for dpi in range(n - i - 2, 0, -1):\n                dp[dpi] = R = (dp[dpi] + R) % md\n            dp = dp[1:]\n    print(dp[0])\n\n\nn = int(input())\ns = input()\nf(n, s)\n", "label": 1, "name1": "s321259797.py", "name2": "s415178183.py"}, {"id": 103, "code1": "import math\na, b, C = map(float, input().split())\nC = C / 180 * math.pi\nprint('%.06f' % (a * b * math.sin(C) / 2))\nprint('%.06f' % ((a**2 + b**2 -2*a*b*math.cos(C))**(1/2) + a + b))\nprint('%.06f' % (b*math.sin(C)))", "code2": "a, b, C =map(float,input().split())\nimport math\nsinC = math.sin(math.radians(C))\nS = a*b*sinC*0.5\nc = (a**2 + b**2 -2*a*b*math.cos(math.radians(C)))**0.5\nL = a+b+c\nh = S*2/a\nprint(S)\nprint(L)\nprint(h)\n", "label": 1, "name1": "s950542255.py", "name2": "s788805416.py"}, {"id": 549, "code1": "# https://atcoder.jp/contests/tenka1-2018-beginner/tasks/tenka1_2018_d\n\nfrom itertools import combinations\n\nn = int(input())\nk = -1\nfor i in range(10**3):\n    if i*i - i - 2 * n == 0:\n        k = i\n\nif k == -1:\n    print('No')\n    exit()\n\n# print('Yes')\n# print(k)\n\nnum = 0\nV = [[] for _ in range(k)]\nfor cmb in combinations(range(k), r=2):\n    num += 1\n    a, b = cmb\n    V[a].append(num)\n    V[b].append(num)\nprint('Yes')\nprint(k)\nfor v in V:\n    print(len(v), end=\" \")\n    print(*v)\n", "code2": "import sys\nd={'A\\n':0,'B\\n':0,'AB\\n':0,'O\\n':0}\nfor e in sys.stdin:d[e.split(',')[1]]+=1\nfor b in d:print(d[b])\n", "label": 0, "name1": "s366576461.py", "name2": "s566437610.py"}, {"id": 835, "code1": "n=int(input())\ns=input()\n\nE=[0 for i in range(n)]\nW=[0 for i in range(n)]\n\ncnt=0\nfor i in range(n):\n    W[i]=cnt\n    if s[i]==\"W\":\n        cnt+=1\n\ncnt=0   \nfor i in range(n):\n    E[n-1-i]=cnt\n    if s[n-1-i]==\"E\":\n        cnt+=1\n\nmini=10**8\nfor i in range(n):\n    mini=min(mini,E[i]+W[i])\n\nprint(mini)", "code2": "N,L,T=map(int,input().split())\nX=[0 for i in range(N)]\nW=[0 for i in range(N)]\nD=0\nfor i in range(N):\n    X[i],W[i]=map(int,input().split())\n    W[i]=-2*W[i]+3\n    D+=(X[i]+T*W[i])//L\nD%=N\nY=sorted([((T*W[i])+X[i])%L for i in range(N)])\nfor i in range(N):\n    print(Y[(D+i)%N])", "label": 0, "name1": "s614583596.py", "name2": "s426678095.py"}, {"id": 658, "code1": "import math, sys\n\ndef loadable(w, n, k, p, wsum):\n    wait = 0\n    for i in range(n):\n        wait += w[i]\n        wsum -= w[i]\n        if wait > p:\n            k -= 1\n            wait = w[i]\n            if k == 0 or p < wsum / k:\n                return False\n    return True\n\nn, k = map(int, sys.stdin.readline().split())\nw = [int(sys.stdin.readline()) for _ in range(n)]\n\nwsum = sum(w)\n\np = max(int(math.ceil(wsum / k)), max(w))\npre_f = p -1\npre_s = None\n\nwhile True:\n    if loadable(w, n, k, p, wsum):\n        pre_s = p\n    else:\n        pre_f = p\n\n    if pre_s != None and pre_s - pre_f == 1:\n            break\n    \n    if pre_s:\n        p = int((pre_s + pre_f) / 2)\n    else:\n        p = math.ceil(p * 1.01)\n    \nprint(pre_s)", "code2": "N = int(input())\na = list(map(int, input().split()))\n\nans = 0\nfor i in range(N):\n  if a[a[i]-1] == i+1:\n    ans += 1\nprint(ans//2)", "label": 0, "name1": "s671645015.py", "name2": "s364926848.py"}, {"id": 507, "code1": "import sys\n\ns = list(input())\n\nfor i in range(len(s)):\n  if i % 2 == 1:\n    if s[i] == \"L\" or s[i] == \"U\"or s[i] == \"D\":\n      continue\n    else:\n      print(\"No\")\n      sys.exit()\n  else:\n    if s[i] == \"R\" or s[i] == \"U\"or s[i] == \"D\":\n      continue\n    else:\n      print(\"No\")\n      sys.exit()\n\nprint(\"Yes\")", "code2": "h, w = map(int, input().split())\n\neven_rows = h // 2\nodd_rows = (h+1) // 2\n\nif w > 1 and h > 1:\n    ans = 0\n    ans += w // 2 * even_rows\n    ans += (w+1) // 2 * odd_rows\n\n    print(ans)\nelse:\n    print(1)", "label": 0, "name1": "s904714457.py", "name2": "s554703184.py"}, {"id": 55, "code1": "t =0\nfor a in range(4):\n  y = int(input())\n  t += y\nc = t\ng=0\nwhile True:\n if c <0: break\n else:\n  c-=60\n  g+=1\ng-=1\nprint g\nprint t%60", "code2": "a = int(input())\nb = int(input())\nc = int(input())\nd = int(input())\n\nt = a+b+c+d\nx = t // 60\ny = t - (x*60)\nprint(x)\nprint(y)\n", "label": 1, "name1": "s359341708.py", "name2": "s681424325.py"}, {"id": 463, "code1": "import sys,queue,math,copy,itertools,bisect,collections\nfrom heapq import *\n\ndef main():\n    sys.setrecursionlimit(10**7)\n    INF = 10**18\n    MOD = 10**9 + 7\n    LI = lambda : [int(x) for x in sys.stdin.readline().split()]\n    NI = lambda : int(sys.stdin.readline())\n\n    N = NI()\n    root = [[] for _ in range(N)]\n    for _ in range(N-1):\n        a,b = LI()\n        root[a-1].append(b-1)\n        root[b-1].append(a-1)\n\n    node = [-1 for _ in range(N)]\n    q = []\n    q.append((0,0))\n    node[0] = 0\n    while q:\n        u,num = q.pop()\n        for v in root[u]:\n            if node[v] < 0:\n                node[v] = num+1\n                if v == N-1:\n                    q = []\n                    break\n                q.append((v,num+1))\n    c = node[N-1]\n    u = N-1\n    pu = 0\n    while c > (node[N-1])//2:\n        for v in root[u]:\n            if node[v] != c-1: continue\n            pu = u\n            u = v\n            c -= 1\n            break\n\n    p = u\n    node = [-1 for _ in range(N)]\n    node[p] = 0\n    node[pu] = 1\n    cnt = [0,0]\n    for i in range(2):\n        if i == 0:\n            q.append(p)\n        else:\n            q.append(pu)\n        while q:\n            u = q.pop()\n            for v in root[u]:\n                if node[v] < 0:\n                    node[v] = i\n                    q.append(v)\n                    cnt[i] += 1\n    if cnt[0] > cnt[1]:\n        print('Fennec')\n    else:\n        print('Snuke')\n\nif __name__ == '__main__':\n    main()", "code2": "import sys\ninput = lambda : sys.stdin.readline().rstrip()\nsys.setrecursionlimit(max(1000, 10**9))\nwrite = lambda x: sys.stdout.write(x+\"\\n\")\n\n\n### \u6728\u306e\u8aad\u307f\u8fbc\u307f tree\n\n# \u30b5\u30a4\u30ba\u304c\u5927\u304d\u3044\u3068defaultdict\u304c\u65e9\u3044(for\u6587\u3092\u66f8\u304b\u306a\u304f\u3066\u6e08\u3080)\nfrom collections import defaultdict\nn = int(input())\nns = [[] for _ in range(n)]\nfor _ in range(n-1):\n    u,v = map(int, input().split())\n    u -= 1\n    v -= 1\n    ns[u].append(v)\n    ns[v].append(u)\n    \n### BFS \u5e45\u512a\u5148\u63a2\u7d22\n\ndef bfs(start):\n    from collections import deque\n    q = deque([start])\n    seen = [None] * n\n    seen[start] = 0\n    while q:\n        u = q.pop()\n        d = seen[u]\n        for v in ns[u]:\n            if seen[v] is None:\n                seen[v] = d + 1\n                q.appendleft(v)\n    return seen\nd1 = bfs(0)\nd2 = bfs(n-1)\nv = sum(d1[i]<=d2[i] for i in range(n))\nv2 = n-v\nif v>v2:\n    print(\"Fennec\")\nelse:\n    print(\"Snuke\")", "label": 1, "name1": "s905380406.py", "name2": "s007019675.py"}, {"id": 608, "code1": "q = int(input())\nquest = [tuple(map(int, input().split())) for _ in range(q)]\nfor a, b in quest:\n    m = a*b\n    l = int((m - 1) ** (1/2))\n    # check float\n    if l * l >= m:\n        l -= 1\n    elif (l+1) * (l+1) < m:\n        l += 1\n    if a == b:\n        print((a-1) * 2)\n    elif (l+1) * l < m:\n        print(l*2 - 1)\n    else:\n        print(l*2 - 2)\n", "code2": "# coding: utf-8\ndef check(a,b):\n    if (a,b) in memo:\n        return memo[(a,b)]\n    if 0<=a<h and 0<=b<w and field[a][b].isdigit():\n        x=check(a+1,b)\n        y=check(a,b+1)\n        memo[(a,b)]=field[a][b]+(x if len(x)>len(y) else x if len(x)==len(y) and len(x)!=0 and int(x)>int(y) else y)\n        return field[a][b]+(x if len(x)>len(y) else x if len(x)==len(y) and len(x)!=0 and int(x)>int(y) else y)\n    else:\n        return ''\nwhile 1:\n    w,h=map(int,input().split())\n    if w==0:\n        break\n    field=[]\n    for i in range(h):\n        field.append(list(input()))\n    ans='0'\n    memo={}\n    for i in range(h):\n        for j in range(w):\n            if field[i][j]!='0' and field[i][j].isdigit():\n                tmp=check(i,j)\n                if int(ans)<int(tmp):\n                    ans=tmp\n    print(ans)\n", "label": 0, "name1": "s200942919.py", "name2": "s573602328.py"}, {"id": 302, "code1": "class Unionfind:\n     \n    def __init__(self,n):\n        self.uf = [-1]*n\n \n    def find(self,x):\n        if self.uf[x] < 0:\n            return x\n        else:\n            self.uf[x] = self.find(self.uf[x])\n            return self.uf[x]\n \n    def same(self,x,y):\n        return self.find(x) == self.find(y)\n \n    def union(self,x,y):\n        x = self.find(x)\n        y = self.find(y)\n        if x == y:\n            return False\n        if self.uf[x] > self.uf[y]:\n            x,y = y,x\n        self.uf[x] += self.uf[y]\n        self.uf[y] = x\n        return True\n \n    def size(self,x):\n        x = self.find(x)\n        return -self.uf[x]\n\nn,m = map(int,input().split())\n\nu = Unionfind(n)\ncount = 0\nfor i in range(m):\n    a,b = map(int,input().split())\n    a -= 1\n    b -= 1\n    u.union(a,b)\n\ns = set()\nfor i in range(n):\n    s.add(u.find(i))\nprint(len(s)-1)", "code2": "class UnionFind():\n  def __init__(self,n):\n    self.n=n\n    self.root=[-1]*(n+1)\n    self.rank=[0]*(n+1)\n  def FindRoot(self,x):\n    if self.root[x]<0:\n      return x\n    else:\n      self.root[x]=self.FindRoot(self.root[x])\n      return self.root[x]\n  def Unite(self,x,y):\n    x=self.FindRoot(x)\n    y=self.FindRoot(y)\n    if x==y:\n      return\n    else:\n      if self.rank[x]>self.rank[y]:\n        self.root[x]+=self.root[y]\n        self.root[y]=x\n      elif self.rank[x]<=self.rank[y]:\n        self.root[y]+=self.root[x]\n        self.root[x]=y\n        if self.rank[x]==self.rank[y]:\n          self.rank[y]+=1\n  def isSameGroup(self,x,y):\n    return self.FindRoot(x)==self.FindRoot(y)\n  def Count(self,x):\n    return -self.root[self.FindRoot(x)]\n\nn,m=map(int,input().split())\nuf=UnionFind(n+1)\nfor _ in range(m):\n  a,b=map(int,input().split())\n  uf.Unite(a,b)\ns=set()\nfor i in range(1,n+1):\n  s.add(uf.FindRoot(i))\nprint(len(s)-1)", "label": 1, "name1": "s213272363.py", "name2": "s002986344.py"}, {"id": 704, "code1": "class UnionFind():\n    def __init__(self, n):\n        self.n = n\n        self.parents = [-1] * n\n\n    def find(self, x):\n        if self.parents[x] < 0:\n            return x\n        else:\n            self.parents[x] = self.find(self.parents[x])\n            return self.parents[x]\n\n    def union(self, x, y):\n        x = self.find(x)\n        y = self.find(y)\n\n        if x == y:\n            return\n\n        if self.parents[x] > self.parents[y]:\n            x, y = y, x\n\n        self.parents[x] += self.parents[y]\n        self.parents[y] = x\n\n    def size(self, x):\n        return -self.parents[self.find(x)]\n\n    def same(self, x, y):\n        return self.find(x) == self.find(y)\n\n    def members(self, x):\n        root = self.find(x)\n        return [i for i in range(self.n) if self.find(i) == root]\n\n    def roots(self):\n        return [i for i, x in enumerate(self.parents) if x < 0]\n\n    def group_count(self):\n        return len(self.roots())\n\n    def all_group_members(self):\n        return {r: self.members(r) for r in self.roots()}\n\n    def __str__(self):\n        return '\\n'.join('{}: {}'.format(r, self.members(r)) for r in self.roots())\n\nN,M=list(map(int,input().split()))\nNetwork = UnionFind(N)\nfor i in range(M):\n    a,b=list(map(int,input().split()))\n    Network.union(a-1, b-1)\nprint(Network.group_count()-1)", "code2": "####################\n#  AC:     ms (PyPy)\n####################\n\ndef main():\n    MOD = 10**6+3\n    # preprocess\n    fac = [None] * (MOD+1)\n    fac[0] = fac[1] = 1\n    for i in range(2, MOD+1):\n        fac[i] = (fac[i-1] * i) % MOD\n\n    Q = int(input())\n    for i in range(Q):\n        x, d, n = map(int, input().split())\n\n        if d == 0:\n            print(pow(x, n, MOD))\n            continue\n        \n        xd = (x * pow(d, MOD-2, MOD)) % MOD\n        if xd == 0 or xd + (n-1) >= MOD:\n            print(0)\n            continue\n\n        print(pow(d, n, MOD) * fac[xd+(n-1)] * pow(fac[xd-1], MOD-2, MOD) % MOD)\n\n\nif __name__ == \"__main__\":\n    main()", "label": 0, "name1": "s144436411.py", "name2": "s606450603.py"}, {"id": 695, "code1": "import numpy as np\nn,m = map(int, input().split())\nX = sorted(np.array(input().split(), dtype = np.int64))\nX = sorted(np.diff(X))\nif m-n >= 0:\n    ans = sum(X[:m-n])\nelse:\n    ans = 0\nprint(ans)", "code2": "class UnionFind():\n    def __init__(self, n):\n        self.n = n\n        self.parents = [-1] * n\n\n    def find(self, x):\n        if self.parents[x] < 0:\n            return x\n        else:\n            self.parents[x] = self.find(self.parents[x])\n            return self.parents[x]\n\n    def union(self, x, y):\n        x = self.find(x)\n        y = self.find(y)\n\n        if x == y:\n            return\n\n        if self.parents[x] > self.parents[y]:\n            x, y = y, x\n\n        self.parents[x] += self.parents[y]\n        self.parents[y] = x\n\n    def size(self, x):\n        return -self.parents[self.find(x)]\n\n    def same(self, x, y):\n        return self.find(x) == self.find(y)\n\n    def members(self, x):\n        root = self.find(x)\n        return [i for i in range(self.n) if self.find(i) == root]\n\n    def roots(self):\n        return [i for i, x in enumerate(self.parents) if x < 0]\n\n    def group_count(self):\n        return len(self.roots())\n\n    def all_group_members(self):\n        return {r: self.members(r) for r in self.roots()}\n\n    def __str__(self):\n        return '\\n'.join('{}: {}'.format(r, self.members(r)) for r in self.roots())\n\nN,M=list(map(int,input().split()))\nNetwork = UnionFind(N)\nfor i in range(M):\n    a,b=list(map(int,input().split()))\n    Network.union(a-1, b-1)\nprint(Network.group_count()-1)", "label": 0, "name1": "s052852893.py", "name2": "s144436411.py"}, {"id": 370, "code1": "i,o,t,j,l,s,z = map(int,input().split())\na = 2*(i//2+j//2+l//2)\nif i>0 and j>0 and l>0:\n    i,j,l = i-1,j-1,l-1\n    b = 2*(i//2+j//2+l//2)\n    print(o+max(a,b+3))\nelse:\n    print(o+a)\n", "code2": "I,O,R,J,L,S,Z=map(int,input().split())\na=(I//2+J//2+L//2)*2\nb=0\nif I*J*L!=0:b=(2*((I-1)//2+(J-1)//2+(L-1)//2)+3)\nprint(max(a,b)+O)", "label": 1, "name1": "s273049490.py", "name2": "s966423542.py"}, {"id": 424, "code1": "import math,string,itertools,fractions,heapq,collections,re,array,bisect,sys,random,time,copy,functools\n\nsys.setrecursionlimit(10**7)\ninf = 10**20\neps = 1.0 / 10**10\nmod = 998244353\ndd = [(0,-1),(1,0),(0,1),(-1,0)]\nddn = [(0,-1),(1,-1),(1,0),(1,1),(0,1),(-1,-1),(-1,0),(-1,1)]\n\ndef LI(): return [int(x) for x in sys.stdin.readline().split()]\ndef LI_(): return [int(x)-1 for x in sys.stdin.readline().split()]\ndef LF(): return [float(x) for x in sys.stdin.readline().split()]\ndef LS(): return sys.stdin.readline().split()\ndef I(): return int(sys.stdin.readline())\ndef F(): return float(sys.stdin.readline())\ndef S(): return input()\ndef pf(s): return print(s, flush=True)\n\n\ndef main():\n    rr = []\n\n    while True:\n        n = I()\n        if n == 0:\n            break\n\n        a = [S().split(':') for _ in range(n)]\n        ts = set([c[0] for c in a])\n        ms = {}\n        for t,m in a:\n            ms[t] = m[:-1].split(',')\n\n        fm = {}\n        def f(c):\n            if c in fm:\n                return fm[c]\n            if c in ts:\n                s = set()\n                for k in ms[c]:\n                    s |= f(k)\n                fm[c] = s\n                return s\n            fm[c] = set([c])\n            return fm[c]\n\n        r = f(a[0][0])\n\n        rr.append(len(r))\n\n    return '\\n'.join(map(str,rr))\n\n\nprint(main())\n\n\n", "code2": "# coding: utf-8\ndef addset(args):\n    global a\n    for m in args:\n        if dic[m]==1:\n            a.add(m)\n        else:\n            if m not in used:\n                used.add(m)\n                addset(dc[m])\n \nwhile True:\n    n=int(input())\n    if n==0:\n        break\n    dic={}\n    first=[]\n    dc={}\n    for i in range(n):\n        g,m=input().split(':')\n        m=m.rstrip('.').split(',')\n        dc[g]=m\n        if i==0:\n            first.append(g)\n            first+=m\n        dic[g]=2\n        for mem in m:\n            if mem not in dic:\n                dic[mem]=1\n    a=set()\n    used=set()\n    addset(first[1:])\n    print(len(a))\n", "label": 1, "name1": "s451877142.py", "name2": "s673127686.py"}, {"id": 285, "code1": "tree = [ [] for _ in range(4) ]\n\nfor i in range(3):\n    a, b = map(int, input().split())\n    a -= 1; b -= 1;\n    tree[a].append(b)\n    tree[b].append(a)\n\nfor i in range(4):\n    visited = [ False for _ in range(4) ]\n    cur = i\n    visited[cur] = True\n    for j in range(3):\n        for v in tree[cur]:\n            if not visited[v]:\n                next_v = v\n                break\n        visited[next_v] = True\n        cur = next_v\n\nprint ( \"YES\" if all(visited) else \"NO\" )\n", "code2": "path_list = [0, 0, 0, 0]\ncount = 0\nfor _ in range(3):\n    a, b = map(int, input().split())\n    path_list[a-1] += 1\n    path_list[b-1] += 1\n\nfor path in path_list:\n    if path >= 3:\n        count += 1\nif count == 1:\n    print('NO')\nelse:\n    print('YES')", "label": 1, "name1": "s679343249.py", "name2": "s847721858.py"}, {"id": 763, "code1": "a,b,x=map(int,input().split())\n\nq1,r1=divmod(a,x)\nq2,_=divmod(b,x)\n\nprint(q2-q1+(r1==0))", "code2": "iN = int(input())\naA = [0] + [int(_) for _ in input().split()] + [0]\niAll = sum(map(lambda i :abs(aA[i+1]-aA[i]),range(iN+1)))\nprint(\"\\n\".join(map(lambda i:str( iAll - abs(aA[i-1]-aA[i]) - abs(aA[i]-aA[i+1]) + abs(aA[i-1]-aA[i+1])), range(1,iN+1))))\n", "label": 0, "name1": "s935190491.py", "name2": "s167602198.py"}, {"id": 455, "code1": "from datetime import date\nwhile 1:\n\tm,d=map(int,raw_input().split())\n\tif m==0:break\n\tprint date(2004,m,d).strftime(\"%A\")", "code2": "import sys\n\ndef zeller(y,m,d):\n  if m==1 or m==2:\n    y-=1\n    m+=12\n  day=(y+int(y/4)-int(y/100)+int(y/400)+int((13*m+8)/5)+d)%7\n  D={0:'Sunday',1:'Monday',2:'Tuesday',3:'Wednesday',4:'Thursday',5:'Friday',6:'Saturday'}\n  return D[day]\n  \n\nfor l in sys.stdin:\n  m,d=list(map(int,l.split()))\n  if m==0:\n    break\n  print(zeller(2004,m,d))\n", "label": 1, "name1": "s074010277.py", "name2": "s675024853.py"}, {"id": 730, "code1": "# ABC068C - Cat Snuke and a Voyage (ARC079C)\ndef main():\n    N, M, *AB = map(int, open(0).read().split())\n    from_1, to_N = set(), set()\n    for a, b in zip(*[iter(AB)] * 2):\n        if a == 1:\n            from_1.add(b)\n        if b == N:\n            to_N.add(a)\n    flg = from_1 & to_N  # intermediate point of both 1, N exists?\n    print(\"POSSIBLE\" if flg else \"IMPOSSIBLE\")\n\n\nif __name__ == \"__main__\":\n    main()", "code2": "from sys import stdin, setrecursionlimit\n\n\ndef main():\n    input = stdin.buffer.readline\n    x, y = map(int, input().split())\n    count = 0\n    tmp = x\n    while tmp <= y:\n        tmp *= 2\n        count += 1\n    print(count)\n\n\nif __name__ == \"__main__\":\n    setrecursionlimit(10000)\n    main()\n", "label": 0, "name1": "s726342129.py", "name2": "s379690682.py"}, {"id": 388, "code1": "import sys\ninput = sys.stdin.readline\na, b, x = [int(x) for x in input().split()]\nB = 1 + b // x\nif a == 0:\n    print(B)\nelif a % x == 0:\n    A = 1 + a // x\n    print(B - A + 1)\nelse:\n    A = 1 + a // x\n    print(B - A)\n", "code2": "start, end, div = list(map(int, input().strip().split()))\n\ncount = end // div - start //div\n\nif start % div == 0:\n  count += 1\nprint(count)", "label": 1, "name1": "s444272977.py", "name2": "s009071418.py"}, {"id": 158, "code1": "import sys\n\nimport bisect\n\n# from collections import Counter, deque, defaultdict\n\n# import copy\n# from heapq import heappush, heappop, heapify\n# from fractions import gcd\n# import itertools\n# from operator import attrgetter, itemgetter\nimport math\n\n# import numpy as np\n\nreadline = sys.stdin.readline\nMOD = 10 ** 9 + 7\nINF = float('INF')\nsys.setrecursionlimit(10 ** 5)\n\n\ndef main():\n    q = int(input())\n\n    for i in range(q):\n        a, b = list(map(int, readline().split()))\n\n        if a > b:\n            a, b = b, a\n\n        if a == b or a + 1 == b:\n            print(2 * a - 2)\n        else:\n            ab = a * b\n            ok = 0\n            ng = int(ab ** 0.5) + 1000000\n            while abs(ng - ok) > 1:\n                mid = (ok + ng) // 2\n                if mid ** 2 < ab:\n                    ok = mid\n                else:\n                    ng = mid\n            c = ok\n\n            if c * (c + 1) < ab:\n                print(2 * c - 1)\n            else:\n                print(2 * c - 2)\n\n\nif __name__ == '__main__':\n    main()\n", "code2": "from math import sqrt\n\nq = int(input())\n\np = []\nfor _ in range(q):\n    p.append(list(map(int, input().split())))\n\nfor t in p:\n    x = min(t)\n    y = max(t)\n    if x == y or x + 1 == y:\n        print(x * 2 - 2)\n    else:\n        temp = sqrt(x * y)\n        hoge = int(temp)\n        if hoge == temp:\n            hoge -= 1\n        if hoge * (hoge + 1) >= x * y:\n            print(2 * hoge - 2)\n        else:\n            print(2 * hoge - 1)\n\n", "label": 1, "name1": "s587240804.py", "name2": "s218122178.py"}, {"id": 327, "code1": "import sys\ndef input(): return sys.stdin.readline().strip()\n\n\ndef main():\n    a, b, c = map(int, input().split())\n    m = max(a, b, c)\n    print(a + b + c - m)\n\n\nif __name__ == \"__main__\":\n    main()\n", "code2": "a,b,c=map(int,input().split())\nprint(min(a+b,b+c,c+a))\n", "label": 1, "name1": "s149362178.py", "name2": "s997903196.py"}, {"id": 456, "code1": "a=['Wednesday','Thursday','Friday','Saturday','Sunday','Monday','Tuesday',0]\nwhile True:\n    q=map(int,raw_input().split())\n    if sum(q) == 0: break\n    print a[(sum([0,31,29,31,30,31,30,31,31,30,31,30,31][:q[0]])+q[1])%7]", "code2": "import datetime\n\ntry:\n\twhile 1:\n\t\ts = raw_input().split()\n\t\ts[0] = int(s[0])\n\t\ts[1] = int(s[1])\n\t\t\n\t\tif s[0] + s[1] == 0:\n\t\t\texit()\n\t\t\n\t\tn = datetime.date(2004, s[0], s[1]).weekday()\n\t\t\n\t\tif n == 0:\n\t\t\tprint(\"Monday\")\n\t\telif n == 1:\n\t\t\tprint(\"Tuesday\")\n\t\telif n == 2:\n\t\t\tprint(\"Wednesday\")\n\t\telif n == 3:\n\t\t\tprint(\"Thursday\")\n\t\telif n == 4:\n\t\t\tprint(\"Friday\")\n\t\telif n == 5:\n\t\t\tprint(\"Saturday\")\n\t\telif n == 6:\n\t\t\tprint(\"Sunday\")\nexcept:\n\tpass", "label": 1, "name1": "s388074654.py", "name2": "s693168692.py"}, {"id": 576, "code1": "A,B,C = map(int, input().split())\ncount = 0\nlist1 = [A,B]\n\nfor i in range(min(list1),max(list1)):\n    if C == i:\n        count = 1\n \nif count == 1:\n    print(\"Yes\")\nelse:\n    print(\"No\")", "code2": "from collections import defaultdict, deque, Counter\nfrom heapq import heappush, heappop, heapify\nfrom bisect import bisect_right, bisect_left\nimport random\nfrom itertools import permutations, accumulate, combinations, product\nimport sys\nimport string\nfrom bisect import bisect_left, bisect_right\nfrom math import factorial, ceil, floor, gamma, log\nfrom operator import mul\nfrom functools import reduce\nfrom copy import deepcopy\n\nsys.setrecursionlimit(2147483647)\nINF = 10 ** 20\ndef LI(): return list(map(int, sys.stdin.readline().split()))\ndef I(): return int(sys.stdin.readline())\ndef LS(): return sys.stdin.buffer.readline().rstrip().split()\ndef S(): return sys.stdin.buffer.readline().rstrip().decode('utf-8')\ndef IR(n): return [I() for i in range(n)]\ndef LIR(n): return [LI() for i in range(n)]\ndef SR(n): pass\ndef LSR(n): return [LS() for i in range(n)]\ndef SRL(n): return [list(S()) for i in range(n)]\ndef MSRL(n): return [[int(j) for j in list(S())] for i in range(n)]\nmod = 10 ** 9 + 7\n\nn = I()\n\nfac = [1] * (n + 1)\ninv = [1] * (n + 1)\nfor j in range(1, n + 1):\n    fac[j] = fac[j-1] * j % mod\n\n\ninv[n] = pow(fac[n], mod-2, mod)\nfor j in range(n-1, -1, -1):\n    inv[j] = inv[j+1] * (j+1) % mod\n\n\ndef comb(n, r):\n    if r > n or n < 0 or r < 0:\n        return 0\n    return fac[n] * inv[n - r] * inv[r] % mod\n\ns = input()\ndp = [[0] * n for _ in range(n)]\ndp[0][0] = 1\nfor i in range(1, n):\n    ret = 0\n    if s[i - 1] == \"<\":\n        for j in range(i - 1, -1, -1):\n            ret += dp[i - 1][j]\n            ret %= mod\n            dp[i][j] = ret\n    else:\n        for j in range(i):\n            ret += dp[i - 1][j]\n            dp[i][j + 1] = ret\n        dp[i][i] = ret\n\nprint(sum(dp[-1]) % mod)\n", "label": 0, "name1": "s230128846.py", "name2": "s321259797.py"}, {"id": 488, "code1": "l = len(set(list(map(int, input().split()))))\nif l == 2:\n  print(\"Yes\")\nelse:\n  print(\"No\")", "code2": "A=[int(i) for i in input().split()]\nA.sort()\n\nif (A[0] == A[1]) and (A[1] != A[2]) or (A[1] == A[2]) and (A[0] != A[1]):\n  print(\"Yes\")\nelse:\n  print(\"No\")", "label": 1, "name1": "s571170465.py", "name2": "s220353071.py"}, {"id": 3, "code1": "num = input()\n\nnum = str(num)\n\nlist_num = list(num)\n\nlist_num = [int(s) for s in list_num]\n\nans = 0\n\nfor n in list_num:\n    ans += n\n    ans  = ans%9\n\nif ans==0:\n    print(\"Yes\")\nelse:\n    print(\"No\")\n", "code2": "N = int(input())\n\ntotal = sum(list(map(int, str(N))))\n\nif total % 9 == 0:\n  print('Yes')\nelse:\n  print('No')\n", "label": 1, "name1": "s383833581.py", "name2": "s525082295.py"}, {"id": 248, "code1": "N = int(input())\na = list(map(int, input().split()))\n\nans = 0\nfor i in range(N):\n  if a[a[i]-1] == i+1:\n    ans += 1\nprint(ans//2)", "code2": "N = int(input())\na = list(map(int, input().split()))\nlike = []\ncnt = 0\n\nfor i in range(0, N):\n    like.append([i+1, a[i]])\n\nfor j, k in like:\n    if like[k-1][1] == j:\n        cnt += 1\n\nprint(cnt // 2)", "label": 1, "name1": "s364926848.py", "name2": "s502699980.py"}, {"id": 380, "code1": "h, w = map(int, input().split())\na = [list(input()) for _ in range(h)]\nu = [[\".\"] * w for _ in range(h)]\nv = [[\".\"] * w for _ in range(h)]\nfor i in range(h):\n    for j in range(w):\n        if a[i][j] == \"#\":\n            u[i][j], v[i][j] = \"#\", \"#\"\n        else:\n            if i == 0:\n                u[i][j] = \"#\"\n            elif i == h - 1:\n                v[i][j] = \"#\"\n            else:\n                if j % 2 == 0:\n                    u[i][j] = \"#\"\n                else:\n                    v[i][j] = \"#\"\nfor s in u:\n    print(\"\".join(s))\nprint()\nfor t in v:\n    print(\"\".join(t))", "code2": "# coding:utf-8\n\nINF = float('inf')\n\n\ndef inpl(): return list(map(int, input().split()))\n\n\nH, W = inpl()\n\nX = [list(input()) for _ in range(H)]\n\nA = [['.' for _ in range(W)] for _ in range(H)]\nB = [['.' for _ in range(W)] for _ in range(H)]\ntmp = ['#' for _ in range(W - 1)]\nfor i in range(H):\n    if i % 2 == 0:\n        A[i][:-1] = tmp\n        B[i][-1] = '#'\n    else:\n        B[i][1:] = tmp\n        A[i][0] = '#'\n\nfor h in range(H):\n    for w in range(W):\n        if X[h][w] == '#':\n            A[h][w] = '#'\n            B[h][w] = '#'\n\nfor a in A:\n    print(''.join(a))\nprint('')\nfor b in B:\n    print(''.join(b))\n", "label": 1, "name1": "s080897842.py", "name2": "s776974411.py"}, {"id": 542, "code1": "a = int(input())\nb = int(input())\nc = int(input())\nd = int(input())\n\nt = a+b+c+d\nx = t // 60\ny = t - (x*60)\nprint(x)\nprint(y)\n", "code2": "def main():\n    n=int(input())\n    m=int((2*n)**0.5)\n    if m*(m+1)==n*2:\n        print(\"Yes\")\n        m+=1\n        print(m)\n    else:\n        print(\"No\")\n        exit()\n    \n    ans=[[m-1] for i in range(m)]\n    c=1\n    for i in range(m):\n        for j in range(i+1,m):\n            ans[i].append(c)\n            ans[j].append(c)\n            c+=1\n    for i in ans:\n        print(\" \".join(map(str,i)))\n\n\nif __name__ == '__main__':\n    main()\n\n\n\n\n\n\n", "label": 0, "name1": "s681424325.py", "name2": "s694753497.py"}, {"id": 210, "code1": "n = int(input())\nsa,sb=[int(it) for it in input().split()]\nfor i in range(n-1):\n  a,b=[int(it) for it in input().split()]\n  r =  max( sa//a + (1 if sa%a!=0 else 0),sb//b+(1 if sb%b!=0 else 0) )\n  sa = r*a\n  sb = r*b\nprint (sa+sb)", "code2": "n = input()\np, q = [-1, -1]\nfor i in xrange(n):\n    t, a = map(int, raw_input().split())\n    if p == -1 or q == -1:\n        p = t\n        q = a\n        continue\n    if t >= p and a >= q:\n        p = t\n        q = a\n    else:\n        z = max(p / t + (p % t != 0), q / a + (q % a != 0))\n        p = t * z\n        q = a * z\nprint p + q\n\n", "label": 1, "name1": "s718859988.py", "name2": "s412403305.py"}, {"id": 699, "code1": "class UnionFind():\n  def __init__(self, n):\n    self.n = n\n    self.parents = [-1] * n\n\n  def find(self, x):\n    if self.parents[x] < 0:\n      return x\n    else:\n      self.parents[x] = self.find(self.parents[x])\n      return self.parents[x]\n\n  def union(self, x, y):\n    x = self.find(x)\n    y = self.find(y)\n\n    if x == y:\n      return\n\n    if self.parents[x] > self.parents[y]:\n      x, y = y, x\n\n    self.parents[x] += self.parents[y]\n    self.parents[y] = x\n\n  def size(self, x):\n    return -self.parents[self.find(x)]\n\n  def same(self, x, y):\n    return self.find(x) == self.find(y)\n\n  def members(self, x):\n    root = self.find(x)\n    return [i for i in range(self.n) if self.find(i) == root]\n\n  def roots(self):\n    return [i for i, x in enumerate(self.parents) if x < 0]\n\n  def group_count(self):\n    return len(self.roots())\n\n  def all_group_members(self):\n    return {r: self.members(r) for r in self.roots()}\n\n  def __str__(self):\n    return '\\n'.join('{}: {}'.format(r, self.members(r)) for r in self.roots())\n\nn, m = map(int, input().split())\nuf = UnionFind(n)\n\nfor _ in range(m):\n  a, b = map(int, input().split())\n  uf.union(a-1,b-1)\n  \nprint(uf.group_count() - 1)\n\n", "code2": "A, B, C = map(int, input().split())\n\n\nH = C-(A-B)\n\nif H < 0:\n    print(\"0\")\nelse:\n    print(H)\n\n\n", "label": 0, "name1": "s813737955.py", "name2": "s336832003.py"}, {"id": 545, "code1": "# AOJ 0217 Walking in the Hospital\n# Python3 2018.6.23 bal4u\n\nwhile 1:\n\tn = int(input())\n\tif n == 0: break\n\tdmax = 0\n\tfor i in range(n):\n\t\tp, d1, d2 = map(int, input().split())\n\t\tif d1+d2 > dmax: id, dmax = p, d1+d2\n\tprint(id, dmax)\n", "code2": "def main():\n    n=int(input())\n    m=int((2*n)**0.5)\n    if m*(m+1)==n*2:\n        print(\"Yes\")\n        m+=1\n        print(m)\n    else:\n        print(\"No\")\n        exit()\n    \n    ans=[[m-1] for i in range(m)]\n    c=1\n    for i in range(m):\n        for j in range(i+1,m):\n            ans[i].append(c)\n            ans[j].append(c)\n            c+=1\n    for i in ans:\n        print(\" \".join(map(str,i)))\n\n\nif __name__ == '__main__':\n    main()\n\n\n\n\n\n\n", "label": 0, "name1": "s876770513.py", "name2": "s694753497.py"}, {"id": 575, "code1": "a,b,c=map(int,input().split())\nif (a>c and b<c) or (a<c and b>c):\n  print(\"Yes\")\nelse:\n  print(\"No\")", "code2": "import sys\nsys.setrecursionlimit(2147483647)\nINF=float(\"inf\")\nMOD=10**9+7\ninput=lambda :sys.stdin.readline().rstrip()\ndef resolve():\n    n,k=map(int,input().split())\n    A=list(map(int,input().split()))\n    dp=[0]*(k+1)\n    for i in range(k):\n        if dp[i]: continue\n        for j in range(n):\n            if i+A[j]<=k: dp[i+A[j]]=1\n    print(\"First\" if dp[k] else \"Second\")\nresolve()", "label": 0, "name1": "s473634907.py", "name2": "s270542298.py"}, {"id": 244, "code1": "#!/usr/bin/env python3\n#CODE FESTIVAL 2016 A\n\nimport sys\nimport math\nimport bisect\nsys.setrecursionlimit(1000000000)\nfrom heapq import heappush, heappop\nfrom collections import defaultdict\nfrom itertools import accumulate\nfrom collections import Counter\nfrom collections import deque\nfrom operator import itemgetter\nfrom itertools import permutations\nmod = 10**9 + 7\ndef I(): return int(sys.stdin.readline())\ndef LI(): return list(map(int,sys.stdin.readline().split()))\n\nn = I()\na = LI()\nx = []\nfor i in range(n):\n    if i+1 > a[i]:\n        x.append((a[i],i+1))\n    else:\n        x.append((i+1,a[i]))\nprint(n-len(list(set(x))))\n", "code2": "N = int(input())\nA = [int(_) - 1 for _ in input().split()]\nans = 0\nfor i in range(N):\n    if i < A[i] and A[A[i]] == i:\n        ans += 1\nprint(ans)\n", "label": 1, "name1": "s190944842.py", "name2": "s038697693.py"}, {"id": 987, "code1": "from fractions import gcd\nfrom datetime import date, timedelta\nfrom heapq import*\nimport math\nfrom collections import defaultdict, Counter, deque\nimport sys\nfrom bisect import *\nimport itertools\nimport copy\nsys.setrecursionlimit(10 ** 7)\nMOD = 10 ** 9 + 7\n\n\ndef main():\n    n = int(input())\n    d = list(map(int, input().split()))\n    if n == 1:\n        print(d[0])\n        exit()\n    dc = defaultdict(int)\n    dc[0] = 1\n    for i in range(n):\n        v = d[i]\n        if dc[v] >= 2 or (dc[v] == 1 and (v == 12 or v == 0)):\n            print(0)\n            exit()\n        dc[v] += 1\n    \n    dd = []\n    ddt = []\n    for i in range(0, 13):\n        if (i == 0 or i == 12) and dc[i] == 1:\n            ddt.append(i)\n        elif dc[i] == 1:\n            dd.append(i)\n        elif dc[i] == 2:\n            ddt.append(i)\n            ddt.append(24 - i)\n\n\n    \n    ans = 0\n    for i in range(1 << len(dd)):\n        d3 = []\n        for j in range(len(ddt)):\n            d3.append(ddt[j])\n\n        for j in range(len(dd)):\n            if (i & (1 << j)):\n                d3.append(dd[j])\n            else:\n                d3.append(24 - dd[j])\n        \n        d3 = sorted(d3)\n        t = float(\"inf\")\n        for i in range(len(d3) - 1):\n            t = min(t, d3[i + 1] - d3[i])\n        t = min(t , 24 - d3[-1])\n        ans = max(t, ans)\n    print(ans)\n\n\nif __name__ == '__main__':\n    main()\n", "code2": "import sys\ns = input()\nk = len(s)\nfor i in range(2,len(s),2):\n    s = s[:len(s)-2]\n    if s[:(len(s)//2)] == s[(len(s)//2):]:\n        print(k-i)\n        sys.exit()\n    ", "label": 0, "name1": "s742731060.py", "name2": "s986303518.py"}, {"id": 844, "code1": "N,L,T=map(int,input().split())\nX=[0 for i in range(N)]\nW=[0 for i in range(N)]\nD=0\nfor i in range(N):\n    X[i],W[i]=map(int,input().split())\n    W[i]=-2*W[i]+3\n    D+=(X[i]+T*W[i])//L\nD%=N\nY=sorted([((T*W[i])+X[i])%L for i in range(N)])\nfor i in range(N):\n    print(Y[(D+i)%N])", "code2": "# -*- coding: utf-8 -*-\n\"\"\"\nhttp://judge.u-aizu.ac.jp/onlinejudge/description.jsp?id=0138\n\n\"\"\"\nimport sys\nfrom sys import stdin\nfrom operator import itemgetter\ninput = stdin.readline\n\ndef solve(data):\n    data.sort(key=itemgetter(1))\n    top2 = data[:2]\n    others = data[2:]\n    return top2, others         #  ??????2?????\u00a8????????\\??????id??\u00a8?????????????????????\n\n\ndef main(args):\n    others_results = []\n    for _ in range(3):\n        round_results = []\n        for _ in range(8):\n            id, time = input().split()\n            round_results.append([int(id), float(time)])\n        top2, others = solve(round_results)\n        others_results.extend(others)\n\n        # ????????????2???????????\u00b1\n        for id, time in top2:\n            print('{} {}'.format(id, time))\n\n    # ????????????3?????\\?????????????????????2???????????\u00b1\n    top2, others = solve(others_results)\n    for id, time in top2:\n        print('{} {}'.format(id, time))\n\n\nif __name__ == '__main__':\n    main(sys.argv[1:])", "label": 0, "name1": "s426678095.py", "name2": "s481502029.py"}, {"id": 132, "code1": "import sys\nread = sys.stdin.buffer.read\nreadline = sys.stdin.buffer.readline\nreadlines = sys.stdin.buffer.readlines\n\nimport numpy as np\n\nN = int(readline())\nS = read().rstrip().decode('utf-8')\n\nMOD = 10**9 + 7\n\n\"\"\"\n\u30fb\u6700\u5f8c\u306b\u4f7f\u3063\u305f\u6570\u306b\u5bfe\u3057\u3066\u3001\u4e0b\u5074\u306b\u6b8b\u3063\u3066\u3044\u308b\u500b\u6570 -> \u6570\u3048\u4e0a\u3052\n\"\"\"\n\ndp = np.ones(N,np.int64) # \u5de6\u7aef\n\nfor s in S:\n    prev = dp\n    if s == '<':\n        # 0,1,...,n\u304cdp[n]\u306b\u9077\u79fb\u3059\u308b\n        dp = prev[:-1].cumsum()\n    else:\n        # n+1,n+2,...\u304cdp[n]\u306b\u9077\u79fb\u3059\u308b\n        dp = prev[1:][::-1].cumsum()[::-1]\n    dp %= MOD\n\nanswer = dp[0]\nprint(answer)", "code2": "N = int(input())\ns = input()\nMOD = 10**9+7\n\n#A1 ... An\u306eBIT(1-indexed)\nBIT = [0]*(N+1)\n\n#A1 ~ Ai\u307e\u3067\u306e\u548c O(logN)\ndef BIT_query(idx):\n    res_sum = 0\n    while idx > 0:\n        res_sum += BIT[idx]\n        idx -= idx&(-idx)\n    return res_sum\n\n#Ai += x O(logN)\ndef BIT_update(idx,x):\n    while idx <= N:\n        BIT[idx] += x\n        idx += idx&(-idx) #BIT_update(0, )\u3092\u3059\u308b\u3068 while \u304c\u7d42\u308f\u3089\u306a\u3044\n    return\n\n\ndp = [[0]*N for _ in range(N)] # dp[i][k]\uff1ai\u756a\u76ee\u307e\u3067\u898b\u305f\u6642\u306b\uff0ci\u756a\u76ee\u306e\u8981\u7d20\u3088\u308a\u5c0f\u3055\u3044\u5024\u306e\u500b\u6570\u304ck\u306e\u6642\u306e\u30d1\u30bf\u30fc\u30f3\u6570 \nfor k in range(N): dp[0][k] = 1\n\nfor i in range(1, N):\n    BIT = [0]*(N+1)\n    for k in range(N): BIT_update(k+1, dp[i-1][k]) #BIT_update(0, )\u3092\u3059\u308b\u3068 while \u304c\u7d42\u308f\u3089\u306a\u3044\n    if s[i-1] == '<':\n        for k in range(N-i): dp[i][k] = BIT_query(k+1) % MOD #sum([dp[i-1][j] for j in range(k+1)])\n    else:\n        for k in range(N): dp[i][k] = (BIT_query(N) - BIT_query(k+1)) % MOD #sum([dp[i-1][j] for j in range(k+1, N)])\n\nprint(dp[-1][0])", "label": 1, "name1": "s898339720.py", "name2": "s562446307.py"}, {"id": 121, "code1": "\n\ndef main():\n    n, K = map(int, input().split())\n    a = list(map(int, input().split()))\n\n    # dp[i] is true if First player wins with i tiles left\n    dp = [False]*(K+1)\n    for k in range(1, K+1):\n        for i in a:\n            if k >= i and not dp[k-i]:\n                dp[k] = True\n    print(['Second', 'First'][dp[K]])\n\n\nif __name__ == \"__main__\":\n    main()\n", "code2": "n, k = map(int, input().split())\na_s = list(map(int, input().split()))\ndp = [\"Second\"] * (k + 1)\nfor i in range(k + 1):\n    if dp[i] == \"Second\":\n        for a in a_s:\n            ii = i + a\n            if ii > k:break\n            dp[ii] = \"First\"\nprint(dp[-1])\n", "label": 1, "name1": "s700864010.py", "name2": "s835744397.py"}, {"id": 479, "code1": "import itertools\n\ndef is_edge_exists(node1, node2, edges):\n\tfor edge in edges:\n\t\tif node1 in edge and node2 in edge:\n\t\t\treturn True\n\treturn False\n\ndef route_count(route, edges):\n\tif route[0]!=1:\n\t\treturn 0\n\tfor i in range(len(route)-1):\n\t\tif not is_edge_exists(route[i], route[i+1], edges):\n\t\t\treturn 0\n\treturn 1\n\nN, M = map(int, input().split())\nedges = [list(map(int, input().split())) for i in range(M)]\nnodes = [i+1 for i in range(N)]\nroutes = list(itertools.permutations(nodes))\n\nans = 0\nfor route in routes:\n\tans += route_count(route, edges)\nprint(ans)", "code2": "# -*- coding: utf-8 -*-\nn,m = list(map(int,input().split()))\nab = [list(map(int,input().split())) for i in range(m)]\n\n#\u9006\u9806\u306b\u3057\u305f\u3082\u306e\u8ffd\u52a0\nab += [[b,a] for a,b in ab]\n\n#\u8fbaid\u4ed8\u304d\u3067\u3001id\u304cfrom,abi[from]=[to1,to2,...] \u306e\u30ea\u30b9\u30c8\nabi = [[] for _ in range(n+1)]\nfor i,(a,b) in enumerate(ab):\n    abi[a].append(b)\n\n\n\n#\u518d\u8d77\u306elimit\u3092\u4e0a\u3052\u308b\nimport sys\nsys.setrecursionlimit(4100000)\n\ndef dfs(idx=1,visitted=[1],cnt=1):\n    ret = 0\n    if cnt==n:\n        return 1\n    for to in abi[idx]:\n        if to not in visitted:\n            ret += dfs(to,visitted+[to],cnt+1)\n    return ret\nprint(dfs())", "label": 1, "name1": "s952388313.py", "name2": "s912005528.py"}, {"id": 949, "code1": "import  numpy as np\nD = int(input())\nc = np.array(list(map(int, input().split())))\ns = [list(map(int, input().split())) for _ in range(D)]\nlast_d = np.array([0]*len(c))\n\nans = 0\nfor i in range(D):\n  cc = c*(last_d+i+1)\n  max_c = max(cc)\n  index = np.argmax(cc)\n  print(index + 1)\n  last_d[index] = -(i+1)\n  ans += s[i][index]\n  cc[index] = 0\n  for j in cc:\n    ans -= j\n", "code2": "n,m,k=map(int,input().split())\nn,m=min(n,m),max(n,m)\nfor i in range(n//2+n%2):\n  num,dem=k-i*m,n-2*i\n  if num%dem or not(0<=num//dem<=m):continue\n  print(\"Yes\");exit()\nprint(\"No\")", "label": 0, "name1": "s137637436.py", "name2": "s659941727.py"}, {"id": 175, "code1": "while 1:\n\tW, H = map(int,raw_input().split(\" \"))\n\tif W == H == 0: \n\t\tbreak\n\tfield = [[c for c in raw_input()] for _ in range(H)]\n\tsecret = [0, \"\"]\n\tfor j in range(H):\n\t\tfor i in range(W):\n\t\t\tif not field[j][i].isdigit():\n\t\t\t\tcontinue\n\t\t\tleft = top = \"\"\n\t\t\tif i > 0 and field[j][i-1].isdigit() and field[j][i-1] != \"0\":\n\t\t\t\tleft = field[j][i-1]\n\t\t\tif j > 0 and field[j-1][i].isdigit() and field[j-1][i] != \"0\":\n\t\t\t\ttop = field[j-1][i]\n\t\t\tif len(left) == len(top):\n\t\t\t\tfield[j][i] = (left if left > top else top) + field[j][i]\n\t\t\telse :\n\t\t\t\tfield[j][i] = (left if len(left) > len(top) else top) + field[j][i]\n\t\t\tlength = len(field[j][i])\n\t\t\tif length > secret[0]:\n\t\t\t\tsecret[1] = field[j][i]\n\t\t\t\tsecret[0] = length\n\t\t\telif length == secret[0] and field[j][i] > secret[1]:\n\t\t\t\tsecret[1] = field[j][i]\n\tprint secret[1]", "code2": "while 1:\n    W,H = map(int,raw_input().split())\n    if W == 0: break\n    C = [list(raw_input()) for _ in xrange(H)]\n    dp = [[0]*W for _ in xrange(H)]\n    ans = 0\n    for h in xrange(H):\n        for w in xrange(W):\n            if C[h][w].isdigit():\n                dp[h][w] = max(dp[h][w],int(C[h][w]))\n                if w > 0: dp[h][w] = max(dp[h][w],int(str(dp[h][w-1])+C[h][w]))\n                if h > 0: dp[h][w] = max(dp[h][w],int(str(dp[h-1][w])+C[h][w]))\n    print max(max(i) for i in dp)", "label": 1, "name1": "s782922064.py", "name2": "s193534037.py"}, {"id": 170, "code1": "X = input()\n\ns_cnt = 0\nt_cnt = 0\n\nans = 0\n\nfor n in range(len(X)):\n  if X[n] == \"S\":\n    s_cnt += 1\n  else:\n    t_cnt += 1\n  ans = max(ans,t_cnt-s_cnt)\nprint(ans*2)", "code2": "X = input()\n\nresult = len(X)\nn_S = 0\nfor c in X:\n    if c == 'S':\n        n_S += 1\n    elif c == 'T':\n        if n_S > 0:\n           n_S -= 1 \n           result -= 2\n    else:\n        raise ValueError\nprint(result)", "label": 1, "name1": "s239717601.py", "name2": "s960464217.py"}, {"id": 195, "code1": "import math\nN = int(input())\nA = list(map(int,input().split()))\nA.sort(reverse = True)\n\nans = 0\nfor i in range(1,N):\n  a = math.floor(i/2)\n  ans += A[a]\n    \nprint(ans)", "code2": "n=int(input())\nl=list(map(int,input().split()))\nl.sort()\n\nsum=l[-1]\nfor i in range(1,n//2):\n  sum+=2*l[-1-i]\nif n%2!=0:\n  sum+=l[n//2]\nprint(sum)", "label": 1, "name1": "s069304778.py", "name2": "s279247107.py"}, {"id": 824, "code1": "#\n# abc054 c\n#\n\nimport sys\nfrom io import StringIO\nimport unittest\nimport itertools\n\n\nclass TestClass(unittest.TestCase):\n    def assertIO(self, input, output):\n        stdout, stdin = sys.stdout, sys.stdin\n        sys.stdout, sys.stdin = StringIO(), StringIO(input)\n        resolve()\n        sys.stdout.seek(0)\n        out = sys.stdout.read()[:-1]\n        sys.stdout, sys.stdin = stdout, stdin\n        self.assertEqual(out, output)\n\n    def test_\u5165\u529b\u4f8b_1(self):\n        input = \"\"\"3 3\n1 2\n1 3\n2 3\"\"\"\n        output = \"\"\"2\"\"\"\n        self.assertIO(input, output)\n\n    def test_\u5165\u529b\u4f8b_2(self):\n        input = \"\"\"7 7\n1 3\n2 7\n3 4\n4 5\n4 6\n5 6\n6 7\"\"\"\n        output = \"\"\"1\"\"\"\n        self.assertIO(input, output)\n\n\ndef resolve():\n    N, M = map(int, input().split())\n    P = [list(map(int, input().split())) for _ in range(M)]\n\n    R = itertools.permutations(range(1, N+1))\n\n    ans = 0\n    for r in R:\n        flag = True\n        r = list(r)\n        if r[0] != 1:\n            break\n        for i in range(1, N):\n            for p in P:\n                if (r[i-1] == p[0] and r[i] == p[1]) or (r[i-1] == p[1] and r[i] == p[0]):\n                    break\n            else:\n                flag = False\n        if flag == True:\n            ans += 1\n\n    print(ans)\n\n\nif __name__ == \"__main__\":\n    # unittest.main()\n    resolve()\n", "code2": "n = int(input())\ns = input()\nleft = [0]\nright = [0]\nfor i in range(n):\n    if s[i] == 'W':\n        tmp = left[-1] + 1\n        left.append(tmp)\n    else:\n        left.append(left[-1])\n    if s[n-1-i] == 'E':\n        tmp = right[-1] + 1\n        right.append(tmp)\n    else:\n        right.append(right[-1])\nmi = 10**18\nright = right[::-1]\nfor i in range(n+1):\n    if mi > left[i] + right[i]:\n        mi = left[i] + right[i]\nprint(mi)", "label": 0, "name1": "s851959667.py", "name2": "s487064711.py"}, {"id": 343, "code1": "import bisect\n\nans = \"IMPOSSIBLE\"\nn, m = map(int, input().split())\nac = []\nbc = []\nfor _ in range(m):\n    a, b = map(int, input().split())\n    if min(a, b) == 1:\n        ac.append(max(a, b))\n    elif max(a, b) == n:\n        bc.append(min(a, b))\nac = list(sorted(ac))\nbc = list(sorted(bc))\nfor c in ac:\n    i = bisect.bisect_left(bc, c)\n    if i < len(bc) and bc[i] == c:\n        ans = ans[2:]\n        break\nprint(ans)", "code2": "def inpl(): return list(map(int, input().split()))\nN, M = inpl()\nf, n = set(), set()\nfor i in range(M):\n    temp = inpl()\n    if 1 in temp:\n        f.add(temp[1])\n    if N in temp:\n        n.add(temp[0])\nif len(f & n) > 0:\n    print('POSSIBLE')\nelse:\n    print('IMPOSSIBLE')", "label": 1, "name1": "s723688485.py", "name2": "s278593598.py"}, {"id": 222, "code1": "n = int(input())\np = tuple(map(int, input().split()))\nq = tuple(map(int, input().split()))\n\nimport itertools\nr = list(itertools.permutations(range(1, n+1)))\n\np_place = r.index(p)\nq_place = r.index(q)\nanswer = abs(p_place-q_place)\nprint(answer)", "code2": "from itertools import permutations\n\nn = int(input())\np = list(map(int, input().split()))\nq = list(map(int, input().split()))\n\nfor i, j in enumerate(permutations(range(1, n + 1))):\n    if list(j) == p:\n        p_index = i\n    if list(j) == q:\n        q_index = i\n\nprint(abs(p_index - q_index))", "label": 1, "name1": "s558804624.py", "name2": "s474633952.py"}, {"id": 48, "code1": "n=int(input())\na=list(map(int,input().split()))\nans=0\nfor i in range(n-1):\n    if a[i]==a[i+1]:\n        a[i+1]=-1\n        ans+=1\nprint(ans)", "code2": "N = int(input())\nAs = list(map(int,input().split()))\ncounts = []\nnow = As[0]\ncount = 1\nfor a in range(1,len(As)):\n    if As[a]==now:\n        count+=1\n        if a == len(As)-1:\n            counts.append(count)\n    else:\n        counts.append(count)\n        count =1\n        now = As[a]\nprint(sum([i//2 for i in counts]))", "label": 1, "name1": "s300532690.py", "name2": "s736034553.py"}, {"id": 131, "code1": "def f(n, s):\n    md = 10 ** 9 + 7\n    dp = [1] * n\n    for i in range(n - 1):\n        if s[i] == \"<\":\n            L = dp[0]\n            for dpi in range(1, n - i - 1):\n                dp[dpi] = L = (dp[dpi] + L) % md\n            dp = dp[:-1]\n        else:\n            R = dp[-1]\n            for dpi in range(n - i - 2, 0, -1):\n                dp[dpi] = R = (dp[dpi] + R) % md\n            dp = dp[1:]\n    print(dp[0])\n\n\nn = int(input())\ns = input()\nf(n, s)\n", "code2": "from itertools import accumulate\n\nmod = 10 ** 9 + 7\n\nN = int(input())\nS = input()\n\ndp = [1] * N\nfor s in S:\n    if s == \"<\":\n        dp = [a % mod for a in accumulate(dp[:-1])]\n    else:\n        dp = [a % mod for a in accumulate(reversed(dp[1:]))]\n        dp.reverse()\n\nprint(dp[0])", "label": 1, "name1": "s415178183.py", "name2": "s900318425.py"}, {"id": 269, "code1": "a,b,c,k=map(int,input().split())\nc_=max(0,k-a-b)\na_=min(a,k)\nprint(a_-c_)", "code2": "A,B,C,K = list(map(int, input().split()))\ntmp = K-A\nif tmp>0:\n  tmp -= B\n  if tmp>0:\n    ans = 1*A-1*(K-A-B)\n  else:\n    ans = 1*A\nelse:\n  ans = 1*K\nprint(ans)", "label": 1, "name1": "s535747622.py", "name2": "s207771428.py"}, {"id": 761, "code1": "start, end, div = list(map(int, input().strip().split()))\n\ncount = end // div - start //div\n\nif start % div == 0:\n  count += 1\nprint(count)", "code2": "#coding:utf-8\n\nn = input()\nl = map(int, raw_input(). split())\nl.sort()\nfor i in xrange(n):\n    print(l[i]),", "label": 0, "name1": "s009071418.py", "name2": "s666694142.py"}, {"id": 686, "code1": "while True:\n    n,x = map(int,raw_input().split())\n    count = 0;\n    if n == 0 and x == 0:break\n    for i in range(1,n + 1):\n        for j in range(1,n + 1):\n            if i == j:break\n            for k in range(1,n + 1):\n                if j == k:break\n                if i + j + k == x:\n                    count+=1\n                    break\n    print count", "code2": "import numpy as np\nn,m = map(int, input().split())\nX = sorted(np.array(input().split(), dtype = np.int64))\nX = sorted(np.diff(X))\nif m-n >= 0:\n    ans = sum(X[:m-n])\nelse:\n    ans = 0\nprint(ans)", "label": 0, "name1": "s748079428.py", "name2": "s052852893.py"}, {"id": 803, "code1": "a=['Wednesday','Thursday','Friday','Saturday','Sunday','Monday','Tuesday',0]\nwhile True:\n    q=map(int,raw_input().split())\n    if sum(q) == 0: break\n    print a[(sum([0,31,29,31,30,31,30,31,31,30,31,30,31][:q[0]])+q[1])%7]", "code2": "n=int(input())\n\nL=[[] for i in range(n+1)]\n\nfor i in range(n-1):\n    a,b=map(int,input().split())\n    L[a].append(b)\n    L[b].append(a)\n\nfe=[0 for i in range(n+1)]\nque=[(1,0)]\nvisited=[0 for i in range(n+1)]\nvisited[1]=1\nhead=0\n\nwhile len(que)>head:\n    now=que[head]\n    head+=1\n    fe[now[0]]=now[1]\n    for nex in L[now[0]]:\n        if visited[nex]==0:\n            visited[nex]=1\n            que.append((nex,now[1]+1))\n            \nsn=[0 for i in range(n+1)]\nque=[(n,0)]\nvisited=[0 for i in range(n+1)]\nvisited[-1]=1\nhead=0\n\nwhile len(que)>head:\n    now=que[head]\n    head+=1\n    sn[now[0]]=now[1]\n    for nex in L[now[0]]:\n        if visited[nex]==0:\n            visited[nex]=1\n            que.append((nex,now[1]+1))\n\nkaname=[]\nfor i in range(1,n+1):\n    ck=fe[i]-sn[i]\n    if ck==1 or ck==2:\n        kaname.append(i)\n\ncnt=0\nque=[(1,0)]\nvisited=[0 for i in range(n+1)]\nvisited[1]=1\nhead=0\n\nwhile len(que)>head:\n    now=que[head]\n    head+=1\n    cnt+=1\n    for nex in L[now[0]]:\n        if visited[nex]==0 and not nex in kaname:\n            visited[nex]=1\n            que.append((nex,now[1]+1))\n\nif cnt*2>n:\n    print(\"Fennec\")\nelse:\n    print(\"Snuke\")", "label": 0, "name1": "s388074654.py", "name2": "s845599163.py"}, {"id": 64, "code1": "while(True):\n    n = int(input())\n    if not n: break\n    maxind = 0\n    maxnum = 0\n    for _ in range(n):\n        a,b,c = map(int,input().split())\n        if maxnum < b+c: maxind=a; maxnum=b+c\n    print(maxind,maxnum)\n", "code2": "# AOJ 0217 Walking in the Hospital\n# Python3 2018.6.23 bal4u\n\nwhile 1:\n\tn = int(input())\n\tif n == 0: break\n\tdmax = 0\n\tfor i in range(n):\n\t\tp, d1, d2 = map(int, input().split())\n\t\tif d1+d2 > dmax: id, dmax = p, d1+d2\n\tprint(id, dmax)\n", "label": 1, "name1": "s695355783.py", "name2": "s876770513.py"}, {"id": 410, "code1": "iN = int(input())\naA = [0] + [int(_) for _ in input().split()] + [0]\niAll = sum(map(lambda i :abs(aA[i+1]-aA[i]),range(iN+1)))\nprint(\"\\n\".join(map(lambda i:str( iAll - abs(aA[i-1]-aA[i]) - abs(aA[i]-aA[i+1]) + abs(aA[i-1]-aA[i+1])), range(1,iN+1))))\n", "code2": "n=int(input())\na=list(map(int,input().split()))\na.insert(0,0)\na.append(0)\nc=0\nx=0\nfor i in range(n+1):\n    c+=abs(a[i+1]-a[i])\nfor i in range(1,n+1):\n    x=c\n    x+=abs(a[i+1]-a[i-1])\n    x-=abs(a[i+1]-a[i])\n    x-=abs(a[i]-a[i-1])\n    print(x)\n", "label": 1, "name1": "s167602198.py", "name2": "s587620024.py"}, {"id": 519, "code1": "\ndef resolve():\n    N, A, B = map(int, input().split())\n    X = list(map(int, input().split()))\n\n    ans = 0\n    for i in range(N - 1):\n        res = min((X[i + 1] - X[i]) * A, B)\n        ans += res\n        \n    print(ans)\n\n\nif __name__ == \"__main__\":\n    resolve()", "code2": "import math\nimport statistics\n\nwhile(1):\n    n=int(input())\n    if(not n):\n        break\n    S=list(map(int,input().split(\" \")))\n    mean=statistics.mean(S)\n    #print(mean)\n    S=list(map(lambda x: (x-mean)**2, S))\n    #print(S)\n    print(math.sqrt(sum(S)/n))\n\n", "label": 0, "name1": "s398154186.py", "name2": "s513646243.py"}, {"id": 754, "code1": "H,W = list(map(int,input().split()))\n\na = [input() for i in range(H)]\n\nb = [[] for i in range(H)]\nr = [[] for i in range(H)]\nfor i in range(H):\n    for j in range(W):\n        if i==0:\n            b[i].append(\"#\")\n            r[i].append(\".\")\n        elif i==H-1:\n            b[i].append(\".\")\n            r[i].append(\"#\")\n        elif a[i][j]==\"#\":\n            b[i].append(\"#\")\n            r[i].append(\"#\")\n        elif j%2==0:\n            b[i].append(\".\")\n            r[i].append(\"#\")\n        elif j%2==1:\n            b[i].append(\"#\")\n            r[i].append(\".\")\n\nfor i in range(H):\n    ans = \"\"\n    for j in range(W):\n        ans = ans+b[i][j]\n\n    print(ans)\nprint(\"\")\n\nfor i in range(H):\n    ans = \"\"\n    for j in range(W):\n        ans = ans+r[i][j]\n\n    print(ans)\n", "code2": "a,b,x=map(int,input().split())\n\nq1,r1=divmod(a,x)\nq2,_=divmod(b,x)\n\nprint(q2-q1+(r1==0))", "label": 0, "name1": "s413122754.py", "name2": "s935190491.py"}, {"id": 168, "code1": "X = input()\n\ns_cnt = 0\nt_cnt = 0\n\nans = 0\n\nfor n in range(len(X)):\n  if X[n] == \"S\":\n    s_cnt += 1\n  else:\n    t_cnt += 1\n  ans = max(ans,t_cnt-s_cnt)\nprint(ans*2)", "code2": "X = input()\n\nresult = 0\nt = 0\nfor i in range(len(X)):\n    if X[i] == 'S':\n        t += 1\n    else:\n        if t != 0:\n            result += 2\n            t -= 1\nprint(len(X) - result)\n", "label": 1, "name1": "s239717601.py", "name2": "s863773109.py"}, {"id": 843, "code1": "from bisect import bisect_left, bisect\nn, l, t = map(int, input().split())\nants = [list(map(int, input().split())) for _ in range(n)]\nbnts = []\ndiff = []\n\nfor i in range(n):\n\tx, w = ants[i][0], 3 - 2*ants[i][1]\n\tbnts.append((x + t*w) % l)\n\tif i == 0:\n\t\tzero = bnts[-1]\n\tif ants[i][1] != ants[0][1]:\n\t\tif ants[0][1] == 1:\n\t\t\tdiff.append(x - ants[0][0])\n\t\telse:\n\t\t\tdiff.append(l - (x - ants[0][0]))\n\nbnts.sort()\nnum = 0\nquo, mod = t//l, t%l\nnum += quo * len(diff) * 2\ndiff.sort()\ndiff += [d+l for d in diff]\n#num += bisect_left(diff, mod*2)\nnum += bisect(diff, mod*2)\nnum %= n\nfor i in range(n):\n\tif bnts[i] == zero:\n\t\tif ants[0][1] == 1:\n\t\t\ttrue_zero = (i-num) % n\n\t\telse:\n\t\t\tif i < n-1:\n\t\t\t\tif bnts[i+1] == zero:\n\t\t\t\t\t#pass\n\t\t\t\t\tnum -= 1\n\t\t\ttrue_zero = (i+num) % n\n\nans = bnts[true_zero:] + bnts[:true_zero]\nprint(*ans, sep=\"\\n\")", "code2": "data = []\ntmp = []\nans = []\n\ndef pushAns(d):\n    for j in range(2):\n        ans.append((d[0][0],d[0][1]))\n        d.pop(0)    \n\nfor i in range(24):\n    a,b = (float(x) for x in input().split())\n    tmp.append((a,b))\n    if (i + 1) % 8 == 0:\n        tmp.sort(key=lambda x:x[1])\n        pushAns(tmp)\n        data.extend(tmp)\n        tmp.clear()\n        \ndata.sort(key=lambda x:x[1])\npushAns(data)\n\nfor i in range(8):\n    print(int(ans[i][0]),ans[i][1])\n", "label": 0, "name1": "s998286865.py", "name2": "s435730800.py"}, {"id": 203, "code1": "n = int(input())\nt = list(map(int, input().split()))\na = list(map(int, input().split()))\nmod = 10 ** 9 + 7\n\nans, frag = 1, 0\nfor i in range(n):\n    if t[i] == a[i] == t[-1] == a[0]:\n        frag = 1\n    if 0 < i < n - 1 and t[i - 1] == t[i] and a[i] == a[i + 1]:\n        ans = ans * min(t[i], a[i]) % mod\nprint(ans * frag)\n", "code2": "#two alpinist\nN = int(input())\nA = tuple(map(int, input().split()))\nB = tuple(map(int, input().split()))\nmod = 10**9+7\n \n#fixed[i]: i \u5c71\u306e\u9ad8\u3055\u304c\u78ba\u5b9a\u3057\u3066\u308b\nfix_a= [0]*(N)\nfix_b= [0]*(N)\nfix_a[0] = A[0]\nfix_b[-1] = B[-1]\nfor i in range(N-1):\n    if A[i+1]>A[i]:\n        fix_a[i+1] = A[i+1]\n    if B[-(i+2)]>B[-(i+1)]:\n        fix_b[-(i+2)] = B[-(i+2)]\n\nans = 1\nfor i in range(N):\n    if fix_a[i]:\n        if B[i]<fix_a[i]:\n            ans = 0\n            break\n    if fix_b[i]:\n        if A[i]<fix_b[i]:\n            ans = 0\n            break\n            \nfor i in range(N):\n    if fix_a[i] or fix_b[i]:\n        continue\n    ans *= min(A[i], B[i])\n    ans %= mod\n    \nif A[-1] != B[0]:\n    ans = 0\n    \nprint(ans)\n\n", "label": 1, "name1": "s894086979.py", "name2": "s056956957.py"}, {"id": 49, "code1": "n=int(input())\na=list(map(int,input().split()))\nans=0\nfor i in range(n-1):\n    if a[i]==a[i+1]:\n        a[i+1]=-1\n        ans+=1\nprint(ans)", "code2": "n = int(input())\na = list(map(int, input().split()))\nL = len(a)\n\nans = 0\nfor i in range(1, L) :\n    if(a[i] == a[i-1]) :\n        a[i] = -1\n        ans += 1\n\nprint(ans)", "label": 1, "name1": "s300532690.py", "name2": "s691982040.py"}, {"id": 604, "code1": "import sys\n\nimport bisect\n\n# from collections import Counter, deque, defaultdict\n\n# import copy\n# from heapq import heappush, heappop, heapify\n# from fractions import gcd\n# import itertools\n# from operator import attrgetter, itemgetter\nimport math\n\n# import numpy as np\n\nreadline = sys.stdin.readline\nMOD = 10 ** 9 + 7\nINF = float('INF')\nsys.setrecursionlimit(10 ** 5)\n\n\ndef main():\n    q = int(input())\n\n    for i in range(q):\n        a, b = list(map(int, readline().split()))\n\n        if a > b:\n            a, b = b, a\n\n        if a == b or a + 1 == b:\n            print(2 * a - 2)\n        else:\n            ab = a * b\n            ok = 0\n            ng = int(ab ** 0.5) + 1000000\n            while abs(ng - ok) > 1:\n                mid = (ok + ng) // 2\n                if mid ** 2 < ab:\n                    ok = mid\n                else:\n                    ng = mid\n            c = ok\n\n            if c * (c + 1) < ab:\n                print(2 * c - 1)\n            else:\n                print(2 * c - 2)\n\n\nif __name__ == '__main__':\n    main()\n", "code2": "X = input()\ns_cnt = 0\nans = 0\nfor s in X:\n    if s=='S':\n        s_cnt += 1\n    else:\n        if s_cnt > 0:\n            ans += 1\n            s_cnt -= 1\n\nprint(len(X) - 2*ans)", "label": 0, "name1": "s587240804.py", "name2": "s514074837.py"}, {"id": 951, "code1": "#!/usr/bin/env python3\nimport sys, math, itertools, collections, bisect\ninput = lambda: sys.stdin.buffer.readline().rstrip().decode('utf-8')\ninf = float('inf') ;mod = 10**9+7\nmans = inf ;ans = 0 ;count = 0 ;pro = 1\n\nn=input()\nC=collections.Counter(n)\nprint(C[\"2\"])", "code2": "#!/usr/bin/env pypy\n\nimport sys\nfrom typing import Any, Callable, Deque, Dict, List, Mapping, Optional, Sequence, Set, Tuple, TypeVar, Union\n# import time\n# import math\n# import numpy as np\n# import scipy.sparse.csgraph as cs            # csgraph_from_dense(ndarray, null_value=inf), bellman_ford(G, return_predecessors=True), dijkstra, floyd_warshall\n# import random                                # random, uniform, randint, randrange, shuffle, sample\n# import string                                # ascii_lowercase, ascii_uppercase, ascii_letters, digits, hexdigits\n# import re                                    # re.compile(pattern) => ptn obj; p.search(s), p.match(s), p.finditer(s) => match obj; p.sub(after, s)\n# from bisect import bisect_left, bisect_right # bisect_left(a, x, lo=0, hi=len(a)) returns i such that all(val<x for val in a[lo:i]) and all(val>-=x for val in a[i:hi]).\n# from collections import deque                # deque class. deque(L): dq.append(x), dq.appendleft(x), dq.pop(), dq.popleft(), dq.rotate()\n# from collections import defaultdict          # subclass of dict. defaultdict(facroty)\n# from collections import Counter              # subclass of dict. Counter(iter): c.elements(), c.most_common(n), c.subtract(iter)\n# from datetime import date, datetime          # date.today(), date(year,month,day) => date obj; datetime.now(), datetime(year,month,day,hour,second,microsecond) => datetime obj; subtraction => timedelta obj\n# from datetime.datetime import strptime       # strptime('2019/01/01 10:05:20', '%Y/%m/%d/ %H:%M:%S') returns datetime obj\n# from datetime import timedelta               # td.days, td.seconds, td.microseconds, td.total_seconds(). abs function is also available.\n# from copy import copy, deepcopy              # use deepcopy to copy multi-dimentional matrix without reference\n# from functools import reduce                 # reduce(f, iter[, init])\n# from functools import lru_cache              # @lrucache ...arguments of functions should be able to be keys of dict (e.g. list is not allowed)\n# from heapq import heapify, heappush, heappop # built-in list. heapify(L) changes list in-place to min-heap in O(n), heappush(heapL, x) and heappop(heapL) in O(lgn).\n# from heapq import nlargest, nsmallest        # nlargest(n, iter[, key]) returns k-largest-list in O(n+klgn).\n# from itertools import count, cycle, repeat   # count(start[,step]), cycle(iter), repeat(elm[,n])\n# from itertools import groupby                # [(k, list(g)) for k, g in groupby('000112')] returns [('0',['0','0','0']), ('1',['1','1']), ('2',['2'])]\n# from itertools import starmap                # starmap(pow, [[2,5], [3,2]]) returns [32, 9]\n# from itertools import product, permutations  # product(iter, repeat=n), permutations(iter[,r])\n# from itertools import combinations, combinations_with_replacement\n# from itertools import accumulate             # accumulate(iter[, f])\n# from operator import itemgetter              # itemgetter(1), itemgetter('key')\n# from fractions import Fraction               # Fraction(a, b) => a / b \u2208 Q. note: Fraction(0.1) do not returns Fraciton(1, 10). Fraction('0.1') returns Fraction(1, 10)\n\n\n\ndef main():\n    Num = Union[int, float]\n    mod = 1000000007                # 10^9+7\n    inf = float('inf')              # sys.float_info.max = 1.79e+308\n    # inf = 2 ** 63 - 1             # (for fast JIT compile in PyPy) 9.22e+18\n    sys.setrecursionlimit(10**6)    # 1000 -> 1000000\n    def input(): return sys.stdin.readline().rstrip()\n    def ii():    return int(input())\n    def isp():   return input().split()\n    def mi():    return map(int, input().split())\n    def mi_0():  return map(lambda x: int(x)-1, input().split())\n    def lmi():   return list(map(int, input().split()))\n    def lmi_0(): return list(map(lambda x: int(x)-1, input().split()))\n    def li():    return list(input())\n\n\n    def check(n, m, k):\n        for i in range(n + 1):\n            for j in range(m + 1):\n                if i * j + (n - i) * (m - j) == k:\n                    return True\n        return False\n    \n    \n    n, m, k = mi()\n    print('Yes') if check(n, m, k) else print('No')\n        \n\n\nif __name__ == \"__main__\":\n    main()\n", "label": 0, "name1": "s618561619.py", "name2": "s894514161.py"}, {"id": 996, "code1": "import sys\ns = input()\nk = len(s)\nfor i in range(2,len(s),2):\n    s = s[:len(s)-2]\n    if s[:(len(s)//2)] == s[(len(s)//2):]:\n        print(k-i)\n        sys.exit()\n    ", "code2": "def main():\n    n = int(input())\n    t, a = map(int, input().split())\n    h = list(map(int, input().split()))\n    # s = input()\n\n    mini = 10**10\n    ans = 0\n    for i, x in enumerate(h):\n        c = t - x * 0.006\n        if abs(a - c) < mini:\n            mini = abs(a - c)\n            ans = i+1\n\n    print(ans)\n\n\nif __name__ == '__main__':\n    main()\n", "label": 0, "name1": "s986303518.py", "name2": "s097284113.py"}, {"id": 318, "code1": "import sys\n#input = sys.stdin.readline\n\ndef inpl(): return list(map(int, input().split()))\nQ = int(input())\n \nMOD = 10**6 + 3\ndef cmb(n, r, mod):\n    if ( r<0 or r>n ):\n        return 0\n    \n    r = min(r, n-r)\n    return g1[n] * g2[r] * g2[n-r] % mod\n \nsize = MOD + 1\ng1, g2, inverse = [0]*size, [0]*size, [0]*size\n \ng1[:2] = [1, 1] # \u5143\u30c6\u30fc\u30d6\u30eb\ng2[:2] = [1, 1] #\u9006\u5143\u30c6\u30fc\u30d6\u30eb\ninverse[:2] = [0, 1] #\u9006\u5143\u30c6\u30fc\u30d6\u30eb\u8a08\u7b97\u7528\u30c6\u30fc\u30d6\u30eb\n\nfor i in range(2, size):\n    g1[i] =  ( g1[i-1] * i ) % MOD \n    inverse[i] = (-inverse[MOD % i] * (MOD//i) ) % MOD \n    g2[i] =  (g2[i-1] * inverse[i]) % MOD\n\nfor _ in range(Q):\n    x, d, n = inpl()\n    xd = x*inverse[d]%MOD\n    if d != 0:\n        if n < ((MOD-x)*inverse[d] + 1)%MOD:\n            n = n%MOD\n            print((g1[(xd + n - 1)%MOD] * g2[(xd-1)%MOD] * pow(d, n, MOD))%MOD)\n        else:\n            print(0)\n    else:\n        print(pow(x, n, MOD))", "code2": "####################\n#  AC:     ms (PyPy)\n####################\n\ndef main():\n    MOD = 10**6+3\n    # preprocess\n    fac = [None] * (MOD+1)\n    fac[0] = fac[1] = 1\n    for i in range(2, MOD+1):\n        fac[i] = (fac[i-1] * i) % MOD\n\n    Q = int(input())\n    for i in range(Q):\n        x, d, n = map(int, input().split())\n\n        if d == 0:\n            print(pow(x, n, MOD))\n            continue\n        \n        xd = (x * pow(d, MOD-2, MOD)) % MOD\n        if xd == 0 or xd + (n-1) >= MOD:\n            print(0)\n            continue\n\n        print(pow(d, n, MOD) * fac[xd+(n-1)] * pow(fac[xd-1], MOD-2, MOD) % MOD)\n\n\nif __name__ == \"__main__\":\n    main()", "label": 1, "name1": "s890996219.py", "name2": "s606450603.py"}, {"id": 303, "code1": "class UnionFind():\n    def __init__(self, n):\n        self.n = n\n        self.parents = [-1] * n\n\n    def find(self, x):\n        if self.parents[x] < 0:\n            return x\n        else:\n            self.parents[x] = self.find(self.parents[x])\n            return self.parents[x]\n\n    def union(self, x, y):\n        x = self.find(x)\n        y = self.find(y)\n\n        if x == y:\n            return\n\n        if self.parents[x] > self.parents[y]:\n            x, y = y, x\n\n        self.parents[x] += self.parents[y]\n        self.parents[y] = x\n\n    def size(self, x):\n        return -self.parents[self.find(x)]\n\n    def same(self, x, y):\n        return self.find(x) == self.find(y)\n\n    def members(self, x):\n        root = self.find(x)\n        return [i for i in range(self.n) if self.find(i) == root]\n\n    def roots(self):\n        return [i for i, x in enumerate(self.parents) if x < 0]\n\n    def group_count(self):\n        return len(self.roots())\n\n    def all_group_members(self):\n        return {r: self.members(r) for r in self.roots()}\n\n    def __str__(self):\n        return '\\n'.join('{}: {}'.format(r, self.members(r)) for r in self.roots())\n\nN,M=list(map(int,input().split()))\nNetwork = UnionFind(N)\nfor i in range(M):\n    a,b=list(map(int,input().split()))\n    Network.union(a-1, b-1)\nprint(Network.group_count()-1)", "code2": "import sys\nimport heapq, math\nfrom itertools import zip_longest, permutations, combinations, combinations_with_replacement\nfrom itertools import accumulate, dropwhile, takewhile, groupby\nfrom functools import lru_cache\nfrom copy import deepcopy\n\nclass UnionFind:\n\n    def __init__(self, n: int):\n        self._n = n\n        self._parents = [i for i in range(n)]\n        self._rank = [1 for _ in range(n)]\n\n    def unite(self, x: int, y: int) -> None:\n        px = self.find(x)\n        py = self.find(y)\n\n        # \u4e00\u81f4\u3057\u3066\u3044\u306a\u3044\u3068\u304d\u306f\u30ea\u30f3\u30af\u3092\u3064\u3051\u308b\n        if px != py:\n            self._link(px, py)\n\n    def _link(self, x: int, y: int):\n        if self._rank[x] < self._rank[y]:\n            self._parents[x] = y\n        elif self._rank[x] > self._rank[y]:\n            self._parents[y] = x\n        else:\n            self._parents[x] = y\n            self._rank[y] += 1\n\n    def same(self, x: int, y: int) -> bool:\n        px = self.find(x)\n        py = self.find(y)\n        return px == py\n\n    def find(self, x: int) -> int:\n        if self._parents[x] == x:\n            return x\n\n        self._parents[x] = self.find(self._parents[x])\n        return self._parents[x]\n\nN, M = map(int, input().split())\nuf = UnionFind(N + 1)\n\nfor i in range(M):\n    A, B = map(int, input().split())\n    uf.unite(A, B)\n\ns = set()\nfor i in range(1, N + 1):\n    s.add(uf.find(i))\n\nprint(len(s) - 1)\n", "label": 1, "name1": "s144436411.py", "name2": "s182405502.py"}, {"id": 675, "code1": "A, B, C, K = list(map(int,input().split()))\nif K <= A:\n  print(K)\nelif K <= (A + B):\n  print(A)\nelif K <= (A + B + C):\n  print(2*A + B - K)\nelse:\n  print(A + B - C)", "code2": "l=[]\nwhile True:\n    tmp=map(int,raw_input().split())\n    if sum(tmp)==0:\n        break\n    l.append(tmp)\n\nfor n,x in l:\n    c=0\n    for i in range(1,n):\n        for j in range(i+1,n):\n            k=x-i-j\n            if j<k<=n:\n                c+=1\n    print c", "label": 0, "name1": "s098797347.py", "name2": "s427641012.py"}, {"id": 7, "code1": "N = int(input())\n\ntotal = sum(list(map(int, str(N))))\n\nif total % 9 == 0:\n  print('Yes')\nelse:\n  print('No')\n", "code2": "N = int(input())\nN_str = str(N)\ns = 0\nfor i in range(len(N_str)):\n    s += int(N_str[i])\nif s % 9 == 0:\n    print('Yes')\nelse:\n    print('No')", "label": 1, "name1": "s525082295.py", "name2": "s473930397.py"}, {"id": 1, "code1": "n = int(input())\nif n%9 == 0:\n    print(\"Yes\")\nelse:\n    print(\"No\")", "code2": "N = int(input())\n\ntotal = sum(list(map(int, str(N))))\n\nif total % 9 == 0:\n  print('Yes')\nelse:\n  print('No')\n", "label": 1, "name1": "s507543676.py", "name2": "s525082295.py"}, {"id": 784, "code1": "#!/usr/bin/env python3\nfrom collections import defaultdict,deque\nfrom heapq import heappush, heappop\nfrom bisect import bisect_left, bisect_right\nimport sys, random, itertools, math\nsys.setrecursionlimit(10**5)\ninput = sys.stdin.readline\nsqrt = math.sqrt\ndef LI(): return list(map(int, input().split()))\ndef LF(): return list(map(float, input().split()))\ndef LI_(): return list(map(lambda x: int(x)-1, input().split()))\ndef II(): return int(input())\ndef IF(): return float(input())\ndef LS(): return list(map(list, input().split()))\ndef S(): return list(input().rstrip())\ndef IR(n): return [II() for _ in range(n)]\ndef LIR(n): return [LI() for _ in range(n)]\ndef FR(n): return [IF() for _ in range(n)]\ndef LFR(n): return [LI() for _ in range(n)]\ndef LIR_(n): return [LI_() for _ in range(n)]\ndef SR(n): return [input().rstrip()[:-1] for _ in range(n)]\ndef LSR(n): return [LS() for _ in range(n)]\nmod = 1000000007\ninf = 1e10\n\n#solve\ndef solve():\n    n = II()\n    if n == 0:\n        return False\n    group = set()\n    go_group = set()\n    member = set()\n    d = defaultdict(int)\n    g = SR(n)\n    for gi in g:\n        group.add(gi.split(\":\")[0])\n        d[gi.split(\":\")[0]] = gi.split(\":\")[1].split(\",\")\n    C = defaultdict(int)\n    def s(g):\n        for gi in g:\n            if gi in group:\n                if C[gi]:\n                    continue\n                C[gi] = 1\n                s(d[gi])\n            else:\n                member.add(gi)\n    s(d[g[0].split(\":\")[0]])\n    print(len(member))\n    return True\n\n#main\nif __name__ == '__main__':\n    while solve():\n        pass\n\n", "code2": "# \u9802\u70b9 v \u306e\u6240\u5c5e\u3059\u308b\u30b0\u30eb\u30fc\u30d7\u3092\u8abf\u3079\u308b\ndef root(v, uni):\n  if uni[v] < 0:  # v \u304c\u89aa\u306e\u5834\u5408\n    return v\n  else:           # v \u304c\u5b50\u306e\u5834\u5408\n    uni[v] = root(uni[v], uni)  # \u89aa\u306eroot\u3092\u8abf\u3079\u308b\n    return uni[v]\n\n# \u9802\u70b9 a \u3068\u9802\u70b9 b \u3092\u3064\u306a\u3050\u3002\u3082\u3068\u3082\u3068\u540c\u3058\u30b0\u30eb\u30fc\u30d7\u306e\u3068\u304d\u3001False \u3092\u8fd4\u3059\ndef connect(a, b, uni):\n  # \u307e\u305a\u306f\u305d\u308c\u305e\u308c\u6839\u306e\u756a\u53f7\u306b\u7f6e\u304d\u63db\u3048\u308b\n  ra = root(a, uni)\n  rb = root(b, uni)\n  if ra == rb:  # a \u3068 b \u304c\u305d\u3082\u305d\u3082\u540c\u3058\u30b0\u30eb\u30fc\u30d7\u306b\u5c5e\u3057\u3066\u3044\u308b\u306a\u3089\u5373\u7d42\u4e86\n    return False\n\t\n  # ra \u3092\u5927\u304d\u306a\u30b0\u30eb\u30fc\u30d7\u306b\u3057\u305f\u3044\u306e\u3067\u3001\u9006\u3067\u3042\u308c\u3070\u5165\u308c\u66ff\u3048\u308b\n  if uni[ra] > uni[rb]: # rb\u306e\u65b9\u304c\u8981\u7d20\u6570\u304c\u591a\u3051\u308c\u3070\n    tmp = ra\n    ra  = rb \n    rb  = tmp\n\n  # ra \u3068 rb \u3092\u7d50\u5408\u3057\u3001rb \u306e\u89aa\u3092 ra \u3068\u3059\u308b\n  uni[ra] += uni[rb]\n  uni[rb] = ra\n  return True\n      \n##\nN, K, L = map(int, input().split())\n\nroad = [-1]*(N+1)\nrail = [-1]*(N+1)\n\nfor i in range(K):\n  a, b = map(int, input().split())\n  connect(a, b, road)\n\nfor i in range(L):\n  a, b = map(int, input().split())\n  connect(a, b, rail)\n\n\n##\ndp = [0]*(N+1)\nfor i in range(1, N+1):\n  dp[i] = (root(i, road), root(i, rail))\n\ndic = {}\nfor i in range(1, N+1):\n  key = dp[i]\n  if key not in dic:\n    dic[key] = 1\n  else:\n    dic[key] += 1\n\nfor i in range(1, N+1):\n  ans = dic[dp[i]]\n  if i == N:\n    print(ans)\n  else:\n    print(ans, end=\" \")\n", "label": 0, "name1": "s728275108.py", "name2": "s866905054.py"}, {"id": 324, "code1": "a,b,c = map(int,input().split())\n\nprint(min(a+b,b+c,c+a))\n", "code2": "import sys\ndef input(): return sys.stdin.readline().strip()\n\n\ndef main():\n    a, b, c = map(int, input().split())\n    m = max(a, b, c)\n    print(a + b + c - m)\n\n\nif __name__ == \"__main__\":\n    main()\n", "label": 1, "name1": "s223078477.py", "name2": "s149362178.py"}, {"id": 118, "code1": "n, k  = map(int, input().split())\nA = list(map(int, input().split()))\ndp = [0] * (k + 1)\n\nfor i in range(1, k + 1):\n  if all(dp[i - a] == 1 for a in A if i >= a):\n    dp[i] = 0\n  else:\n    dp[i] = 1\n\nprint(\"First\" if dp[k] == 1 else \"Second\")", "code2": "import sys\nsys.setrecursionlimit(2147483647)\nINF=float(\"inf\")\nMOD=10**9+7\ninput=lambda :sys.stdin.readline().rstrip()\ndef resolve():\n    n,k=map(int,input().split())\n    A=list(map(int,input().split()))\n    dp=[0]*(k+1)\n    for i in range(k):\n        if dp[i]: continue\n        for j in range(n):\n            if i+A[j]<=k: dp[i+A[j]]=1\n    print(\"First\" if dp[k] else \"Second\")\nresolve()", "label": 1, "name1": "s828667405.py", "name2": "s270542298.py"}, {"id": 112, "code1": "a,b,c = map(int, input().split())\n\nprint(\"Yes\" if a<c<b or b<c<a else \"No\")", "code2": "a,b,c = list(map(int,input().strip().split()))\nans = ()\nif a <= c and c <= b:\n    ans = (\"Yes\")\nelif b <= c and c <= a:\n    ans = (\"Yes\")\nelse:\n    ans = (\"No\")\nprint(ans)", "label": 1, "name1": "s135661044.py", "name2": "s388043860.py"}, {"id": 866, "code1": "n, m = map(int, input().split())\np = []\ns = []\nfor i in range(m):\n    input1, input2 = input().split()\n    p.append(int(input1))\n    s.append(input2)\n\ncorrect = [0] * n\npenalty = [0] * n\nfor i in range(m):\n    tgt = p[i] - 1\n    if correct[tgt] == 1:\n        continue\n    if s[i] == 'AC':\n        correct[tgt] += 1\n    elif s[i] == 'WA':\n        penalty[tgt] += 1\n\nfor i in range(m):\n    tgt = p[i] - 1\n    if correct[tgt] == 0:\n        penalty[tgt] = 0\n\nprint('{0} {1}'.format(sum(correct), sum(penalty)))\n", "code2": "a, b, c, x, y = map(int, input().split())\nc *= 2\nans = min(a+b, c) * min(x, y)\nif x>y:\n    ans += (x-y)*min(a, c)\nelse:\n    ans += (y-x)*min(b, c)\nprint(ans)", "label": 0, "name1": "s366260920.py", "name2": "s327021416.py"}, {"id": 910, "code1": "h,w=map(int,input().split())\n\na=[]\nfor _ in range(h):\n    a+=list(input())\n\nfour=(h//2)*(w//2)\ntwo=h%2*w//2+w%2*h//2\none=(h%2)*(w%2)\n\nimport collections\nc = collections.Counter(a)\n\n#print(four,two,one)\nd=list(c.values())\nd.sort()\n\nfor item in d:\n    if item==1:\n        if one==1:\n            one-=1\n        else:\n            print(\"No\")\n            exit()\n    elif item==2:\n        if two>0:\n            two-=1\n        else:\n            print(\"No\")\n            exit()\n    elif item==3:\n        if one==1 and two>0:\n            one-=1\n            two-=1\n        else:\n            print(\"No\")\n            exit()\n    else:\n        if item%2==1:\n            if one==0:\n                print(\"No\")\n                exit()\n            else:\n                item-=1\n                one-=1\n        #print(item,four,two,one)\n        while item>=4 and four>0:\n            item-=4\n            four-=1\n        #print(item,four,two,one)\n        \n        while item>=2:\n            item-=2\n            two-=1\n        #print(item,four,two,one)\n    \nif one==0 and two==0 and four==0:\n    print(\"Yes\")\nelse:\n    print(\"No\")\n        \n\n\n\n", "code2": "from collections import Counter,defaultdict,deque\nfrom heapq import heappop,heappush\nfrom bisect import bisect_left,bisect_right \nimport sys,math,itertools,fractions,pprint\nsys.setrecursionlimit(10**8)\nmod = 10**9+7\nINF = float('inf')\ndef inp(): return int(sys.stdin.readline())\ndef inpl(): return list(map(int, sys.stdin.readline().split()))\n\ns = [list(input()) for _ in range(3)]\nfor i in range(3):\n    s[i] = [ord(x) - ord('a') for x in s[i]][::-1]\nnow = 0\nwhile True:\n    if s[now] == []:\n        print(chr(ord('A') + now))\n        break\n    now = s[now].pop()\n    ", "label": 0, "name1": "s741760295.py", "name2": "s332087520.py"}, {"id": 166, "code1": "X = input()\ns_cnt = 0\nans = 0\nfor s in X:\n    if s=='S':\n        s_cnt += 1\n    else:\n        if s_cnt > 0:\n            ans += 1\n            s_cnt -= 1\n\nprint(len(X) - 2*ans)", "code2": "X = input()\n\nresult = 0\nt = 0\nfor i in range(len(X)):\n    if X[i] == 'S':\n        t += 1\n    else:\n        if t != 0:\n            result += 2\n            t -= 1\nprint(len(X) - result)\n", "label": 1, "name1": "s514074837.py", "name2": "s863773109.py"}, {"id": 436, "code1": "# \u9802\u70b9 v \u306e\u6240\u5c5e\u3059\u308b\u30b0\u30eb\u30fc\u30d7\u3092\u8abf\u3079\u308b\ndef root(v, uni):\n  if uni[v] < 0:  # v \u304c\u89aa\u306e\u5834\u5408\n    return v\n  else:           # v \u304c\u5b50\u306e\u5834\u5408\n    uni[v] = root(uni[v], uni)  # \u89aa\u306eroot\u3092\u8abf\u3079\u308b\n    return uni[v]\n\n# \u9802\u70b9 a \u3068\u9802\u70b9 b \u3092\u3064\u306a\u3050\u3002\u3082\u3068\u3082\u3068\u540c\u3058\u30b0\u30eb\u30fc\u30d7\u306e\u3068\u304d\u3001False \u3092\u8fd4\u3059\ndef connect(a, b, uni):\n  # \u307e\u305a\u306f\u305d\u308c\u305e\u308c\u6839\u306e\u756a\u53f7\u306b\u7f6e\u304d\u63db\u3048\u308b\n  ra = root(a, uni)\n  rb = root(b, uni)\n  if ra == rb:  # a \u3068 b \u304c\u305d\u3082\u305d\u3082\u540c\u3058\u30b0\u30eb\u30fc\u30d7\u306b\u5c5e\u3057\u3066\u3044\u308b\u306a\u3089\u5373\u7d42\u4e86\n    return False\n\t\n  # ra \u3092\u5927\u304d\u306a\u30b0\u30eb\u30fc\u30d7\u306b\u3057\u305f\u3044\u306e\u3067\u3001\u9006\u3067\u3042\u308c\u3070\u5165\u308c\u66ff\u3048\u308b\n  if uni[ra] > uni[rb]: # rb\u306e\u65b9\u304c\u8981\u7d20\u6570\u304c\u591a\u3051\u308c\u3070\n    tmp = ra\n    ra  = rb \n    rb  = tmp\n\n  # ra \u3068 rb \u3092\u7d50\u5408\u3057\u3001rb \u306e\u89aa\u3092 ra \u3068\u3059\u308b\n  uni[ra] += uni[rb]\n  uni[rb] = ra\n  return True\n      \n##\nN, K, L = map(int, input().split())\n\nroad = [-1]*(N+1)\nrail = [-1]*(N+1)\n\nfor i in range(K):\n  a, b = map(int, input().split())\n  connect(a, b, road)\n\nfor i in range(L):\n  a, b = map(int, input().split())\n  connect(a, b, rail)\n\n\n##\ndp = [0]*(N+1)\nfor i in range(1, N+1):\n  dp[i] = (root(i, road), root(i, rail))\n\ndic = {}\nfor i in range(1, N+1):\n  key = dp[i]\n  if key not in dic:\n    dic[key] = 1\n  else:\n    dic[key] += 1\n\nfor i in range(1, N+1):\n  ans = dic[dp[i]]\n  if i == N:\n    print(ans)\n  else:\n    print(ans, end=\" \")\n", "code2": "import sys\nfrom collections import deque, Counter\nsys.setrecursionlimit(1000000)\nN, K, L = map(int, input().split())\npq = [list(map(int, input().split())) for _ in range(K)]\nrs = [list(map(int, input().split())) for _ in range(L)]\n\nG_r = [[] for _ in range(N+1)]\nfor elem in pq:\n    G_r[elem[0]].append(elem[1])\n    G_r[elem[1]].append(elem[0])\nG_t = [[] for _ in range(N+1)]\nfor elem in rs:\n    G_t[elem[0]].append(elem[1])\n    G_t[elem[1]].append(elem[0])\n\n\nfield_r = [None]*(N+1)\n\n\ndef dfs_r(i, idx):\n    q = deque()\n    q.append(i)\n    field_r[i] = idx\n    while q:\n        tmp = q.pop()\n        for pos in G_r[tmp]:\n            if field_r[pos] is None:\n                field_r[pos] = idx\n                q.append(pos)\n            else:\n                continue\nidx = 0\nfor i in range(1, N+1):\n    if field_r[i] is None:\n        dfs_r(i, idx)\n        idx += 1\n\n\nfield_t = [None]*(N+1)\n\n\ndef dfs_t(i, idx):\n    q = deque()\n    q.append(i)\n    field_t[i] = idx\n    while q:\n        tmp = q.pop()\n        for pos in G_t[tmp]:\n            if field_t[pos] is None:\n                field_t[pos] = idx\n                q.append(pos)\n            else:\n                continue\nidx = 0\nfor i in range(1, N+1):\n    if field_t[i] is None:\n        dfs_t(i, idx)\n        idx += 1\n\nm = list(zip(field_r[1:], field_t[1:]))\ncnt = Counter(m)\nans = []\nfor elem in list(m):\n    ans.append(cnt[elem])\nprint(' '.join(map(str, ans)))\n", "label": 1, "name1": "s866905054.py", "name2": "s645452029.py"}, {"id": 273, "code1": "while 1:\n\tn , x = map(int , raw_input().split())\n\tif n == x == 0:\n\t\tbreak\n\telse :\n\t\tcnt = 0\n\t\tfor i in range(1,n - 1):\n\t\t\tfor j in range(i + 1 , n):\n\t\t\t\tfor k in range(j + 1, n + 1):\n#\t\t\t\t\tprint i,j,k\n\t\t\t\t\tif i + j + k == x:\n#\t\t\t\t\t\tprint i,j,k\n\t\t\t\t\t\tcnt += 1\n\t\tprint cnt", "code2": "while True:\n    n,x = map(int,raw_input().split())\n    count = 0;\n    if n == 0 and x == 0:break\n    for i in range(1,n + 1):\n        for j in range(1,n + 1):\n            if i == j:break\n            for k in range(1,n + 1):\n                if j == k:break\n                if i + j + k == x:\n                    count+=1\n                    break\n    print count", "label": 1, "name1": "s558630368.py", "name2": "s748079428.py"}, {"id": 690, "code1": "deg = [0] * 4\nfor _ in range(3):\n    a, b = map(int, input().split())\n    deg[a - 1] += 1\n    deg[b - 1] += 1\nif all(x <= 2 for x in deg):\n    print(\"YES\")\nelse:\n    print(\"NO\")\n", "code2": "class UnionFind():\n  def __init__(self, n):\n    self.n = n\n    self.parents = [-1] * n\n\n  def find(self, x):\n    if self.parents[x] < 0:\n      return x\n    else:\n      self.parents[x] = self.find(self.parents[x])\n      return self.parents[x]\n\n  def union(self, x, y):\n    x = self.find(x)\n    y = self.find(y)\n\n    if x == y:\n      return\n\n    if self.parents[x] > self.parents[y]:\n      x, y = y, x\n\n    self.parents[x] += self.parents[y]\n    self.parents[y] = x\n\n  def size(self, x):\n    return -self.parents[self.find(x)]\n\n  def same(self, x, y):\n    return self.find(x) == self.find(y)\n\n  def members(self, x):\n    root = self.find(x)\n    return [i for i in range(self.n) if self.find(i) == root]\n\n  def roots(self):\n    return [i for i, x in enumerate(self.parents) if x < 0]\n\n  def group_count(self):\n    return len(self.roots())\n\n  def all_group_members(self):\n    return {r: self.members(r) for r in self.roots()}\n\n  def __str__(self):\n    return '\\n'.join('{}: {}'.format(r, self.members(r)) for r in self.roots())\n\nn, m = map(int, input().split())\nuf = UnionFind(n)\n\nfor _ in range(m):\n  a, b = map(int, input().split())\n  uf.union(a-1,b-1)\n  \nprint(uf.group_count() - 1)\n\n", "label": 0, "name1": "s546079663.py", "name2": "s813737955.py"}, {"id": 901, "code1": "N,M=map(int,input().split())\n\n\nm=2**M\nans=0\ni=1\nwhile True:\n        k=( (1*((1/m))) * ((( (m-1)/m)**(i-1)) )) * ( 1900*M*i +(N-M)*100*i)#       +( (1*((1/m))) * ((( (m-1)/m)**(i-1)) )) *\n        ans+=k\n        i+=1\n        if(i>10000):\n                break\n\nprint(int(ans+0.5))", "code2": "h,w=map(int,input().split())\n\na=[]\nfor _ in range(h):\n    a+=list(input())\n\nfour=(h//2)*(w//2)\ntwo=h%2*w//2+w%2*h//2\none=(h%2)*(w%2)\n\nimport collections\nc = collections.Counter(a)\n\n#print(four,two,one)\nd=list(c.values())\nd.sort()\n\nfor item in d:\n    if item==1:\n        if one==1:\n            one-=1\n        else:\n            print(\"No\")\n            exit()\n    elif item==2:\n        if two>0:\n            two-=1\n        else:\n            print(\"No\")\n            exit()\n    elif item==3:\n        if one==1 and two>0:\n            one-=1\n            two-=1\n        else:\n            print(\"No\")\n            exit()\n    else:\n        if item%2==1:\n            if one==0:\n                print(\"No\")\n                exit()\n            else:\n                item-=1\n                one-=1\n        #print(item,four,two,one)\n        while item>=4 and four>0:\n            item-=4\n            four-=1\n        #print(item,four,two,one)\n        \n        while item>=2:\n            item-=2\n            two-=1\n        #print(item,four,two,one)\n    \nif one==0 and two==0 and four==0:\n    print(\"Yes\")\nelse:\n    print(\"No\")\n        \n\n\n\n", "label": 0, "name1": "s967172030.py", "name2": "s741760295.py"}, {"id": 721, "code1": "import sys\ndef input(): return sys.stdin.readline().strip()\n\n\ndef main():\n    a, b, c = map(int, input().split())\n    m = max(a, b, c)\n    print(a + b + c - m)\n\n\nif __name__ == \"__main__\":\n    main()\n", "code2": "# ABC068C - Cat Snuke and a Voyage (ARC079C)\ndef main():\n    N, M, *AB = map(int, open(0).read().split())\n    from_1, to_N = set(), set()\n    for a, b in zip(*[iter(AB)] * 2):\n        if a == 1:\n            from_1.add(b)\n        if b == N:\n            to_N.add(a)\n    flg = from_1 & to_N  # intermediate point of both 1, N exists?\n    print(\"POSSIBLE\" if flg else \"IMPOSSIBLE\")\n\n\nif __name__ == \"__main__\":\n    main()", "label": 0, "name1": "s149362178.py", "name2": "s726342129.py"}, {"id": 936, "code1": "def aising19_c():\n    from collections import deque\n\n    h, w = (int(x) for x in input().split())\n    color = [[s == '#' for s in str(input())] for _ in range(h)]\n    used = [[False]*w for _ in range(h)]\n\n    ans = 0\n    for i in range(h):\n        for j in range(w):\n            if used[i][j]: continue\n            bk, wt = 0, 0\n            que = deque()\n            used[i][j] = True\n            que.append((i, j))\n            while que:\n                ci, cj = que.popleft()\n                if color[ci][cj]: bk += 1\n                else: wt += 1\n                for di, dj in ((-1,0),(0,-1),(0,1),(1,0)):\n                    ni, nj = ci+di, cj+dj\n                    if ni < 0 or h <= ni or nj < 0 or w <= nj: continue\n                    if color[ci][cj] == color[ni][nj]: continue\n                    if used[ni][nj]: continue\n                    used[ni][nj] = True\n                    que.append((ni, nj))\n            ans += bk * wt\n    print(ans)\n\nif __name__ == '__main__':\n    aising19_c()", "code2": "D=int(input())\nc=list(map(int,input().split()))\ns=[list(map(int,input().split())) for _ in range(D)]\n\nlast=[0]*26\n\n\nfor d in range(1,D+1):\n    ans=[]\n    for choice in range(1,27):\n        ans_tmp=0\n        ans_tmp+=s[d-1][choice-1]\n        for i in range(26):\n            if i+1==choice:\n                continue\n            ans_tmp-=c[i]*(d-last[i])*max(2,(D-d)//36)\n        ans.append((ans_tmp,choice))\n    _,case=max(ans)\n    last[case-1]=d\n    print(case)\n\n", "label": 0, "name1": "s472052550.py", "name2": "s931339849.py"}, {"id": 893, "code1": "for i in range(1000):\n    print (\"Hello World\")", "code2": "#https://drken1215.hatenablog.com/entry/2019/03/23/175300\nN,M = map(int,input().split())\n\nonce_time = 1900 * M + 100 * (N - M)\ne = pow(2,M)\nprint(once_time * e)\n", "label": 0, "name1": "s918569906.py", "name2": "s596326690.py"}, {"id": 989, "code1": "import sys\nstdin = sys.stdin\n \nsys.setrecursionlimit(10**5) \n \ndef li(): return map(int, stdin.readline().split())\ndef li_(): return map(lambda x: int(x)-1, stdin.readline().split())\ndef lf(): return map(float, stdin.readline().split())\ndef ls(): return stdin.readline().split()\ndef ns(): return stdin.readline().rstrip()\ndef lc(): return list(ns())\ndef ni(): return int(stdin.readline())\ndef nf(): return float(stdin.readline())\n\nfrom heapq import heappush, heappop\n\nn = ni()\nd = list(li())\n\ndef isok(dur: int, d: list):\n    pque = [24]\n    for di in d:\n        heappush(pque, di)\n\n    cur = 0\n    while pque:\n        tmp = heappop(pque)\n        if tmp - cur < dur and tmp >= 12:\n            return False\n        \n        elif tmp - cur < dur:\n            heappush(pque, 24-tmp)\n            \n        else:\n            cur = tmp\n        \n    return True\n\nans = 13\nfor cand in range(12, -1, -1):\n    if isok(cand, d):\n        ans = cand\n        break\n        \nprint(ans) ", "code2": "S = input()\nlen_S = len(S)\n\nfor i in range(2, len_S+1, 2):\n    check_S = S[:-i]\n    len_check_S = len(check_S)\n    half = len_check_S//2\n    if check_S[:half] == check_S[half:]:\n        print(len_check_S)\n        break\n", "label": 0, "name1": "s479594239.py", "name2": "s421296451.py"}, {"id": 638, "code1": "N = int(raw_input())\nT_list = map(int, raw_input().split())\nA_list = map(int, raw_input().split())\n\nlow_list = [1]*N\nhigh_list = [1]*N\n\nt_now = 0\nfor i in range(N):\n    if T_list[i] > t_now:\n        t_now = T_list[i]\n        low_list[i] = T_list[i]\n        high_list[i] = T_list[i]\n    else:\n        high_list[i] = T_list[i]\na_now = 0\nfor j in range(N):\n    i = N - 1 - j\n    if A_list[i] > a_now:\n        a_now = A_list[i]\n        low_list[i] = max(A_list[i], low_list[i])\n        high_list[i] = min(A_list[i], high_list[i])\n    else:\n        high_list[i] = min(A_list[i], high_list[i])\n    \nres = 1\nfor i in range(N):\n    if high_list[i] < low_list[i]:\n        res = 0\n        break\n    else:\n        res = res*(high_list[i] - low_list[i] + 1) % 1000000007\n\nprint res", "code2": "n = int(input())\np = tuple(map(int, input().split()))\nq = tuple(map(int, input().split()))\n\nimport itertools\nr = list(itertools.permutations(range(1, n+1)))\n\np_place = r.index(p)\nq_place = r.index(q)\nanswer = abs(p_place-q_place)\nprint(answer)", "label": 0, "name1": "s251140241.py", "name2": "s558804624.py"}, {"id": 760, "code1": "a,b,x=map(int,input().split())\n\nq1,r1=divmod(a,x)\nq2,_=divmod(b,x)\n\nprint(q2-q1+(r1==0))", "code2": "n = input()\nfor i in sorted(map(int, raw_input().split())):\n print i ,", "label": 0, "name1": "s935190491.py", "name2": "s740416119.py"}, {"id": 422, "code1": "N = int(input())\n\ndef gcd(a, b):\n    while b:\n        a, b = b, a % b\n    return a\n\ndef lcm(a, b):\n    return a * b // gcd(a, b)\n\ns = int(input())\nfor i in range(N - 1):\n    tmp = int(input())\n    s = lcm(s, tmp)\n\nprint(s)\n", "code2": "N = int(input())\nT = [int(input()) for i in range(N)]\n\n\ndef gcd(a, b):\n    while b:\n        a, b = b, a % b\n    return a\n\n\ndef lcm(a, b):\n    return a * b // gcd(a, b)\n\n\nif N == 1:\n    print(T[0])\n    exit()\n\nnow = lcm(T[0], T[1])\nfor i in range(1, N):\n    now = lcm(now, T[i])\n\nprint(now)\n", "label": 1, "name1": "s550486741.py", "name2": "s471370406.py"}, {"id": 494, "code1": "import sys\nfrom collections import defaultdict, Counter, deque\nfrom itertools import accumulate, permutations, combinations\nfrom operator import itemgetter\nfrom bisect import bisect_left, bisect_right, bisect\nfrom heapq import heappop, heappush\nfrom fractions import gcd\nfrom math import ceil, floor, sqrt, cos, sin, pi\nfrom copy import deepcopy\n\n# If you use recursive call, uncomment this code\n#sys.setrecursionlimit(10**6)\n\ndef main():\n    nums = set(map(int, input().split()))\n    if len(nums) == 2:\n        print(\"Yes\")\n    else:\n        print(\"No\")\n\n\nif __name__ == '__main__':\n    main()\n", "code2": "a, b, c = map(int, input().split())\n\nif (a == b and a != c) or (a == c and a != b) or (b==c and b!=a):\n    print('Yes')\nelse:\n    print('No')", "label": 1, "name1": "s765543700.py", "name2": "s883441440.py"}, {"id": 711, "code1": "import sys\n\n\n#\u4e92\u3044\u306b\u7d20\u306aa,b\u306b\u3064\u3044\u3066\u3001a*x+b*y=1\u306e\u4e00\u3064\u306e\u89e3\ndef extgcd(a, b):\n    r = [1, 0, a]\n    w = [0, 1, b]\n    while w[2] != 1:\n        q = r[2] // w[2]\n        r2 = w\n        w2 = [r[0] - q * w[0], r[1] - q * w[1], r[2] - q * w[2]]\n        r = r2\n        w = w2\n    #[x,y]\n    return [w[0], w[1]]\n\n\n# a\u306e\u9006\u5143(mod m)\u3092\u6c42\u3081\u308b\u3002(a\u3068m\u306f\u4e92\u3044\u306b\u7d20\u3067\u3042\u308b\u3053\u3068\u304c\u524d\u63d0)\ndef mod_inv(a, m):\n    x = extgcd(a, m)[0]\n    return (m + x % m) % m\n\n\nreadline = sys.stdin.readline\nMOD_NUM = 10**6 + 3\n\nQ = int(readline())\nq_array = [list(map(int, readline().split())) for i in range(Q)]\nans_array = []\n\nfactorial = [1] * MOD_NUM\nfactorial_inv = [1] * MOD_NUM\n\ntmp = 1\nfor i in range(2, MOD_NUM):\n    tmp = tmp * i % MOD_NUM\n    factorial[i] = tmp\n    factorial_inv[i] = mod_inv(tmp, MOD_NUM)\n\nfor q in q_array:\n    x, d, n = q\n    # print(x, d, n)\n    if x == 0:\n        ans_array.append(\"0\\n\")\n        continue\n    if d == 0:\n        ans = pow(x, n, MOD_NUM)\n        ans_array.append(str(ans) + \"\\n\")\n    else:\n        x_start = x * mod_inv(d, MOD_NUM) % MOD_NUM\n        if x_start + n > MOD_NUM:\n            ans_array.append(\"0\\n\")\n        else:\n            ans = factorial[x_start + n - 1] * factorial_inv[\n                x_start - 1] * pow(d, n, MOD_NUM) % MOD_NUM\n            ans_array.append(str(ans) + \"\\n\")\n\nsys.stdout.writelines(ans_array)", "code2": "a,b,c = map(int,input().split())\n\nprint(min(a+b,b+c,c+a))\n", "label": 0, "name1": "s261991889.py", "name2": "s223078477.py"}, {"id": 847, "code1": "N,L,T=map(int,input().split())\nX=[0 for i in range(N)]\nW=[0 for i in range(N)]\nD=0\nfor i in range(N):\n    X[i],W[i]=map(int,input().split())\n    W[i]=-2*W[i]+3\n    D+=(X[i]+T*W[i])//L\nD%=N\nY=sorted([((T*W[i])+X[i])%L for i in range(N)])\nfor i in range(N):\n    print(Y[(D+i)%N])", "code2": "import sys\nfrom fractions import gcd\ninput = sys.stdin.readline\n\nN = int(input())\nA = list(map(int,input().split()))\n\nf = A[0]\nfor i in range(1,N):\n  f = gcd(f,A[i])\n  \nprint(f)", "label": 0, "name1": "s426678095.py", "name2": "s433540614.py"}, {"id": 517, "code1": "H,W = map(int,input().split())\n#print(H)\nans = 1\n \n \nif H*W%2 == 0:\n    ans = int(H*W/2)\nelse:\n    ans = int(H*W//2 + 1)\n#output\nif H == 1:\n    ans = 1\nif W == 1:\n    ans = 1\nprint(ans)", "code2": "while(1):\n    n = int(input())\n    if n == 0:\n        break\n    s = [float(i) for i in input().split()]\n    m = sum(s)/n\n    a = (sum([(i- m)**2 for i in s])/n)**0.5\n    print(\"{:.8f}\".format(a))\n", "label": 0, "name1": "s137900528.py", "name2": "s123853064.py"}, {"id": 281, "code1": "deg = [0] * 4\nfor _ in range(3):\n    a, b = map(int, input().split())\n    deg[a - 1] += 1\n    deg[b - 1] += 1\nif all(x <= 2 for x in deg):\n    print(\"YES\")\nelse:\n    print(\"NO\")\n", "code2": "path_list = [0, 0, 0, 0]\ncount = 0\nfor _ in range(3):\n    a, b = map(int, input().split())\n    path_list[a-1] += 1\n    path_list[b-1] += 1\n\nfor path in path_list:\n    if path >= 3:\n        count += 1\nif count == 1:\n    print('NO')\nelse:\n    print('YES')", "label": 1, "name1": "s546079663.py", "name2": "s847721858.py"}, {"id": 5, "code1": "num = input()\n\nnum = str(num)\n\nlist_num = list(num)\n\nlist_num = [int(s) for s in list_num]\n\nans = 0\n\nfor n in list_num:\n    ans += n\n    ans  = ans%9\n\nif ans==0:\n    print(\"Yes\")\nelse:\n    print(\"No\")\n", "code2": "N = int(input())\nN_str = str(N)\ns = 0\nfor i in range(len(N_str)):\n    s += int(N_str[i])\nif s % 9 == 0:\n    print('Yes')\nelse:\n    print('No')", "label": 1, "name1": "s383833581.py", "name2": "s473930397.py"}, {"id": 114, "code1": "a,b,c=map(int,input().split())\nif (a>c and b<c) or (a<c and b>c):\n  print(\"Yes\")\nelse:\n  print(\"No\")", "code2": "a,b,c = list(map(int,input().strip().split()))\nans = ()\nif a <= c and c <= b:\n    ans = (\"Yes\")\nelif b <= c and c <= a:\n    ans = (\"Yes\")\nelse:\n    ans = (\"No\")\nprint(ans)", "label": 1, "name1": "s473634907.py", "name2": "s388043860.py"}, {"id": 745, "code1": "'''\n????????\u00a3????????????1??????????????????\n??\\???C++??\u00a7????????????????\u00a7\u00a3?\u00b1???????????????????????????????????????\u00a7???\n??????python??\u00a7??????????????????Accept??\u00a7??????????????????\n????????\u00a3??\u00a8optimization??????????????\u00a7??????\n??\u00a7????????????Wrong Answer??\u00a7?????????\n???????????????????????????????????????????????????\nOnline Judge???????????????Public Solutions??\u00a7????????????nanae?????????python3????????????????????????\n????????\u00a3??\u00a8?????????????????????\n???????????????????????????0.06?\u00a7????????????\u00a7??????\n'''\n\nimport queue\nv,e,s=map(int,input().split())\nedge=[]\ninf =1000000100\nfor i in range(v):\n    edge.append([])\n\nfor i in range(e):\n    vs,vt,d=map(int,input().split())\n    edge[vs].append((vt,d))\n    \ndis=[]\nfor i in range(v):\n    dis.append(inf)\n\ndis[s]=0\n\nq = queue.PriorityQueue()\nq.put((0,s))\n\n'''\nwhile(not q.empty()):\n    now=q.get()\n    nowv=now[1]\n    for (vt,d) in edge[nowv]:\n        if dis[vt]>dis[nowv]+d:\n            dis[vt]=dis[nowv]+d\n            q.put((dis[vt],vt))\n'''\n\nfinished=0\nwhile(finished<v and not q.empty()):\n    now=q.get()\n    nowv=now[1]\n    if now[0]>dis[nowv]: continue\n    for (vt,d) in edge[nowv]:\n        if dis[vt]>dis[nowv]+d:\n            dis[vt]=dis[nowv]+d\n            q.put((dis[vt],vt))\n    finished+=1       \n\nfor i in range(v):\n    if dis[i]>=inf:\n        print(\"INF\")\n    else:\n        print(dis[i])", "code2": "H,W = list(map(int,input().split()))\n\na = [input() for i in range(H)]\n\nb = [[] for i in range(H)]\nr = [[] for i in range(H)]\nfor i in range(H):\n    for j in range(W):\n        if i==0:\n            b[i].append(\"#\")\n            r[i].append(\".\")\n        elif i==H-1:\n            b[i].append(\".\")\n            r[i].append(\"#\")\n        elif a[i][j]==\"#\":\n            b[i].append(\"#\")\n            r[i].append(\"#\")\n        elif j%2==0:\n            b[i].append(\".\")\n            r[i].append(\"#\")\n        elif j%2==1:\n            b[i].append(\"#\")\n            r[i].append(\".\")\n\nfor i in range(H):\n    ans = \"\"\n    for j in range(W):\n        ans = ans+b[i][j]\n\n    print(ans)\nprint(\"\")\n\nfor i in range(H):\n    ans = \"\"\n    for j in range(W):\n        ans = ans+r[i][j]\n\n    print(ans)\n", "label": 0, "name1": "s256416940.py", "name2": "s413122754.py"}, {"id": 153, "code1": "import sys\ninput = sys.stdin.readline\nQ = int(input())\n\ndef check(x, a, b):\n  y = (a <= -(-x // 2)) or (b <= -(-x // 2))\n  z = (a <= (x // 2 + 1)) and (b <= (x // 2 + 1))\n  return (-(-x // 2) + y) * ((x // 2 + 1) + z) < a * b\n\nfor _ in range(Q):\n  a, b = map(int, input().split())\n\n  ok = 0\n  ng = a * b\n  while ng - ok > 1:\n    m = (ok + ng) // 2\n    if check(m, a, b): ok = m\n    else: ng = m\n  print(ok)", "code2": "import sys\n\nimport bisect\n\n# from collections import Counter, deque, defaultdict\n\n# import copy\n# from heapq import heappush, heappop, heapify\n# from fractions import gcd\n# import itertools\n# from operator import attrgetter, itemgetter\nimport math\n\n# import numpy as np\n\nreadline = sys.stdin.readline\nMOD = 10 ** 9 + 7\nINF = float('INF')\nsys.setrecursionlimit(10 ** 5)\n\n\ndef main():\n    q = int(input())\n\n    for i in range(q):\n        a, b = list(map(int, readline().split()))\n\n        if a > b:\n            a, b = b, a\n\n        if a == b or a + 1 == b:\n            print(2 * a - 2)\n        else:\n            ab = a * b\n            ok = 0\n            ng = int(ab ** 0.5) + 1000000\n            while abs(ng - ok) > 1:\n                mid = (ok + ng) // 2\n                if mid ** 2 < ab:\n                    ok = mid\n                else:\n                    ng = mid\n            c = ok\n\n            if c * (c + 1) < ab:\n                print(2 * c - 1)\n            else:\n                print(2 * c - 2)\n\n\nif __name__ == '__main__':\n    main()\n", "label": 1, "name1": "s809561228.py", "name2": "s587240804.py"}, {"id": 929, "code1": "N = int(input())\nMOD = 10**9 + 7\n\nfact = [1]*(N+1)\n\nfor i in range(1, N+1):\n    fact[i] = r = i*fact[i-1] % MOD\n\ncnts = [0]*(N+1)\nrev = 1\nfor K in range(N-1, (N+1)//2-1, -1):\n    cnts[K] = fact[K]*fact[K-1]*rev % MOD\n    rev = rev * (2*K-N) * (2*K-N-1) % MOD\n\nans = 0\nfor K in range((N+1)//2, N):\n    ans += (cnts[K] - cnts[K-1]) * K % MOD\n    ans %= MOD\nans = (ans * pow(fact[N-2], MOD-2, MOD)) % MOD\nprint(ans)", "code2": "import sys\n# import math, string, itertools, fractions, heapq, collections, re, array, bisect, copy, functools, random\nfrom collections import deque, defaultdict, Counter; from heapq import heappush, heappop\n# from itertools import permutations, combinations, product, accumulate, groupby\n# from bisect import bisect_left, bisect_right, insort_left, insort_right\n# from operator import itemgetter as ig\nsys.setrecursionlimit(10 ** 7)\ninf = 10 ** 20; INF = float(\"INF\"); ans = 0; tmp = 0; ansli = []; tmpli = []; candili = []; mod = 10 ** 9 + 7\ndd = [(-1, 0), (0, 1), (1, 0), (0, -1)]; ddn = dd + [(-1, 1), (1, 1), (1, -1), (-1, -1)]; ddn9 = ddn + [(0, 0)]\n\"\"\"for dx, dy in dd:\n        nx = j + dx; ny = i + dy\n            if 0 <= nx < w and 0 <= ny < h:\"\"\"\ndef wi(): return list(map(int, sys.stdin.readline().split()))\ndef wip(): return [int(x) - 1 for x in sys.stdin.readline().split()]#WideIntPoint\ndef ws(): return sys.stdin.readline().split()\ndef i(): return int(sys.stdin.readline())\ndef s(): return input()\ndef hi(n): return [i() for _ in range(n)]\ndef hs(n): return [s() for _ in range(n)]#HeightString\ndef mi(n): return [wi() for _ in range(n)]#MatrixInt\ndef mip(n): return [wip() for _ in range(n)]\ndef ms(n): return [ws() for _ in range(n)]\n\n\nif __name__ == '__main__':\n    h, w = wi()\n    s = hs(h)\n    flagli = [[0] * w for i in range(h)]\n    stack = deque()\n    black = 0\n    white = 0\n    for i in range(h):\n        for j in range(w):\n            if flagli[i][j] == 0:\n                flagli[i][j] = 1\n                white = 1 if s[i][j] == \".\" else 0\n                black = 1 if s[i][j] == \"#\" else 0\n                stack.append([i, j])\n                while stack != deque():\n                    p, q = stack.pop()\n                    k = 0 if s[p][q] == \".\" else 1\n                    for dx, dy in dd:\n                        nx = q + dx;\n                        ny = p + dy\n                        if 0 <= nx < w and 0 <= ny < h:\n                            if flagli[ny][nx] == 0:\n                                if k == 0 and s[ny][nx] == \"#\":\n                                    flagli[ny][nx] = 1\n                                    stack.append([ny, nx])\n                                    black += 1\n                                elif k == 1 and s[ny][nx] == \".\":\n                                    flagli[ny][nx] = 1\n                                    stack.append([ny, nx])\n                                    white += 1\n                ans += black * white\n                black = 0\n                white = 0\nprint(ans)", "label": 0, "name1": "s911857403.py", "name2": "s005060405.py"}, {"id": 530, "code1": "while True:\n    n = int(input())\n    if n == 0:\n        break\n    scores = list(map(int, input().split()))\n    m = sum(scores) / n\n    dev = list((i - m) for i in scores)\n    var = sum((i ** 2) for i in dev) / n\n    stdev = var ** 0.5\n    print(stdev)\n\n", "code2": "a = int(input())\nb = int(input())\nc = int(input())\nd = int(input())\n\nt = a+b+c+d\nx = t // 60\ny = t - (x*60)\nprint(x)\nprint(y)\n", "label": 0, "name1": "s320188133.py", "name2": "s681424325.py"}, {"id": 630, "code1": "n = int(input())\nS = list(map(int, input().split()))\ns = sorted(S, reverse=True)\n\nif n %2 ==0:\n  l = n/2\n  m = s[0]\n  s = s[1:int(l)]\n  p = sum(s)\n  o = p*2 + m \n  print(o)\nelse:\n  l = (n+1)/2\n  m = s[0]\n  q = s[int(l)-1]\n  s = s[1:int(l-1)]\n  p = sum(s)\n  o = p*2 + m +q\n  print(o)\n  ", "code2": "def main():\n    n = int(input())\n    x,y = 1,1\n    for _ in range(n):\n        t,a = map(int,input().split())\n        z = -1*min(-x//t,-y//a)\n        x = z*t\n        y = z*a\n        # print(x,y)\n    print(x+y)\n\nmain()", "label": 0, "name1": "s142787879.py", "name2": "s902948767.py"}, {"id": 19, "code1": "h, w = map(int, input().split())\n\neven_rows = h // 2\nodd_rows = (h+1) // 2\n\nif w > 1 and h > 1:\n    ans = 0\n    ans += w // 2 * even_rows\n    ans += (w+1) // 2 * odd_rows\n\n    print(ans)\nelse:\n    print(1)", "code2": "from math import *\nn,m=map(int,input().split())\nif(n==1 or m==1):\n    print(1)\nelse:\n    print(ceil((n*m)/2))\n", "label": 1, "name1": "s554703184.py", "name2": "s965203099.py"}, {"id": 352, "code1": "x, y = map(int, input().split())\ncnt = 1\nwhile True:\n    if x > y:\n        print(cnt - 1)\n        exit()\n    else:\n        x *= 2\n        cnt += 1\n", "code2": "\nX, Y = list(map(int, input().split()))\n\nans = 0\nwhile X <= Y:\n\tX *= 2\n\tans += 1\n\nprint(ans)", "label": 1, "name1": "s788055694.py", "name2": "s831535184.py"}, {"id": 37, "code1": "import math\nimport statistics\n\nwhile(1):\n    n=int(input())\n    if(not n):\n        break\n    S=list(map(int,input().split(\" \")))\n    mean=statistics.mean(S)\n    #print(mean)\n    S=list(map(lambda x: (x-mean)**2, S))\n    #print(S)\n    print(math.sqrt(sum(S)/n))\n\n", "code2": "while True:\n    n = int(input())\n    if n == 0:\n        break\n    scores = list(map(int, input().split()))\n    m = sum(scores) / n\n    dev = list((i - m) for i in scores)\n    var = sum((i ** 2) for i in dev) / n\n    stdev = var ** 0.5\n    print(stdev)\n\n", "label": 1, "name1": "s513646243.py", "name2": "s320188133.py"}, {"id": 723, "code1": "s=input()\nn=len(s)\nl=[[] for _ in range(2**(n-1))]\nfor b in range(2**(n-1)):\n    x=b\n    for i in range(n-1):\n        if x%2==1:\n            l[b].append(1)\n        else:\n            l[b].append(0)\n        x//=2\n#print(l)\nindexes=[[] for _ in range(2**(n-1))]\nfor k in range(2**(n-1)):\n    indexes[k]=[i for i, x in enumerate(l[k]) if x == 1]\n#print(indexes)\nSUM=0\nfor j in range(2**(n-1)):\n    L=len(indexes[j])\n    if L==0:\n        SUM+=int(s)\n        #print(SUM)\n    else:\n        SUM+=int(s[:indexes[j][0]+1])\n        #print(SUM)\n        SUM+=int(s[indexes[j][L-1]+1:])\n        #print(SUM)\n        if L>1:\n            for h in range(L-1):\n                SUM+=int(s[indexes[j][h]+1:indexes[j][h+1]+1])\n                #print(SUM)\nprint(SUM)", "code2": "import bisect\n\nans = \"IMPOSSIBLE\"\nn, m = map(int, input().split())\nac = []\nbc = []\nfor _ in range(m):\n    a, b = map(int, input().split())\n    if min(a, b) == 1:\n        ac.append(max(a, b))\n    elif max(a, b) == n:\n        bc.append(min(a, b))\nac = list(sorted(ac))\nbc = list(sorted(bc))\nfor c in ac:\n    i = bisect.bisect_left(bc, c)\n    if i < len(bc) and bc[i] == c:\n        ans = ans[2:]\n        break\nprint(ans)", "label": 0, "name1": "s307853353.py", "name2": "s723688485.py"}, {"id": 442, "code1": "# coding:utf-8\n\nimport sys\n\n\ninput = sys.stdin.readline\nINF = float('inf')\nMOD = 10 ** 9 + 7\n\n\ndef inpl(): return list(map(int, input().split()))\n\n\n# a\u306ep\u4e57\u3092\u6c42\u3081\u308b\u30a2\u30eb\u30b4\u30ea\u30ba\u30e0\n# MOD\u7248\ndef pow_mod(a, p):\n    if p == 0: return 1\n\n    if p % 2 == 0:\n        half_p = p // 2\n        half = pow_mod(a, half_p)\n        return half * half % MOD\n    else:\n        return a * pow_mod(a, p - 1) % MOD\n\n\ndef solve(N, A):\n    # \u968e\u4e57N!\u3092\u6c42\u3081\u308b\n    fact = [1] * N\n    for i in range(1, N):\n        fact[i] = fact[i - 1] * (i + 1) % MOD\n\n    # 1/N!\u306e\u9006\u5143\u3092\u6c42\u3081\u308b\n    fact_inv = [1] * N\n    fact_inv[-1] = pow_mod(fact[-1], MOD - 2)\n    for i in range(N - 1, 0, -1):\n        tmp = fact_inv[i] * (i + 1)\n        tmp %= MOD\n        fact_inv[i - 1] = tmp\n\n    # 1/k\u3092\u6c42\u3081\u308b\n    inv = [1]\n    for i in range(1, N):\n        inv.append((fact[i - 1] * fact_inv[i]) % MOD)\n\n    # 1/k\u306e\u7d2f\u7a4d\u548c\u3092\u6c42\u3081\u308b\n    inv_sum = [1]\n    for i in range(1, N):\n        inv_sum.append((inv_sum[-1] + inv[i]) % MOD)\n\n    # \u7d2f\u7a4d\u548c\u306e\u7d50\u679c\u3092\u4fc2\u6570\u3068\u3057\u3066Ai\u306b\u639b\u3051\u3066\u3001\u52a0\u7b97\u3059\u308b\n    ans = 0\n    for i in range(N):\n        ans += A[i] * (inv_sum[i] + inv_sum[N - 1 - i] - 1)\n        ans %= MOD\n\n    # ans\u306bN!\u3092\u639b\u3051\u305f\u3082\u306e\u3092\u8fd4\u3059\n    return ans * fact[-1] % MOD\n\n\nN = int(input())\nA = inpl()\nprint(solve(N, A))\n", "code2": "m=10**9+7\ni=s=r=0\nf=1\ninput()\na=input().split()\nfor x in a:i+=1;s+=pow(i,m-2,m);r+=int(x)*~-s+int(a[-i])*s;f=f*i%m\nprint(r*f%m)", "label": 1, "name1": "s535253599.py", "name2": "s072063122.py"}, {"id": 736, "code1": "from sys import stdin, setrecursionlimit\n\n\ndef main():\n    input = stdin.buffer.readline\n    x, y = map(int, input().split())\n    count = 0\n    tmp = x\n    while tmp <= y:\n        tmp *= 2\n        count += 1\n    print(count)\n\n\nif __name__ == \"__main__\":\n    setrecursionlimit(10000)\n    main()\n", "code2": "'''\n????????\u00a3????????????1??????????????????\n??\\???C++??\u00a7????????????????\u00a7\u00a3?\u00b1???????????????????????????????????????\u00a7???\n??????python??\u00a7??????????????????Accept??\u00a7??????????????????\n????????\u00a3??\u00a8optimization??????????????\u00a7??????\n??\u00a7????????????Wrong Answer??\u00a7?????????\n???????????????????????????????????????????????????\nOnline Judge???????????????Public Solutions??\u00a7????????????nanae?????????python3????????????????????????\n????????\u00a3??\u00a8?????????????????????\n???????????????????????????0.06?\u00a7????????????\u00a7??????\n'''\n\nimport queue\nv,e,s=map(int,input().split())\nedge=[]\ninf =1000000100\nfor i in range(v):\n    edge.append([])\n\nfor i in range(e):\n    vs,vt,d=map(int,input().split())\n    edge[vs].append((vt,d))\n    \ndis=[]\nfor i in range(v):\n    dis.append(inf)\n\ndis[s]=0\n\nq = queue.PriorityQueue()\nq.put((0,s))\n\n'''\nwhile(not q.empty()):\n    now=q.get()\n    nowv=now[1]\n    for (vt,d) in edge[nowv]:\n        if dis[vt]>dis[nowv]+d:\n            dis[vt]=dis[nowv]+d\n            q.put((dis[vt],vt))\n'''\n\nfinished=0\nwhile(finished<v and not q.empty()):\n    now=q.get()\n    nowv=now[1]\n    if now[0]>dis[nowv]: continue\n    for (vt,d) in edge[nowv]:\n        if dis[vt]>dis[nowv]+d:\n            dis[vt]=dis[nowv]+d\n            q.put((dis[vt],vt))\n    finished+=1       \n\nfor i in range(v):\n    if dis[i]>=inf:\n        print(\"INF\")\n    else:\n        print(dis[i])", "label": 0, "name1": "s379690682.py", "name2": "s256416940.py"}, {"id": 243, "code1": "#!/usr/bin/env python3\n#CODE FESTIVAL 2016 A\n\nimport sys\nimport math\nimport bisect\nsys.setrecursionlimit(1000000000)\nfrom heapq import heappush, heappop\nfrom collections import defaultdict\nfrom itertools import accumulate\nfrom collections import Counter\nfrom collections import deque\nfrom operator import itemgetter\nfrom itertools import permutations\nmod = 10**9 + 7\ndef I(): return int(sys.stdin.readline())\ndef LI(): return list(map(int,sys.stdin.readline().split()))\n\nn = I()\na = LI()\nx = []\nfor i in range(n):\n    if i+1 > a[i]:\n        x.append((a[i],i+1))\n    else:\n        x.append((i+1,a[i]))\nprint(n-len(list(set(x))))\n", "code2": "N = int(input())\na = list(map(int, input().split()))\n\nans = 0\nfor i in range(N):\n  if a[a[i]-1] == i+1:\n    ans += 1\nprint(ans//2)", "label": 1, "name1": "s190944842.py", "name2": "s364926848.py"}, {"id": 320, "code1": "import sys\n#input = sys.stdin.readline\n\ndef inpl(): return list(map(int, input().split()))\nQ = int(input())\n \nMOD = 10**6 + 3\ndef cmb(n, r, mod):\n    if ( r<0 or r>n ):\n        return 0\n    \n    r = min(r, n-r)\n    return g1[n] * g2[r] * g2[n-r] % mod\n \nsize = MOD + 1\ng1, g2, inverse = [0]*size, [0]*size, [0]*size\n \ng1[:2] = [1, 1] # \u5143\u30c6\u30fc\u30d6\u30eb\ng2[:2] = [1, 1] #\u9006\u5143\u30c6\u30fc\u30d6\u30eb\ninverse[:2] = [0, 1] #\u9006\u5143\u30c6\u30fc\u30d6\u30eb\u8a08\u7b97\u7528\u30c6\u30fc\u30d6\u30eb\n\nfor i in range(2, size):\n    g1[i] =  ( g1[i-1] * i ) % MOD \n    inverse[i] = (-inverse[MOD % i] * (MOD//i) ) % MOD \n    g2[i] =  (g2[i-1] * inverse[i]) % MOD\n\nfor _ in range(Q):\n    x, d, n = inpl()\n    xd = x*inverse[d]%MOD\n    if d != 0:\n        if n < ((MOD-x)*inverse[d] + 1)%MOD:\n            n = n%MOD\n            print((g1[(xd + n - 1)%MOD] * g2[(xd-1)%MOD] * pow(d, n, MOD))%MOD)\n        else:\n            print(0)\n    else:\n        print(pow(x, n, MOD))", "code2": "\n\"\"\"\n\u53ef\u80fd\u6027:\n\u6570\u5b66\u7684\u306bO(1)\u2192\u6fc3\u539a\n\u524d\u6e96\u5099\u3057\u3066\u77ac\u6bba\u2192\u5168\u90e8\u9055\u3046\u304b\u3089\u3042\u308a\u3048\u306a\u3055\u305d\u3046\n\n\u5c55\u958b\u5f0f\u304b\u3089\u8a08\u7b97\uff1f\u2192\u7d50\u5c40n\u9805\u306b\u306a\u3063\u3061\u3083\u3046\u2026\n\n1\u3064\u9805\u304c\u9032\u3080\u3068\u3001mod1000003\u306fd\u500b\u53f3\u306b\u305a\u308c\u308b(\u53f3\u7aef\u3067\u30eb\u30fc\u30d7)\n\u21920\u306b\u6765\u308b\u3053\u3068\u304c\u3042\u308c\u3070\u5fc5\u305a0\n\nd,n\u56fa\u5b9a\u306e\u6642\u3001x1\u306e\u7d50\u679c\u304b\u3089x2\u306e\u7d50\u679c\u3092\u5c0e\u51fa\u3067\u304d\u308c\u3070logN\u3067\u89e3\u3051\u308b\n\u2192\u305d\u3093\u306a\u30b7\u30f3\u30d7\u30eb\u306b\u306f\u3044\u304b\u306a\u305d\u3046\u2026\n\n========\u89e3\u7b54\u3092\u898b\u305f=========\n\uff1f\uff1f\uff1f\uff1f\uff1f\uff1f\n\u5206\u304b\u308b\u3051\u3069\u2026\u3069\u3046\u3044\u3046\u3053\u3068\u2026\n\n\u2192\u7c21\u5358\u306b\u89e3\u3051\u308b\u554f\u984c\u306b\u843d\u3068\u3057\u8fbc\u3080\u306e\u304b\u2026\n\u2192\u5236\u7d04\u304c\u7c21\u5358ver\u3092\u8272\u3005\u8003\u616e\u3057\u3001\u843d\u3068\u3057\u8fbc\u3081\u306a\u3044\u304b\u8003\u3048\u308b\u3079\u304d\u3060\u3063\u305f\n\n\"\"\"\n\ndef inverse(a,mod): #a\u306emod\u3092\u6cd5\u306b\u3057\u305f\u9006\u5143\u3092\u8fd4\u3059\n    return pow(a,mod-2,mod)\n\ndef modfac(n, MOD):\n \n    f = 1\n    factorials = [1]\n    for m in range(1, n + 1):\n        f *= m\n        f %= MOD\n        factorials.append(f)\n    inv = pow(f, MOD - 2, MOD)\n    invs = [1] * (n + 1)\n    invs[n] = inv\n    for m in range(n, 1, -1):\n        inv *= m\n        inv %= MOD\n        invs[m - 1] = inv\n    return factorials, invs\n\n\n\nmod = 10 ** 6 + 3\nfac,inv = modfac(mod-1, mod)\n\n#print (len(inv))\nQ = int(input())\n\nfor i in range(Q):\n\n    x,d,n = map(int,input().split())\n\n    if d == 0:\n        print (pow(x,n,mod))\n        continue\n    elif x == 0:\n        print (0)\n        continue\n    elif n == 1:\n        print (x)\n        continue\n\n    fi = x * inverse(d,mod) % mod\n    \n    if fi+n-1 >= mod or fi % mod == 0:\n        print (0)\n        continue\n\n    #print (pow(d,n,mod) , fac[fi+n-1] , inv[fi-1] , mod)\n    if fi >= 2:\n        print (pow(d,n,mod) * fac[(fi+n-1) % mod] * inv[(fi-1) % mod] % mod)\n    else:\n        print (pow(d,n,mod) * fac[(fi+n-1) % mod]  % mod)\n    \n", "label": 1, "name1": "s890996219.py", "name2": "s126129728.py"}, {"id": 550, "code1": "#coding:utf-8\nimport numpy as np\nn = int(input())\n\n\na = np.ones((2,1)).astype(np.int)\na[-1][-1]+len(a)\ni = 1\nwhile(1):\n    if len(a)>=500:\n        break\n    if n==a[-1][-1]:\n        print (\"Yes\")\n        print (len(a))\n        for line in a:\n            print (i,\" \".join(line.astype(np.str).tolist()))\n        exit()\n    i+=1\n    temp = int((1/2)*i*(i+1))\n    add = np.array((list(range(temp-i+1,temp+1))))\n\n    a = np.c_[a,add]\n    a = np.r_[a,add.reshape(1,-1)]\nprint (\"No\")\n", "code2": "z,x,c,v=0,0,0,0\nwhile True:\n  try:\n    q,w = map(str,raw_input().split(\",\"))\n    if w == \"A\":z+=1\n    elif w == \"B\":x+=1\n    elif w ==\"AB\":c+=1\n    elif w ==\"O\": v+=1\n  except EOFError: \n    print \"%d\\n%d\\n%d\\n%d\"%(z,x,c,v)\n    break", "label": 0, "name1": "s037954477.py", "name2": "s960711709.py"}, {"id": 362, "code1": "from heapq import heappush, heappop\nimport sys\nfrom typing import List, Tuple\n\n\nif __name__ == \"__main__\":\n    V, E, r = map(lambda x: int(x), input().split())\n\n    edges: List[List[Tuple[int, int]]] = [[] for _ in range(V)]\n    dists = [sys.maxsize for _ in range(V)]\n    dists[r] = 0\n\n    for _ in range(E):\n        s, t, dist = map(lambda x: int(x), input().split())\n        edges[s].append((t, dist))\n\n    que: List[Tuple[int, int]] = []  # (dist, vertex)\n    heappush(que, (0, r))\n\n    while que:\n        dist, vertex = heappop(que)\n        for to, cost in edges[vertex]:\n            if cost + dist < dists[to]:\n                dists[to] = cost + dist\n                heappush(que, (cost + dist, to))\n\n    for dist in dists:\n        if sys.maxsize == dist:\n            print(\"INF\")\n        else:\n            print(dist)\n\n", "code2": "import heapq\nN, M, S = map(int, input().split())\nedges = [[]for _ in range(N)]\ninf = 10**18\nfor _ in range(M):\n    u, v, d = map(int, input().split())\n    edges[u].append((v, d))\n\n\ndef dijkstra(s):\n\n    dist = [inf]*N\n    dist[s] = 0\n    vs = []\n    heapq.heappush(vs, (0, s))\n    while len(vs):\n        res, v = heapq.heappop(vs)\n        if res > dist[v]:\n            continue\n        for nxt, cost in edges[v]:\n            if res+cost < dist[nxt]:\n                dist[nxt] = res+cost\n                heapq.heappush(vs, (dist[nxt], nxt))\n    return dist\n\n\ndist = dijkstra(S)\nfor i in range(N):\n    if dist[i] == inf:\n        print(\"INF\")\n    else:\n        print(dist[i])\n\n", "label": 1, "name1": "s404691730.py", "name2": "s577496395.py"}, {"id": 889, "code1": "k = int(input())\n\na, b = map(int, input().split())\n\nflag = False\n\nfor i in range(1,1000):\n    n = i*k\n    if n >= a and n <=b:\n        flag =True\n        break\n\nif flag == True:\n    print(\"OK\")\nelse:\n    print(\"NG\")", "code2": "N,M=map(int,input().split())\n\n\nm=2**M\nans=0\ni=1\nwhile True:\n        k=( (1*((1/m))) * ((( (m-1)/m)**(i-1)) )) * ( 1900*M*i +(N-M)*100*i)#       +( (1*((1/m))) * ((( (m-1)/m)**(i-1)) )) *\n        ans+=k\n        i+=1\n        if(i>10000):\n                break\n\nprint(int(ans+0.5))", "label": 0, "name1": "s386666511.py", "name2": "s967172030.py"}, {"id": 184, "code1": "a, b = map(int, input().split())\nif a > b:\n    print(a-1)\nelse:\n    print(a)", "code2": "a, b = map(int, input().split())\n\nif a <= b:\n    print(a)\nelse:\n    print(a - 1)\n", "label": 1, "name1": "s737717931.py", "name2": "s988021824.py"}, {"id": 585, "code1": "from collections import defaultdict, deque, Counter\nfrom heapq import heappush, heappop, heapify\nfrom bisect import bisect_right, bisect_left\nimport random\nfrom itertools import permutations, accumulate, combinations, product\nimport sys\nimport string\nfrom bisect import bisect_left, bisect_right\nfrom math import factorial, ceil, floor, gamma, log\nfrom operator import mul\nfrom functools import reduce\nfrom copy import deepcopy\n\nsys.setrecursionlimit(2147483647)\nINF = 10 ** 20\ndef LI(): return list(map(int, sys.stdin.readline().split()))\ndef I(): return int(sys.stdin.readline())\ndef LS(): return sys.stdin.buffer.readline().rstrip().split()\ndef S(): return sys.stdin.buffer.readline().rstrip().decode('utf-8')\ndef IR(n): return [I() for i in range(n)]\ndef LIR(n): return [LI() for i in range(n)]\ndef SR(n): pass\ndef LSR(n): return [LS() for i in range(n)]\ndef SRL(n): return [list(S()) for i in range(n)]\ndef MSRL(n): return [[int(j) for j in list(S())] for i in range(n)]\nmod = 10 ** 9 + 7\n\nn = I()\n\nfac = [1] * (n + 1)\ninv = [1] * (n + 1)\nfor j in range(1, n + 1):\n    fac[j] = fac[j-1] * j % mod\n\n\ninv[n] = pow(fac[n], mod-2, mod)\nfor j in range(n-1, -1, -1):\n    inv[j] = inv[j+1] * (j+1) % mod\n\n\ndef comb(n, r):\n    if r > n or n < 0 or r < 0:\n        return 0\n    return fac[n] * inv[n - r] * inv[r] % mod\n\ns = input()\ndp = [[0] * n for _ in range(n)]\ndp[0][0] = 1\nfor i in range(1, n):\n    ret = 0\n    if s[i - 1] == \"<\":\n        for j in range(i - 1, -1, -1):\n            ret += dp[i - 1][j]\n            ret %= mod\n            dp[i][j] = ret\n    else:\n        for j in range(i):\n            ret += dp[i - 1][j]\n            dp[i][j + 1] = ret\n        dp[i][i] = ret\n\nprint(sum(dp[-1]) % mod)\n", "code2": "int_list = list(map(int, input().split(' ')))\n\nmax_int = max(int_list)\n\ncnt = 0\nfor i in range(3):\n    if i < max_int:\n        cnt_tmp = (max_int - int_list[i]) // 2\n        int_list[i] += 2 * cnt_tmp\n        cnt += cnt_tmp\n\nmin_int = min(int_list)\nint_list2 = sorted([i - min_int for i in int_list])\n\nif int_list2 == [0, 0, 0]:\n    print(cnt)\nelif int_list2 == [0, 0, 1]:\n    print(cnt + 1)\nelse:\n    print(cnt + 2)", "label": 0, "name1": "s321259797.py", "name2": "s608249305.py"}, {"id": 648, "code1": "import itertools\n\nN = int(input())\nP = tuple(map(int, input().split()))\nQ = tuple(map(int, input().split()))\n\nfor i, pat in enumerate(itertools.permutations(range(1, N + 1)), N):\n    if pat == P:\n        a = i\n    if pat == Q:\n        b = i\n\nans = abs(a - b)\n\nprint(ans)\n", "code2": "# -*- coding: utf-8 -*-\nimport sys\nfrom sys import stdin\nimport math\n\nn, k = map(int, stdin.readline().split())\nw = list([int(stdin.readline().rstrip()) for i in range(n)])\n\ndef main2():\n  def is_ok():\n    cnt_track = w_tmp = 0\n    for w_i in w:\n      w_tmp += w_i\n      if w_tmp > m:\n        w_tmp = w_i\n        cnt_track += 1\n        if cnt_track >= k:\n          return 0\n    return 1\n\n  r = sum(w)\n  l = max(math.ceil(r/k),max(w))\n  while l < r:\n    m = (l + r) // 2\n    # print(\"%d %d %d \" % (l, r, m))\n    if is_ok():\n      r = m\n    else:\n      l = m + 1\n  print(r)\n\nif __name__ == '__main__':\n  main2()\n\n", "label": 0, "name1": "s509770499.py", "name2": "s518389793.py"}, {"id": 888, "code1": "\n\nK = int(input())\n\nA,B = map(int, input().split())\n\ncheck = 0\nfor i in range(int(1000/K) ):\n    if K*(i+1)>=A and K*(i+1) <= B:\n        print('OK')\n        check = 1\n        break\nif check == 0:\n    print('NG')\n", "code2": "a, b = map(int,input().split())\nc = (a-b) * 100 + b * 1900\nprint(c * 2 ** b)\n", "label": 0, "name1": "s701703861.py", "name2": "s630865419.py"}, {"id": 861, "code1": "N, M = map(int, input().split())\n\nAC_count = 0\nWA_count = 0\nWA_count_dict = {}\nis_not_AC = {}\n\nfor m in range(M):\n    p, S = input().split()\n    p = int(p)\n    \n    if p not in is_not_AC.keys():\n        is_not_AC[p] = True\n        WA_count_dict[p] = 0\n        \n    if is_not_AC[p]:\n        if S==\"WA\":\n            WA_count_dict[p] += 1\n        else:\n            AC_count += 1\n            is_not_AC[p] = False\n            \nfor k in is_not_AC.keys():\n    if is_not_AC[k] == False:\n        WA_count += WA_count_dict[k]\n\nprint(AC_count, WA_count)", "code2": "# Edit: 2014/10/13\n# Lang: Python3\n# Time: 00.xxs\n\n# File: pc1503.py\n\nfrom functools import reduce\n\nif __name__ == \"__main__\":\n    n = int(input()) # 1<=n<=1,500\n    #n1500 = reduce(lambda x,y: x*y, range(2,1501))+2\n    n1500 = 48119977967797748601669900935813797818348080406726138081308559411630575189001095591292230585206733851868464009619343585194052091124618166270271481881393331431627962810299844149333789044689395510487167879769325303699470467829234399263326545652860748605075746366928323606645492277541120083438086727369377887676000211405318480244354207419604864176969950581435222198851194568984095705945549589054568321792338919149442985919957734792959402499096845643020401869381175603964424333222114125974374817804242633309769804293952870034619354125014210045647664063240162007560108665290568646128342557147350985358724154623253371867470765120422073867963935775258692109753041762094343569050497470353531764481503174750911858230906998361066084787758316110585736013365377431860738572261325738233656835271947352695180865573043834027955539012765489372645042504406597752357481931532872356635411224578334040522294746402829585458478708778346379431862368824819009177091444034885941394319343910223168655869761799669075059527608502465593181398566214786801211651657222004123456498258513120359126022843038535083709796101565934859483203933443308601475813108363074118562404412420191947127585482919172173045961122122701434297870691932154082986945954748251105782181586397275820342101470457300633590139512919549474113721711616912519714191760699935509810254849967087635936181176363954224186031346682928878492872249485456690138831610135377916327940503701400290125509132140782614640495733518048670983360134097860364762638658894873174499870133559364805443430831459505987809215393353387232078177562975021460595422358573128085417162336030235138652735438053034531962620811566019896879275257163988352090874930346115518331202927263708446729394381879888839549731876978682249320628599631628662375508826209854754631984276392670919216923002770077734756077549035942976209159416211581439461484509549370357486770276807687544580164314647595031368948490282897173328013518435758700056425922638411889496527975846052717958044813737086806600171993703579485864029383208714528950303253881360812631162134750100307772634337467012820470715650810714689905121432259528505483053930402217400686061612471659630192434864094539828085677465383026128353771071152304197549798870706139893609140045659756285435787771636258253666592102151236142132724425850991205720020493660580896600891888594659612927724357866265934517615841298789154462249169688860092640284756382431746120357767933119589280468687348061788072986362788582227019465263474828590646048451070702923434422714349595857654843699542321849363652767771978314681013589442955219879702008068934096624650625769705233333462826013860098698155180331145365652453482955497979915586438474687345677874451117702250441711504844638414485210092261397271970571029038581873069951161330495772310508760528249706514238384269808639507080418298318311361373628512041716415196868334254119137139589149597210032153545941114666530498906529240798164804007394775927836045668573993316428972539932745757171947402454257142633700815922407278403640595355142075599446056337986717212316223257763412164180899532722039383244462511410346646148863397237096276822656157561194665545757017429842404840309758925618650507921043007241637877939825811059339138925526124514467627126548126795078784022672860886251974581362141782786407402896309678008909663263987018538107050886193489012497405005820727271232733728141775132722013860591169620692789290456794698409808557447756701311883266010859016027592252397754508251628808293537776536569608111330584797160694847898923196743970244451842702266403326317319092117151143971679500042590269255093130215984418097418435474300467281949798227102529873732749027992079700287275900856241172902880909546551703263202853584498085358955307673717177961902081098618729046348849060249600000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000002\n    print(n1500)\n    for i in range(0,n):\n        print(i+2)", "label": 0, "name1": "s383689589.py", "name2": "s021750176.py"}, {"id": 385, "code1": "h, w = map(int, input().split())\na = [list(input()) for i in range(h)]\nta = [[\".\"] * w for i in range(h)]\nao = [[\".\"] * w for i in range(h)]\nfor i in range(h):\n    if i % 2 == 0:\n        for j in range(w - 1):\n            ta[i][j] = \"#\"\n        ao[i][-1] = \"#\"\n    else:\n        for j in range(1, w):\n            ao[i][j] = \"#\"\n        ta[i][0] = \"#\"\nfor i in range(h):\n    for j in range(w):\n        if a[i][j] == \"#\":\n            ta[i][j] = \"#\"\n            ao[i][j] = \"#\"\nfor i in range(h):\n    print(*ta[i], sep=\"\")\nprint()\nfor i in range(h):\n    print(*ao[i], sep=\"\")", "code2": "H, W = map(int, input().split())\nG = [list(map(lambda x: x == '#', input().strip())) for _ in range(H)]\nTakahashi = [[False]*W for _ in range(H)]\nAoki = [[False]*W for _ in range(H)]\n\nfor h in range(H):\n    for w in range(W):\n        if w == 0:\n            Takahashi[h][w] = True\n        elif not h & 1:\n            Aoki[h][w] = True\n        if w == W-1:\n            Aoki[h][w] = True\n        elif h & 1:\n            Takahashi[h][w] = True\n        \n        if G[h][w]:\n            Takahashi[h][w] = True\n            Aoki[h][w] = True\n\nprint('\\n'.join([''.join(['#' if s else '.' for s in Takahashi[i]]) for i in range(H)]))\nprint('')\nprint('\\n'.join([''.join(['#' if s else '.' for s in Aoki[i]]) for i in range(H)]))\n#print('\\n'.join([''.join(['#' if s1 & s2 else '.' for s1, s2 in zip(Aoki[i], Takahashi[i])]) for i in range(H)]))\n", "label": 1, "name1": "s319820171.py", "name2": "s192633271.py"}, {"id": 233, "code1": "# AOJ 0144 Packet Transportation\n# Python3 2018.6.23 bal4u\n\nINF = 0x7fffffff\nn = int(input())\narr = [[INF for j in range(n)] for i in range(n)]\nfor i in range(n):\n\ta = list(map(int, input().split()))\n\tx, k = a[0]-1, a[1]\n\tfor j in range(k):\n\t\ty = a[j+2]-1\n\t\tarr[x][y] = 1\nfor k in range(n):\n\tarr[k][k] = 0\n\tfor i in range(n):\n\t\tif arr[i][k] >= INF: continue\n\t\tfor j in range(n):\n\t\t\tif arr[k][j] >= INF: continue\n\t\t\tarr[i][j] = min(arr[i][j], arr[i][k] + arr[k][j])\np = int(input())\nfor i in range(p):\n\ts, d, v = map(int, input().split())\n\ts,d = s-1, d-1\n\tprint(arr[s][d]+1 if arr[s][d] < v else \"NA\")\n", "code2": "n = input()\nE0 = {}\nV = set()\nfor i in xrange(n):\n    ipt = map(int, raw_input().split())\n    r = ipt[0]; k = ipt[1]; T = ipt[2:]\n    E0[r] = T\n    V.add(r)\nE = {v: {} for v in V}\nfor v in V:\n    for t in E0[v]:\n        E[v][t] = 1\nMAX = 10**18\nfor k in V:\n    for i in V:\n        for j in V:\n            if k in E[i] and j in E[k]:\n                E[i][j] = min(E[i].get(j, MAX), E[i][k] + E[k][j])\np = input()\nfor i in xrange(p):\n    s, d, v = map(int, raw_input().split())\n    print \"NA\"*(v <= E[s].get(d, MAX))or E[s][d]+1", "label": 1, "name1": "s881383078.py", "name2": "s926346357.py"}, {"id": 378, "code1": "h, w = map(int, input().split())\na = [list(input()) for _ in range(h)]\nu = [[\".\"] * w for _ in range(h)]\nv = [[\".\"] * w for _ in range(h)]\nfor i in range(h):\n    for j in range(w):\n        if a[i][j] == \"#\":\n            u[i][j], v[i][j] = \"#\", \"#\"\n        else:\n            if i == 0:\n                u[i][j] = \"#\"\n            elif i == h - 1:\n                v[i][j] = \"#\"\n            else:\n                if j % 2 == 0:\n                    u[i][j] = \"#\"\n                else:\n                    v[i][j] = \"#\"\nfor s in u:\n    print(\"\".join(s))\nprint()\nfor t in v:\n    print(\"\".join(t))", "code2": "H,W = list(map(int,input().split()))\n\na = [input() for i in range(H)]\n\nb = [[] for i in range(H)]\nr = [[] for i in range(H)]\nfor i in range(H):\n    for j in range(W):\n        if i==0:\n            b[i].append(\"#\")\n            r[i].append(\".\")\n        elif i==H-1:\n            b[i].append(\".\")\n            r[i].append(\"#\")\n        elif a[i][j]==\"#\":\n            b[i].append(\"#\")\n            r[i].append(\"#\")\n        elif j%2==0:\n            b[i].append(\".\")\n            r[i].append(\"#\")\n        elif j%2==1:\n            b[i].append(\"#\")\n            r[i].append(\".\")\n\nfor i in range(H):\n    ans = \"\"\n    for j in range(W):\n        ans = ans+b[i][j]\n\n    print(ans)\nprint(\"\")\n\nfor i in range(H):\n    ans = \"\"\n    for j in range(W):\n        ans = ans+r[i][j]\n\n    print(ans)\n", "label": 1, "name1": "s080897842.py", "name2": "s413122754.py"}, {"id": 337, "code1": "S = input()\n\nl = len(S)\nS_list = list(map(int, S))\n\nans = 0\n\nfor i in range(l):\n    num = int(S_list[-i-1])\n\n    for j in range(i+1):\n        ans += num * (10 ** (j)) * (2 ** (max(l-1-j-1, l-1-i)))\n\nprint(ans)\n", "code2": "s = input()\nans = 0\nn = len(s)\nfor i in range(2 ** (n-1)):\n    tmp = s[0]\n    for j in range(n-1):\n        if i & (1<<j):tmp+=\"+\"\n        tmp+=s[j+1]\n    ans += eval(tmp)\nprint(ans)", "label": 1, "name1": "s174681493.py", "name2": "s622648113.py"}, {"id": 169, "code1": "X = input()\n\ns_cnt = 0\nt_cnt = 0\n\nans = 0\n\nfor n in range(len(X)):\n  if X[n] == \"S\":\n    s_cnt += 1\n  else:\n    t_cnt += 1\n  ans = max(ans,t_cnt-s_cnt)\nprint(ans*2)", "code2": "#\n# \u3000\u3000  \u22c0_\u22c0\u3000 \n#\u3000\u3000  (\uff65\u03c9\uff65)  \n# .\uff0f \uff35 \u223d \uff35\uff3c\n#  \u2502\uff0a\u3000\u5408\u3000\uff0a\u2502\n#  \u2502\uff0a\u3000\u683c\u3000\uff0a\u2502 \n#  \u2502\uff0a\u3000\u7948\u3000\uff0a\u2502 \n#  \u2502\uff0a\u3000\u9858\u3000\uff0a\u2502 \n#  \u2502\uff0a\u3000\u3000\u3000\uff0a\u2502 \n#      \uffe3\n#\nimport sys\nsys.setrecursionlimit(10**6)\ninput=sys.stdin.readline\nfrom math import floor,sqrt,factorial,hypot,log #log2\u306a\u3044\uff59\uff50\nfrom heapq import heappop, heappush, heappushpop\nfrom collections import Counter,defaultdict,deque\nfrom itertools import accumulate,permutations,combinations,product,combinations_with_replacement\nfrom bisect import bisect_left,bisect_right\nfrom copy import deepcopy\nfrom fractions import gcd\nfrom random import randint\ndef ceil(a,b): return (a+b-1)//b\ninf=float('inf')\nmod = 10**9+7\ndef pprint(*A): \n    for a in A:     print(*a,sep='\\n')\ndef INT_(n): return int(n)-1\ndef MI(): return map(int,input().split())\ndef MF(): return map(float, input().split())\ndef MI_(): return map(INT_,input().split())\ndef LI(): return list(MI())\ndef LI_(): return [int(x) - 1 for x in input().split()]\ndef LF(): return list(MF())\ndef LIN(n:int): return [I() for _ in range(n)]\ndef LLIN(n: int): return [LI() for _ in range(n)]\ndef LLIN_(n: int): return [LI_() for _ in range(n)]\ndef LLI(): return [list(map(int, l.split() )) for l in input()]\ndef I(): return int(input())\ndef F(): return float(input())\ndef ST(): return input().replace('\\n', '')\ndef main():\n    X=ST()\n    stack = []\n    for s in X:\n        stack.append(s)\n        if(stack[-2:]==[\"S\",\"T\"]):\n            stack.pop();stack.pop()\n    print(len(stack))\nif __name__ == '__main__':\n    main()", "label": 1, "name1": "s239717601.py", "name2": "s702845370.py"}, {"id": 54, "code1": "t =0\nfor a in range(4):\n  y = int(input())\n  t += y\nc = t\ng=0\nwhile True:\n if c <0: break\n else:\n  c-=60\n  g+=1\ng-=1\nprint g\nprint t%60", "code2": "# -*- coding: utf-8 -*-\n'import sys'\n'import math'\ni=int(4)\nt=0\nwhile i:\n    t+=int(input())\n    i-=1\nprint(int(t/60))\nprint(t%60)", "label": 1, "name1": "s359341708.py", "name2": "s417833494.py"}, {"id": 514, "code1": "H,W = map(int,input().split())\n#print(H)\nans = 1\n \n \nif H*W%2 == 0:\n    ans = int(H*W/2)\nelse:\n    ans = int(H*W//2 + 1)\n#output\nif H == 1:\n    ans = 1\nif W == 1:\n    ans = 1\nprint(ans)", "code2": "n,a,b = map(int, input().split())\nXs = list(map(int, input().split()))\n\nds = [0] * (n+10)\nfor i in range(n-1):\n    cost1 = a*(Xs[i+1] - Xs[i])\n    cost2 = b\n    ds[i+1] = ds[i] + min(cost1, cost2)\nprint(ds[n-1])", "label": 0, "name1": "s137900528.py", "name2": "s039990138.py"}, {"id": 402, "code1": "#coding:utf-8\n\nn = input()\nl = map(int, raw_input(). split())\nl.sort()\nfor i in xrange(n):\n    print(l[i]),", "code2": "raw_input()\nx = ' '.join(sorted(raw_input().split(), key =int))\nprint x", "label": 1, "name1": "s666694142.py", "name2": "s024577141.py"}, {"id": 330, "code1": "a,b,c=map(int,input().split())\nprint(min(a+b,b+c,c+a))\n", "code2": "a, b, c = map(int, input().split())\nprint(min(a + b, a + c, b + c))", "label": 1, "name1": "s997903196.py", "name2": "s641848335.py"}, {"id": 289, "code1": "N,M = map(int,(input().split()))\nX = list(map(int,(input().split())))\nX.sort()\nif M > N:\n    dist = [X[i+1]-X[i] for i in range(M - 1)]\n    dist.sort(reverse = True)\n    del dist[0:N-1]\n    print(sum(dist))\nelse:\n print(0)", "code2": "import numpy as np\nn,m = map(int, input().split())\nX = sorted(np.array(input().split(), dtype = np.int64))\nX = sorted(np.diff(X))\nif m-n >= 0:\n    ans = sum(X[:m-n])\nelse:\n    ans = 0\nprint(ans)", "label": 1, "name1": "s025338416.py", "name2": "s052852893.py"}, {"id": 571, "code1": "import math\na, b, C = map(float, input().split())\nC = C / 180 * math.pi\nprint('%.06f' % (a * b * math.sin(C) / 2))\nprint('%.06f' % ((a**2 + b**2 -2*a*b*math.cos(C))**(1/2) + a + b))\nprint('%.06f' % (b*math.sin(C)))", "code2": "\n\ndef main():\n    n, K = map(int, input().split())\n    a = list(map(int, input().split()))\n\n    # dp[i] is true if First player wins with i tiles left\n    dp = [False]*(K+1)\n    for k in range(1, K+1):\n        for i in a:\n            if k >= i and not dp[k-i]:\n                dp[k] = True\n    print(['Second', 'First'][dp[K]])\n\n\nif __name__ == \"__main__\":\n    main()\n", "label": 0, "name1": "s950542255.py", "name2": "s700864010.py"}, {"id": 765, "code1": "input()\ns = sorted(map(int, raw_input().split()))\nfor i in s:\n    print i,", "code2": "n = int(input())\ndat = list(map(int,input().split()))\n\ndat = [0] + dat + [0]\ntotal = 0\ncur = 0\nfor i in range(n + 2):\n    total += abs(cur - dat[i])\n    cur = dat[i]\ntotal += abs(cur)\ncur = 0\nfor i in range(n):\n    j = i + 1\n    if dat[j-1] < dat[j] < dat[j+1]:\n        # \u9593\u306b\u631f\u307e\u308c\u3066\u3044\u308b\u30d1\u30bf\u30fc\u30f3\uff11\n        #print(\"pat1\")\n        print(total)\n    elif dat[j-1] > dat[j] > dat[j+1]:\n        # \u9593\u306b\u631f\u307e\u308c\u3066\u3044\u308b\u30d1\u30bf\u30fc\u30f32\n        #print(\"pat2\")\n        print(total)\n    else:\n        # \u3053\u306e\u5834\u5408\u306f\u9593\u306b\u631f\u307e\u308c\u3066\u3044\u306a\u3044\n        #print(\"{0} {1} {2}\".format(total, abs(dat[j-1] -dat[j]) , abs(dat[j-1] -dat[j+1])))\n        print(total - abs(dat[j-1] -dat[j]) - abs(dat[j] -dat[j+1]) + abs(dat[j-1] - dat[j+1]))\n", "label": 0, "name1": "s503541745.py", "name2": "s576885295.py"}, {"id": 205, "code1": "N = int(raw_input())\nT_list = map(int, raw_input().split())\nA_list = map(int, raw_input().split())\n\nlow_list = [1]*N\nhigh_list = [1]*N\n\nt_now = 0\nfor i in range(N):\n    if T_list[i] > t_now:\n        t_now = T_list[i]\n        low_list[i] = T_list[i]\n        high_list[i] = T_list[i]\n    else:\n        high_list[i] = T_list[i]\na_now = 0\nfor j in range(N):\n    i = N - 1 - j\n    if A_list[i] > a_now:\n        a_now = A_list[i]\n        low_list[i] = max(A_list[i], low_list[i])\n        high_list[i] = min(A_list[i], high_list[i])\n    else:\n        high_list[i] = min(A_list[i], high_list[i])\n    \nres = 1\nfor i in range(N):\n    if high_list[i] < low_list[i]:\n        res = 0\n        break\n    else:\n        res = res*(high_list[i] - low_list[i] + 1) % 1000000007\n\nprint res", "code2": "#two alpinist\nN = int(input())\nA = tuple(map(int, input().split()))\nB = tuple(map(int, input().split()))\nmod = 10**9+7\n \n#fixed[i]: i \u5c71\u306e\u9ad8\u3055\u304c\u78ba\u5b9a\u3057\u3066\u308b\nfix_a= [0]*(N)\nfix_b= [0]*(N)\nfix_a[0] = A[0]\nfix_b[-1] = B[-1]\nfor i in range(N-1):\n    if A[i+1]>A[i]:\n        fix_a[i+1] = A[i+1]\n    if B[-(i+2)]>B[-(i+1)]:\n        fix_b[-(i+2)] = B[-(i+2)]\n\nans = 1\nfor i in range(N):\n    if fix_a[i]:\n        if B[i]<fix_a[i]:\n            ans = 0\n            break\n    if fix_b[i]:\n        if A[i]<fix_b[i]:\n            ans = 0\n            break\n            \nfor i in range(N):\n    if fix_a[i] or fix_b[i]:\n        continue\n    ans *= min(A[i], B[i])\n    ans %= mod\n    \nif A[-1] != B[0]:\n    ans = 0\n    \nprint(ans)\n\n", "label": 1, "name1": "s251140241.py", "name2": "s056956957.py"}, {"id": 341, "code1": "import sys\nif sys.platform =='ios':\n\tsys.stdin=open('Untitled.txt')\ninput = sys.stdin.readline\n\n# \u53c2\u7167URL:https://qiita.com/gogotealove/items/11f9e83218926211083a\n\n# n = [int(x) for x in input().rstrip()]\n# op_cnt = len(n) - 1  # \u3059\u304d\u9593\u306e\u500b\u6570\n# ans2 = []\n# for i in range(2 ** op_cnt):\n#     op = [\"\"] * op_cnt  # \u3042\u3089\u304b\u3058\u3081 [\"-\", \"-\", \"-\"] \u3068\u3044\u3046\u30ea\u30b9\u30c8\u3092\u4f5c\u3063\u3066\u304a\u304f\n#     for j in range(op_cnt):\n#         if ((i >> j) & 1):\n#             op[op_cnt - 1 - j] = \"+\"  # \u30d5\u30e9\u30b0\u304c\u7acb\u3063\u3066\u3044\u305f\u7b87\u6240\u3092 \"+\" \u3067\u4e0a\u66f8\u304d\n#     ans2.append(op)\n# for a in ans2:\n# \tprint(a)\n\nS = input().rstrip() # \u5165\u529b\u5024 \"1234\\n\" \u3092 \"1234\"\u306b\nn = len(S)-1 # \u30aa\u30da\u30ec\u30fc\u30bf\u304c\u5165\u308a\u3046\u308b\u9699\u9593\u306flen(S)-1\n\nops = []\nfor i in range(2**n): # \u5404\u9699\u9593\u306b\u5bfe\u3057\u3066\u3001 +\u3059\u308b\u3057\u306a\u3044\u306e2\u901a\u308a\u304c\u3042\u308b\u306e\u3067\u30012^n \u56de\u30eb\u30fc\u30d7\n\top = [\"\"] * n # \u3042\u3089\u304b\u3058\u3081\u30ea\u30b9\u30c8\u3092\u4f5c\u6210\n\tfor j in range(n):\n\t\tif((i>>j) & 1) == 1:  # \u9806\u306b\u53f3\u306b\u30b7\u30d5\u30c8\u3055\u305b\u6700\u4e0b\u4f4dbit\u306e\u30c1\u30a7\u30c3\u30af\u3092\u884c\u3046\n\t\t\top[n-1-j] = \"+\" # \u30d5\u30e9\u30b0\u304c\u7acb\u3063\u3066\u3044\u305f\u3089op\u306e\u5024\u3092\u66f8\u304d\u63db\u3048\u308b\n\tops.append(op)\n\n# \u3053\u3053\u307e\u3067\u3067 ops \u306e\u4e2d\u306b\u3042\u308a\u3046\u308b\u7d44\u307f\u5408\u308f\u305b\u304c\u5217\u6319\u3055\u308c\u308b\uff08\u4ee5\u4e0b\u306flen(S)-1==3\u306e\u4f8b\uff09\n# ['', '', '']\n# ['', '', '+']\n# ['', '+', '']\n# ['', '+', '+']\n# ['+', '', '']\n# ['+', '', '+']\n# ['+', '+', '']\n# ['+', '+', '+']\n\nans = 0\nfor o in ops:\n\ts = [s for s in S]\n\tfor k in range(len(o)):\n\t\ts.insert(2*k+1, o[k])\n\tans += eval(''.join(s)) # eval \u3092\u5229\u7528\u3059\u308b\u3053\u3068\u3067\u6587\u5b57\u5217\u3092\u5f0f\u3068\u3057\u3066\u8a55\u4fa1\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u308b\n\nprint(ans)", "code2": "from itertools import product\nimport copy\n\n\ndef calc_sum(sub):\n    ret = 0\n    cnt = 0\n    for i in sub[::-1]:\n        if i == \"+\":\n            cnt = 0\n        else:\n            ret += int(i) * 10 ** cnt\n            cnt += 1\n    return ret\n\n\ns = list(input())\nl = len(s)\n\nans = 0\nfor i in product((0, 1), repeat=l-1):\n    sub = copy.copy(s)\n    indexes = [m for m, x in enumerate(i) if x == 1]\n    if sum(i) != 0:\n        for k, ind in enumerate(indexes):\n            sub.insert(ind+1+k, \"+\")\n    ans += calc_sum(sub)\n\nprint(ans)\n", "label": 1, "name1": "s854607235.py", "name2": "s501325317.py"}, {"id": 716, "code1": "####################\n#  AC:     ms (PyPy)\n####################\n\ndef main():\n    MOD = 10**6+3\n    # preprocess\n    fac = [None] * (MOD+1)\n    fac[0] = fac[1] = 1\n    for i in range(2, MOD+1):\n        fac[i] = (fac[i-1] * i) % MOD\n\n    Q = int(input())\n    for i in range(Q):\n        x, d, n = map(int, input().split())\n\n        if d == 0:\n            print(pow(x, n, MOD))\n            continue\n        \n        xd = (x * pow(d, MOD-2, MOD)) % MOD\n        if xd == 0 or xd + (n-1) >= MOD:\n            print(0)\n            continue\n\n        print(pow(d, n, MOD) * fac[xd+(n-1)] * pow(fac[xd-1], MOD-2, MOD) % MOD)\n\n\nif __name__ == \"__main__\":\n    main()", "code2": "import sys\nif sys.platform =='ios':\n\tsys.stdin=open('Untitled.txt')\ninput = sys.stdin.readline\n\n# \u53c2\u7167URL:https://qiita.com/gogotealove/items/11f9e83218926211083a\n\n# n = [int(x) for x in input().rstrip()]\n# op_cnt = len(n) - 1  # \u3059\u304d\u9593\u306e\u500b\u6570\n# ans2 = []\n# for i in range(2 ** op_cnt):\n#     op = [\"\"] * op_cnt  # \u3042\u3089\u304b\u3058\u3081 [\"-\", \"-\", \"-\"] \u3068\u3044\u3046\u30ea\u30b9\u30c8\u3092\u4f5c\u3063\u3066\u304a\u304f\n#     for j in range(op_cnt):\n#         if ((i >> j) & 1):\n#             op[op_cnt - 1 - j] = \"+\"  # \u30d5\u30e9\u30b0\u304c\u7acb\u3063\u3066\u3044\u305f\u7b87\u6240\u3092 \"+\" \u3067\u4e0a\u66f8\u304d\n#     ans2.append(op)\n# for a in ans2:\n# \tprint(a)\n\nS = input().rstrip() # \u5165\u529b\u5024 \"1234\\n\" \u3092 \"1234\"\u306b\nn = len(S)-1 # \u30aa\u30da\u30ec\u30fc\u30bf\u304c\u5165\u308a\u3046\u308b\u9699\u9593\u306flen(S)-1\n\nops = []\nfor i in range(2**n): # \u5404\u9699\u9593\u306b\u5bfe\u3057\u3066\u3001 +\u3059\u308b\u3057\u306a\u3044\u306e2\u901a\u308a\u304c\u3042\u308b\u306e\u3067\u30012^n \u56de\u30eb\u30fc\u30d7\n\top = [\"\"] * n # \u3042\u3089\u304b\u3058\u3081\u30ea\u30b9\u30c8\u3092\u4f5c\u6210\n\tfor j in range(n):\n\t\tif((i>>j) & 1) == 1:  # \u9806\u306b\u53f3\u306b\u30b7\u30d5\u30c8\u3055\u305b\u6700\u4e0b\u4f4dbit\u306e\u30c1\u30a7\u30c3\u30af\u3092\u884c\u3046\n\t\t\top[n-1-j] = \"+\" # \u30d5\u30e9\u30b0\u304c\u7acb\u3063\u3066\u3044\u305f\u3089op\u306e\u5024\u3092\u66f8\u304d\u63db\u3048\u308b\n\tops.append(op)\n\n# \u3053\u3053\u307e\u3067\u3067 ops \u306e\u4e2d\u306b\u3042\u308a\u3046\u308b\u7d44\u307f\u5408\u308f\u305b\u304c\u5217\u6319\u3055\u308c\u308b\uff08\u4ee5\u4e0b\u306flen(S)-1==3\u306e\u4f8b\uff09\n# ['', '', '']\n# ['', '', '+']\n# ['', '+', '']\n# ['', '+', '+']\n# ['+', '', '']\n# ['+', '', '+']\n# ['+', '+', '']\n# ['+', '+', '+']\n\nans = 0\nfor o in ops:\n\ts = [s for s in S]\n\tfor k in range(len(o)):\n\t\ts.insert(2*k+1, o[k])\n\tans += eval(''.join(s)) # eval \u3092\u5229\u7528\u3059\u308b\u3053\u3068\u3067\u6587\u5b57\u5217\u3092\u5f0f\u3068\u3057\u3066\u8a55\u4fa1\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u308b\n\nprint(ans)", "label": 0, "name1": "s606450603.py", "name2": "s854607235.py"}, {"id": 219, "code1": "from itertools import permutations\nn = int(input())\np = tuple(map(int, input().split()))\nq = tuple(map(int, input().split()))\n\nfor n, i in enumerate(permutations(sorted(p))):\n    if i == p:\n        pn = n\n\nfor n, i in enumerate(permutations(sorted(q))):\n    if i == q:\n        qn = n\nprint(abs(pn-qn))\n", "code2": "n = int(input())\np = tuple(map(int, input().split()))\nq = tuple(map(int, input().split()))\n\nimport itertools\nr = list(itertools.permutations(range(1, n+1)))\n\np_place = r.index(p)\nq_place = r.index(q)\nanswer = abs(p_place-q_place)\nprint(answer)", "label": 1, "name1": "s199679379.py", "name2": "s558804624.py"}, {"id": 315, "code1": "import sys\n\n\n#\u4e92\u3044\u306b\u7d20\u306aa,b\u306b\u3064\u3044\u3066\u3001a*x+b*y=1\u306e\u4e00\u3064\u306e\u89e3\ndef extgcd(a, b):\n    r = [1, 0, a]\n    w = [0, 1, b]\n    while w[2] != 1:\n        q = r[2] // w[2]\n        r2 = w\n        w2 = [r[0] - q * w[0], r[1] - q * w[1], r[2] - q * w[2]]\n        r = r2\n        w = w2\n    #[x,y]\n    return [w[0], w[1]]\n\n\n# a\u306e\u9006\u5143(mod m)\u3092\u6c42\u3081\u308b\u3002(a\u3068m\u306f\u4e92\u3044\u306b\u7d20\u3067\u3042\u308b\u3053\u3068\u304c\u524d\u63d0)\ndef mod_inv(a, m):\n    x = extgcd(a, m)[0]\n    return (m + x % m) % m\n\n\nreadline = sys.stdin.readline\nMOD_NUM = 10**6 + 3\n\nQ = int(readline())\nq_array = [list(map(int, readline().split())) for i in range(Q)]\nans_array = []\n\nfactorial = [1] * MOD_NUM\nfactorial_inv = [1] * MOD_NUM\n\ntmp = 1\nfor i in range(2, MOD_NUM):\n    tmp = tmp * i % MOD_NUM\n    factorial[i] = tmp\n    factorial_inv[i] = mod_inv(tmp, MOD_NUM)\n\nfor q in q_array:\n    x, d, n = q\n    # print(x, d, n)\n    if x == 0:\n        ans_array.append(\"0\\n\")\n        continue\n    if d == 0:\n        ans = pow(x, n, MOD_NUM)\n        ans_array.append(str(ans) + \"\\n\")\n    else:\n        x_start = x * mod_inv(d, MOD_NUM) % MOD_NUM\n        if x_start + n > MOD_NUM:\n            ans_array.append(\"0\\n\")\n        else:\n            ans = factorial[x_start + n - 1] * factorial_inv[\n                x_start - 1] * pow(d, n, MOD_NUM) % MOD_NUM\n            ans_array.append(str(ans) + \"\\n\")\n\nsys.stdout.writelines(ans_array)", "code2": "import sys\n#input = sys.stdin.readline\n\ndef inpl(): return list(map(int, input().split()))\nQ = int(input())\n \nMOD = 10**6 + 3\ndef cmb(n, r, mod):\n    if ( r<0 or r>n ):\n        return 0\n    \n    r = min(r, n-r)\n    return g1[n] * g2[r] * g2[n-r] % mod\n \nsize = MOD + 1\ng1, g2, inverse = [0]*size, [0]*size, [0]*size\n \ng1[:2] = [1, 1] # \u5143\u30c6\u30fc\u30d6\u30eb\ng2[:2] = [1, 1] #\u9006\u5143\u30c6\u30fc\u30d6\u30eb\ninverse[:2] = [0, 1] #\u9006\u5143\u30c6\u30fc\u30d6\u30eb\u8a08\u7b97\u7528\u30c6\u30fc\u30d6\u30eb\n\nfor i in range(2, size):\n    g1[i] =  ( g1[i-1] * i ) % MOD \n    inverse[i] = (-inverse[MOD % i] * (MOD//i) ) % MOD \n    g2[i] =  (g2[i-1] * inverse[i]) % MOD\n\nfor _ in range(Q):\n    x, d, n = inpl()\n    xd = x*inverse[d]%MOD\n    if d != 0:\n        if n < ((MOD-x)*inverse[d] + 1)%MOD:\n            n = n%MOD\n            print((g1[(xd + n - 1)%MOD] * g2[(xd-1)%MOD] * pow(d, n, MOD))%MOD)\n        else:\n            print(0)\n    else:\n        print(pow(x, n, MOD))", "label": 1, "name1": "s261991889.py", "name2": "s890996219.py"}, {"id": 46, "code1": "def solve():\n    N = int(input())\n    A = list(map(int, input().split()))\n    b = 0\n    c = 0\n    d = 0\n    for a in A:\n        if a == b:\n            c += 1\n        if a != b:\n            d += c//2\n            b = a\n            c = 1\n    d += c//2\n    b = a\n    c = 0\n    print(d)\n    \n\nif __name__ == '__main__':\n    solve()", "code2": "N = int(input())\nAs = list(map(int,input().split()))\ncounts = []\nnow = As[0]\ncount = 1\nfor a in range(1,len(As)):\n    if As[a]==now:\n        count+=1\n        if a == len(As)-1:\n            counts.append(count)\n    else:\n        counts.append(count)\n        count =1\n        now = As[a]\nprint(sum([i//2 for i in counts]))", "label": 1, "name1": "s237957783.py", "name2": "s736034553.py"}, {"id": 747, "code1": "i,o,t,j,l,s,z = map(int,input().split())\na = 2*(i//2+j//2+l//2)\nif i>0 and j>0 and l>0:\n    i,j,l = i-1,j-1,l-1\n    b = 2*(i//2+j//2+l//2)\n    print(o+max(a,b+3))\nelse:\n    print(o+a)\n", "code2": "h, w = map(int, input().split())\na = [list(input()) for _ in range(h)]\nu = [[\".\"] * w for _ in range(h)]\nv = [[\".\"] * w for _ in range(h)]\nfor i in range(h):\n    for j in range(w):\n        if a[i][j] == \"#\":\n            u[i][j], v[i][j] = \"#\", \"#\"\n        else:\n            if i == 0:\n                u[i][j] = \"#\"\n            elif i == h - 1:\n                v[i][j] = \"#\"\n            else:\n                if j % 2 == 0:\n                    u[i][j] = \"#\"\n                else:\n                    v[i][j] = \"#\"\nfor s in u:\n    print(\"\".join(s))\nprint()\nfor t in v:\n    print(\"\".join(t))", "label": 0, "name1": "s273049490.py", "name2": "s080897842.py"}, {"id": 609, "code1": "a=b=0\nfor i in input():c=i==\"T\";d=a>0;a+=1-c-c*d;b+=c*(1-d)\nprint(a+b)", "code2": "# AOJ 1126: The Secret Number\n# Python3 2018.7.16 bal4u\n\nwhile True:\n\tW, H = map(int, input().split())\n\tif W == 0: break\n\td = [list(input()) for r in range(H)]\n\ta = [[0 for c in range(W)] for r in range(H)]\n\tans = 0\n\tfor r in range(H):\n\t\tfor c in range(W):\n\t\t\tif not d[r][c].isdigit(): continue\n\t\t\ta[r][c] = k = int(d[r][c])\n\t\t\tif c > 0 and d[r][c-1].isdigit():\n\t\t\t\ta[r][c] = a[r][c-1]*10 + k\n\t\t\tif r > 0 and d[r-1][c].isdigit():\n\t\t\t\tt = a[r-1][c]*10 + k\n\t\t\t\ta[r][c] = max(a[r][c], t)\n\t\t\tans = max(ans, a[r][c])\n\tprint(ans);\n\n", "label": 0, "name1": "s373261912.py", "name2": "s855726623.py"}, {"id": 306, "code1": "A, B, C = map(int, input().split())\n\n\nH = C-(A-B)\n\nif H < 0:\n    print(\"0\")\nelse:\n    print(H)\n\n\n", "code2": "a, b, c = map(int, input().split())\nans = c - (a - b)\n\nif ans >= 0:\n    print(ans)\nelse:\n    print(0)", "label": 1, "name1": "s336832003.py", "name2": "s855957951.py"}, {"id": 930, "code1": "n=int(input())\nmod=10**9+7\nfra=[1]*(n+2)\ninv=[1]*(n+2)\nt1=1\nt2=1\nfor i in range(1,n+2):\n    t1*=i\n    t1%=mod\n    t2*=pow(i,mod-2,mod)\n    t2%=mod\n    fra[i]=t1\n    inv[i]=t2\nans=fra[n]\nfor i in range((n+1)//2,n):\n    ans-=fra[i-1]*inv[2*i-n]*fra[i]%mod\n    ans%=mod\nprint(ans)", "code2": "# def makelist(n, m):\n# \treturn [[0 for i in range(m)] for j in range(n)]\n\nN = int(input())\na = [0] + list(map(int, input().split()))\n\ndef check(n):\n\tb = [False]*(len(a))\n\tfor i in range(1, len(a)):\n\t\tif a[i] >= n:\n\t\t\tb[i] = True\n\t\telse:\n\t\t\tb[i] = False\n\n\tr = int(1e9)\n\tl = int(1e9)\n\trb = b[N]\n\tlb = b[N]\n\tfor i in range(1, N):\n\t\tif lb == b[N-i]:\n\t\t\tl = i\n\t\t\tbreak\n\t\telse:\n\t\t\tlb = b[N-i]\n\t\t\n\tfor i in range(1, N):\n\t\tif rb == b[N+i]:\n\t\t\tr = i\n\t\t\tbreak\n\t\telse:\n\t\t\trb = b[N+i]\n\tif r == int(1e9) and l == int(1e9):\n\t\tif N % 2 == 1:\n\t\t\treturn b[N]\n\t\telse:\n\t\t\treturn not b[N]\n\telse:\n\t\tif r < l:\n\t\t\treturn rb\n\t\telse:\n\t\t\treturn lb\n\n# \u6761\u4ef6\u3092\u6e80\u305f\u3059\u6700\u5c0f\u306e\u5024\u3092\u8fd4\u3059\ndef binarySearch(small, big):\n\tmid = (big + small) // 2\n\tif big - small <= 1:\n\t\tif check(small): return small\n\t\telse:            return big\n\telse:\n\t\tif not check(mid):\n\t\t\treturn binarySearch(small, mid)\n\t\telse:\n\t\t\treturn binarySearch(mid, big)\n\nprint(binarySearch(2, 2*N-2))\n", "label": 0, "name1": "s299124610.py", "name2": "s773273342.py"}, {"id": 706, "code1": "a, b, c = map(int, input().split())\nans = c - (a - b)\n\nif ans >= 0:\n    print(ans)\nelse:\n    print(0)", "code2": "import sys\n#input = sys.stdin.readline\n\ndef inpl(): return list(map(int, input().split()))\nQ = int(input())\n \nMOD = 10**6 + 3\ndef cmb(n, r, mod):\n    if ( r<0 or r>n ):\n        return 0\n    \n    r = min(r, n-r)\n    return g1[n] * g2[r] * g2[n-r] % mod\n \nsize = MOD + 1\ng1, g2, inverse = [0]*size, [0]*size, [0]*size\n \ng1[:2] = [1, 1] # \u5143\u30c6\u30fc\u30d6\u30eb\ng2[:2] = [1, 1] #\u9006\u5143\u30c6\u30fc\u30d6\u30eb\ninverse[:2] = [0, 1] #\u9006\u5143\u30c6\u30fc\u30d6\u30eb\u8a08\u7b97\u7528\u30c6\u30fc\u30d6\u30eb\n\nfor i in range(2, size):\n    g1[i] =  ( g1[i-1] * i ) % MOD \n    inverse[i] = (-inverse[MOD % i] * (MOD//i) ) % MOD \n    g2[i] =  (g2[i-1] * inverse[i]) % MOD\n\nfor _ in range(Q):\n    x, d, n = inpl()\n    xd = x*inverse[d]%MOD\n    if d != 0:\n        if n < ((MOD-x)*inverse[d] + 1)%MOD:\n            n = n%MOD\n            print((g1[(xd + n - 1)%MOD] * g2[(xd-1)%MOD] * pow(d, n, MOD))%MOD)\n        else:\n            print(0)\n    else:\n        print(pow(x, n, MOD))", "label": 0, "name1": "s855957951.py", "name2": "s890996219.py"}, {"id": 53, "code1": "N = int(input())\nAs = list(map(int,input().split()))\ncounts = []\nnow = As[0]\ncount = 1\nfor a in range(1,len(As)):\n    if As[a]==now:\n        count+=1\n        if a == len(As)-1:\n            counts.append(count)\n    else:\n        counts.append(count)\n        count =1\n        now = As[a]\nprint(sum([i//2 for i in counts]))", "code2": "n = int(input())\na_tmp = input().split()\na = []\nans = 0\nfor _ in a_tmp:\n    a.append(int(_))\ni = 0\nsame = 1\nwhile i < n-1:\n    tmp = a[i]\n    i += 1\n    if a[i] == tmp:\n        same += 1\n        if same == 3:\n            ans += 1\n            same = 1\n    else:\n        if same >= 2:\n            ans += 1\n            same = 1\nif same >= 2:\n    ans += 1\n\nprint(ans)\n", "label": 1, "name1": "s736034553.py", "name2": "s356959326.py"}, {"id": 750, "code1": "i,o,t,j,l,s,z = map(int,input().split())\na = 2*(i//2+j//2+l//2)\nif i>0 and j>0 and l>0:\n    i,j,l = i-1,j-1,l-1\n    b = 2*(i//2+j//2+l//2)\n    print(o+max(a,b+3))\nelse:\n    print(o+a)\n", "code2": "import sys\ninput = sys.stdin.readline\na, b, x = [int(x) for x in input().split()]\nB = 1 + b // x\nif a == 0:\n    print(B)\nelif a % x == 0:\n    A = 1 + a // x\n    print(B - A + 1)\nelse:\n    A = 1 + a // x\n    print(B - A)\n", "label": 0, "name1": "s273049490.py", "name2": "s444272977.py"}, {"id": 150, "code1": "y = [True for i in range(250001)]\ny[0] = y[1] = False\nfor i in range(2, 500):\n    if y[i]:\n        for j in range(2, 250000 // i + 1):\n            y[i * j] = False\nwhile True:\n    n = int(input())\n    if n == 0:\n        break\n    print(y[n + 1 : n * 2 + 1].count(True))\n", "code2": "prime = [True for i in range(250001)]\nprime[0] = prime[1] = False\nfor i in range(2, 500):\n    if prime[i]:\n        for j in range(2, 250000 // i + 1):\n            prime[i * j] = False\n\nwhile True:\n    n = int(input())\n    if n == 0:\n        break\n    print(prime[n + 1 : n * 2 + 1].count(True))\n", "label": 1, "name1": "s889149636.py", "name2": "s672275091.py"}, {"id": 684, "code1": "l=[]\nwhile True:\n    tmp=map(int,raw_input().split())\n    if sum(tmp)==0:\n        break\n    l.append(tmp)\n\nfor n,x in l:\n    c=0\n    for i in range(1,n):\n        for j in range(i+1,n):\n            k=x-i-j\n            if j<k<=n:\n                c+=1\n    print c", "code2": "N,M = map(int,(input().split()))\nX = list(map(int,(input().split())))\nX.sort()\nif M > N:\n    dist = [X[i+1]-X[i] for i in range(M - 1)]\n    dist.sort(reverse = True)\n    del dist[0:N-1]\n    print(sum(dist))\nelse:\n print(0)", "label": 0, "name1": "s427641012.py", "name2": "s025338416.py"}, {"id": 651, "code1": "inf = 2**31\n\nn = int(raw_input())\nG = [[inf]*n for _ in range(n)]\nref = {}\ninputs = [map(int,raw_input().split()) for _ in range(n)]\nfor i in range(n): ref[inputs[i][0]] = i\nfor i in range(n):\n    for j in inputs[i][2:]:\n        G[i][ref[j]] = 1\n        \nfor k in range(n):\n    for i in range(n):\n        for j in range(n):\n            G[i][j] = min(G[i][j],G[i][k]+G[k][j])\n            \np = int(raw_input())\nfor loop in range(p):\n    s,d,v = map(int,raw_input().split())\n    dist = G[ref[s]][ref[d]]\n    print dist+1 if dist+1 <= v else \"NA\"", "code2": "# -*- coding: utf-8 -*-\nimport sys\nfrom sys import stdin\nimport math\n\nn, k = map(int, stdin.readline().split())\nw = list([int(stdin.readline().rstrip()) for i in range(n)])\n\ndef main2():\n  def is_ok():\n    cnt_track = w_tmp = 0\n    for w_i in w:\n      w_tmp += w_i\n      if w_tmp > m:\n        w_tmp = w_i\n        cnt_track += 1\n        if cnt_track >= k:\n          return 0\n    return 1\n\n  r = sum(w)\n  l = max(math.ceil(r/k),max(w))\n  while l < r:\n    m = (l + r) // 2\n    # print(\"%d %d %d \" % (l, r, m))\n    if is_ok():\n      r = m\n    else:\n      l = m + 1\n  print(r)\n\nif __name__ == '__main__':\n  main2()\n\n", "label": 0, "name1": "s378122232.py", "name2": "s518389793.py"}, {"id": 555, "code1": "import sys\nd={'A\\n':0,'B\\n':0,'AB\\n':0,'O\\n':0}\nfor e in sys.stdin:d[e.split(',')[1]]+=1\nfor b in d:print(d[b])\n", "code2": "n,k = map(int,input().split())\nprint(min(n%k,-((n%k)-k)))", "label": 0, "name1": "s566437610.py", "name2": "s413819466.py"}, {"id": 631, "code1": "from sys import stdin\n\n\ndef main():\n    input = lambda: stdin.readline()[:-1]\n    N = int(input())\n    A = list(map(int, input().split()))\n\n    A.sort(reverse=1)\n    d, m = divmod(N, 2)\n    n = [2] * (d + m)\n    n[-1], n[0] = n[-1] - m, 1\n    ans = 0\n    for i, k in enumerate(n):\n        ans += A[i] * k\n    print(ans)\n\n\nmain()\n", "code2": "n = int(input())\nsa,sb=[int(it) for it in input().split()]\nfor i in range(n-1):\n  a,b=[int(it) for it in input().split()]\n  r =  max( sa//a + (1 if sa%a!=0 else 0),sb//b+(1 if sb%b!=0 else 0) )\n  sa = r*a\n  sb = r*b\nprint (sa+sb)", "label": 0, "name1": "s775405634.py", "name2": "s718859988.py"}, {"id": 449, "code1": "m=10**9+7\ni=s=r=0\nf=1\ninput()\na=input().split()\nfor x in a:i+=1;s+=pow(i,m-2,m);r+=int(x)*~-s+int(a[-i])*s;f=f*i%m\nprint(r*f%m)", "code2": "n=int(input())\na=list(map(int,input().split()))\nf=1\nm=10**9+7\nfor i in range(1,n+1):\n    f=(f*i)%m\nc=[0]\nfor i in range(1,n+1):\n    c.append((c[-1]+f*pow(i,m-2,m))%m)\np=0\nfor i in range(n):\n    p=(p+(c[n-i]+c[i+1]-c[1])*a[i])%m\nprint(p)", "label": 1, "name1": "s072063122.py", "name2": "s106210362.py"}, {"id": 94, "code1": "n,k = map(int, input().split())\namari=n%k\nn=min(amari, k-amari)\nprint(n)", "code2": "a,b =  list(map(int,input().split()))\nprint(min(a%b,b-a%b))", "label": 1, "name1": "s328388206.py", "name2": "s156730538.py"}, {"id": 867, "code1": "# Edit: 2014/10/13\n# Lang: Python3\n# Time: 00.xxs\n\n# File: pc1503.py\n\nfrom functools import reduce\n\nif __name__ == \"__main__\":\n    n = int(input()) # 1<=n<=1,500\n    #n1500 = reduce(lambda x,y: x*y, range(2,1501))+2\n    n1500 = 48119977967797748601669900935813797818348080406726138081308559411630575189001095591292230585206733851868464009619343585194052091124618166270271481881393331431627962810299844149333789044689395510487167879769325303699470467829234399263326545652860748605075746366928323606645492277541120083438086727369377887676000211405318480244354207419604864176969950581435222198851194568984095705945549589054568321792338919149442985919957734792959402499096845643020401869381175603964424333222114125974374817804242633309769804293952870034619354125014210045647664063240162007560108665290568646128342557147350985358724154623253371867470765120422073867963935775258692109753041762094343569050497470353531764481503174750911858230906998361066084787758316110585736013365377431860738572261325738233656835271947352695180865573043834027955539012765489372645042504406597752357481931532872356635411224578334040522294746402829585458478708778346379431862368824819009177091444034885941394319343910223168655869761799669075059527608502465593181398566214786801211651657222004123456498258513120359126022843038535083709796101565934859483203933443308601475813108363074118562404412420191947127585482919172173045961122122701434297870691932154082986945954748251105782181586397275820342101470457300633590139512919549474113721711616912519714191760699935509810254849967087635936181176363954224186031346682928878492872249485456690138831610135377916327940503701400290125509132140782614640495733518048670983360134097860364762638658894873174499870133559364805443430831459505987809215393353387232078177562975021460595422358573128085417162336030235138652735438053034531962620811566019896879275257163988352090874930346115518331202927263708446729394381879888839549731876978682249320628599631628662375508826209854754631984276392670919216923002770077734756077549035942976209159416211581439461484509549370357486770276807687544580164314647595031368948490282897173328013518435758700056425922638411889496527975846052717958044813737086806600171993703579485864029383208714528950303253881360812631162134750100307772634337467012820470715650810714689905121432259528505483053930402217400686061612471659630192434864094539828085677465383026128353771071152304197549798870706139893609140045659756285435787771636258253666592102151236142132724425850991205720020493660580896600891888594659612927724357866265934517615841298789154462249169688860092640284756382431746120357767933119589280468687348061788072986362788582227019465263474828590646048451070702923434422714349595857654843699542321849363652767771978314681013589442955219879702008068934096624650625769705233333462826013860098698155180331145365652453482955497979915586438474687345677874451117702250441711504844638414485210092261397271970571029038581873069951161330495772310508760528249706514238384269808639507080418298318311361373628512041716415196868334254119137139589149597210032153545941114666530498906529240798164804007394775927836045668573993316428972539932745757171947402454257142633700815922407278403640595355142075599446056337986717212316223257763412164180899532722039383244462511410346646148863397237096276822656157561194665545757017429842404840309758925618650507921043007241637877939825811059339138925526124514467627126548126795078784022672860886251974581362141782786407402896309678008909663263987018538107050886193489012497405005820727271232733728141775132722013860591169620692789290456794698409808557447756701311883266010859016027592252397754508251628808293537776536569608111330584797160694847898923196743970244451842702266403326317319092117151143971679500042590269255093130215984418097418435474300467281949798227102529873732749027992079700287275900856241172902880909546551703263202853584498085358955307673717177961902081098618729046348849060249600000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000002\n    print(n1500)\n    for i in range(0,n):\n        print(i+2)", "code2": "a, b, c, x, y = [int(i) for i in input().strip().split(\" \")]\n\nz = min(x, y)\ntotal = 0\n\nif (a+b) > c*2:\n    total += c * 2 * z\nelse:\n    total += a * z + b * z\n\nif (a < c * 2):\n    total += (x-z) * a\nelse:\n    total += (x-z) * c * 2\n\nif (b < c * 2):\n    total += (y-z) * b\nelse:\n    total += (y-z) * c * 2\n\nprint(total)\n", "label": 0, "name1": "s021750176.py", "name2": "s005706927.py"}, {"id": 799, "code1": "mod=1000000007\nn=input()\na=map(int, raw_input().split())\nfac=[1]\nfor i in range(1, 100001):\n\tfac.append(fac[-1]*i%mod)\ninv=[0, 1]\nfor i in range(2, 100001):\n\tinv.append(-(mod/i)*inv[mod%i]%mod)\ninv_sum=[0]\nfor i in range(1, 100000):\n\tinv_sum.append((inv_sum[-1]+inv[i+1])%mod)\nresult=0\nfor i in range(n):\n\tresult+=(inv_sum[i]+1+inv_sum[n-i-1])*a[i]%mod\n\tresult%=mod\nprint result*fac[n]%mod\n", "code2": "import sys,queue,math,copy,itertools,bisect,collections\nfrom heapq import *\n\ndef main():\n    sys.setrecursionlimit(10**7)\n    INF = 10**18\n    MOD = 10**9 + 7\n    LI = lambda : [int(x) for x in sys.stdin.readline().split()]\n    NI = lambda : int(sys.stdin.readline())\n\n    N = NI()\n    root = [[] for _ in range(N)]\n    for _ in range(N-1):\n        a,b = LI()\n        root[a-1].append(b-1)\n        root[b-1].append(a-1)\n\n    node = [-1 for _ in range(N)]\n    q = []\n    q.append((0,0))\n    node[0] = 0\n    while q:\n        u,num = q.pop()\n        for v in root[u]:\n            if node[v] < 0:\n                node[v] = num+1\n                if v == N-1:\n                    q = []\n                    break\n                q.append((v,num+1))\n    c = node[N-1]\n    u = N-1\n    pu = 0\n    while c > (node[N-1])//2:\n        for v in root[u]:\n            if node[v] != c-1: continue\n            pu = u\n            u = v\n            c -= 1\n            break\n\n    p = u\n    node = [-1 for _ in range(N)]\n    node[p] = 0\n    node[pu] = 1\n    cnt = [0,0]\n    for i in range(2):\n        if i == 0:\n            q.append(p)\n        else:\n            q.append(pu)\n        while q:\n            u = q.pop()\n            for v in root[u]:\n                if node[v] < 0:\n                    node[v] = i\n                    q.append(v)\n                    cnt[i] += 1\n    if cnt[0] > cnt[1]:\n        print('Fennec')\n    else:\n        print('Snuke')\n\nif __name__ == '__main__':\n    main()", "label": 0, "name1": "s393644468.py", "name2": "s905380406.py"}, {"id": 461, "code1": "N = int(input())\nimport sys\nsys.setrecursionlimit(N+10)\n\nes = [[] for _ in range(N)]\nfor i in range(N-1):\n    a,b = map(int, input().split())\n    a,b = a-1, b-1\n    es[a].append(b)\n    es[b].append(a)\n\n\"\"\"\n\u76f8\u624b\u306e\u53d6\u308c\u308b\u30de\u30b9\u76ee\u3092\u6e1b\u3089\u3059\u3088\u3046\u306b\u3068\u308b\u3068\u3088\u3044\n\u76f8\u624b\u3088\u308a\u305d\u306e\u30de\u30b9\u306b\u8fd1\u3051\u308c\u3070\u305d\u306e\u30de\u30b9\u3092\u53d6\u5f97\u3067\u304d\u308b\n\u30d5\u30a7\u30cd\u30c3\u30af\u304f\u3093\u3001\u3059\u306c\u3051\u541b\u306b\u3064\u3044\u3066\u521d\u671f\u5730\u70b9\u304b\u3089\u305d\u308c\u305e\u308c\u3078\u306e\u8ddd\u96e2\u304c\u5fc5\u8981\n\"\"\"\ndef solve(now, depth, depth_list, es, visited):\n    visited[now] = True\n    depth_list[now] = depth\n    for next in es[now]:\n        if visited[next] == False:            \n            solve(next, depth+1, depth_list, es, visited)\n\ndepth_list_F = [0] * N\nvisited_F = [False] * N\nsolve(0, 0, depth_list_F, es, visited_F)\n\ndepth_list_S = [0] * N\nvisited_S = [False] * N\nsolve(N-1, 0, depth_list_S, es, visited_S)\n\ncnt_F = cnt_S = 0\nfor f,s in zip(depth_list_F, depth_list_S):\n    if f <= s:\n        cnt_F += 1 # \u30d5\u30a7\u30cd\u30c3\u30af\u541b\u304b\u3089\u59cb\u3081\u308b\u306e\u3067\u540c\u3058\u8ddd\u96e2\u306a\u3089\u30d5\u30a7\u30cd\u30c3\u30af\u541b\u304c\u3068\u308b\n    else:\n        cnt_S += 1\n\nif cnt_F > cnt_S:\n    print(\"Fennec\")\nelse:\n    print(\"Snuke\")", "code2": "import sys\ninput = lambda : sys.stdin.readline().rstrip()\nsys.setrecursionlimit(max(1000, 10**9))\nwrite = lambda x: sys.stdout.write(x+\"\\n\")\n\n\n### \u6728\u306e\u8aad\u307f\u8fbc\u307f tree\n\n# \u30b5\u30a4\u30ba\u304c\u5927\u304d\u3044\u3068defaultdict\u304c\u65e9\u3044(for\u6587\u3092\u66f8\u304b\u306a\u304f\u3066\u6e08\u3080)\nfrom collections import defaultdict\nn = int(input())\nns = [[] for _ in range(n)]\nfor _ in range(n-1):\n    u,v = map(int, input().split())\n    u -= 1\n    v -= 1\n    ns[u].append(v)\n    ns[v].append(u)\n    \n### BFS \u5e45\u512a\u5148\u63a2\u7d22\n\ndef bfs(start):\n    from collections import deque\n    q = deque([start])\n    seen = [None] * n\n    seen[start] = 0\n    while q:\n        u = q.pop()\n        d = seen[u]\n        for v in ns[u]:\n            if seen[v] is None:\n                seen[v] = d + 1\n                q.appendleft(v)\n    return seen\nd1 = bfs(0)\nd2 = bfs(n-1)\nv = sum(d1[i]<=d2[i] for i in range(n))\nv2 = n-v\nif v>v2:\n    print(\"Fennec\")\nelse:\n    print(\"Snuke\")", "label": 1, "name1": "s940891501.py", "name2": "s007019675.py"}, {"id": 189, "code1": "n = int(input())\nS = list(map(int, input().split()))\ns = sorted(S, reverse=True)\n\nif n %2 ==0:\n  l = n/2\n  m = s[0]\n  s = s[1:int(l)]\n  p = sum(s)\n  o = p*2 + m \n  print(o)\nelse:\n  l = (n+1)/2\n  m = s[0]\n  q = s[int(l)-1]\n  s = s[1:int(l-1)]\n  p = sum(s)\n  o = p*2 + m +q\n  print(o)\n  ", "code2": "from sys import stdin\n\n\ndef main():\n    input = lambda: stdin.readline()[:-1]\n    N = int(input())\n    A = list(map(int, input().split()))\n\n    A.sort(reverse=1)\n    d, m = divmod(N, 2)\n    n = [2] * (d + m)\n    n[-1], n[0] = n[-1] - m, 1\n    ans = 0\n    for i, k in enumerate(n):\n        ans += A[i] * k\n    print(ans)\n\n\nmain()\n", "label": 1, "name1": "s142787879.py", "name2": "s775405634.py"}, {"id": 668, "code1": "N = int(input())\nA = [int(_) - 1 for _ in input().split()]\nans = 0\nfor i in range(N):\n    if i < A[i] and A[A[i]] == i:\n        ans += 1\nprint(ans)\n", "code2": "a,b,c,k=map(int,input().split())\nc_=max(0,k-a-b)\na_=min(a,k)\nprint(a_-c_)", "label": 0, "name1": "s038697693.py", "name2": "s535747622.py"}, {"id": 962, "code1": "n, m, k = map(int, input().split())\n \nans = \"No\"\nfor i in range(n + 1):\n    for j in range(m + 1):\n        if i * (m - j) + j * (n - i) == k:\n            ans = \"Yes\"\nprint(ans)", "code2": "import bisect\nn=int(input())\na=list(map(int,input().split()))\nb=list(map(int,input().split()))\nc=list(map(int,input().split()))\na.sort()\nb.sort()\nc.sort()\nans=0\nfor k in b:\n    i=bisect.bisect_left(a,k)\n    j=bisect.bisect_right(c,k)\n    if 0<i and j!=len(c):\n        ans+=i*(n-j)\nprint(ans)", "label": 0, "name1": "s425111362.py", "name2": "s334484624.py"}, {"id": 212, "code1": "n = int(input())\nsa,sb=[int(it) for it in input().split()]\nfor i in range(n-1):\n  a,b=[int(it) for it in input().split()]\n  r =  max( sa//a + (1 if sa%a!=0 else 0),sb//b+(1 if sb%b!=0 else 0) )\n  sa = r*a\n  sb = r*b\nprint (sa+sb)", "code2": "N = int(input())\nL = []\nfor i in range(N):\n  L.append(list(map(int,input().split())))\nA = 1\nB = 1\nfor i in range(N):\n  k = max(-(-A//L[i][0]),-(-B//L[i][1]))\n  A = L[i][0]*k\n  B = L[i][1]*k\nprint(A+B)", "label": 1, "name1": "s718859988.py", "name2": "s422928466.py"}, {"id": 197, "code1": "import math\nN = int(input())\nA = list(map(int,input().split()))\nA.sort(reverse = True)\n\nans = 0\nfor i in range(1,N):\n  a = math.floor(i/2)\n  ans += A[a]\n    \nprint(ans)", "code2": "import heapq\n\nn=int(input())\na=[-int(x) for x in input().split()]\n\nheapq.heapify(a)\nans=heapq.heappop(a)\nn-=1\n\nwhile True:\n    n-=1\n    if n==0:\n        break\n    temp=heapq.heappop(a)\n    ans+=temp\n    n-=1\n    if n==0:\n        break\n    ans+=temp\n\n\n\nprint(-ans)", "label": 1, "name1": "s069304778.py", "name2": "s184954456.py"}, {"id": 789, "code1": "def inpl(): return [int(i) for i in input().split()]\nclass UnionFind():\n    def __init__(self, num):\n        self.par = [-1 for _ in range(num)]\n    \n    def find(self, x):\n        if self.par[x] < 0:\n            return x\n        else:\n            x = self.par[x]\n            return self.find(x)\n    \n    def union(self, x, y):\n        rx = self.find(x)\n        ry = self.find(y)\n        if rx != ry:\n            if self.par[rx] < self.par[ry]:\n                self.par[ry] = rx\n            if self.par[rx] > self.par[ry]:\n                self.par[rx] = ry\n            else:\n                self.par[rx] -= 1\n                self.par[ry] = rx\n        return\n\nN, K, L = inpl()\nufk = UnionFind(N)\nfor i in range(K):\n    p, q = inpl()\n    ufk.union(p-1, q-1)\n\nufr = UnionFind(N)\nfor i in range(L):\n    r, s = inpl()\n    ufr.union(r-1, s-1)\n\nfrom collections import defaultdict\nans = defaultdict(lambda: 0)\nfor i in range(N):\n    ans[ufk.find(i),ufr.find(i)] +=1\nAns = [0 for _ in range(N)]\nfor i in range(N):\n    Ans[i] = ans[ufk.find(i),ufr.find(i)]\nprint(*Ans)", "code2": "# coding:utf-8\n\nimport sys\n\n\ninput = sys.stdin.readline\nINF = float('inf')\nMOD = 10 ** 9 + 7\n\n\ndef inpl(): return list(map(int, input().split()))\n\n\n# a\u306ep\u4e57\u3092\u6c42\u3081\u308b\u30a2\u30eb\u30b4\u30ea\u30ba\u30e0\n# MOD\u7248\ndef pow_mod(a, p):\n    if p == 0: return 1\n\n    if p % 2 == 0:\n        half_p = p // 2\n        half = pow_mod(a, half_p)\n        return half * half % MOD\n    else:\n        return a * pow_mod(a, p - 1) % MOD\n\n\ndef solve(N, A):\n    # \u968e\u4e57N!\u3092\u6c42\u3081\u308b\n    fact = [1] * N\n    for i in range(1, N):\n        fact[i] = fact[i - 1] * (i + 1) % MOD\n\n    # 1/N!\u306e\u9006\u5143\u3092\u6c42\u3081\u308b\n    fact_inv = [1] * N\n    fact_inv[-1] = pow_mod(fact[-1], MOD - 2)\n    for i in range(N - 1, 0, -1):\n        tmp = fact_inv[i] * (i + 1)\n        tmp %= MOD\n        fact_inv[i - 1] = tmp\n\n    # 1/k\u3092\u6c42\u3081\u308b\n    inv = [1]\n    for i in range(1, N):\n        inv.append((fact[i - 1] * fact_inv[i]) % MOD)\n\n    # 1/k\u306e\u7d2f\u7a4d\u548c\u3092\u6c42\u3081\u308b\n    inv_sum = [1]\n    for i in range(1, N):\n        inv_sum.append((inv_sum[-1] + inv[i]) % MOD)\n\n    # \u7d2f\u7a4d\u548c\u306e\u7d50\u679c\u3092\u4fc2\u6570\u3068\u3057\u3066Ai\u306b\u639b\u3051\u3066\u3001\u52a0\u7b97\u3059\u308b\n    ans = 0\n    for i in range(N):\n        ans += A[i] * (inv_sum[i] + inv_sum[N - 1 - i] - 1)\n        ans %= MOD\n\n    # ans\u306bN!\u3092\u639b\u3051\u305f\u3082\u306e\u3092\u8fd4\u3059\n    return ans * fact[-1] % MOD\n\n\nN = int(input())\nA = inpl()\nprint(solve(N, A))\n", "label": 0, "name1": "s236967102.py", "name2": "s535253599.py"}, {"id": 283, "code1": "a, b = [], []\nappear_count = [0] * 4\nfor _ in range(3):\n    _a, _b = map(int, raw_input().split())\n    appear_count[_a - 1] += 1\n    appear_count[_b - 1] += 1\nif max(appear_count) == 3:\n    print \"NO\"\nelse:\n    print \"YES\"", "code2": "path_list = [0, 0, 0, 0]\ncount = 0\nfor _ in range(3):\n    a, b = map(int, input().split())\n    path_list[a-1] += 1\n    path_list[b-1] += 1\n\nfor path in path_list:\n    if path >= 3:\n        count += 1\nif count == 1:\n    print('NO')\nelse:\n    print('YES')", "label": 1, "name1": "s562629657.py", "name2": "s847721858.py"}, {"id": 634, "code1": "n = int(input())\nt = list(map(int, input().split()))\na = list(map(int, input().split()))\nmod = 10 ** 9 + 7\n\nans, frag = 1, 0\nfor i in range(n):\n    if t[i] == a[i] == t[-1] == a[0]:\n        frag = 1\n    if 0 < i < n - 1 and t[i - 1] == t[i] and a[i] == a[i + 1]:\n        ans = ans * min(t[i], a[i]) % mod\nprint(ans * frag)\n", "code2": "n = int(input())\nsa,sb=[int(it) for it in input().split()]\nfor i in range(n-1):\n  a,b=[int(it) for it in input().split()]\n  r =  max( sa//a + (1 if sa%a!=0 else 0),sb//b+(1 if sb%b!=0 else 0) )\n  sa = r*a\n  sb = r*b\nprint (sa+sb)", "label": 0, "name1": "s894086979.py", "name2": "s718859988.py"}, {"id": 671, "code1": "import re\n\ns = input().replace('?', '.')\nt = input()\n\nif len(t)>len(s):\n  print('UNRESTORABLE')\nelif len(t)==len(s):\n  if re.match(s, t):\n    print(t)\n  else:\n    print('UNRESTORABLE')\nelse:\n  for i in range(len(s)-len(t)+1):\n    check_str = s[len(s)-len(t)-i:len(s)-i]\n    if re.match(check_str, t):\n      break\n\n  if i==len(s)-len(t):\n    print('UNRESTORABLE')\n  else:\n    ans = s[:len(s)-len(t)-i] + t + s[len(s)-i:]\n    ans = ans.replace('.', 'a')\n    print(ans)", "code2": "a,b,c,k=map(int,input().split())\nc_=max(0,k-a-b)\na_=min(a,k)\nprint(a_-c_)", "label": 0, "name1": "s389752250.py", "name2": "s535747622.py"}, {"id": 586, "code1": "def f(n, s):\n    md = 10 ** 9 + 7\n    dp = [1] * n\n    for i in range(n - 1):\n        if s[i] == \"<\":\n            L = dp[0]\n            for dpi in range(1, n - i - 1):\n                dp[dpi] = L = (dp[dpi] + L) % md\n            dp = dp[:-1]\n        else:\n            R = dp[-1]\n            for dpi in range(n - i - 2, 0, -1):\n                dp[dpi] = R = (dp[dpi] + R) % md\n            dp = dp[1:]\n    print(dp[0])\n\n\nn = int(input())\ns = input()\nf(n, s)\n", "code2": "A,B,C=map(int,input().split())\nans = 1\nif (A%2 != B%2) and (A%2 == C%2):\n  A += 1\n  C += 1\nelif (A%2 == B%2) and (A%2 != C%2):\n  A += 1\n  B += 1\nelif (A%2 != B%2) and (B%2 == C%2):\n  C += 1\n  B += 1\nelse:\n  ans = 0\nL = [A,B,C]\nL.sort()\nans += (L[2]-L[1])//2 + (L[2]-L[0])//2\nprint( ans )\n", "label": 0, "name1": "s415178183.py", "name2": "s612094036.py"}, {"id": 907, "code1": "x = int(input())\ndef is_prime(x):\n    if x <= 1:\n        return False\n    for i in range(2, int(x**0.5)+1):\n        if x % i == 0:\n            return False\n    return True\n\nwhile(not is_prime(x)):\n    x += 1\nprint(x)\n", "code2": "from collections import Counter,defaultdict,deque\nfrom heapq import heappop,heappush\nfrom bisect import bisect_left,bisect_right \nimport sys,math,itertools,fractions,pprint\nsys.setrecursionlimit(10**8)\nmod = 10**9+7\nINF = float('inf')\ndef inp(): return int(sys.stdin.readline())\ndef inpl(): return list(map(int, sys.stdin.readline().split()))\n\ns = [list(input()) for _ in range(3)]\nfor i in range(3):\n    s[i] = [ord(x) - ord('a') for x in s[i]][::-1]\nnow = 0\nwhile True:\n    if s[now] == []:\n        print(chr(ord('A') + now))\n        break\n    now = s[now].pop()\n    ", "label": 0, "name1": "s723102572.py", "name2": "s332087520.py"}, {"id": 906, "code1": "N = int(input())\nanswer = N\nwhile 1:\n    if all([answer%n for n in range(2,answer)]):\n        print(answer)\n        exit()\n    else:\n        answer += 1\n", "code2": "S = [input() for i in range(3)]\ncnt = [0, 0, 0]\nlimit = [len(S[i]) for i in range(3)]\npoint = 0\nNUM = \"ABC\"\nwhile cnt[point] != limit[point]:\n  if S[point][cnt[point]] == 'a':\n    cnt[point] += 1\n    point = 0\n  elif S[point][cnt[point]] == 'b':\n    cnt[point] += 1\n    point = 1\n  elif S[point][cnt[point]] == 'c':\n    cnt[point] += 1\n    point = 2\nprint(NUM[point])", "label": 0, "name1": "s134494492.py", "name2": "s464702195.py"}, {"id": 756, "code1": "h, w = map(int, input().split())\na = [list(input()) for _ in range(h)]\nu = [[\".\"] * w for _ in range(h)]\nv = [[\".\"] * w for _ in range(h)]\nfor i in range(h):\n    for j in range(w):\n        if a[i][j] == \"#\":\n            u[i][j], v[i][j] = \"#\", \"#\"\n        else:\n            if i == 0:\n                u[i][j] = \"#\"\n            elif i == h - 1:\n                v[i][j] = \"#\"\n            else:\n                if j % 2 == 0:\n                    u[i][j] = \"#\"\n                else:\n                    v[i][j] = \"#\"\nfor s in u:\n    print(\"\".join(s))\nprint()\nfor t in v:\n    print(\"\".join(t))", "code2": "input()\ns = sorted(map(int, raw_input().split()))\nfor i in s:\n    print i,", "label": 0, "name1": "s080897842.py", "name2": "s503541745.py"}, {"id": 873, "code1": "a, b, c, x, y = [int(i) for i in input().strip().split(\" \")]\n\nz = min(x, y)\ntotal = 0\n\nif (a+b) > c*2:\n    total += c * 2 * z\nelse:\n    total += a * z + b * z\n\nif (a < c * 2):\n    total += (x-z) * a\nelse:\n    total += (x-z) * c * 2\n\nif (b < c * 2):\n    total += (y-z) * b\nelse:\n    total += (y-z) * c * 2\n\nprint(total)\n", "code2": "a,b=input().split()\nprint(\"H\" if a == \"H\" and b == \"H\" or a == \"D\" and b == \"D\" else \"D\")", "label": 0, "name1": "s005706927.py", "name2": "s207996026.py"}, {"id": 406, "code1": "n = int(input())\ndat = list(map(int,input().split()))\n\ndat = [0] + dat + [0]\ntotal = 0\ncur = 0\nfor i in range(n + 2):\n    total += abs(cur - dat[i])\n    cur = dat[i]\ntotal += abs(cur)\ncur = 0\nfor i in range(n):\n    j = i + 1\n    if dat[j-1] < dat[j] < dat[j+1]:\n        # \u9593\u306b\u631f\u307e\u308c\u3066\u3044\u308b\u30d1\u30bf\u30fc\u30f3\uff11\n        #print(\"pat1\")\n        print(total)\n    elif dat[j-1] > dat[j] > dat[j+1]:\n        # \u9593\u306b\u631f\u307e\u308c\u3066\u3044\u308b\u30d1\u30bf\u30fc\u30f32\n        #print(\"pat2\")\n        print(total)\n    else:\n        # \u3053\u306e\u5834\u5408\u306f\u9593\u306b\u631f\u307e\u308c\u3066\u3044\u306a\u3044\n        #print(\"{0} {1} {2}\".format(total, abs(dat[j-1] -dat[j]) , abs(dat[j-1] -dat[j+1])))\n        print(total - abs(dat[j-1] -dat[j]) - abs(dat[j] -dat[j+1]) + abs(dat[j-1] - dat[j+1]))\n", "code2": "n = int(input())\na = list(map(int, input().split()))\na.insert(n,0)\na.insert(0,0)\nsum = 0\nfor i in range(n+1):\n    sum += abs(a[i+1] -a[i])\nfor i in range(n):\n    print(sum - abs(a[i+1] - a[i]) - abs(a[i+2] - a[i+1]) + abs(a[i+2] - a[i]))", "label": 1, "name1": "s576885295.py", "name2": "s465741499.py"}, {"id": 967, "code1": "n,c=map(int,input().split())\nd=[list(map(int,input().split()))for _ in range(c)]\ncc=[list(map(int,input().split()))for _ in range(n)]\nans=10**15\ncnt=[[0]*c for _ in range(3)]\nfor i in range(n):\n\tfor j in range(n):\n\t\tcnt[(i+j)%3][cc[i][j]-1]+=1\nfor i in range(c):\n\tfor j in range(c):\n\t\tfor k in range(c):\n\t\t\tpre_ans=0\n\t\t\tif i==j or j==k or k==i:\n\t\t\t\tcontinue\n\t\t\tfor l in range(3):\n\t\t\t\tfor m in range(c):\n\t\t\t\t\tif l%3==0 and m!=i:\n\t\t\t\t\t\tpre_ans+=cnt[l][m]*d[m][i]\n\t\t\t\t\telif l%3==1 and m!=j:\n\t\t\t\t\t\tpre_ans+=cnt[l][m]*d[m][j]\n\t\t\t\t\telif l%3==2 and m!=k:\n\t\t\t\t\t\tpre_ans+=cnt[l][m]*d[m][k]\n\t\t\tans=min(ans,pre_ans)\nprint(ans)", "code2": "# coding: utf-8\n# Your code here!\nn,a,b=map(int,input().split())\nh=[]\nfor i in range(n):\n    x=int(input())\n    h.append(x)\n\ndef check(t):\n    c=0\n    for i in range(n):\n        c+=1+(max(0,h[i]-b*t)-1)//(a-b)\n    return t>=c\n\nl=0\nr=3+max(h)//b\nwhile r-l>1:\n    mid=(r-l)//2+l\n    if check(mid):\n        r=mid\n    else:\n        l=mid\nans=l\nif check(r):\n    ans=r\nprint(ans)\n\n", "label": 0, "name1": "s044679078.py", "name2": "s031897610.py"}, {"id": 135, "code1": "int_list = list(map(int, input().split(' ')))\n\nmax_int = max(int_list)\n\ncnt = 0\nfor i in range(3):\n    if i < max_int:\n        cnt_tmp = (max_int - int_list[i]) // 2\n        int_list[i] += 2 * cnt_tmp\n        cnt += cnt_tmp\n\nmin_int = min(int_list)\nint_list2 = sorted([i - min_int for i in int_list])\n\nif int_list2 == [0, 0, 0]:\n    print(cnt)\nelif int_list2 == [0, 0, 1]:\n    print(cnt + 1)\nelse:\n    print(cnt + 2)", "code2": "A,B,C=map(int,input().split())\nans = 1\nif (A%2 != B%2) and (A%2 == C%2):\n  A += 1\n  C += 1\nelif (A%2 == B%2) and (A%2 != C%2):\n  A += 1\n  B += 1\nelif (A%2 != B%2) and (B%2 == C%2):\n  C += 1\n  B += 1\nelse:\n  ans = 0\nL = [A,B,C]\nL.sort()\nans += (L[2]-L[1])//2 + (L[2]-L[0])//2\nprint( ans )\n", "label": 1, "name1": "s608249305.py", "name2": "s612094036.py"}, {"id": 398, "code1": "input()\ns = sorted(map(int, raw_input().split()))\nfor i in s:\n    print i,", "code2": "raw_input()\nx = ' '.join(sorted(raw_input().split(), key =int))\nprint x", "label": 1, "name1": "s503541745.py", "name2": "s024577141.py"}, {"id": 328, "code1": "import sys\ndef input(): return sys.stdin.readline().strip()\n\n\ndef main():\n    a, b, c = map(int, input().split())\n    m = max(a, b, c)\n    print(a + b + c - m)\n\n\nif __name__ == \"__main__\":\n    main()\n", "code2": "a, b, c = map(int, input().split())\nprint(min(a + b, a + c, b + c))", "label": 1, "name1": "s149362178.py", "name2": "s641848335.py"}, {"id": 40, "code1": "while(1):\n    n = int(input())\n    if n == 0:\n        break\n    s = [float(i) for i in input().split()]\n    m = sum(s)/n\n    a = (sum([(i- m)**2 for i in s])/n)**0.5\n    print(\"{:.8f}\".format(a))\n", "code2": "while True:\n    n=int(input())\n    if n == 0:\n        break\n    a=list(map(int, input().split()))\n    m=sum(a)/n\n    std=0\n    for i in range(n):\n       std+=(a[i]-m)**2\n    std/=n\n    print(std**0.5)\n    \n", "label": 1, "name1": "s123853064.py", "name2": "s611963790.py"}, {"id": 238, "code1": "import math, sys\n\ndef loadable(w, n, k, p, wsum):\n    wait = 0\n    for i in range(n):\n        wait += w[i]\n        wsum -= w[i]\n        if wait > p:\n            k -= 1\n            wait = w[i]\n            if k == 0 or p < wsum / k:\n                return False\n    return True\n\nn, k = map(int, sys.stdin.readline().split())\nw = [int(sys.stdin.readline()) for _ in range(n)]\n\nwsum = sum(w)\n\np = max(int(math.ceil(wsum / k)), max(w))\npre_f = p -1\npre_s = None\n\nwhile True:\n    if loadable(w, n, k, p, wsum):\n        pre_s = p\n    else:\n        pre_f = p\n\n    if pre_s != None and pre_s - pre_f == 1:\n            break\n    \n    if pre_s:\n        p = int((pre_s + pre_f) / 2)\n    else:\n        p = math.ceil(p * 1.01)\n    \nprint(pre_s)", "code2": "\n\ndef p(k,w,maxP):\n    count = 1\n    tmpWeight = 0\n    for x in w:\n        if tmpWeight+x <= maxP:\n            tmpWeight += x\n        else:\n            count += 1\n            if count > k :\n                return False\n            tmpWeight = x\n    \n\n    return True\n\n\n\n\nn,k = map(int,input().split())\n\n\nw = []\n\nfor _ in range(n):\n    w.append((int)(input()))\nrangeMax = sum(w)\nrangeMin = max(w)\nrangeMid = 0\nwhile rangeMin < rangeMax:\n    rangeMid = (rangeMax + rangeMin)//2\n    '''print(p(k,w,rangeMid))\n    print(p(k,w,rangeMid+1))\n    print(\"---\")\n    '''\n    if p(k,w,rangeMid) == True:\n        rangeMax = rangeMid\n    else:\n        rangeMid += 1\n        rangeMin = rangeMid\n\nprint(rangeMid)", "label": 1, "name1": "s671645015.py", "name2": "s671940499.py"}, {"id": 852, "code1": "data = []\ntmp = []\nans = []\n\ndef pushAns(d):\n    for j in range(2):\n        ans.append((d[0][0],d[0][1]))\n        d.pop(0)    \n\nfor i in range(24):\n    a,b = (float(x) for x in input().split())\n    tmp.append((a,b))\n    if (i + 1) % 8 == 0:\n        tmp.sort(key=lambda x:x[1])\n        pushAns(tmp)\n        data.extend(tmp)\n        tmp.clear()\n        \ndata.sort(key=lambda x:x[1])\npushAns(data)\n\nfor i in range(8):\n    print(int(ans[i][0]),ans[i][1])\n", "code2": "N, M = map(int, input().split())\n\nAC_count = 0\nWA_count = 0\nWA_count_dict = {}\nis_not_AC = {}\n\nfor m in range(M):\n    p, S = input().split()\n    p = int(p)\n    \n    if p not in is_not_AC.keys():\n        is_not_AC[p] = True\n        WA_count_dict[p] = 0\n        \n    if is_not_AC[p]:\n        if S==\"WA\":\n            WA_count_dict[p] += 1\n        else:\n            AC_count += 1\n            is_not_AC[p] = False\n            \nfor k in is_not_AC.keys():\n    if is_not_AC[k] == False:\n        WA_count += WA_count_dict[k]\n\nprint(AC_count, WA_count)", "label": 0, "name1": "s435730800.py", "name2": "s383689589.py"}, {"id": 491, "code1": "A, B, C = map(int, input().split())\nprint('Yes' if len(set([A, B, C])) == 2 else 'No')", "code2": "A, B, C = map(int, input().split())\npairs = 0\nif (A==B):\n    pairs += 1\nif (B==C):\n    pairs += 1\nif (A==C):\n    pairs += 1\nif (pairs==1):\n    print(\"Yes\")\nelse:\n    print(\"No\")", "label": 1, "name1": "s278209661.py", "name2": "s874780976.py"}, {"id": 523, "code1": "n,a,b = map(int, input().split())\nXs = list(map(int, input().split()))\n\nds = [0] * (n+10)\nfor i in range(n-1):\n    cost1 = a*(Xs[i+1] - Xs[i])\n    cost2 = b\n    ds[i+1] = ds[i] + min(cost1, cost2)\nprint(ds[n-1])", "code2": "n=int(input())\na=list(map(int,input().split()))\nans=0\nfor i in range(n-1):\n    if a[i]==a[i+1]:\n        a[i+1]=-1\n        ans+=1\nprint(ans)", "label": 0, "name1": "s039990138.py", "name2": "s300532690.py"}, {"id": 735, "code1": "x, y = map(int, input().split())\ncnt = 1\nwhile True:\n    if x > y:\n        print(cnt - 1)\n        exit()\n    else:\n        x *= 2\n        cnt += 1\n", "code2": "from heapq import heappush, heappop\nimport sys\nfrom typing import List, Tuple\n\n\nif __name__ == \"__main__\":\n    V, E, r = map(lambda x: int(x), input().split())\n\n    edges: List[List[Tuple[int, int]]] = [[] for _ in range(V)]\n    dists = [sys.maxsize for _ in range(V)]\n    dists[r] = 0\n\n    for _ in range(E):\n        s, t, dist = map(lambda x: int(x), input().split())\n        edges[s].append((t, dist))\n\n    que: List[Tuple[int, int]] = []  # (dist, vertex)\n    heappush(que, (0, r))\n\n    while que:\n        dist, vertex = heappop(que)\n        for to, cost in edges[vertex]:\n            if cost + dist < dists[to]:\n                dists[to] = cost + dist\n                heappush(que, (cost + dist, to))\n\n    for dist in dists:\n        if sys.maxsize == dist:\n            print(\"INF\")\n        else:\n            print(dist)\n\n", "label": 0, "name1": "s788055694.py", "name2": "s404691730.py"}, {"id": 691, "code1": "a, b = [], []\nappear_count = [0] * 4\nfor _ in range(3):\n    _a, _b = map(int, raw_input().split())\n    appear_count[_a - 1] += 1\n    appear_count[_b - 1] += 1\nif max(appear_count) == 3:\n    print \"NO\"\nelse:\n    print \"YES\"", "code2": "class Unionfind:\n     \n    def __init__(self,n):\n        self.uf = [-1]*n\n \n    def find(self,x):\n        if self.uf[x] < 0:\n            return x\n        else:\n            self.uf[x] = self.find(self.uf[x])\n            return self.uf[x]\n \n    def same(self,x,y):\n        return self.find(x) == self.find(y)\n \n    def union(self,x,y):\n        x = self.find(x)\n        y = self.find(y)\n        if x == y:\n            return False\n        if self.uf[x] > self.uf[y]:\n            x,y = y,x\n        self.uf[x] += self.uf[y]\n        self.uf[y] = x\n        return True\n \n    def size(self,x):\n        x = self.find(x)\n        return -self.uf[x]\n\nn,m = map(int,input().split())\n\nu = Unionfind(n)\ncount = 0\nfor i in range(m):\n    a,b = map(int,input().split())\n    a -= 1\n    b -= 1\n    u.union(a,b)\n\ns = set()\nfor i in range(n):\n    s.add(u.find(i))\nprint(len(s)-1)", "label": 0, "name1": "s562629657.py", "name2": "s213272363.py"}, {"id": 481, "code1": "N,M=map(int,input().split())\ngraph=[[] for _ in range(N)]\nfor _ in range(M):\n    a,b=map(int,input().split())\n    graph[a-1].append(b-1)\n    graph[b-1].append(a-1)\n\nvisited=[False]*N\nvisited[0]=True\n\ndef dfs(v,N,visited):\n    if all(visited):\n        return 1\n    \n    ret=0\n    for new_v in graph[v]:\n        if visited[new_v]:\n            continue\n        \n        visited[new_v]=True\n        ret+=dfs(new_v,N,visited)\n        visited[new_v]=False\n    \n    return ret\n\nprint(dfs(0,N,visited))", "code2": "# -*- coding: utf-8 -*-\nn,m = list(map(int,input().split()))\nab = [list(map(int,input().split())) for i in range(m)]\n\n#\u9006\u9806\u306b\u3057\u305f\u3082\u306e\u8ffd\u52a0\nab += [[b,a] for a,b in ab]\n\n#\u8fbaid\u4ed8\u304d\u3067\u3001id\u304cfrom,abi[from]=[to1,to2,...] \u306e\u30ea\u30b9\u30c8\nabi = [[] for _ in range(n+1)]\nfor i,(a,b) in enumerate(ab):\n    abi[a].append(b)\n\n\n\n#\u518d\u8d77\u306elimit\u3092\u4e0a\u3052\u308b\nimport sys\nsys.setrecursionlimit(4100000)\n\ndef dfs(idx=1,visitted=[1],cnt=1):\n    ret = 0\n    if cnt==n:\n        return 1\n    for to in abi[idx]:\n        if to not in visitted:\n            ret += dfs(to,visitted+[to],cnt+1)\n    return ret\nprint(dfs())", "label": 1, "name1": "s866159978.py", "name2": "s912005528.py"}, {"id": 52, "code1": "N = int(input())\nAs = list(map(int,input().split()))\ncounts = []\nnow = As[0]\ncount = 1\nfor a in range(1,len(As)):\n    if As[a]==now:\n        count+=1\n        if a == len(As)-1:\n            counts.append(count)\n    else:\n        counts.append(count)\n        count =1\n        now = As[a]\nprint(sum([i//2 for i in counts]))", "code2": "from itertools import groupby\n\nN=int(input())\nA=list(map(int,input().split()))\n\nans = 0\nfor key, group in groupby(A):\n    ans += len(list(group))//2\nprint(ans)", "label": 1, "name1": "s736034553.py", "name2": "s018527258.py"}, {"id": 33, "code1": "def main():\n    N, A, B = map(int, input().split())\n    X = map(int, input().split())\n\n    ret = 0\n    curr = next(X)\n    for x in X:\n        ret += min((x - curr) * A, B)\n        curr = x\n    print(ret)\n\n\nif __name__ == '__main__':\n    main()\n", "code2": "n,a,b=map(int,input().split())\nx=list(map(int,input().split()))\nans=0\npre_x=x[0]\nfor i in range(1,n):\n    xi=x[i]\n    if((xi-pre_x)*a >= b):\n        ans+=b\n    else:\n        ans+=(xi-pre_x)*a\n    pre_x=xi\nprint(ans)", "label": 1, "name1": "s627561056.py", "name2": "s590352263.py"}, {"id": 771, "code1": "n = int(input())\ndat = list(map(int,input().split()))\n\ndat = [0] + dat + [0]\ntotal = 0\ncur = 0\nfor i in range(n + 2):\n    total += abs(cur - dat[i])\n    cur = dat[i]\ntotal += abs(cur)\ncur = 0\nfor i in range(n):\n    j = i + 1\n    if dat[j-1] < dat[j] < dat[j+1]:\n        # \u9593\u306b\u631f\u307e\u308c\u3066\u3044\u308b\u30d1\u30bf\u30fc\u30f3\uff11\n        #print(\"pat1\")\n        print(total)\n    elif dat[j-1] > dat[j] > dat[j+1]:\n        # \u9593\u306b\u631f\u307e\u308c\u3066\u3044\u308b\u30d1\u30bf\u30fc\u30f32\n        #print(\"pat2\")\n        print(total)\n    else:\n        # \u3053\u306e\u5834\u5408\u306f\u9593\u306b\u631f\u307e\u308c\u3066\u3044\u306a\u3044\n        #print(\"{0} {1} {2}\".format(total, abs(dat[j-1] -dat[j]) , abs(dat[j-1] -dat[j+1])))\n        print(total - abs(dat[j-1] -dat[j]) - abs(dat[j] -dat[j+1]) + abs(dat[j-1] - dat[j+1]))\n", "code2": "import sys\nimport fractions\nfrom collections import Counter, deque, defaultdict\nfrom math import factorial\nimport heapq, bisect\nimport math\nimport itertools\nsys.setrecursionlimit(10 ** 5 + 10)\nINF = 10**15 +5\ndef input(): return sys.stdin.readline().strip()\ndef INT(): return int(input())\ndef MAP(): return map(int, input().split())\ndef LIST(): return list(map(int, input().split()))\n\nn = INT()\nt = [0]*n\nfor i in range(n):\n    t[i] = INT()\n\ndef lcm(a,b):\n    gcd = fractions.gcd(a,b)\n    a//=gcd\n    b//=gcd\n    return a*b*gcd\n    \nif n == 1:\n    print(t[0])\n    sys.exit()\n\nres = lcm(t[0],t[1])\nfor i in range(1,n-1):\n    res = lcm(res, t[i+1])\n\nprint(res)\n\n\n", "label": 0, "name1": "s576885295.py", "name2": "s491119021.py"}, {"id": 256, "code1": "s = list(input())\nt = list(input())\nans = [-1, -1]\nif len(t) <= len(s):\n    for i in range(len(s) - len(t) + 1):\n        c = 1\n        for j in range(len(t)):\n            if s[i + j] != \"?\" and t[j] != s[i + j]:\n                c = 0\n                break\n        if c == 1:\n            ans = [i, i + len(t)]\n\nif ans != [-1, -1]:\n    k = []\n    for i in range(len(s)):\n        if ans[0] <= i < ans[1]:\n            k.append(t[i - ans[0]])\n        else:\n            if s[i] == \"?\":\n                k.append(\"a\")\n            else:\n                k.append(s[i])\n    print(\"\".join(k))\nelse:\n    print(\"UNRESTORABLE\")\n", "code2": "#!usr/bin/env python3\nfrom collections import defaultdict\nfrom collections import deque\nfrom heapq import heappush, heappop\nimport sys\nimport math\nimport bisect\nimport random\ndef LI(): return list(map(int, sys.stdin.readline().split()))\ndef I(): return int(sys.stdin.readline())\ndef LS():return list(map(list, sys.stdin.readline().split()))\ndef S(): return list(sys.stdin.readline())[:-1]\ndef IR(n):\n    l = [None for i in range(n)]\n    for i in range(n):l[i] = I()\n    return l\ndef LIR(n):\n    l = [None for i in range(n)]\n    for i in range(n):l[i] = LI()\n    return l\ndef SR(n):\n    l = [None for i in range(n)]\n    for i in range(n):l[i] = S()\n    return l\ndef LSR(n):\n    l = [None for i in range(n)]\n    for i in range(n):l[i] = SR()\n    return l\nmod = 1000000007\n\n#A\ndef A():\n    r,g = IR(2)\n    print(2*g-r)\n\n#B\ndef B():\n    n = I()\n    k = I()\n    a = 1\n    for i in range(n):\n        if a > k:\n            a += k\n        else:\n            a *= 2\n    print(a)\n#C\ndef C():\n    def check(a,b):\n        for i in range(len(a)):\n            if a[i] != b[i] and a[i] != \"?\":\n                return False\n        return True\n    def f(c):\n        if c == \"?\":return \"a\"\n        return c\n    s = S()\n    t = S()\n    n = len(s)\n    l = len(t)\n    ans = []\n    for i in range(n-l+1)[::-1]:\n        if check(s[i:i+l],t):\n            c = [f(s[j]) for j in range(i)]\n            c += t\n            for j in range(i+l,n):\n                c += f(s[j])\n            ans.append(c)\n    if not len(ans):\n        print(\"UNRESTORABLE\")\n    else:\n        ans.sort()\n        for i in ans[0]:\n            print(i,end = \"\")\n        print()\n#D\ndef D():\n    return\n\n#E\ndef E():\n    return\n\n#F\ndef F():\n    return\n\n#G\ndef G():\n    return\n\n#H\ndef H():\n    return\n\n#Solve\nif __name__ == \"__main__\":\n    C()\n", "label": 1, "name1": "s590642866.py", "name2": "s063203841.py"}, {"id": 138, "code1": "A,B,C=map(int,input().split())\nans = 1\nif (A%2 != B%2) and (A%2 == C%2):\n  A += 1\n  C += 1\nelif (A%2 == B%2) and (A%2 != C%2):\n  A += 1\n  B += 1\nelif (A%2 != B%2) and (B%2 == C%2):\n  C += 1\n  B += 1\nelse:\n  ans = 0\nL = [A,B,C]\nL.sort()\nans += (L[2]-L[1])//2 + (L[2]-L[0])//2\nprint( ans )\n", "code2": "num = list(map(int, input().split()))\nnum.sort()\n\nx = num[2] * 3 - sum(num)\n\nif x%2 == 0:\n  ans = int(x/2)\nelse:\n  ans = int(x//2 + 2)\n\nprint(ans)\n", "label": 1, "name1": "s612094036.py", "name2": "s512155836.py"}, {"id": 664, "code1": "N = int(input())\na = list(map(int, input().split()))\n\nans = 0\nfor i in range(N):\n  if a[a[i]-1] == i+1:\n    ans += 1\nprint(ans//2)", "code2": "s = list(input())\nt = list(input())\nans = [-1, -1]\nif len(t) <= len(s):\n    for i in range(len(s) - len(t) + 1):\n        c = 1\n        for j in range(len(t)):\n            if s[i + j] != \"?\" and t[j] != s[i + j]:\n                c = 0\n                break\n        if c == 1:\n            ans = [i, i + len(t)]\n\nif ans != [-1, -1]:\n    k = []\n    for i in range(len(s)):\n        if ans[0] <= i < ans[1]:\n            k.append(t[i - ans[0]])\n        else:\n            if s[i] == \"?\":\n                k.append(\"a\")\n            else:\n                k.append(s[i])\n    print(\"\".join(k))\nelse:\n    print(\"UNRESTORABLE\")\n", "label": 0, "name1": "s364926848.py", "name2": "s590642866.py"}, {"id": 125, "code1": "import sys\nsys.setrecursionlimit(2147483647)\nINF=float(\"inf\")\nMOD=10**9+7\ninput=lambda :sys.stdin.readline().rstrip()\ndef resolve():\n    n,k=map(int,input().split())\n    A=list(map(int,input().split()))\n    dp=[0]*(k+1)\n    for i in range(k):\n        if dp[i]: continue\n        for j in range(n):\n            if i+A[j]<=k: dp[i+A[j]]=1\n    print(\"First\" if dp[k] else \"Second\")\nresolve()", "code2": "N,K = map(int,input().split())\nA = list(map(int,input().split()))\n# first\u304c\u8ca0\u3051\u306e\u72b6\u614b\u3092\u62bc\u3057\u4ed8\u3051\u7d9a\u3051\u308b\u3053\u3068\u304c\u53ef\u80fd\u306a\u3089\u3070\u52dd\u3061\ndp = [False]*(K+1)\n# dp[i](0,A[0]) = False \nfor i in range(K):\n    if not dp[i]:\n        for a in A:\n            if i+a <= K:\n                dp[i+a] = 1\nprint(\"First\" if dp[K] else \"Second\")", "label": 1, "name1": "s270542298.py", "name2": "s268772666.py"}, {"id": 621, "code1": "a, b = map(int, input().split())\n\nprint(a - int(a > b))\n\n", "code2": "n = int(input())\nS = list(map(int, input().split()))\ns = sorted(S, reverse=True)\n\nif n %2 ==0:\n  l = n/2\n  m = s[0]\n  s = s[1:int(l)]\n  p = sum(s)\n  o = p*2 + m \n  print(o)\nelse:\n  l = (n+1)/2\n  m = s[0]\n  q = s[int(l)-1]\n  s = s[1:int(l-1)]\n  p = sum(s)\n  o = p*2 + m +q\n  print(o)\n  ", "label": 0, "name1": "s523849066.py", "name2": "s142787879.py"}, {"id": 883, "code1": "a,b=input().split()\nif a==\"H\":\n  if b==\"H\":\n    print(\"H\")\n  else:\n    print(\"D\")\nif a==\"D\":\n  if b==\"H\":\n    print(\"D\")\n  else:\n    print(\"H\")", "code2": "for i in range(1000):\n    print \"Hello World\"", "label": 0, "name1": "s799192785.py", "name2": "s267628664.py"}, {"id": 624, "code1": "a, b = map(int, input().split())\n\nprint(a - int(a > b))\n\n", "code2": "#coding=UTF-8\n\nN=int(input())\nmozir=input()\nhyo=mozir.split(' ')\n\nRec_LTR=[int(mono) for mono in hyo]\n\nmozir=input()\nhyo=mozir.split(' ')\n\nRec_RTL=[int(mono) for mono in hyo]\n\nLTR_hani=[]\nhighest=0\nfor idx in range(0,N,1):\n    if Rec_LTR[idx]>highest:\n        highest=Rec_LTR[idx]\n        LTR_hani.append([highest,highest])\n    else:\n        LTR_hani.append([highest,1])\n\nRTL_hani=[None]*N\nhighest=0\nfor idx in range(N-1,-1,-1):\n    if Rec_RTL[idx]>highest:\n        highest=Rec_RTL[idx]\n        RTL_hani[idx]=[highest,highest]\n    else:\n        RTL_hani[idx]=[highest,1]\n\n#concat\nans=1\nhou=1000000007\nfor idx in range(0,N,1):\n    # prod set\n    ue=min(RTL_hani[idx][0],LTR_hani[idx][0])\n    shita=max(RTL_hani[idx][1],LTR_hani[idx][1])\n    ans=(ans*max((ue-shita+1),0))%hou\n\nprint(ans)\n", "label": 0, "name1": "s523849066.py", "name2": "s271635856.py"}, {"id": 329, "code1": "import sys\ndef input(): return sys.stdin.readline().strip()\n\n\ndef main():\n    a, b, c = map(int, input().split())\n    m = max(a, b, c)\n    print(a + b + c - m)\n\n\nif __name__ == \"__main__\":\n    main()\n", "code2": "a,b,c = map(int,input().split())\nprint(a+b+c-max(a,b,c))", "label": 1, "name1": "s149362178.py", "name2": "s819277031.py"}, {"id": 614, "code1": "X = input()\n\ns_cnt = 0\nt_cnt = 0\n\nans = 0\n\nfor n in range(len(X)):\n  if X[n] == \"S\":\n    s_cnt += 1\n  else:\n    t_cnt += 1\n  ans = max(ans,t_cnt-s_cnt)\nprint(ans*2)", "code2": "a,b=map(int,input().split())\nif b >= a:\n  print(a)\nelse:\n  print(a-1)", "label": 0, "name1": "s239717601.py", "name2": "s714654685.py"}, {"id": 77, "code1": "#coding:utf-8\nimport numpy as np\nn = int(input())\n\n\na = np.ones((2,1)).astype(np.int)\na[-1][-1]+len(a)\ni = 1\nwhile(1):\n    if len(a)>=500:\n        break\n    if n==a[-1][-1]:\n        print (\"Yes\")\n        print (len(a))\n        for line in a:\n            print (i,\" \".join(line.astype(np.str).tolist()))\n        exit()\n    i+=1\n    temp = int((1/2)*i*(i+1))\n    add = np.array((list(range(temp-i+1,temp+1))))\n\n    a = np.c_[a,add]\n    a = np.r_[a,add.reshape(1,-1)]\nprint (\"No\")\n", "code2": "from itertools import combinations\n\nn = int(input())\nyes = [i*(i-1)//2 for i in range(2, 448)]\nif n in yes:\n    print('Yes')\n    len_s = yes.index(n) + 1\n    print(len_s+1)\n    res = [[] for _ in range(len_s+1)]\n    for i, v in enumerate(combinations(range(len_s+1), 2)):\n        res[v[0]].append(str(i+1))\n        res[v[1]].append(str(i+1))\n    for r in res:\n        print(' '.join([str(len_s)] + r))        \nelse:\n    print('No')", "label": 1, "name1": "s037954477.py", "name2": "s486613754.py"}, {"id": 633, "code1": "#coding=UTF-8\n\nN=int(input())\nmozir=input()\nhyo=mozir.split(' ')\n\nRec_LTR=[int(mono) for mono in hyo]\n\nmozir=input()\nhyo=mozir.split(' ')\n\nRec_RTL=[int(mono) for mono in hyo]\n\nLTR_hani=[]\nhighest=0\nfor idx in range(0,N,1):\n    if Rec_LTR[idx]>highest:\n        highest=Rec_LTR[idx]\n        LTR_hani.append([highest,highest])\n    else:\n        LTR_hani.append([highest,1])\n\nRTL_hani=[None]*N\nhighest=0\nfor idx in range(N-1,-1,-1):\n    if Rec_RTL[idx]>highest:\n        highest=Rec_RTL[idx]\n        RTL_hani[idx]=[highest,highest]\n    else:\n        RTL_hani[idx]=[highest,1]\n\n#concat\nans=1\nhou=1000000007\nfor idx in range(0,N,1):\n    # prod set\n    ue=min(RTL_hani[idx][0],LTR_hani[idx][0])\n    shita=max(RTL_hani[idx][1],LTR_hani[idx][1])\n    ans=(ans*max((ue-shita+1),0))%hou\n\nprint(ans)\n", "code2": "def main():\n    n = int(input())\n    x,y = 1,1\n    for _ in range(n):\n        t,a = map(int,input().split())\n        z = -1*min(-x//t,-y//a)\n        x = z*t\n        y = z*a\n        # print(x,y)\n    print(x+y)\n\nmain()", "label": 0, "name1": "s271635856.py", "name2": "s902948767.py"}, {"id": 620, "code1": "# coding: utf-8\ndef check(a,b):\n    if (a,b) in memo:\n        return memo[(a,b)]\n    if 0<=a<h and 0<=b<w and field[a][b].isdigit():\n        x=check(a+1,b)\n        y=check(a,b+1)\n        memo[(a,b)]=field[a][b]+(x if len(x)>len(y) else x if len(x)==len(y) and len(x)!=0 and int(x)>int(y) else y)\n        return field[a][b]+(x if len(x)>len(y) else x if len(x)==len(y) and len(x)!=0 and int(x)>int(y) else y)\n    else:\n        return ''\nwhile 1:\n    w,h=map(int,input().split())\n    if w==0:\n        break\n    field=[]\n    for i in range(h):\n        field.append(list(input()))\n    ans='0'\n    memo={}\n    for i in range(h):\n        for j in range(w):\n            if field[i][j]!='0' and field[i][j].isdigit():\n                tmp=check(i,j)\n                if int(ans)<int(tmp):\n                    ans=tmp\n    print(ans)\n", "code2": "import math\nN = int(input())\nA = list(map(int,input().split()))\nA.sort(reverse = True)\n\nans = 0\nfor i in range(1,N):\n  a = math.floor(i/2)\n  ans += A[a]\n    \nprint(ans)", "label": 0, "name1": "s573602328.py", "name2": "s069304778.py"}, {"id": 919, "code1": "from collections import Counter,defaultdict,deque\nfrom heapq import heappop,heappush\nfrom bisect import bisect_left,bisect_right \nimport sys,math,itertools,fractions,pprint\nsys.setrecursionlimit(10**8)\nmod = 10**9+7\nINF = float('inf')\ndef inp(): return int(sys.stdin.readline())\ndef inpl(): return list(map(int, sys.stdin.readline().split()))\n\ns = [list(input()) for _ in range(3)]\nfor i in range(3):\n    s[i] = [ord(x) - ord('a') for x in s[i]][::-1]\nnow = 0\nwhile True:\n    if s[now] == []:\n        print(chr(ord('A') + now))\n        break\n    now = s[now].pop()\n    ", "code2": "P=10**9+7\ndef egcd(a, b):\n    (x, lastx) = (0, 1)\n    (y, lasty) = (1, 0)\n    while b != 0:\n        q = a // b\n        (a, b) = (b, a % b)\n        (x, lastx) = (lastx - q * x, x)\n        (y, lasty) = (lasty - q * y, y)\n    return (lastx, lasty, a)\ndef inv(x):\n    return egcd(x,P)[0]\nN=int(input())\nFact=[0 for i in range(N+1)]\nFinv=[0 for i in range(N+1)]\nFact[0]=1\nFinv[0]=1\nfor i in range(N):\n    Fact[i+1]=((i+1)*Fact[i])%P\n    Finv[i+1]=(Finv[i]*inv(i+1))%P\nSGN=[0 for i in range(N)]\nans=0\nfor k in range(N):\n    if 2*k-N>=0:\n        SGN[k]=(((Fact[k-1]*Fact[k])%P)*Finv[2*k-N])%P\n        ans=(ans+k*(SGN[k]-SGN[k-1]))%P\nprint(ans)\n", "label": 0, "name1": "s332087520.py", "name2": "s436731704.py"}, {"id": 999, "code1": "while True:\n    t= int(input())\n    if t== 0: break\n    n= int(input())\n    c= [list(map(int, input().split())) for _ in range(n)]\n    sf= sum(c[i][1]-c[i][0] for i in range(n))\n    print(\"OK\" if t<= sf else t-sf)", "code2": "def main():\n    n = int(input())\n    t, a = map(int, input().split())\n    h = list(map(int, input().split()))\n    # s = input()\n\n    mini = 10**10\n    ans = 0\n    for i, x in enumerate(h):\n        c = t - x * 0.006\n        if abs(a - c) < mini:\n            mini = abs(a - c)\n            ans = i+1\n\n    print(ans)\n\n\nif __name__ == '__main__':\n    main()\n", "label": 0, "name1": "s737311536.py", "name2": "s097284113.py"}, {"id": 284, "code1": "a, b = [], []\nappear_count = [0] * 4\nfor _ in range(3):\n    _a, _b = map(int, raw_input().split())\n    appear_count[_a - 1] += 1\n    appear_count[_b - 1] += 1\nif max(appear_count) == 3:\n    print \"NO\"\nelse:\n    print \"YES\"", "code2": "towns = []\nfor i in range(3):\n    a, b = map(int, input().split())\n    towns.append(a)\n    towns.append(b)\nnums = []\nfor i in range(4):\n    nums.append(towns.count(i+1))\n\nif nums.count(1) == 2:\n    print(\"YES\")\nelse:\n    print(\"NO\")\n    ", "label": 1, "name1": "s562629657.py", "name2": "s337477086.py"}, {"id": 573, "code1": "A,B,C = map(int, input().split())\ncount = 0\nlist1 = [A,B]\n\nfor i in range(min(list1),max(list1)):\n    if C == i:\n        count = 1\n \nif count == 1:\n    print(\"Yes\")\nelse:\n    print(\"No\")", "code2": "n, k  = map(int, input().split())\nA = list(map(int, input().split()))\ndp = [0] * (k + 1)\n\nfor i in range(1, k + 1):\n  if all(dp[i - a] == 1 for a in A if i >= a):\n    dp[i] = 0\n  else:\n    dp[i] = 1\n\nprint(\"First\" if dp[k] == 1 else \"Second\")", "label": 0, "name1": "s230128846.py", "name2": "s828667405.py"}, {"id": 795, "code1": "# coding:utf-8\n\nimport sys\n\n\ninput = sys.stdin.readline\nINF = float('inf')\nMOD = 10 ** 9 + 7\n\n\ndef inpl(): return list(map(int, input().split()))\n\n\n# a\u306ep\u4e57\u3092\u6c42\u3081\u308b\u30a2\u30eb\u30b4\u30ea\u30ba\u30e0\n# MOD\u7248\ndef pow_mod(a, p):\n    if p == 0: return 1\n\n    if p % 2 == 0:\n        half_p = p // 2\n        half = pow_mod(a, half_p)\n        return half * half % MOD\n    else:\n        return a * pow_mod(a, p - 1) % MOD\n\n\ndef solve(N, A):\n    # \u968e\u4e57N!\u3092\u6c42\u3081\u308b\n    fact = [1] * N\n    for i in range(1, N):\n        fact[i] = fact[i - 1] * (i + 1) % MOD\n\n    # 1/N!\u306e\u9006\u5143\u3092\u6c42\u3081\u308b\n    fact_inv = [1] * N\n    fact_inv[-1] = pow_mod(fact[-1], MOD - 2)\n    for i in range(N - 1, 0, -1):\n        tmp = fact_inv[i] * (i + 1)\n        tmp %= MOD\n        fact_inv[i - 1] = tmp\n\n    # 1/k\u3092\u6c42\u3081\u308b\n    inv = [1]\n    for i in range(1, N):\n        inv.append((fact[i - 1] * fact_inv[i]) % MOD)\n\n    # 1/k\u306e\u7d2f\u7a4d\u548c\u3092\u6c42\u3081\u308b\n    inv_sum = [1]\n    for i in range(1, N):\n        inv_sum.append((inv_sum[-1] + inv[i]) % MOD)\n\n    # \u7d2f\u7a4d\u548c\u306e\u7d50\u679c\u3092\u4fc2\u6570\u3068\u3057\u3066Ai\u306b\u639b\u3051\u3066\u3001\u52a0\u7b97\u3059\u308b\n    ans = 0\n    for i in range(N):\n        ans += A[i] * (inv_sum[i] + inv_sum[N - 1 - i] - 1)\n        ans %= MOD\n\n    # ans\u306bN!\u3092\u639b\u3051\u305f\u3082\u306e\u3092\u8fd4\u3059\n    return ans * fact[-1] % MOD\n\n\nN = int(input())\nA = inpl()\nprint(solve(N, A))\n", "code2": "nm = [0,31,29,31,30,31,30,31,31,30,31,30]\nwhile True:\n\n    m,d = map(int,raw_input().split(\" \"))\n\n    if m == 0:\n        break\n    else:\n        nd = 0\n        for i in range(m):\n           nd += nm[i]\n\n        nd += d\n        n = nd%7\n        if n == 1:\n            print \"Thursday\"\n        elif n == 2:\n            print \"Friday\"\n        elif n == 3:\n            print \"Saturday\"\n        elif n == 4:\n            print \"Sunday\"\n        elif n == 5:\n            print \"Monday\"\n        elif n == 6:\n            print \"Tuesday\"\n        else:                                                                                                                                                                                                \n            print \"Wednesday\"", "label": 0, "name1": "s535253599.py", "name2": "s504491910.py"}, {"id": 151, "code1": "y = [True for i in range(250001)]\ny[0] = y[1] = False\nfor i in range(2, 500):\n    if y[i]:\n        for j in range(2, 250000 // i + 1):\n            y[i * j] = False\nwhile True:\n    n = int(input())\n    if n == 0:\n        break\n    print(y[n + 1 : n * 2 + 1].count(True))\n", "code2": "m=246912\np=[1]*m\np[0]=p[1]=0\nfor i in range(2,int(m**0.5)+1):\n    if p[i]:\n        for j in range(i*i,m,i):\n            p[j]=0\nwhile 1:\n    n=int(input())\n    if n==0:break\n    print(sum(p[n+1:2*n+1]))", "label": 1, "name1": "s889149636.py", "name2": "s770583749.py"}, {"id": 600, "code1": "\n\ndef isPrime(n):\n    if n <= 1:\n        return False \n    if n == 2:\n        return True\n    if n % 2 == 0:\n        return False\n\n    i = 3\n    while i * i <= n :\n        if n % i == 0:\n            return False \n        i += 1\n\n    return True        \n# end of isPrime\n\nwhile True:\n    n = input()\n    if n == 0:break\n\n    ans = 0\n    for i in range(n + 1, n * 2 + 1):\n        if isPrime(i):ans += 1\n\n    print ans", "code2": "a=b=0\nfor i in input():c=i==\"T\";d=a>0;a+=1-c-c*d;b+=c*(1-d)\nprint(a+b)", "label": 0, "name1": "s415543076.py", "name2": "s373261912.py"}, {"id": 602, "code1": "y = [True for i in range(250001)]\ny[0] = y[1] = False\nfor i in range(2, 500):\n    if y[i]:\n        for j in range(2, 250000 // i + 1):\n            y[i * j] = False\nwhile True:\n    n = int(input())\n    if n == 0:\n        break\n    print(y[n + 1 : n * 2 + 1].count(True))\n", "code2": "X = input()\n\ns_cnt = 0\nt_cnt = 0\n\nans = 0\n\nfor n in range(len(X)):\n  if X[n] == \"S\":\n    s_cnt += 1\n  else:\n    t_cnt += 1\n  ans = max(ans,t_cnt-s_cnt)\nprint(ans*2)", "label": 0, "name1": "s889149636.py", "name2": "s239717601.py"}, {"id": 364, "code1": "'''\n????????\u00a3????????????1??????????????????\n??\\???C++??\u00a7????????????????\u00a7\u00a3?\u00b1???????????????????????????????????????\u00a7???\n??????python??\u00a7??????????????????Accept??\u00a7??????????????????\n????????\u00a3??\u00a8optimization??????????????\u00a7??????\n??\u00a7????????????Wrong Answer??\u00a7?????????\n???????????????????????????????????????????????????\nOnline Judge???????????????Public Solutions??\u00a7????????????nanae?????????python3????????????????????????\n????????\u00a3??\u00a8?????????????????????\n???????????????????????????0.06?\u00a7????????????\u00a7??????\n'''\n\nimport queue\nv,e,s=map(int,input().split())\nedge=[]\ninf =1000000100\nfor i in range(v):\n    edge.append([])\n\nfor i in range(e):\n    vs,vt,d=map(int,input().split())\n    edge[vs].append((vt,d))\n    \ndis=[]\nfor i in range(v):\n    dis.append(inf)\n\ndis[s]=0\n\nq = queue.PriorityQueue()\nq.put((0,s))\n\n'''\nwhile(not q.empty()):\n    now=q.get()\n    nowv=now[1]\n    for (vt,d) in edge[nowv]:\n        if dis[vt]>dis[nowv]+d:\n            dis[vt]=dis[nowv]+d\n            q.put((dis[vt],vt))\n'''\n\nfinished=0\nwhile(finished<v and not q.empty()):\n    now=q.get()\n    nowv=now[1]\n    if now[0]>dis[nowv]: continue\n    for (vt,d) in edge[nowv]:\n        if dis[vt]>dis[nowv]+d:\n            dis[vt]=dis[nowv]+d\n            q.put((dis[vt],vt))\n    finished+=1       \n\nfor i in range(v):\n    if dis[i]>=inf:\n        print(\"INF\")\n    else:\n        print(dis[i])", "code2": "import heapq\nN, M, S = map(int, input().split())\nedges = [[]for _ in range(N)]\ninf = 10**18\nfor _ in range(M):\n    u, v, d = map(int, input().split())\n    edges[u].append((v, d))\n\n\ndef dijkstra(s):\n\n    dist = [inf]*N\n    dist[s] = 0\n    vs = []\n    heapq.heappush(vs, (0, s))\n    while len(vs):\n        res, v = heapq.heappop(vs)\n        if res > dist[v]:\n            continue\n        for nxt, cost in edges[v]:\n            if res+cost < dist[nxt]:\n                dist[nxt] = res+cost\n                heapq.heappush(vs, (dist[nxt], nxt))\n    return dist\n\n\ndist = dijkstra(S)\nfor i in range(N):\n    if dist[i] == inf:\n        print(\"INF\")\n    else:\n        print(dist[i])\n\n", "label": 1, "name1": "s256416940.py", "name2": "s577496395.py"}, {"id": 92, "code1": "n,k = map(int,input().split())\nprint(min(n%k,-((n%k)-k)))", "code2": "a,b =  list(map(int,input().split()))\nprint(min(a%b,b-a%b))", "label": 1, "name1": "s413819466.py", "name2": "s156730538.py"}, {"id": 543, "code1": "while(True):\n    n = int(input())\n    if not n: break\n    maxind = 0\n    maxnum = 0\n    for _ in range(n):\n        a,b,c = map(int,input().split())\n        if maxnum < b+c: maxind=a; maxnum=b+c\n    print(maxind,maxnum)\n", "code2": "# https://atcoder.jp/contests/tenka1-2018-beginner/tasks/tenka1_2018_d\n\nfrom itertools import combinations\n\nn = int(input())\nk = -1\nfor i in range(10**3):\n    if i*i - i - 2 * n == 0:\n        k = i\n\nif k == -1:\n    print('No')\n    exit()\n\n# print('Yes')\n# print(k)\n\nnum = 0\nV = [[] for _ in range(k)]\nfor cmb in combinations(range(k), r=2):\n    num += 1\n    a, b = cmb\n    V[a].append(num)\n    V[b].append(num)\nprint('Yes')\nprint(k)\nfor v in V:\n    print(len(v), end=\" \")\n    print(*v)\n", "label": 0, "name1": "s695355783.py", "name2": "s366576461.py"}, {"id": 141, "code1": "num = list(map(int, input().split()))\nnum.sort()\n\nx = num[2] * 3 - sum(num)\n\nif x%2 == 0:\n  ans = int(x/2)\nelse:\n  ans = int(x//2 + 2)\n\nprint(ans)\n", "code2": "import numpy as np\n\ndef input_numbers():\n    temp = list(map(int, input().split()))\n    return temp\n\ndef GCD(a, b):\n    if(a < b):\n        temp = a\n        a = b\n        b = temp\n    a = a % b\n    if(a == 0):\n        return b\n    else:\n        return GCD(a, b)\n\nnumbers = input_numbers()\n\nnumbers.sort()\n\ncount = 0\n\ncount += numbers[2] - numbers[1]\nnumbers[0] += numbers[2] - numbers[1]\nnumbers[1] = numbers[2]\n\ndiff = numbers[2] - numbers[0]\n\nif(diff % 2 == 0):\n    count += (diff // 2)\n\nelse:\n    numbers[1] += 1\n    numbers[2] += 1\n    count += 1\n\n    diff = numbers[2] - numbers[0]\n    count += (diff // 2)\n\nprint(count)", "label": 1, "name1": "s512155836.py", "name2": "s782702570.py"}, {"id": 346, "code1": "# ABC068C - Cat Snuke and a Voyage (ARC079C)\ndef main():\n    N, M, *AB = map(int, open(0).read().split())\n    from_1, to_N = set(), set()\n    for a, b in zip(*[iter(AB)] * 2):\n        if a == 1:\n            from_1.add(b)\n        if b == N:\n            to_N.add(a)\n    flg = from_1 & to_N  # intermediate point of both 1, N exists?\n    print(\"POSSIBLE\" if flg else \"IMPOSSIBLE\")\n\n\nif __name__ == \"__main__\":\n    main()", "code2": "N,M = map(int,input().split())\nab = [[int(i) for i in input().split()] for _ in range(M)]\n\nA = []\nB = [0]*(N+1)\nfor a,b in ab:\n  if a==1:\n    A.append(b)\n  if b==N:\n    B[a]=1\n\nfor a in A:\n  if B[a]==1:\n    print(\"POSSIBLE\")\n    break\nelse:\n  print(\"IMPOSSIBLE\")", "label": 1, "name1": "s726342129.py", "name2": "s913769144.py"}, {"id": 304, "code1": "class UnionFind():\n    def __init__(self, n):\n        self.n = n\n        self.parents = [-1] * n\n\n    def find(self, x):\n        if self.parents[x] < 0:\n            return x\n        else:\n            self.parents[x] = self.find(self.parents[x])\n            return self.parents[x]\n\n    def union(self, x, y):\n        x = self.find(x)\n        y = self.find(y)\n\n        if x == y:\n            return\n\n        if self.parents[x] > self.parents[y]:\n            x, y = y, x\n\n        self.parents[x] += self.parents[y]\n        self.parents[y] = x\n\n    def size(self, x):\n        return -self.parents[self.find(x)]\n\n    def same(self, x, y):\n        return self.find(x) == self.find(y)\n\n    def members(self, x):\n        root = self.find(x)\n        return [i for i in range(self.n) if self.find(i) == root]\n\n    def roots(self):\n        return [i for i, x in enumerate(self.parents) if x < 0]\n\n    def group_count(self):\n        return len(self.roots())\n\n    def all_group_members(self):\n        return {r: self.members(r) for r in self.roots()}\n\n    def __str__(self):\n        return '\\n'.join('{}: {}'.format(r, self.members(r)) for r in self.roots())\n\nN,M=list(map(int,input().split()))\nNetwork = UnionFind(N)\nfor i in range(M):\n    a,b=list(map(int,input().split()))\n    Network.union(a-1, b-1)\nprint(Network.group_count()-1)", "code2": "class UnionFind():\n  def __init__(self,n):\n    self.n=n\n    self.root=[-1]*(n+1)\n    self.rank=[0]*(n+1)\n  def FindRoot(self,x):\n    if self.root[x]<0:\n      return x\n    else:\n      self.root[x]=self.FindRoot(self.root[x])\n      return self.root[x]\n  def Unite(self,x,y):\n    x=self.FindRoot(x)\n    y=self.FindRoot(y)\n    if x==y:\n      return\n    else:\n      if self.rank[x]>self.rank[y]:\n        self.root[x]+=self.root[y]\n        self.root[y]=x\n      elif self.rank[x]<=self.rank[y]:\n        self.root[y]+=self.root[x]\n        self.root[x]=y\n        if self.rank[x]==self.rank[y]:\n          self.rank[y]+=1\n  def isSameGroup(self,x,y):\n    return self.FindRoot(x)==self.FindRoot(y)\n  def Count(self,x):\n    return -self.root[self.FindRoot(x)]\n\nn,m=map(int,input().split())\nuf=UnionFind(n+1)\nfor _ in range(m):\n  a,b=map(int,input().split())\n  uf.Unite(a,b)\ns=set()\nfor i in range(1,n+1):\n  s.add(uf.FindRoot(i))\nprint(len(s)-1)", "label": 1, "name1": "s144436411.py", "name2": "s002986344.py"}, {"id": 194, "code1": "from sys import stdin\n\n\ndef main():\n    input = lambda: stdin.readline()[:-1]\n    N = int(input())\n    A = list(map(int, input().split()))\n\n    A.sort(reverse=1)\n    d, m = divmod(N, 2)\n    n = [2] * (d + m)\n    n[-1], n[0] = n[-1] - m, 1\n    ans = 0\n    for i, k in enumerate(n):\n        ans += A[i] * k\n    print(ans)\n\n\nmain()\n", "code2": "import sys\nimport time\nimport math\nst = time.perf_counter()\ndef inpl():\n    return list(map(int, input().split()))\n# ------------------------------\n\nN = int(input())\nA = inpl()\n\nA.sort()\nA.reverse()\n\nans = 0\nN -= 1\nfor i in range(len(A)):\n\tif i == 0: t = 1\n\telse : t = 2\n\tfor _ in range(t):\n\t\tans += A[i]\n\t\tN -= 1\n\t\tif N == 0:\n\t\t\tbreak\n\tif N == 0:\n\t\tbreak\n\nprint(ans)\n\n\n# ------------------------------\ned = time.perf_counter()\nprint('time:', ed-st, file=sys.stderr)\n", "label": 1, "name1": "s775405634.py", "name2": "s767002376.py"}, {"id": 146, "code1": "\n\ndef isPrime(n):\n    if n <= 1:\n        return False \n    if n == 2:\n        return True\n    if n % 2 == 0:\n        return False\n\n    i = 3\n    while i * i <= n :\n        if n % i == 0:\n            return False \n        i += 1\n\n    return True        \n# end of isPrime\n\nwhile True:\n    n = input()\n    if n == 0:break\n\n    ans = 0\n    for i in range(n + 1, n * 2 + 1):\n        if isPrime(i):ans += 1\n\n    print ans", "code2": "prime = [True for i in range(250001)]\nprime[0] = prime[1] = False\nfor i in range(2, 500):\n    if prime[i]:\n        for j in range(2, 250000 // i + 1):\n            prime[i * j] = False\n\nwhile True:\n    n = int(input())\n    if n == 0:\n        break\n    print(prime[n + 1 : n * 2 + 1].count(True))\n", "label": 1, "name1": "s415543076.py", "name2": "s672275091.py"}, {"id": 469, "code1": "n=int(input())\na=list(map(int,input().split()))\nb=list(map(int,input().split()))\n\nsum1=0\nsum2=0\n\nfor i,j in zip(a,b):\n  if i>j:\n    sum1+=(i-j)\n  elif i<j:\n    sum2+=(j-i)//2\n\nprint('Yes' if sum1<=sum2 else 'No')", "code2": "N = int(input())\nA = list(map(int, input().split()))\nB = list(map(int, input().split()))\n\nplus_2 = 0\nminus = 0\nfor a, b in zip(A, B):\n    if a < b:\n        plus_2 += (b-a)//2\n    else:\n        minus += a-b\n\nif plus_2 >= minus:\n    print('Yes')\nelse:\n    print('No')", "label": 1, "name1": "s390816173.py", "name2": "s301247411.py"}, {"id": 667, "code1": "N = int(input())\na = list(map(int, input().split()))\n\nans = 0\nfor i in range(N):\n  if a[a[i]-1] == i+1:\n    ans += 1\nprint(ans//2)", "code2": "a,b,c,k=map(int,input().split())\n\nif k <= a:\n    print(k)\nelif k <= a+b:\n    print(a)\nelse:\n    print(a-(k-(a+b)))", "label": 0, "name1": "s364926848.py", "name2": "s019552488.py"}, {"id": 186, "code1": "a,b=map(int,input().split())\nif b >= a:\n  print(a)\nelse:\n  print(a-1)", "code2": "a, b = map(int, input().split())\n\nif a <= b:\n    print(a)\nelse:\n    print(a - 1)\n", "label": 1, "name1": "s714654685.py", "name2": "s988021824.py"}, {"id": 641, "code1": "n = input()\np, q = [-1, -1]\nfor i in xrange(n):\n    t, a = map(int, raw_input().split())\n    if p == -1 or q == -1:\n        p = t\n        q = a\n        continue\n    if t >= p and a >= q:\n        p = t\n        q = a\n    else:\n        z = max(p / t + (p % t != 0), q / a + (q % a != 0))\n        p = t * z\n        q = a * z\nprint p + q\n\n", "code2": "n = int(input())\np = tuple(map(int, input().split()))\nq = tuple(map(int, input().split()))\n\nimport itertools\nr = list(itertools.permutations(range(1, n+1)))\n\np_place = r.index(p)\nq_place = r.index(q)\nanswer = abs(p_place-q_place)\nprint(answer)", "label": 0, "name1": "s412403305.py", "name2": "s558804624.py"}, {"id": 254, "code1": "S = list(input())\nT = list(input())\n\nS.reverse()\nT.reverse()\nflag = False\n\nfor i in range(len(S)-len(T)+1):\n    for j in range(len(T)):\n        if S[j+i] == T[j] or S[j+i] == '?':\n            pass\n        else:\n            break\n\n        if j == len(T)-1:\n            flag = True\n            for k in range(len(T)):\n                if S[k+i] == '?':\n                    S[k+i] = T[k]\n            break\n    if flag:\n        break\n\nif flag:\n    for i in range(len(S)):\n        if S[i] == '?':\n            S[i] = 'a'\n    S.reverse()\n    print(''.join(S))\n\nelse:\n    print('UNRESTORABLE')\n\n\n\n", "code2": "#!usr/bin/env python3\nfrom collections import defaultdict\nfrom collections import deque\nfrom heapq import heappush, heappop\nimport sys\nimport math\nimport bisect\nimport random\ndef LI(): return list(map(int, sys.stdin.readline().split()))\ndef I(): return int(sys.stdin.readline())\ndef LS():return list(map(list, sys.stdin.readline().split()))\ndef S(): return list(sys.stdin.readline())[:-1]\ndef IR(n):\n    l = [None for i in range(n)]\n    for i in range(n):l[i] = I()\n    return l\ndef LIR(n):\n    l = [None for i in range(n)]\n    for i in range(n):l[i] = LI()\n    return l\ndef SR(n):\n    l = [None for i in range(n)]\n    for i in range(n):l[i] = S()\n    return l\ndef LSR(n):\n    l = [None for i in range(n)]\n    for i in range(n):l[i] = SR()\n    return l\nmod = 1000000007\n\n#A\ndef A():\n    r,g = IR(2)\n    print(2*g-r)\n\n#B\ndef B():\n    n = I()\n    k = I()\n    a = 1\n    for i in range(n):\n        if a > k:\n            a += k\n        else:\n            a *= 2\n    print(a)\n#C\ndef C():\n    def check(a,b):\n        for i in range(len(a)):\n            if a[i] != b[i] and a[i] != \"?\":\n                return False\n        return True\n    def f(c):\n        if c == \"?\":return \"a\"\n        return c\n    s = S()\n    t = S()\n    n = len(s)\n    l = len(t)\n    ans = []\n    for i in range(n-l+1)[::-1]:\n        if check(s[i:i+l],t):\n            c = [f(s[j]) for j in range(i)]\n            c += t\n            for j in range(i+l,n):\n                c += f(s[j])\n            ans.append(c)\n    if not len(ans):\n        print(\"UNRESTORABLE\")\n    else:\n        ans.sort()\n        for i in ans[0]:\n            print(i,end = \"\")\n        print()\n#D\ndef D():\n    return\n\n#E\ndef E():\n    return\n\n#F\ndef F():\n    return\n\n#G\ndef G():\n    return\n\n#H\ndef H():\n    return\n\n#Solve\nif __name__ == \"__main__\":\n    C()\n", "label": 1, "name1": "s456382222.py", "name2": "s063203841.py"}, {"id": 947, "code1": "ans = [1]*365\nfor i in range(365):\n    ans[i]=i%25 + 1\nfor i in range(365):\n    print(ans[i])", "code2": "print(input().count(\"2\"))", "label": 0, "name1": "s964378808.py", "name2": "s249513812.py"}, {"id": 646, "code1": "from itertools import permutations\nn = int(input())\np = tuple(map(int, input().split()))\nq = tuple(map(int, input().split()))\n\nfor n, i in enumerate(permutations(sorted(p))):\n    if i == p:\n        pn = n\n\nfor n, i in enumerate(permutations(sorted(q))):\n    if i == q:\n        qn = n\nprint(abs(pn-qn))\n", "code2": "n=int(raw_input())\ng=[[1000000]*n for _ in xrange(n)]\nfor i in xrange(n):\n    g[i][i]=0\nfor i in xrange(n):\n    r=map(int,raw_input().split())\n    for j in r[2:]:\n        g[r[0]-1][j-1]=1\nfor k in xrange(n):\n    for i in xrange(n):\n        for j in xrange(n):\n            g[i][j]=min(g[i][j],g[i][k]+g[k][j])\nm=int(raw_input())\nfor i in xrange(m):\n    s,d,v=map(int,raw_input().split())\n    s-=1\n    d-=1\n    if g[s][d]<v:\n        print(g[s][d]+1)\n    else:\n        print('NA')", "label": 0, "name1": "s199679379.py", "name2": "s227640621.py"}, {"id": 325, "code1": "a,b,c = map(int,input().split())\n\nprint(min(a+b,b+c,c+a))\n", "code2": "a,b,c=map(int,input().split())\nprint(min(a+b,b+c,c+a))\n", "label": 1, "name1": "s223078477.py", "name2": "s997903196.py"}, {"id": 975, "code1": "# -*- coding: utf-8 -*-\nimport bisect\nimport heapq\nimport math\nimport random\nfrom collections import Counter, defaultdict, deque\nfrom decimal import ROUND_CEILING, ROUND_HALF_UP, Decimal\nfrom fractions import Fraction\nfrom functools import lru_cache, reduce\nfrom itertools import combinations, combinations_with_replacement, product, permutations, accumulate\nfrom operator import add, mul, sub, itemgetter, attrgetter\n\n\nimport sys\n# sys.setrecursionlimit(10**6)\n# readline = sys.stdin.buffer.readline\nreadline = sys.stdin.readline\n\nINF = 2**62-1\n\n\ndef read_int():\n    return int(readline())\n\n\ndef read_int_n():\n    return list(map(int, readline().split()))\n\n\ndef read_float():\n    return float(readline())\n\n\ndef read_float_n():\n    return list(map(float, readline().split()))\n\n\ndef read_str():\n    return readline().strip()\n\n\ndef read_str_n():\n    return readline().strip().split()\n\n\ndef ep(*args):\n    print(*args, file=sys.stderr)\n\n\ndef mt(f):\n    import time\n\n    def wrap(*args, **kwargs):\n        s = time.perf_counter()\n        ret = f(*args, **kwargs)\n        e = time.perf_counter()\n\n        ep(e - s, 'sec')\n        return ret\n\n    return wrap\n\n\nclass Bisect:\n    def __init__(self, func):\n        self.__func = func\n\n    def bisect_left(self, x, lo, hi):\n        while lo < hi:\n            mid = (lo+hi)//2\n            if self.__func(mid) < x:\n                lo = mid+1\n            else:\n                hi = mid\n        return lo\n\n    def bisect_right(self, x, lo, hi):\n        while lo < hi:\n            mid = (lo+hi)//2\n            if x < self.__func(mid):\n                hi = mid\n            else:\n                lo = mid+1\n        return lo\n\n@mt\ndef slv(N, A, B, H):\n    c = A-B\n    def f(n):\n        m = n\n        for h in H:\n            h -= n * B\n            if h > 0:\n                m -= -(-h // c)\n        return 1 if m >= 0 else 0\n\n    return Bisect(f).bisect_left(1, 0, 10**9)\n\n\n\ndef main():\n    N, A, B = read_int_n()\n    H = [read_int() for _ in range(N)]\n    print(slv(N, A, B, H))\n\n\nif __name__ == '__main__':\n    main()\n", "code2": "MN = 1000000\nprime = []\nmem = [False] * 2 + [True] * MN\nfor i in range(2, MN):\n  if not mem[i]:\n    continue\n  prime.append(i)\n  for j in range(i + i, MN, i):\n    mem[j] = False\n\nwhile True:\n  N, ans = input(), 0\n  if not N:\n    break\n\n  for p in prime:\n    if p > N / 2:\n      break\n    if mem[N - p]:\n      ans += 1\n  print(ans)", "label": 0, "name1": "s796173031.py", "name2": "s690247182.py"}, {"id": 790, "code1": "# \u9802\u70b9 v \u306e\u6240\u5c5e\u3059\u308b\u30b0\u30eb\u30fc\u30d7\u3092\u8abf\u3079\u308b\ndef root(v, uni):\n  if uni[v] < 0:  # v \u304c\u89aa\u306e\u5834\u5408\n    return v\n  else:           # v \u304c\u5b50\u306e\u5834\u5408\n    uni[v] = root(uni[v], uni)  # \u89aa\u306eroot\u3092\u8abf\u3079\u308b\n    return uni[v]\n\n# \u9802\u70b9 a \u3068\u9802\u70b9 b \u3092\u3064\u306a\u3050\u3002\u3082\u3068\u3082\u3068\u540c\u3058\u30b0\u30eb\u30fc\u30d7\u306e\u3068\u304d\u3001False \u3092\u8fd4\u3059\ndef connect(a, b, uni):\n  # \u307e\u305a\u306f\u305d\u308c\u305e\u308c\u6839\u306e\u756a\u53f7\u306b\u7f6e\u304d\u63db\u3048\u308b\n  ra = root(a, uni)\n  rb = root(b, uni)\n  if ra == rb:  # a \u3068 b \u304c\u305d\u3082\u305d\u3082\u540c\u3058\u30b0\u30eb\u30fc\u30d7\u306b\u5c5e\u3057\u3066\u3044\u308b\u306a\u3089\u5373\u7d42\u4e86\n    return False\n\t\n  # ra \u3092\u5927\u304d\u306a\u30b0\u30eb\u30fc\u30d7\u306b\u3057\u305f\u3044\u306e\u3067\u3001\u9006\u3067\u3042\u308c\u3070\u5165\u308c\u66ff\u3048\u308b\n  if uni[ra] > uni[rb]: # rb\u306e\u65b9\u304c\u8981\u7d20\u6570\u304c\u591a\u3051\u308c\u3070\n    tmp = ra\n    ra  = rb \n    rb  = tmp\n\n  # ra \u3068 rb \u3092\u7d50\u5408\u3057\u3001rb \u306e\u89aa\u3092 ra \u3068\u3059\u308b\n  uni[ra] += uni[rb]\n  uni[rb] = ra\n  return True\n      \n##\nN, K, L = map(int, input().split())\n\nroad = [-1]*(N+1)\nrail = [-1]*(N+1)\n\nfor i in range(K):\n  a, b = map(int, input().split())\n  connect(a, b, road)\n\nfor i in range(L):\n  a, b = map(int, input().split())\n  connect(a, b, rail)\n\n\n##\ndp = [0]*(N+1)\nfor i in range(1, N+1):\n  dp[i] = (root(i, road), root(i, rail))\n\ndic = {}\nfor i in range(1, N+1):\n  key = dp[i]\n  if key not in dic:\n    dic[key] = 1\n  else:\n    dic[key] += 1\n\nfor i in range(1, N+1):\n  ans = dic[dp[i]]\n  if i == N:\n    print(ans)\n  else:\n    print(ans, end=\" \")\n", "code2": "mod=1000000007\nn=input()\na=map(int, raw_input().split())\nfac=[1]\nfor i in range(1, 100001):\n\tfac.append(fac[-1]*i%mod)\ninv=[0, 1]\nfor i in range(2, 100001):\n\tinv.append(-(mod/i)*inv[mod%i]%mod)\ninv_sum=[0]\nfor i in range(1, 100000):\n\tinv_sum.append((inv_sum[-1]+inv[i+1])%mod)\nresult=0\nfor i in range(n):\n\tresult+=(inv_sum[i]+1+inv_sum[n-i-1])*a[i]%mod\n\tresult%=mod\nprint result*fac[n]%mod\n", "label": 0, "name1": "s866905054.py", "name2": "s393644468.py"}, {"id": 979, "code1": "# coding: utf-8\n# Your code here!\nn,a,b=map(int,input().split())\nh=[]\nfor i in range(n):\n    x=int(input())\n    h.append(x)\n\ndef check(t):\n    c=0\n    for i in range(n):\n        c+=1+(max(0,h[i]-b*t)-1)//(a-b)\n    return t>=c\n\nl=0\nr=3+max(h)//b\nwhile r-l>1:\n    mid=(r-l)//2+l\n    if check(mid):\n        r=mid\n    else:\n        l=mid\nans=l\nif check(r):\n    ans=r\nprint(ans)\n\n", "code2": "N=int(input())\n\nD=list(map(int,input().split()))\nflg =False\nA = [0 for i in range(13)]\nA[0]=1\nfor i in range(N):\n    j = min(D[i],24-D[i])\n    if j==0:\n        flg=True\n        break\n    elif j==12:\n        if A[j]==1:\n            flg=True\n            break\n        else:\n            A[j]+=1\n    else:\n        if A[j]==2:\n            flg=True\n            break\n        else:\n            A[j]+=1\n\nimport copy\n\nif flg:\n    print(0)\nelse:\n    count=0\n    one_times=[]\n    times=[0]\n    for i in range(1,12): \n        if A[i]==1:\n            count+=1\n            one_times.append(i)\n        if A[i]==2:\n            times.append(i)\n            times.append(24-i)\n    if A[12]==1:\n        times.append(12)\n    score_max=0\n    for i in range(2**count):\n        t=copy.copy(times)\n        for j in range(count):\n            if (i//(2**j))%2==0:\n                t.append(one_times[j])\n            else:\n                t.append(24-one_times[j])\n        t.sort()\n        \n        score_min=24\n        for j in range(len(t)):\n            if j==len(t)-1:\n                score_min=min(t[0]+24-t[len(t)-1],score_min)\n            else:\n                score_min=min(t[j+1]-t[j],score_min)\n        score_max=max(score_min,score_max)\n    print(score_max)", "label": 0, "name1": "s031897610.py", "name2": "s868602829.py"}, {"id": 817, "code1": "n=int(input())\nA=[int(i) for i in input().split()]\nB=[int(i) for i in input().split()]\nct1,ct2,ct3=0,0,0\nfor i in range(n):\n  ct1+=(B[i]-A[i])\n  ct2+=max(A[i]-B[i],0)\n  if B[i]>A[i]:\n    ct3+=(B[i]-A[i]-1)//2+1\nprint(\"Yes\" if max(ct2,ct3)<=ct1 else \"No\")", "code2": "A, B, C = map(int, input().split())\nprint('Yes' if len(set([A, B, C])) == 2 else 'No')", "label": 0, "name1": "s862908490.py", "name2": "s278209661.py"}, {"id": 796, "code1": "mod=1000000007\nn=input()\na=map(int, raw_input().split())\nfac=[1]\nfor i in range(1, 100001):\n\tfac.append(fac[-1]*i%mod)\ninv=[0, 1]\nfor i in range(2, 100001):\n\tinv.append(-(mod/i)*inv[mod%i]%mod)\ninv_sum=[0]\nfor i in range(1, 100000):\n\tinv_sum.append((inv_sum[-1]+inv[i+1])%mod)\nresult=0\nfor i in range(n):\n\tresult+=(inv_sum[i]+1+inv_sum[n-i-1])*a[i]%mod\n\tresult%=mod\nprint result*fac[n]%mod\n", "code2": "from datetime import date\nwhile 1:\n\tm,d=map(int,raw_input().split())\n\tif m==0:break\n\tprint date(2004,m,d).strftime(\"%A\")", "label": 0, "name1": "s393644468.py", "name2": "s074010277.py"}, {"id": 565, "code1": "n,k = map(int, input().split())\namari=n%k\nn=min(amari, k-amari)\nprint(n)", "code2": "a,b,c = map(int, input().split())\n\nprint(\"Yes\" if a<c<b or b<c<a else \"No\")", "label": 0, "name1": "s328388206.py", "name2": "s135661044.py"}, {"id": 441, "code1": "# coding:utf-8\n\nimport sys\n\n\ninput = sys.stdin.readline\nINF = float('inf')\nMOD = 10 ** 9 + 7\n\n\ndef inpl(): return list(map(int, input().split()))\n\n\n# a\u306ep\u4e57\u3092\u6c42\u3081\u308b\u30a2\u30eb\u30b4\u30ea\u30ba\u30e0\n# MOD\u7248\ndef pow_mod(a, p):\n    if p == 0: return 1\n\n    if p % 2 == 0:\n        half_p = p // 2\n        half = pow_mod(a, half_p)\n        return half * half % MOD\n    else:\n        return a * pow_mod(a, p - 1) % MOD\n\n\ndef solve(N, A):\n    # \u968e\u4e57N!\u3092\u6c42\u3081\u308b\n    fact = [1] * N\n    for i in range(1, N):\n        fact[i] = fact[i - 1] * (i + 1) % MOD\n\n    # 1/N!\u306e\u9006\u5143\u3092\u6c42\u3081\u308b\n    fact_inv = [1] * N\n    fact_inv[-1] = pow_mod(fact[-1], MOD - 2)\n    for i in range(N - 1, 0, -1):\n        tmp = fact_inv[i] * (i + 1)\n        tmp %= MOD\n        fact_inv[i - 1] = tmp\n\n    # 1/k\u3092\u6c42\u3081\u308b\n    inv = [1]\n    for i in range(1, N):\n        inv.append((fact[i - 1] * fact_inv[i]) % MOD)\n\n    # 1/k\u306e\u7d2f\u7a4d\u548c\u3092\u6c42\u3081\u308b\n    inv_sum = [1]\n    for i in range(1, N):\n        inv_sum.append((inv_sum[-1] + inv[i]) % MOD)\n\n    # \u7d2f\u7a4d\u548c\u306e\u7d50\u679c\u3092\u4fc2\u6570\u3068\u3057\u3066Ai\u306b\u639b\u3051\u3066\u3001\u52a0\u7b97\u3059\u308b\n    ans = 0\n    for i in range(N):\n        ans += A[i] * (inv_sum[i] + inv_sum[N - 1 - i] - 1)\n        ans %= MOD\n\n    # ans\u306bN!\u3092\u639b\u3051\u305f\u3082\u306e\u3092\u8fd4\u3059\n    return ans * fact[-1] % MOD\n\n\nN = int(input())\nA = inpl()\nprint(solve(N, A))\n", "code2": "mod=1000000007\nn=input()\na=map(int, raw_input().split())\nfac=[1]\nfor i in range(1, 100001):\n\tfac.append(fac[-1]*i%mod)\ninv=[0, 1]\nfor i in range(2, 100001):\n\tinv.append(-(mod/i)*inv[mod%i]%mod)\ninv_sum=[0]\nfor i in range(1, 100000):\n\tinv_sum.append((inv_sum[-1]+inv[i+1])%mod)\nresult=0\nfor i in range(n):\n\tresult+=(inv_sum[i]+1+inv_sum[n-i-1])*a[i]%mod\n\tresult%=mod\nprint result*fac[n]%mod\n", "label": 1, "name1": "s535253599.py", "name2": "s393644468.py"}, {"id": 563, "code1": "n,k=map(int,input().split())\nx=n%k\nprint(min(x,abs(x-k)))", "code2": "import math\na, b, c = map(int, input().split())\nh = b * math.sin(math.radians(c))\nprint(a * h / 2)\nprint(a + b + math.sqrt((a-b*math.cos(math.radians(c)))**2 + h**2))\nprint(h)\n\n", "label": 0, "name1": "s584027827.py", "name2": "s253160566.py"}, {"id": 823, "code1": "N,M=map(int,input().split())\ngraph=[[] for _ in range(N)]\nfor _ in range(M):\n    a,b=map(int,input().split())\n    graph[a-1].append(b-1)\n    graph[b-1].append(a-1)\n\nvisited=[False]*N\nvisited[0]=True\n\ndef dfs(v,N,visited):\n    if all(visited):\n        return 1\n    \n    ret=0\n    for new_v in graph[v]:\n        if visited[new_v]:\n            continue\n        \n        visited[new_v]=True\n        ret+=dfs(new_v,N,visited)\n        visited[new_v]=False\n    \n    return ret\n\nprint(dfs(0,N,visited))", "code2": "n=int(input())\ns=input()\n\nE=[0 for i in range(n)]\nW=[0 for i in range(n)]\n\ncnt=0\nfor i in range(n):\n    W[i]=cnt\n    if s[i]==\"W\":\n        cnt+=1\n\ncnt=0   \nfor i in range(n):\n    E[n-1-i]=cnt\n    if s[n-1-i]==\"E\":\n        cnt+=1\n\nmini=10**8\nfor i in range(n):\n    mini=min(mini,E[i]+W[i])\n\nprint(mini)", "label": 0, "name1": "s866159978.py", "name2": "s614583596.py"}, {"id": 266, "code1": "a,b,c,k=map(int,input().split())\n\nif k <= a:\n    print(k)\nelif k <= a+b:\n    print(a)\nelse:\n    print(a-(k-(a+b)))", "code2": "a, b, c, k = map(int, input().split())\nif a>=k:\n  print(k)\nelif a+b>=k>a:\n  print(a)\nelif k>a+b:\n  print(a-(k-a-b))", "label": 1, "name1": "s019552488.py", "name2": "s714812452.py"}, {"id": 877, "code1": "A,B,C,X,Y=map(int,input().split())\n\nif A+B<=2*C:\n    ans=A*X+B*Y\n\nelif X<=Y:\n    ans=2*X*C\n    Y-=X\n    ans+=min(2*Y*C,Y*B)\n\nelif X>Y:\n    ans=2*Y*C\n    X-=Y\n    ans+=min(2*X*C,X*A)\n\nprint(ans)", "code2": "k = int(input())\n\na, b = map(int, input().split())\n\nflag = False\n\nfor i in range(1,1000):\n    n = i*k\n    if n >= a and n <=b:\n        flag =True\n        break\n\nif flag == True:\n    print(\"OK\")\nelse:\n    print(\"NG\")", "label": 0, "name1": "s332388641.py", "name2": "s386666511.py"}, {"id": 31, "code1": "n,a,b = map(int, input().split())\nXs = list(map(int, input().split()))\n\nds = [0] * (n+10)\nfor i in range(n-1):\n    cost1 = a*(Xs[i+1] - Xs[i])\n    cost2 = b\n    ds[i+1] = ds[i] + min(cost1, cost2)\nprint(ds[n-1])", "code2": "n,a,b=map(int,input().split())\nx=list(map(int,input().split()))\nans=0\npre_x=x[0]\nfor i in range(1,n):\n    xi=x[i]\n    if((xi-pre_x)*a >= b):\n        ans+=b\n    else:\n        ans+=(xi-pre_x)*a\n    pre_x=xi\nprint(ans)", "label": 1, "name1": "s039990138.py", "name2": "s590352263.py"}, {"id": 98, "code1": "n,k=map(int,input().split())\nx=n%k\nprint(min(x,abs(x-k)))", "code2": "N,K=map(int,input().split())\na=N%K\nb=K/2\n\nif a<=b:\n    print(a)\nelse:\n    print(K-a)\n", "label": 1, "name1": "s584027827.py", "name2": "s355446547.py"}, {"id": 493, "code1": "import sys\nfrom collections import defaultdict, Counter, deque\nfrom itertools import accumulate, permutations, combinations\nfrom operator import itemgetter\nfrom bisect import bisect_left, bisect_right, bisect\nfrom heapq import heappop, heappush\nfrom fractions import gcd\nfrom math import ceil, floor, sqrt, cos, sin, pi\nfrom copy import deepcopy\n\n# If you use recursive call, uncomment this code\n#sys.setrecursionlimit(10**6)\n\ndef main():\n    nums = set(map(int, input().split()))\n    if len(nums) == 2:\n        print(\"Yes\")\n    else:\n        print(\"No\")\n\n\nif __name__ == '__main__':\n    main()\n", "code2": "A, B, C = map(int, input().split())\npairs = 0\nif (A==B):\n    pairs += 1\nif (B==C):\n    pairs += 1\nif (A==C):\n    pairs += 1\nif (pairs==1):\n    print(\"Yes\")\nelse:\n    print(\"No\")", "label": 1, "name1": "s765543700.py", "name2": "s874780976.py"}, {"id": 129, "code1": "def f(n, s):\n    md = 10 ** 9 + 7\n    dp = [1] * n\n    for i in range(n - 1):\n        if s[i] == \"<\":\n            L = dp[0]\n            for dpi in range(1, n - i - 1):\n                dp[dpi] = L = (dp[dpi] + L) % md\n            dp = dp[:-1]\n        else:\n            R = dp[-1]\n            for dpi in range(n - i - 2, 0, -1):\n                dp[dpi] = R = (dp[dpi] + R) % md\n            dp = dp[1:]\n    print(dp[0])\n\n\nn = int(input())\ns = input()\nf(n, s)\n", "code2": "import sys\nread = sys.stdin.buffer.read\nreadline = sys.stdin.buffer.readline\nreadlines = sys.stdin.buffer.readlines\n\nimport numpy as np\n\nN = int(readline())\nS = read().rstrip().decode('utf-8')\n\nMOD = 10**9 + 7\n\n\"\"\"\n\u30fb\u6700\u5f8c\u306b\u4f7f\u3063\u305f\u6570\u306b\u5bfe\u3057\u3066\u3001\u4e0b\u5074\u306b\u6b8b\u3063\u3066\u3044\u308b\u500b\u6570 -> \u6570\u3048\u4e0a\u3052\n\"\"\"\n\ndp = np.ones(N,np.int64) # \u5de6\u7aef\n\nfor s in S:\n    prev = dp\n    if s == '<':\n        # 0,1,...,n\u304cdp[n]\u306b\u9077\u79fb\u3059\u308b\n        dp = prev[:-1].cumsum()\n    else:\n        # n+1,n+2,...\u304cdp[n]\u306b\u9077\u79fb\u3059\u308b\n        dp = prev[1:][::-1].cumsum()[::-1]\n    dp %= MOD\n\nanswer = dp[0]\nprint(answer)", "label": 1, "name1": "s415178183.py", "name2": "s898339720.py"}, {"id": 466, "code1": "n=int(input())\n\nL=[[] for i in range(n+1)]\n\nfor i in range(n-1):\n    a,b=map(int,input().split())\n    L[a].append(b)\n    L[b].append(a)\n\nfe=[0 for i in range(n+1)]\nque=[(1,0)]\nvisited=[0 for i in range(n+1)]\nvisited[1]=1\nhead=0\n\nwhile len(que)>head:\n    now=que[head]\n    head+=1\n    fe[now[0]]=now[1]\n    for nex in L[now[0]]:\n        if visited[nex]==0:\n            visited[nex]=1\n            que.append((nex,now[1]+1))\n            \nsn=[0 for i in range(n+1)]\nque=[(n,0)]\nvisited=[0 for i in range(n+1)]\nvisited[-1]=1\nhead=0\n\nwhile len(que)>head:\n    now=que[head]\n    head+=1\n    sn[now[0]]=now[1]\n    for nex in L[now[0]]:\n        if visited[nex]==0:\n            visited[nex]=1\n            que.append((nex,now[1]+1))\n\nkaname=[]\nfor i in range(1,n+1):\n    ck=fe[i]-sn[i]\n    if ck==1 or ck==2:\n        kaname.append(i)\n\ncnt=0\nque=[(1,0)]\nvisited=[0 for i in range(n+1)]\nvisited[1]=1\nhead=0\n\nwhile len(que)>head:\n    now=que[head]\n    head+=1\n    cnt+=1\n    for nex in L[now[0]]:\n        if visited[nex]==0 and not nex in kaname:\n            visited[nex]=1\n            que.append((nex,now[1]+1))\n\nif cnt*2>n:\n    print(\"Fennec\")\nelse:\n    print(\"Snuke\")", "code2": "import sys\nsys.setrecursionlimit(10**7)\n\nn = int(input())\nflag = [-1 for _ in range(n)]\nla=[[] for _ in range(n)]\nfor _ in range(n-1):\n    a,b = map(int,input().split())\n    la[a-1].append(b-1)\n    la[b-1].append(a-1)\n\ndef dfs(s,d):\n    global flag\n    global la\n    flag[s] = d + 1\n    for g in la[s]:\n        if flag[g] == -1:\n            dfs(g,flag[s])\n\ndef main():\n    global n\n    global flag\n    dfs(0,-1)\n    distf = flag[:]\n    flag = [-1 for _ in range(n)]\n    dfs(n-1,-1)\n    dists = flag[:]\n    res = 0\n    for i in range(n):\n        if distf[i] <= dists[i]:\n            res += 1\n        else:\n            res -= 1\n    if res > 0:\n        return \"Fennec\"\n    else:\n        return \"Snuke\"\n\n\n\nprint(main())", "label": 1, "name1": "s845599163.py", "name2": "s480551459.py"}, {"id": 806, "code1": "a=['Wednesday','Thursday','Friday','Saturday','Sunday','Monday','Tuesday',0]\nwhile True:\n    q=map(int,raw_input().split())\n    if sum(q) == 0: break\n    print a[(sum([0,31,29,31,30,31,30,31,31,30,31,30,31][:q[0]])+q[1])%7]", "code2": "N = int(input())\nA = list(map(int, input().split()))\nB = list(map(int, input().split()))\n\nplus_2 = 0\nminus = 0\nfor a, b in zip(A, B):\n    if a < b:\n        plus_2 += (b-a)//2\n    else:\n        minus += a-b\n\nif plus_2 >= minus:\n    print('Yes')\nelse:\n    print('No')", "label": 0, "name1": "s388074654.py", "name2": "s301247411.py"}, {"id": 892, "code1": "for i in range(1000):\n    print \"Hello World\"", "code2": "N,M=map(int,input().split())\n\n\nm=2**M\nans=0\ni=1\nwhile True:\n        k=( (1*((1/m))) * ((( (m-1)/m)**(i-1)) )) * ( 1900*M*i +(N-M)*100*i)#       +( (1*((1/m))) * ((( (m-1)/m)**(i-1)) )) *\n        ans+=k\n        i+=1\n        if(i>10000):\n                break\n\nprint(int(ans+0.5))", "label": 0, "name1": "s267628664.py", "name2": "s967172030.py"}, {"id": 174, "code1": "while 1:\n\tW, H = map(int,raw_input().split(\" \"))\n\tif W == H == 0: \n\t\tbreak\n\tfield = [[c for c in raw_input()] for _ in range(H)]\n\tsecret = [0, \"\"]\n\tfor j in range(H):\n\t\tfor i in range(W):\n\t\t\tif not field[j][i].isdigit():\n\t\t\t\tcontinue\n\t\t\tleft = top = \"\"\n\t\t\tif i > 0 and field[j][i-1].isdigit() and field[j][i-1] != \"0\":\n\t\t\t\tleft = field[j][i-1]\n\t\t\tif j > 0 and field[j-1][i].isdigit() and field[j-1][i] != \"0\":\n\t\t\t\ttop = field[j-1][i]\n\t\t\tif len(left) == len(top):\n\t\t\t\tfield[j][i] = (left if left > top else top) + field[j][i]\n\t\t\telse :\n\t\t\t\tfield[j][i] = (left if len(left) > len(top) else top) + field[j][i]\n\t\t\tlength = len(field[j][i])\n\t\t\tif length > secret[0]:\n\t\t\t\tsecret[1] = field[j][i]\n\t\t\t\tsecret[0] = length\n\t\t\telif length == secret[0] and field[j][i] > secret[1]:\n\t\t\t\tsecret[1] = field[j][i]\n\tprint secret[1]", "code2": "# coding: utf-8\ndef check(a,b):\n    if (a,b) in memo:\n        return memo[(a,b)]\n    if 0<=a<h and 0<=b<w and field[a][b].isdigit():\n        x=check(a+1,b)\n        y=check(a,b+1)\n        memo[(a,b)]=field[a][b]+(x if len(x)>len(y) else x if len(x)==len(y) and len(x)!=0 and int(x)>int(y) else y)\n        return field[a][b]+(x if len(x)>len(y) else x if len(x)==len(y) and len(x)!=0 and int(x)>int(y) else y)\n    else:\n        return ''\nwhile 1:\n    w,h=map(int,input().split())\n    if w==0:\n        break\n    field=[]\n    for i in range(h):\n        field.append(list(input()))\n    ans='0'\n    memo={}\n    for i in range(h):\n        for j in range(w):\n            if field[i][j]!='0' and field[i][j].isdigit():\n                tmp=check(i,j)\n                if int(ans)<int(tmp):\n                    ans=tmp\n    print(ans)\n", "label": 1, "name1": "s782922064.py", "name2": "s573602328.py"}, {"id": 525, "code1": "import math\nimport statistics\n\nwhile(1):\n    n=int(input())\n    if(not n):\n        break\n    S=list(map(int,input().split(\" \")))\n    mean=statistics.mean(S)\n    #print(mean)\n    S=list(map(lambda x: (x-mean)**2, S))\n    #print(S)\n    print(math.sqrt(sum(S)/n))\n\n", "code2": "def solve():\n    N = int(input())\n    A = list(map(int, input().split()))\n    b = 0\n    c = 0\n    d = 0\n    for a in A:\n        if a == b:\n            c += 1\n        if a != b:\n            d += c//2\n            b = a\n            c = 1\n    d += c//2\n    b = a\n    c = 0\n    print(d)\n    \n\nif __name__ == '__main__':\n    solve()", "label": 0, "name1": "s513646243.py", "name2": "s237957783.py"}, {"id": 241, "code1": "N, K = map(int, input().split())\nW = [int(input()) for w in range(N)]\n\ndef check(p):\n    i = 0\n    for _ in range(K):\n        s = 0\n        while s + W[i] <= p:\n            s += W[i]\n            i += 1\n            if i == N:\n                return N\n    return i\n\nleft = 0\nright = 100000 * 10000\nmid = 0\nwhile 1 < right - left:\n    mid = (left + right) / 2\n    v = check(mid)\n    if v >= N:\n        right = mid\n    else:\n        left = mid\n\nprint(int(right))\n", "code2": "def canLoad(n, k, p):\n    global w\n    load = 0\n    for i in range(n):\n        load += w[i]\n        if load <= p:\n            continue\n        k -= 1\n        if k == 0:\n            return False\n        load = w[i]\n    return True\n\ndef solve(n, k, pmin, pmax):\n    if pmin + 1 >= pmax:\n        return pmax\n    newp = (pmax + pmin) // 2\n    if canLoad(n, k, newp):\n        return solve(n, k, pmin, newp)\n    else:\n        return solve(n, k, newp, pmax)\n\nn, k = map(int, input().split())\nw = [0]*n\nwsum = 0\nwmax = 0\nfor i in range(n):\n    w[i] = int(input())\n    wsum += w[i]\n    if w[i] > wmax:\n        wmax = w[i]\n\n# p \u306e\u6700\u5c0f\u306e\u5019\u88dc\u306f wmax \u3068 ceil(wsum/k) \u306e\u6700\u5927\u5024\npmin = max(wmax, wsum // k if wsum % k == 0 else wsum // k + 1)\npmax = wsum\np = pmin\nif not canLoad(n, k, pmin):\n    p = solve(n, k, pmin, pmax)\nprint(p)\n\n", "label": 1, "name1": "s152551733.py", "name2": "s457118576.py"}, {"id": 367, "code1": "from heapq import heappush,heappop\nINF=10**18\nn,m,r=map(int,input().split())\ne=[[] for _ in range(n)]\nd=[INF]*n\nfor i in range(m):\n  a,b,c=map(int,input().split())\n  e[a].append((b,c))\nq=[]\nheappush(q,(0,r))\nd[r]=0\nwhile q:\n  dist,node=heappop(q)\n  for to,cost in e[node]:\n    if d[to]>cost+dist:\n      d[to]=cost+dist\n      heappush(q,(d[to],to))\nfor i in d:\n  if i!=INF:print(i)\n  else:print('INF')\n", "code2": "# -*- coding: utf-8 -*-\nimport math\n\ngraph = []\n# input \nV, E, r = map(int, input().split())\n# initialize\nlens = [float('inf') for i in range(V)]\nlens[r] = 0\n# input\nfor i in range(E) :\n    start, desti, distance = map(int, input().split())\n    graph.append([start, desti, distance])\n    \n# judge \nwhile True :\n    # set a flag\n    flag = True\n    for q in graph :\n        # compare the distance \n        if lens[q[1]] > lens[q[0]] + q[2]:\n          lens[q[1]] = min(lens[q[1]], lens[q[0]] + q[2])\n          flag = False         \n    if flag:\n      break\n# output results \nfor item in lens :\n    if math.isinf(item):\n        print(\"INF\")\n    else :\n        print(item)\n", "label": 1, "name1": "s737089154.py", "name2": "s376653599.py"}, {"id": 358, "code1": "\nX, Y = list(map(int, input().split()))\n\nans = 0\nwhile X <= Y:\n\tX *= 2\n\tans += 1\n\nprint(ans)", "code2": "X,Y = map(int,input().split())\na = X\nans = 1\nwhile True:\n    a *= 2\n    if a > Y: break\n    ans += 1\nprint(ans)\n", "label": 1, "name1": "s831535184.py", "name2": "s536240149.py"}, {"id": 985, "code1": "MAX = 1000001\nprimes = list()\nfor i in range(MAX):\n    primes.append(True)\nprimes[0] = False\nprimes[1] = False\n\nfor i in range(2, MAX):\n    j = i + i\n    while j < MAX:\n        primes[j] = False\n        j = j + i\n\nwhile True:\n    n = int(input())\n    if n == 0:\n        break\n\n    ans = 0\n    for i in range(1, n // 2 + 1):\n        if primes[i] and primes[n-i]:\n            ans += 1\n    print(ans)\n", "code2": "S = input()\nl = len(S)\n\nfor i in range(1, l//2):\n  if S[:l//2-i] == S[l//2-i:l-2*i]:\n    print(l-2*i)\n    break", "label": 0, "name1": "s246285393.py", "name2": "s423959382.py"}, {"id": 157, "code1": "import sys\n\nimport bisect\n\n# from collections import Counter, deque, defaultdict\n\n# import copy\n# from heapq import heappush, heappop, heapify\n# from fractions import gcd\n# import itertools\n# from operator import attrgetter, itemgetter\nimport math\n\n# import numpy as np\n\nreadline = sys.stdin.readline\nMOD = 10 ** 9 + 7\nINF = float('INF')\nsys.setrecursionlimit(10 ** 5)\n\n\ndef main():\n    q = int(input())\n\n    for i in range(q):\n        a, b = list(map(int, readline().split()))\n\n        if a > b:\n            a, b = b, a\n\n        if a == b or a + 1 == b:\n            print(2 * a - 2)\n        else:\n            ab = a * b\n            ok = 0\n            ng = int(ab ** 0.5) + 1000000\n            while abs(ng - ok) > 1:\n                mid = (ok + ng) // 2\n                if mid ** 2 < ab:\n                    ok = mid\n                else:\n                    ng = mid\n            c = ok\n\n            if c * (c + 1) < ab:\n                print(2 * c - 1)\n            else:\n                print(2 * c - 2)\n\n\nif __name__ == '__main__':\n    main()\n", "code2": "import math\nq = int(input())\nfor i in range(q):\n  a,b = map(int,input().split())\n  if a == b:\n    print(a*2-2)\n    continue\n  y = max(a,b)\n  z = min(a,b)\n  ind = math.sqrt(a*b)\n  d = int(ind)\n  if ind.is_integer():\n    d -= 1\n  cnt = 0\n  if d*(d+1) < a*b:\n    if d >= z:\n      cnt = 1\n    if d+1 >= y:\n      cnt = 2\n    print(2*d-cnt)\n  else:\n    if d >= z:\n      cnt = 1\n    print(2*d-1-cnt)", "label": 1, "name1": "s587240804.py", "name2": "s038587801.py"}, {"id": 636, "code1": "#coding=UTF-8\n\nN=int(input())\nmozir=input()\nhyo=mozir.split(' ')\n\nRec_LTR=[int(mono) for mono in hyo]\n\nmozir=input()\nhyo=mozir.split(' ')\n\nRec_RTL=[int(mono) for mono in hyo]\n\nLTR_hani=[]\nhighest=0\nfor idx in range(0,N,1):\n    if Rec_LTR[idx]>highest:\n        highest=Rec_LTR[idx]\n        LTR_hani.append([highest,highest])\n    else:\n        LTR_hani.append([highest,1])\n\nRTL_hani=[None]*N\nhighest=0\nfor idx in range(N-1,-1,-1):\n    if Rec_RTL[idx]>highest:\n        highest=Rec_RTL[idx]\n        RTL_hani[idx]=[highest,highest]\n    else:\n        RTL_hani[idx]=[highest,1]\n\n#concat\nans=1\nhou=1000000007\nfor idx in range(0,N,1):\n    # prod set\n    ue=min(RTL_hani[idx][0],LTR_hani[idx][0])\n    shita=max(RTL_hani[idx][1],LTR_hani[idx][1])\n    ans=(ans*max((ue-shita+1),0))%hou\n\nprint(ans)\n", "code2": "import itertools\n\nN = int(input())\nP = tuple(map(int, input().split()))\nQ = tuple(map(int, input().split()))\n\nfor i, pat in enumerate(itertools.permutations(range(1, N + 1)), N):\n    if pat == P:\n        a = i\n    if pat == Q:\n        b = i\n\nans = abs(a - b)\n\nprint(ans)\n", "label": 0, "name1": "s271635856.py", "name2": "s509770499.py"}, {"id": 521, "code1": "def main():\n    N, A, B = map(int, input().split())\n    X = map(int, input().split())\n\n    ret = 0\n    curr = next(X)\n    for x in X:\n        ret += min((x - curr) * A, B)\n        curr = x\n    print(ret)\n\n\nif __name__ == '__main__':\n    main()\n", "code2": "while True:\n    n = int(input())\n    if n == 0:\n        break\n    scores = list(map(int, input().split()))\n    m = sum(scores) / n\n    dev = list((i - m) for i in scores)\n    var = sum((i ** 2) for i in dev) / n\n    stdev = var ** 0.5\n    print(stdev)\n\n", "label": 0, "name1": "s627561056.py", "name2": "s320188133.py"}, {"id": 681, "code1": "l=[]\nwhile True:\n    tmp=map(int,raw_input().split())\n    if sum(tmp)==0:\n        break\n    l.append(tmp)\n\nfor n,x in l:\n    c=0\n    for i in range(1,n):\n        for j in range(i+1,n):\n            k=x-i-j\n            if j<k<=n:\n                c+=1\n    print c", "code2": "deg = [0] * 4\nfor _ in range(3):\n    a, b = map(int, input().split())\n    deg[a - 1] += 1\n    deg[b - 1] += 1\nif all(x <= 2 for x in deg):\n    print(\"YES\")\nelse:\n    print(\"NO\")\n", "label": 0, "name1": "s427641012.py", "name2": "s546079663.py"}, {"id": 14, "code1": "S = input()\nodd = S[0::2]\neven = S[1::2]\nans = 'No'\n\nif 'L' not in odd:\n    if 'R' not in even:\n        ans = 'Yes'\n\nprint(ans)", "code2": "def inpl():\n    return list(map(int, input().split()))\n\n\nS = input()\n\nflag = True\nfor i in range(len(S)):\n    if i % 2 == 0 and S[i] in 'RUD':\n        continue\n    elif i % 2 == 1 and S[i] in 'LUD':\n        continue\n    flag = False\n\nprint('Yes' if flag is True else 'No')\n", "label": 1, "name1": "s134920706.py", "name2": "s669982187.py"}, {"id": 590, "code1": "import sys\nread = sys.stdin.buffer.read\nreadline = sys.stdin.buffer.readline\nreadlines = sys.stdin.buffer.readlines\n\nimport numpy as np\n\nN = int(readline())\nS = read().rstrip().decode('utf-8')\n\nMOD = 10**9 + 7\n\n\"\"\"\n\u30fb\u6700\u5f8c\u306b\u4f7f\u3063\u305f\u6570\u306b\u5bfe\u3057\u3066\u3001\u4e0b\u5074\u306b\u6b8b\u3063\u3066\u3044\u308b\u500b\u6570 -> \u6570\u3048\u4e0a\u3052\n\"\"\"\n\ndp = np.ones(N,np.int64) # \u5de6\u7aef\n\nfor s in S:\n    prev = dp\n    if s == '<':\n        # 0,1,...,n\u304cdp[n]\u306b\u9077\u79fb\u3059\u308b\n        dp = prev[:-1].cumsum()\n    else:\n        # n+1,n+2,...\u304cdp[n]\u306b\u9077\u79fb\u3059\u308b\n        dp = prev[1:][::-1].cumsum()[::-1]\n    dp %= MOD\n\nanswer = dp[0]\nprint(answer)", "code2": "y = [True for i in range(250001)]\ny[0] = y[1] = False\nfor i in range(2, 500):\n    if y[i]:\n        for j in range(2, 250000 // i + 1):\n            y[i * j] = False\nwhile True:\n    n = int(input())\n    if n == 0:\n        break\n    print(y[n + 1 : n * 2 + 1].count(True))\n", "label": 0, "name1": "s898339720.py", "name2": "s889149636.py"}, {"id": 163, "code1": "a=b=0\nfor i in input():c=i==\"T\";d=a>0;a+=1-c-c*d;b+=c*(1-d)\nprint(a+b)", "code2": "X = input()\n\ns_cnt = 0\nt_cnt = 0\n\nans = 0\n\nfor n in range(len(X)):\n  if X[n] == \"S\":\n    s_cnt += 1\n  else:\n    t_cnt += 1\n  ans = max(ans,t_cnt-s_cnt)\nprint(ans*2)", "label": 1, "name1": "s373261912.py", "name2": "s239717601.py"}, {"id": 886, "code1": "k = int(input())\n\na, b = map(int, input().split())\n\nflag = False\n\nfor i in range(1,1000):\n    n = i*k\n    if n >= a and n <=b:\n        flag =True\n        break\n\nif flag == True:\n    print(\"OK\")\nelse:\n    print(\"NG\")", "code2": "for i in range(1000):\n    print \"Hello World\"", "label": 0, "name1": "s386666511.py", "name2": "s267628664.py"}, {"id": 116, "code1": "a,b,c=map(int,input().split())\nif (a>c and b<c) or (a<c and b>c):\n  print(\"Yes\")\nelse:\n  print(\"No\")", "code2": "A,B,C=map(int,input().split())\nM=max(A,B)\nm=min(A,B)\nif m<C and C<M:\n  print('Yes')\nelse:\n  print('No')", "label": 1, "name1": "s473634907.py", "name2": "s087529023.py"}, {"id": 952, "code1": "n = input()\ncnt = 0\nfor i in range(len(n)):\n    if n[i] == '2':\n        cnt += 1\nprint(cnt)", "code2": "n,m,k=map(int,input().split())\nn,m=min(n,m),max(n,m)\nfor i in range(n//2+n%2):\n  num,dem=k-i*m,n-2*i\n  if num%dem or not(0<=num//dem<=m):continue\n  print(\"Yes\");exit()\nprint(\"No\")", "label": 0, "name1": "s798013515.py", "name2": "s659941727.py"}, {"id": 425, "code1": "import math,string,itertools,fractions,heapq,collections,re,array,bisect,sys,random,time,copy,functools\n\nsys.setrecursionlimit(10**7)\ninf = 10**20\neps = 1.0 / 10**10\nmod = 998244353\ndd = [(0,-1),(1,0),(0,1),(-1,0)]\nddn = [(0,-1),(1,-1),(1,0),(1,1),(0,1),(-1,-1),(-1,0),(-1,1)]\n\ndef LI(): return [int(x) for x in sys.stdin.readline().split()]\ndef LI_(): return [int(x)-1 for x in sys.stdin.readline().split()]\ndef LF(): return [float(x) for x in sys.stdin.readline().split()]\ndef LS(): return sys.stdin.readline().split()\ndef I(): return int(sys.stdin.readline())\ndef F(): return float(sys.stdin.readline())\ndef S(): return input()\ndef pf(s): return print(s, flush=True)\n\n\ndef main():\n    rr = []\n\n    while True:\n        n = I()\n        if n == 0:\n            break\n\n        a = [S().split(':') for _ in range(n)]\n        ts = set([c[0] for c in a])\n        ms = {}\n        for t,m in a:\n            ms[t] = m[:-1].split(',')\n\n        fm = {}\n        def f(c):\n            if c in fm:\n                return fm[c]\n            if c in ts:\n                s = set()\n                for k in ms[c]:\n                    s |= f(k)\n                fm[c] = s\n                return s\n            fm[c] = set([c])\n            return fm[c]\n\n        r = f(a[0][0])\n\n        rr.append(len(r))\n\n    return '\\n'.join(map(str,rr))\n\n\nprint(main())\n\n\n", "code2": "#!/usr/bin/env python3\n\nimport sys\nimport math\nimport re\nfrom bisect import bisect_right as br\nfrom bisect import bisect_left as bl\nsys.setrecursionlimit(1000000)\nfrom heapq import heappush, heappop,heappushpop\nfrom collections import defaultdict\nfrom itertools import accumulate\nfrom collections import Counter\nfrom collections import deque\nfrom operator import itemgetter\nfrom itertools import permutations\nmod = 10**9 + 7\ninf = float('inf')\ndef I(): return int(sys.stdin.readline())\ndef LI(): return list(map(int,sys.stdin.readline().split()))\n\nwhile 1:\n    n = I()\n    if n == 0:\n        quit()\n    f = defaultdict(dict)\n    t = defaultdict(lambda : False)\n    ch = defaultdict(lambda : False)\n    stack = []\n    for i in range(n):\n        x = input()[:-1].split(':')\n        y = x[1].split(',')\n        x = x[0]\n        for j in y:\n            f[x][j] = 1\n            if i != 0:\n                continue\n            stack.append(j)\n    ans = 0\n    while stack:\n        x = stack.pop()\n        if ch[x]:\n            continue\n        ch[x] = True\n        if len(f[x]) == 0 and not t[x]:\n            ans += 1\n            t[x] = True\n            continue\n        for i,j in f[x].items():\n            stack.append(i)\n    print(ans)\n", "label": 1, "name1": "s451877142.py", "name2": "s732192628.py"}, {"id": 533, "code1": "N = int(input())\nAs = list(map(int,input().split()))\ncounts = []\nnow = As[0]\ncount = 1\nfor a in range(1,len(As)):\n    if As[a]==now:\n        count+=1\n        if a == len(As)-1:\n            counts.append(count)\n    else:\n        counts.append(count)\n        count =1\n        now = As[a]\nprint(sum([i//2 for i in counts]))", "code2": "a = int(input())\nb = int(input())\nc = int(input())\nd = int(input())\n\nt = a+b+c+d\nx = t // 60\ny = t - (x*60)\nprint(x)\nprint(y)\n", "label": 0, "name1": "s736034553.py", "name2": "s681424325.py"}, {"id": 172, "code1": "# AOJ 1126: The Secret Number\n# Python3 2018.7.16 bal4u\n\nwhile True:\n\tW, H = map(int, input().split())\n\tif W == 0: break\n\td = [list(input()) for r in range(H)]\n\ta = [[0 for c in range(W)] for r in range(H)]\n\tans = 0\n\tfor r in range(H):\n\t\tfor c in range(W):\n\t\t\tif not d[r][c].isdigit(): continue\n\t\t\ta[r][c] = k = int(d[r][c])\n\t\t\tif c > 0 and d[r][c-1].isdigit():\n\t\t\t\ta[r][c] = a[r][c-1]*10 + k\n\t\t\tif r > 0 and d[r-1][c].isdigit():\n\t\t\t\tt = a[r-1][c]*10 + k\n\t\t\t\ta[r][c] = max(a[r][c], t)\n\t\t\tans = max(ans, a[r][c])\n\tprint(ans);\n\n", "code2": "# coding: utf-8\ndef check(a,b):\n    if (a,b) in memo:\n        return memo[(a,b)]\n    if 0<=a<h and 0<=b<w and field[a][b].isdigit():\n        x=check(a+1,b)\n        y=check(a,b+1)\n        memo[(a,b)]=field[a][b]+(x if len(x)>len(y) else x if len(x)==len(y) and len(x)!=0 and int(x)>int(y) else y)\n        return field[a][b]+(x if len(x)>len(y) else x if len(x)==len(y) and len(x)!=0 and int(x)>int(y) else y)\n    else:\n        return ''\nwhile 1:\n    w,h=map(int,input().split())\n    if w==0:\n        break\n    field=[]\n    for i in range(h):\n        field.append(list(input()))\n    ans='0'\n    memo={}\n    for i in range(h):\n        for j in range(w):\n            if field[i][j]!='0' and field[i][j].isdigit():\n                tmp=check(i,j)\n                if int(ans)<int(tmp):\n                    ans=tmp\n    print(ans)\n", "label": 1, "name1": "s855726623.py", "name2": "s573602328.py"}, {"id": 915, "code1": "S = [input() for i in range(3)]\ncnt = [0, 0, 0]\nlimit = [len(S[i]) for i in range(3)]\npoint = 0\nNUM = \"ABC\"\nwhile cnt[point] != limit[point]:\n  if S[point][cnt[point]] == 'a':\n    cnt[point] += 1\n    point = 0\n  elif S[point][cnt[point]] == 'b':\n    cnt[point] += 1\n    point = 1\n  elif S[point][cnt[point]] == 'c':\n    cnt[point] += 1\n    point = 2\nprint(NUM[point])", "code2": "N=int(input())\ns=[]\nfor i in range(N):\n    s.append(int(input()))\ns.sort()\n\nif sum(s)%10!=0:\n    ans=sum(s)\nelse:\n    f=False\n    for si in s:\n        if si%10!=0:\n            ans=sum(s)-si\n            f=True\n            break\n    if not f:\n        ans=0\n\nprint(ans)", "label": 0, "name1": "s464702195.py", "name2": "s777989048.py"}, {"id": 940, "code1": "N=int(input())\na=list(map(int,input().split()))\ndef cond(n):\n    L=(0,-1)\n    for i in range(1,N):\n        if a[i]>=n and a[i-1]>=n:\n            L=(i,1)\n        elif a[i]<n and a[i-1]<n:\n            L=(i,0)\n\n    R=(2*N-1,-1)\n    for i in range(2*N-3,N-2,-1):\n        if a[i]>=n and a[i+1]>=n:\n            R=(i,1)\n        elif a[i]<n and a[i+1]<n:\n            R=(i,0)\n\n    if L[1]==-1 and R[1]==-1:\n        return a[0]>=n\n    elif L[1]==-1:\n        return R[1]==1\n    elif R[1]==-1:\n        return L[1]==1\n    elif L[1]==R[1]:\n        return R[1]==1\n    else:\n        if L[1]==0:\n            return N-1-L[0]>R[0]-(N-1)\n        else:\n            return N-1-L[0]<R[0]-(N-1)\n\n\nstart=1\nend=2*N-1\nwhile end-start>1:\n    test=(end+start)//2\n    if cond(test):\n        start=test\n    else:\n        end=test\nif cond(end):\n    print(end)\nelse:\n    print(start)", "code2": "import  numpy as np\nD = int(input())\nc = np.array(list(map(int, input().split())))\ns = [list(map(int, input().split())) for _ in range(D)]\nlast_d = np.array([0]*len(c))\n\nans = 0\nfor i in range(D):\n  cc = c*(last_d+i+1)\n  max_c = max(cc)\n  index = np.argmax(cc)\n  print(index + 1)\n  last_d[index] = -(i+1)\n  ans += s[i][index]\n  cc[index] = 0\n  for j in cc:\n    ans -= j\n", "label": 0, "name1": "s882473833.py", "name2": "s137637436.py"}, {"id": 464, "code1": "import sys,queue,math,copy,itertools,bisect,collections\nfrom heapq import *\n\ndef main():\n    sys.setrecursionlimit(10**7)\n    INF = 10**18\n    MOD = 10**9 + 7\n    LI = lambda : [int(x) for x in sys.stdin.readline().split()]\n    NI = lambda : int(sys.stdin.readline())\n\n    N = NI()\n    root = [[] for _ in range(N)]\n    for _ in range(N-1):\n        a,b = LI()\n        root[a-1].append(b-1)\n        root[b-1].append(a-1)\n\n    node = [-1 for _ in range(N)]\n    q = []\n    q.append((0,0))\n    node[0] = 0\n    while q:\n        u,num = q.pop()\n        for v in root[u]:\n            if node[v] < 0:\n                node[v] = num+1\n                if v == N-1:\n                    q = []\n                    break\n                q.append((v,num+1))\n    c = node[N-1]\n    u = N-1\n    pu = 0\n    while c > (node[N-1])//2:\n        for v in root[u]:\n            if node[v] != c-1: continue\n            pu = u\n            u = v\n            c -= 1\n            break\n\n    p = u\n    node = [-1 for _ in range(N)]\n    node[p] = 0\n    node[pu] = 1\n    cnt = [0,0]\n    for i in range(2):\n        if i == 0:\n            q.append(p)\n        else:\n            q.append(pu)\n        while q:\n            u = q.pop()\n            for v in root[u]:\n                if node[v] < 0:\n                    node[v] = i\n                    q.append(v)\n                    cnt[i] += 1\n    if cnt[0] > cnt[1]:\n        print('Fennec')\n    else:\n        print('Snuke')\n\nif __name__ == '__main__':\n    main()", "code2": "import sys\nsys.setrecursionlimit(10**7)\n\nn = int(input())\nflag = [-1 for _ in range(n)]\nla=[[] for _ in range(n)]\nfor _ in range(n-1):\n    a,b = map(int,input().split())\n    la[a-1].append(b-1)\n    la[b-1].append(a-1)\n\ndef dfs(s,d):\n    global flag\n    global la\n    flag[s] = d + 1\n    for g in la[s]:\n        if flag[g] == -1:\n            dfs(g,flag[s])\n\ndef main():\n    global n\n    global flag\n    dfs(0,-1)\n    distf = flag[:]\n    flag = [-1 for _ in range(n)]\n    dfs(n-1,-1)\n    dists = flag[:]\n    res = 0\n    for i in range(n):\n        if distf[i] <= dists[i]:\n            res += 1\n        else:\n            res -= 1\n    if res > 0:\n        return \"Fennec\"\n    else:\n        return \"Snuke\"\n\n\n\nprint(main())", "label": 1, "name1": "s905380406.py", "name2": "s480551459.py"}, {"id": 63, "code1": "while(True):\n    n = int(input())\n    if not n: break\n    maxind = 0\n    maxnum = 0\n    for _ in range(n):\n        a,b,c = map(int,input().split())\n        if maxnum < b+c: maxind=a; maxnum=b+c\n    print(maxind,maxnum)\n", "code2": "while True:\n    data = {}\n    n = input()\n    if n == 0:\n        break\n    for i in range(n):\n        tmp = raw_input()\n        tmp_data = tmp.split(\" \")\n        if i == 0:\n            data.update({tmp_data[0] : int(tmp_data[1]) + int(tmp_data[2])})\n        else:\n            flag = False\n            for j in data.iterkeys():\n                if data[j] < int(tmp_data[1]) + int(tmp_data[2]):\n                    flag = True\n                if flag:\n                    data.clear()\n                    data.update({tmp_data[0] : int(tmp_data[1]) + int(tmp_data[2])})\n\n    for key in data.iterkeys():\n        print \"%s %d\" % (key, data[key])", "label": 1, "name1": "s695355783.py", "name2": "s667605741.py"}, {"id": 666, "code1": "#!/usr/bin/env python3\n#CODE FESTIVAL 2016 A\n\nimport sys\nimport math\nimport bisect\nsys.setrecursionlimit(1000000000)\nfrom heapq import heappush, heappop\nfrom collections import defaultdict\nfrom itertools import accumulate\nfrom collections import Counter\nfrom collections import deque\nfrom operator import itemgetter\nfrom itertools import permutations\nmod = 10**9 + 7\ndef I(): return int(sys.stdin.readline())\ndef LI(): return list(map(int,sys.stdin.readline().split()))\n\nn = I()\na = LI()\nx = []\nfor i in range(n):\n    if i+1 > a[i]:\n        x.append((a[i],i+1))\n    else:\n        x.append((i+1,a[i]))\nprint(n-len(list(set(x))))\n", "code2": "A, B, C, K = list(map(int,input().split()))\nif K <= A:\n  print(K)\nelif K <= (A + B):\n  print(A)\nelif K <= (A + B + C):\n  print(2*A + B - K)\nelse:\n  print(A + B - C)", "label": 0, "name1": "s190944842.py", "name2": "s098797347.py"}, {"id": 619, "code1": "while 1:\n\tW, H = map(int,raw_input().split(\" \"))\n\tif W == H == 0: \n\t\tbreak\n\tfield = [[c for c in raw_input()] for _ in range(H)]\n\tsecret = [0, \"\"]\n\tfor j in range(H):\n\t\tfor i in range(W):\n\t\t\tif not field[j][i].isdigit():\n\t\t\t\tcontinue\n\t\t\tleft = top = \"\"\n\t\t\tif i > 0 and field[j][i-1].isdigit() and field[j][i-1] != \"0\":\n\t\t\t\tleft = field[j][i-1]\n\t\t\tif j > 0 and field[j-1][i].isdigit() and field[j-1][i] != \"0\":\n\t\t\t\ttop = field[j-1][i]\n\t\t\tif len(left) == len(top):\n\t\t\t\tfield[j][i] = (left if left > top else top) + field[j][i]\n\t\t\telse :\n\t\t\t\tfield[j][i] = (left if len(left) > len(top) else top) + field[j][i]\n\t\t\tlength = len(field[j][i])\n\t\t\tif length > secret[0]:\n\t\t\t\tsecret[1] = field[j][i]\n\t\t\t\tsecret[0] = length\n\t\t\telif length == secret[0] and field[j][i] > secret[1]:\n\t\t\t\tsecret[1] = field[j][i]\n\tprint secret[1]", "code2": "from sys import stdin\n\n\ndef main():\n    input = lambda: stdin.readline()[:-1]\n    N = int(input())\n    A = list(map(int, input().split()))\n\n    A.sort(reverse=1)\n    d, m = divmod(N, 2)\n    n = [2] * (d + m)\n    n[-1], n[0] = n[-1] - m, 1\n    ans = 0\n    for i, k in enumerate(n):\n        ans += A[i] * k\n    print(ans)\n\n\nmain()\n", "label": 0, "name1": "s782922064.py", "name2": "s775405634.py"}, {"id": 213, "code1": "n = input()\np, q = [-1, -1]\nfor i in xrange(n):\n    t, a = map(int, raw_input().split())\n    if p == -1 or q == -1:\n        p = t\n        q = a\n        continue\n    if t >= p and a >= q:\n        p = t\n        q = a\n    else:\n        z = max(p / t + (p % t != 0), q / a + (q % a != 0))\n        p = t * z\n        q = a * z\nprint p + q\n\n", "code2": "# WA math.ceil\u306f\u6d6e\u52d5\u5c0f\u6570\u70b9\u6f14\u7b97\u306e\u5f71\u97ff\u3092\u53d7\u3051\u308b\u306e\u3067\u3001\u6b63\u3057\u304f\u5207\u308a\u4e0a\u3052\u3067\u304d\u306a\u3044\u3068\u304d\u304c\u3042\u308b\n# >>> math.ceil((12345678901234*456+0.1)/12345678901234)\n# 456\n# >>> math.ceil((12345678901234*456+1)/12345678901234)\n# 457\n\nimport math\n\nn = int(input())\nvote_ratio = [ list(map(int, input().split())) for _ in range(n)]\n# print(vote_ratio)\n\n# ans = vote_ratio[0] \u306f\u540c\u3058\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u3092\u53c2\u7167\u3057\u3066\u3057\u307e\u3046\u306e\u3067\u907f\u3051\u308b\nans = [vote_ratio[0][0], vote_ratio[0][1]]\n\nfor i in range(1,n):\n\tbairitsu = max(ans[0] // vote_ratio[i][0], ans[1] // vote_ratio[i][1])\n\tif vote_ratio[i][0] * bairitsu < ans[0] \\\n\tor vote_ratio[i][1] * bairitsu < ans[1]:\n\t\tbairitsu += 1\n\tans = [vote_ratio[i][0] * bairitsu, vote_ratio[i][1] * bairitsu]\n\nprint(sum(ans))\n", "label": 1, "name1": "s412403305.py", "name2": "s651516806.py"}, {"id": 198, "code1": "#coding=UTF-8\n\nN=int(input())\nmozir=input()\nhyo=mozir.split(' ')\n\nRec_LTR=[int(mono) for mono in hyo]\n\nmozir=input()\nhyo=mozir.split(' ')\n\nRec_RTL=[int(mono) for mono in hyo]\n\nLTR_hani=[]\nhighest=0\nfor idx in range(0,N,1):\n    if Rec_LTR[idx]>highest:\n        highest=Rec_LTR[idx]\n        LTR_hani.append([highest,highest])\n    else:\n        LTR_hani.append([highest,1])\n\nRTL_hani=[None]*N\nhighest=0\nfor idx in range(N-1,-1,-1):\n    if Rec_RTL[idx]>highest:\n        highest=Rec_RTL[idx]\n        RTL_hani[idx]=[highest,highest]\n    else:\n        RTL_hani[idx]=[highest,1]\n\n#concat\nans=1\nhou=1000000007\nfor idx in range(0,N,1):\n    # prod set\n    ue=min(RTL_hani[idx][0],LTR_hani[idx][0])\n    shita=max(RTL_hani[idx][1],LTR_hani[idx][1])\n    ans=(ans*max((ue-shita+1),0))%hou\n\nprint(ans)\n", "code2": "n = int(input())\nt = list(map(int, input().split()))\na = list(map(int, input().split()))\nmod = 10 ** 9 + 7\n\nans, frag = 1, 0\nfor i in range(n):\n    if t[i] == a[i] == t[-1] == a[0]:\n        frag = 1\n    if 0 < i < n - 1 and t[i - 1] == t[i] and a[i] == a[i + 1]:\n        ans = ans * min(t[i], a[i]) % mod\nprint(ans * frag)\n", "label": 1, "name1": "s271635856.py", "name2": "s894086979.py"}, {"id": 305, "code1": "class UnionFind():\n    def __init__(self, n):\n        self.n = n\n        self.parents = [-1] * n\n\n    def find(self, x):\n        if self.parents[x] < 0:\n            return x\n        else:\n            self.parents[x] = self.find(self.parents[x])\n            return self.parents[x]\n\n    def union(self, x, y):\n        x = self.find(x)\n        y = self.find(y)\n\n        if x == y:\n            return\n\n        if self.parents[x] > self.parents[y]:\n            x, y = y, x\n\n        self.parents[x] += self.parents[y]\n        self.parents[y] = x\n\n    def size(self, x):\n        return -self.parents[self.find(x)]\n\n    def same(self, x, y):\n        return self.find(x) == self.find(y)\n\n    def members(self, x):\n        root = self.find(x)\n        return [i for i in range(self.n) if self.find(i) == root]\n\n    def roots(self):\n        return [i for i, x in enumerate(self.parents) if x < 0]\n\n    def group_count(self):\n        return len(self.roots())\n\n    def all_group_members(self):\n        return {r: self.members(r) for r in self.roots()}\n\n    def __str__(self):\n        return '\\n'.join('{}: {}'.format(r, self.members(r)) for r in self.roots())\n\nN,M=list(map(int,input().split()))\nNetwork = UnionFind(N)\nfor i in range(M):\n    a,b=list(map(int,input().split()))\n    Network.union(a-1, b-1)\nprint(Network.group_count()-1)", "code2": "n,m = map(int,input().split())\n\nans = 0\n\nclass UnionFind:\n    def __init__(self,n):\n        self.root = [i for i in range(n+1)]\n\n    def Root_Find(self,x):\n        if self.root[x] == x:\n            return x\n        else:\n            self.root[x] = self.Root_Find(self.root[x])\n            return self.root[x]\n\n    def Unite(self,x,y):\n        x = self.Root_Find(x)\n        y = self.Root_Find(y)\n        if x == y:\n            return\n        self.root[y] = x\n\ntree = UnionFind(n)\n\nfor i in range(m):\n    a,b = map(int,input().split())\n    tree.Unite(a,b)\n\nfor i in range(n+1):\n    tree.Root_Find(i)\n\nans = len(list(set(tree.root))) - 2\nprint(ans)", "label": 1, "name1": "s144436411.py", "name2": "s231824049.py"}, {"id": 566, "code1": "n,k=map(int,input().split())\nx=n%k\nprint(min(x,abs(x-k)))", "code2": "a,b,c=map(int,input().split())\nif (a>c and b<c) or (a<c and b>c):\n  print(\"Yes\")\nelse:\n  print(\"No\")", "label": 0, "name1": "s584027827.py", "name2": "s473634907.py"}, {"id": 879, "code1": "a,b=input().split()\nprint(\"H\" if a == \"H\" and b == \"H\" or a == \"D\" and b == \"D\" else \"D\")", "code2": "\n\nK = int(input())\n\nA,B = map(int, input().split())\n\ncheck = 0\nfor i in range(int(1000/K) ):\n    if K*(i+1)>=A and K*(i+1) <= B:\n        print('OK')\n        check = 1\n        break\nif check == 0:\n    print('NG')\n", "label": 0, "name1": "s207996026.py", "name2": "s701703861.py"}, {"id": 820, "code1": "N,M=map(int,input().split())\ngraph=[[] for _ in range(N)]\nfor _ in range(M):\n    a,b=map(int,input().split())\n    graph[a-1].append(b-1)\n    graph[b-1].append(a-1)\n\nvisited=[False]*N\nvisited[0]=True\n\ndef dfs(v,N,visited):\n    if all(visited):\n        return 1\n    \n    ret=0\n    for new_v in graph[v]:\n        if visited[new_v]:\n            continue\n        \n        visited[new_v]=True\n        ret+=dfs(new_v,N,visited)\n        visited[new_v]=False\n    \n    return ret\n\nprint(dfs(0,N,visited))", "code2": "A, B, C = map(int, input().split())\nprint('Yes' if len(set([A, B, C])) == 2 else 'No')", "label": 0, "name1": "s866159978.py", "name2": "s278209661.py"}, {"id": 868, "code1": "# -*- coding: utf-8 -*-\n\nimport sys\nimport os\nimport math\n\nn = int(input())\nif n == 1:\n    # 4\n    print(4)\n    print(2)\nelif n == 2:\n    # 8, 9\n    print(8)\n    print(4)\n    print(3)\nelse:\n    a = 1\n    for i in range(1, n + 2):\n        a *= i\n    print(a - n - 1)\n\n    for i in range(n + 1, 1, -1):\n        print(i)", "code2": "A,B,C,X,Y=map(int,input().split())\n\nif A+B<=2*C:\n    ans=A*X+B*Y\n\nelif X<=Y:\n    ans=2*X*C\n    Y-=X\n    ans+=min(2*Y*C,Y*B)\n\nelif X>Y:\n    ans=2*Y*C\n    X-=Y\n    ans+=min(2*X*C,X*A)\n\nprint(ans)", "label": 0, "name1": "s101680760.py", "name2": "s332388641.py"}, {"id": 592, "code1": "A,B,C=map(int,input().split())\nans = 1\nif (A%2 != B%2) and (A%2 == C%2):\n  A += 1\n  C += 1\nelif (A%2 == B%2) and (A%2 != C%2):\n  A += 1\n  B += 1\nelif (A%2 != B%2) and (B%2 == C%2):\n  C += 1\n  B += 1\nelse:\n  ans = 0\nL = [A,B,C]\nL.sort()\nans += (L[2]-L[1])//2 + (L[2]-L[0])//2\nprint( ans )\n", "code2": "#!/usr/bin/env python\n# -*- coding: utf-8 -*-\nimport math\n\ndef sieve_of_erastosthenes(num):\n    input_list = [False if i % 2 == 0 or i % 3 == 0 or i % 5 == 0 else True for i in range(num)]\n    input_list[0] = input_list[1] = False\n    input_list[2] = input_list[3] = input_list[5] = True\n    sqrt = math.sqrt(num)\n\n    for serial in range(3, num, 2):\n        if serial >= sqrt:\n            return input_list\n        for s in range(serial ** 2, num, serial): \n            input_list[s] = False\n\nprimeTable = sieve_of_erastosthenes((10**6))\n\nwhile True:\n    n = int(input())\n    if n == 0:\n        break\n    print(sum([1 if primeTable[i] == True else 0 for i in range(n+1,2*n+1)]))", "label": 0, "name1": "s612094036.py", "name2": "s839739261.py"}, {"id": 357, "code1": "\nX, Y = list(map(int, input().split()))\n\nans = 0\nwhile X <= Y:\n\tX *= 2\n\tans += 1\n\nprint(ans)", "code2": "x, y=map(int, input().split())\nans=[]\n\nwhile x<=y:\n    ans.append(x)\n    x*=2\n\nprint(len(ans))", "label": 1, "name1": "s831535184.py", "name2": "s268106998.py"}, {"id": 72, "code1": "# https://atcoder.jp/contests/tenka1-2018-beginner/tasks/tenka1_2018_d\n\nfrom itertools import combinations\n\nn = int(input())\nk = -1\nfor i in range(10**3):\n    if i*i - i - 2 * n == 0:\n        k = i\n\nif k == -1:\n    print('No')\n    exit()\n\n# print('Yes')\n# print(k)\n\nnum = 0\nV = [[] for _ in range(k)]\nfor cmb in combinations(range(k), r=2):\n    num += 1\n    a, b = cmb\n    V[a].append(num)\n    V[b].append(num)\nprint('Yes')\nprint(k)\nfor v in V:\n    print(len(v), end=\" \")\n    print(*v)\n", "code2": "#coding:utf-8\nimport numpy as np\nn = int(input())\n\n\na = np.ones((2,1)).astype(np.int)\na[-1][-1]+len(a)\ni = 1\nwhile(1):\n    if len(a)>=500:\n        break\n    if n==a[-1][-1]:\n        print (\"Yes\")\n        print (len(a))\n        for line in a:\n            print (i,\" \".join(line.astype(np.str).tolist()))\n        exit()\n    i+=1\n    temp = int((1/2)*i*(i+1))\n    add = np.array((list(range(temp-i+1,temp+1))))\n\n    a = np.c_[a,add]\n    a = np.r_[a,add.reshape(1,-1)]\nprint (\"No\")\n", "label": 1, "name1": "s366576461.py", "name2": "s037954477.py"}, {"id": 498, "code1": "n=int(input())\ns=input()\n\nE=[0 for i in range(n)]\nW=[0 for i in range(n)]\n\ncnt=0\nfor i in range(n):\n    W[i]=cnt\n    if s[i]==\"W\":\n        cnt+=1\n\ncnt=0   \nfor i in range(n):\n    E[n-1-i]=cnt\n    if s[n-1-i]==\"E\":\n        cnt+=1\n\nmini=10**8\nfor i in range(n):\n    mini=min(mini,E[i]+W[i])\n\nprint(mini)", "code2": "n = int(input())\ns = input()\nleft = [0]\nright = [0]\nfor i in range(n):\n    if s[i] == 'W':\n        tmp = left[-1] + 1\n        left.append(tmp)\n    else:\n        left.append(left[-1])\n    if s[n-1-i] == 'E':\n        tmp = right[-1] + 1\n        right.append(tmp)\n    else:\n        right.append(right[-1])\nmi = 10**18\nright = right[::-1]\nfor i in range(n+1):\n    if mi > left[i] + right[i]:\n        mi = left[i] + right[i]\nprint(mi)", "label": 1, "name1": "s614583596.py", "name2": "s487064711.py"}, {"id": 440, "code1": "from collections import defaultdict\n\nclass Unionfind:\n\n    __slots__ = ['parents','sizes']\n\n    def __init__(self, n):\n        self.parents = list(range(n))\n        self.sizes = [1]*n\n\n    def root(self, x):\n        if self.parents[x] == x:\n            return x\n        else:\n            root_x = self.root(self.parents[x])\n            self.parents[x] = root_x\n            return root_x\n\n    def unite(self, x, y):\n        x = self.root(x); y = self.root(y)\n        if x == y:\n            return\n        if self.sizes[x] < self.sizes[y]:\n            x, y = y, x\n        self.sizes[x] += self.sizes[y]\n        self.parents[y] = x\n\n    def same(self, x, y):\n        return self.root(x) == self.root(y)\n\n    # \u96c6\u5408\u81ea\u4f53\u306e\u6570 ({1,2}, {3}, {4} : kind -> 3)\n    def kind(self):\n        for v in range(N):\n            self.root(v)\n        return len(list(set(self.parents)))\n\n    # x\u304c\u5c5e\u3059\u308b\u96c6\u5408\u306e\u8981\u7d20\u306e\u6570\u3000({1,2,3} : size(2) -> 3)\n    def size(self, x):\n        self.sizes[x] = self.sizes[self.root(x)]\n        return self.sizes[x]\n\nN, K, L = map(int,input().split())\nroad = Unionfind(N)\ntrain = Unionfind(N)\n\nfor _ in range(K):\n    p, q = map(int,input().split())\n    p -= 1; q -= 1\n    road.unite(p, q)\n\nfor _ in range(L):\n    r, s = map(int,input().split())\n    r -= 1; s -= 1\n    train.unite(r, s)\n\ncnt = defaultdict(int)\n\nfor i in range(N):\n    key = (road.root(i), train.root(i))\n    cnt[key] += 1\n\nans_list = []\nfor i in range(N):\n    key = (road.root(i), train.root(i))\n    ans = cnt[key]\n    ans_list.append(ans)\n\nprint(*ans_list)", "code2": "# -*- coding: utf-8 -*-\n\n\nclass UnionFind(object):\n    '''Represents a data structure that tracks a set of elements partitioned\n       into a number of disjoint (non-overlapping) subsets.\n    Landau notation: O(\u03b1(n)), where \u03b1(n) is the inverse Ackermann function.\n    See:\n    https://www.youtube.com/watch?v=zV3Ul2pA2Fw\n    https://en.wikipedia.org/wiki/Disjoint-set_data_structure\n    https://atcoder.jp/contests/abc120/submissions/4444942\n    '''\n\n    def __init__(self, number_count: int):\n        '''\n        Args:\n            number_count: The size of elements (greater than 2).\n        '''\n        self.parent_numbers = [-1 for _ in range(number_count)]\n\n    def find_root(self, number: int) -> int:\n        '''Follows the chain of parent pointers from number up the tree until\n           it reaches a root element, whose parent is itself.\n        Args:\n            number: The trees id (0-index).\n        Returns:\n            The index of a root element.\n        '''\n        if self.parent_numbers[number] < 0:\n            return number\n\n        self.parent_numbers[number] = self.find_root(self.parent_numbers[number])\n        return self.parent_numbers[number]\n\n    def get_group_size(self, number: int) -> int:\n        '''\n        Args:\n            number: The trees id (0-index).\n        Returns:\n            The size of group.\n        '''\n        return -self.parent_numbers[self.find_root(number)]\n\n    def is_same_group(self, number_x: int, number_y: int) -> bool:\n        '''Represents the roots of tree number_x and number_y are in the same\n           group.\n        Args:\n            number_x: The trees x (0-index).\n            number_y: The trees y (0-index).\n        '''\n        return self.find_root(number_x) == self.find_root(number_y)\n\n    def merge_if_needs(self, number_x: int, number_y: int) -> bool:\n        '''Uses find_root to determine the roots of the tree number_x and\n           number_y belong to. If the roots are distinct, the trees are combined\n           by attaching the roots of one to the root of the other.\n        Args:\n            number_x: The trees x (0-index).\n            number_y: The trees y (0-index).\n        '''\n        x = self.find_root(number_x)\n        y = self.find_root(number_y)\n\n        if x == y:\n            return False\n\n        if self.get_group_size(x) >= self.get_group_size(y):\n            self.parent_numbers[x] += self.parent_numbers[y]\n            self.parent_numbers[y] = x\n        else:\n            self.parent_numbers[y] += self.parent_numbers[x]\n            self.parent_numbers[x] = y\n        return True\n\n\ndef main():\n    from collections import Counter\n\n    n, k, l = map(int, input().split())\n    road = UnionFind(n)\n    rail = UnionFind(n)\n\n    for _ in range(k):\n        pi, qi = map(lambda x: int(x) - 1, input().split())\n\n        if road.is_same_group(pi, qi):\n            continue\n\n        road.merge_if_needs(pi, qi)\n\n    for _ in range(l):\n        ri, si = map(lambda x: int(x) - 1, input().split())\n\n        if rail.is_same_group(ri, si):\n            continue\n\n        rail.merge_if_needs(ri, si)\n\n    # See:\n    # https://atcoder.jp/contests/arc065/submissions/3559412\n    # http://tutuz.hateblo.jp/entry/2018/07/25/225115\n    # http://baitop.hatenadiary.jp/entry/2018/06/26/224712\n    pairs = Counter()\n    ans = [0 for _ in range(n)]\n\n    for i in range(n):\n        hwy = road.find_root(i)\n        rwy = rail.find_root(i)\n        pairs[(hwy, rwy)] += 1\n\n    for i in range(n):\n        hwy = road.find_root(i)\n        rwy = rail.find_root(i)\n        ans[i] = pairs[(hwy, rwy)]\n\n    print(' '.join(map(str, ans)))\n\n\nif __name__ == '__main__':\n    main()\n", "label": 1, "name1": "s028456939.py", "name2": "s814443813.py"}, {"id": 836, "code1": "n = int(input())\ns = input()\nleft = [0]\nright = [0]\nfor i in range(n):\n    if s[i] == 'W':\n        tmp = left[-1] + 1\n        left.append(tmp)\n    else:\n        left.append(left[-1])\n    if s[n-1-i] == 'E':\n        tmp = right[-1] + 1\n        right.append(tmp)\n    else:\n        right.append(right[-1])\nmi = 10**18\nright = right[::-1]\nfor i in range(n+1):\n    if mi > left[i] + right[i]:\n        mi = left[i] + right[i]\nprint(mi)", "code2": "N, L, T = map(int, input().split())\nants = []\ntouch = 0  # \u3059\u3079\u3066\u306e\u87fb\u304c0\u3092\u901a\u308b\u5408\u8a08\u6570\n\nfor i in range(N):\n    x, w = map(int, input().split())\n    if w == 1:  # \u6642\u8a08\u56de\u308a\n        touch += (x + T) // L  # 0\u3092\u901a\u308b\u56de\u6570\n        x1 = (x + T) % L       # \u6700\u7d42\u7684\u306a\u5ea7\u6a19\n    else:\n        touch += (x - T) // L  # 0\u3092\u901a\u308b\u56de\u6570\n        x1 = (x - T) % L\n    ants.append(x1)\ntouch = touch % N  # 0\u306b\u3044\u305f\u87fb\u306eindex\nants.sort()\nants = ants[touch:]+ants[:touch]\n\nprint(\" \".join(map(str, ants)))", "label": 0, "name1": "s487064711.py", "name2": "s946619292.py"}, {"id": 567, "code1": "from enum import Enum\nimport sys\nimport math\n\n\nA,B,DEGREE = map(int,input().split())\n\nrad = math.radians(DEGREE)\n\nS = A*B*math.sin(rad)/2.0\nC = math.sqrt(A*A+B*B-2*A*B*math.cos(rad))\nh = 2*S/A\n\nprint(\"%.10f %.10f %.10f\"%(S,A+B+C,h))\n\n", "code2": "A,B,C = map(int, input().split())\ncount = 0\nlist1 = [A,B]\n\nfor i in range(min(list1),max(list1)):\n    if C == i:\n        count = 1\n \nif count == 1:\n    print(\"Yes\")\nelse:\n    print(\"No\")", "label": 0, "name1": "s944812786.py", "name2": "s230128846.py"}, {"id": 792, "code1": "def inpl(): return [int(i) for i in input().split()]\nclass UnionFind():\n    def __init__(self, num):\n        self.par = [-1 for _ in range(num)]\n    \n    def find(self, x):\n        if self.par[x] < 0:\n            return x\n        else:\n            x = self.par[x]\n            return self.find(x)\n    \n    def union(self, x, y):\n        rx = self.find(x)\n        ry = self.find(y)\n        if rx != ry:\n            if self.par[rx] < self.par[ry]:\n                self.par[ry] = rx\n            if self.par[rx] > self.par[ry]:\n                self.par[rx] = ry\n            else:\n                self.par[rx] -= 1\n                self.par[ry] = rx\n        return\n\nN, K, L = inpl()\nufk = UnionFind(N)\nfor i in range(K):\n    p, q = inpl()\n    ufk.union(p-1, q-1)\n\nufr = UnionFind(N)\nfor i in range(L):\n    r, s = inpl()\n    ufr.union(r-1, s-1)\n\nfrom collections import defaultdict\nans = defaultdict(lambda: 0)\nfor i in range(N):\n    ans[ufk.find(i),ufr.find(i)] +=1\nAns = [0 for _ in range(N)]\nfor i in range(N):\n    Ans[i] = ans[ufk.find(i),ufr.find(i)]\nprint(*Ans)", "code2": "nm = [0,31,29,31,30,31,30,31,31,30,31,30]\nwhile True:\n\n    m,d = map(int,raw_input().split(\" \"))\n\n    if m == 0:\n        break\n    else:\n        nd = 0\n        for i in range(m):\n           nd += nm[i]\n\n        nd += d\n        n = nd%7\n        if n == 1:\n            print \"Thursday\"\n        elif n == 2:\n            print \"Friday\"\n        elif n == 3:\n            print \"Saturday\"\n        elif n == 4:\n            print \"Sunday\"\n        elif n == 5:\n            print \"Monday\"\n        elif n == 6:\n            print \"Tuesday\"\n        else:                                                                                                                                                                                                \n            print \"Wednesday\"", "label": 0, "name1": "s236967102.py", "name2": "s504491910.py"}, {"id": 857, "code1": "N = int(input())\nA = list(map(int, input().split()))\nsort = sorted(A)\n# amari = []\n# while len(amari) != 1:\n#   amari.clear()\n#   if 0 in sort: sort.remove(0)\n#   for item in sort:\n#     if item%sort[0] not in amari:\n#       amari.append(item%sort[0])\n#   last_sort0 = sort[0]\n#   sort = sorted(amari[:])\n#   sort.append(last_sort0)\n\n# print(last_sort0-amari[0])\n\nwhile len(sort) != 1:\n  for i in range(1,len(sort)):\n    sort[i] = sort[i]%sort[0]\n  sort = [j for j in sorted(sort) if j != 0]\n\nprint(sort[0])", "code2": "n, m = map(int, input().split())\np = []\ns = []\nfor i in range(m):\n    input1, input2 = input().split()\n    p.append(int(input1))\n    s.append(input2)\n\ncorrect = [0] * n\npenalty = [0] * n\nfor i in range(m):\n    tgt = p[i] - 1\n    if correct[tgt] == 1:\n        continue\n    if s[i] == 'AC':\n        correct[tgt] += 1\n    elif s[i] == 'WA':\n        penalty[tgt] += 1\n\nfor i in range(m):\n    tgt = p[i] - 1\n    if correct[tgt] == 0:\n        penalty[tgt] = 0\n\nprint('{0} {1}'.format(sum(correct), sum(penalty)))\n", "label": 0, "name1": "s006625656.py", "name2": "s366260920.py"}, {"id": 161, "code1": "q = int(input())\nquest = [tuple(map(int, input().split())) for _ in range(q)]\nfor a, b in quest:\n    m = a*b\n    l = int((m - 1) ** (1/2))\n    # check float\n    if l * l >= m:\n        l -= 1\n    elif (l+1) * (l+1) < m:\n        l += 1\n    if a == b:\n        print((a-1) * 2)\n    elif (l+1) * l < m:\n        print(l*2 - 1)\n    else:\n        print(l*2 - 2)\n", "code2": "#1~x\u307e\u3067\u306e\u6574\u6570\u306e\u7d44*2\u306e\u6700\u5927\u30de\u30c3\u30c1\u30f3\u30b0\u3092\u8003\u3048\u308b\n#\u57fa\u672c\u306fx//2\u3068(x+1)//2\u306e\u30de\u30c3\u30c1\u30f3\u30b0\u304c\u6700\u5927\u5024\uff0ca==b\u306b\u6ce8\u610f\n\nQ=int(input())\nfor _ in range(Q):\n    a,b=map(int,input().split())\n    if a>b:\n        a,b=b,a\n    \n    if a==b:\n        print(2*a-2)\n    else:\n        ab=a*b\n        ok=1\n        ng=a*b\n        while (ng-ok)>1:\n            med=(ok+ng)//2\n            if ((med+1)//2) * ((med+2)//2) >=ab:\n                ng=med\n            else:\n                ok=med\n        print(ok-1)\n            \n        \n\n\n\n", "label": 1, "name1": "s200942919.py", "name2": "s388113700.py"}, {"id": 908, "code1": "N = int(input())\n\nM = N -1\nflg = 0\nwhile flg == 0:\n  M += 1\n  flg = 1\n  for n in range(2,M-1):\n    if M%n == 0:\n      flg = 0\n      break\n\nprint(M)", "code2": "SA = list(input())\nSB = list(input())\nSC = list(input())\nA = 0\nB = 0\nC = 0\nans = \"\"\nturn = \"a\"\nwhile ans == \"\":\n    if turn == \"a\":\n        if A == len(SA):\n            ans = \"A\"\n        else:\n            turn = SA[A]\n        A +=1\n    if turn == \"b\":\n        if B == len(SB):\n            ans = \"B\"\n        else:\n            turn = SB[B]\n        B += 1\n    if turn == \"c\":\n        if C == len(SC):\n            ans = \"C\"\n        else:\n            turn = SC[C]\n        C += 1\nprint(ans)", "label": 0, "name1": "s785657279.py", "name2": "s106587030.py"}, {"id": 242, "code1": "N, K = map(int, input().split())\nW = [int(input()) for w in range(N)]\n\ndef check(p):\n    i = 0\n    for _ in range(K):\n        s = 0\n        while s + W[i] <= p:\n            s += W[i]\n            i += 1\n            if i == N:\n                return N\n    return i\n\nleft = 0\nright = 100000 * 10000\nmid = 0\nwhile 1 < right - left:\n    mid = (left + right) / 2\n    v = check(mid)\n    if v >= N:\n        right = mid\n    else:\n        left = mid\n\nprint(int(right))\n", "code2": "def check(P):\n    lis = [[] for i in range(k)]\n    su = [0 for i in range(k)]\n    \n    su.append(-10000)\n    cur = 0\n    for i, bag in enumerate(baggage):\n        #cur = 0\n        #print(su,cur,su[cur])\n        while su[cur] + bag > P:\n            cur += 1\n        if cur == k:\n            return False\n        else:\n            lis[cur].append(bag)\n            su[cur] += bag\n    #print(lis, su, P)\n    return True\n\ndef main():\n    min_P = 1000000000\n    left = 1\n    right = 1000000000\n    mid = (left + right)//2\n    while  left < right:\n        '''if (left + right) % 2 == 0:\n            mid = (left + right)//2\n        else:\n            mid = (left + right)//2 + 1\n        #print(left, mid, right, end=\" \")'''\n        \n        if check(mid):\n            right = mid\n            if min_P > mid:\n                min_P = mid\n        else:\n            left = mid + 1\n        mid = (left + right)//2\n    #print(left,right)\n    print(min_P)\nif __name__ == '__main__':\n    n, k = map(int, input().rstrip().split(\" \"))\n    #n,k= 5,3\n    baggage = [int(input()) for i in range(n)]\n    #baggage = [8,1,7,3,9]\n    \n    main()\n\n\n\n", "label": 1, "name1": "s152551733.py", "name2": "s847831381.py"}, {"id": 899, "code1": "#https://drken1215.hatenablog.com/entry/2019/03/23/175300\nN,M = map(int,input().split())\n\nonce_time = 1900 * M + 100 * (N - M)\ne = pow(2,M)\nprint(once_time * e)\n", "code2": "N = int(input())\n\nM = N -1\nflg = 0\nwhile flg == 0:\n  M += 1\n  flg = 1\n  for n in range(2,M-1):\n    if M%n == 0:\n      flg = 0\n      break\n\nprint(M)", "label": 0, "name1": "s596326690.py", "name2": "s785657279.py"}, {"id": 101, "code1": "from enum import Enum\nimport sys\nimport math\n\n\nA,B,DEGREE = map(int,input().split())\n\nrad = math.radians(DEGREE)\n\nS = A*B*math.sin(rad)/2.0\nC = math.sqrt(A*A+B*B-2*A*B*math.cos(rad))\nh = 2*S/A\n\nprint(\"%.10f %.10f %.10f\"%(S,A+B+C,h))\n\n", "code2": "a, b, C =map(float,input().split())\nimport math\nsinC = math.sin(math.radians(C))\nS = a*b*sinC*0.5\nc = (a**2 + b**2 -2*a*b*math.cos(math.radians(C)))**0.5\nL = a+b+c\nh = S*2/a\nprint(S)\nprint(L)\nprint(h)\n", "label": 1, "name1": "s944812786.py", "name2": "s788805416.py"}, {"id": 811, "code1": "import sys,queue,math,copy,itertools,bisect,collections\nfrom heapq import *\n\ndef main():\n    sys.setrecursionlimit(10**7)\n    INF = 10**18\n    MOD = 10**9 + 7\n    LI = lambda : [int(x) for x in sys.stdin.readline().split()]\n    NI = lambda : int(sys.stdin.readline())\n\n    N = NI()\n    root = [[] for _ in range(N)]\n    for _ in range(N-1):\n        a,b = LI()\n        root[a-1].append(b-1)\n        root[b-1].append(a-1)\n\n    node = [-1 for _ in range(N)]\n    q = []\n    q.append((0,0))\n    node[0] = 0\n    while q:\n        u,num = q.pop()\n        for v in root[u]:\n            if node[v] < 0:\n                node[v] = num+1\n                if v == N-1:\n                    q = []\n                    break\n                q.append((v,num+1))\n    c = node[N-1]\n    u = N-1\n    pu = 0\n    while c > (node[N-1])//2:\n        for v in root[u]:\n            if node[v] != c-1: continue\n            pu = u\n            u = v\n            c -= 1\n            break\n\n    p = u\n    node = [-1 for _ in range(N)]\n    node[p] = 0\n    node[pu] = 1\n    cnt = [0,0]\n    for i in range(2):\n        if i == 0:\n            q.append(p)\n        else:\n            q.append(pu)\n        while q:\n            u = q.pop()\n            for v in root[u]:\n                if node[v] < 0:\n                    node[v] = i\n                    q.append(v)\n                    cnt[i] += 1\n    if cnt[0] > cnt[1]:\n        print('Fennec')\n    else:\n        print('Snuke')\n\nif __name__ == '__main__':\n    main()", "code2": "N,M=map(int,input().split())\ngraph=[[] for _ in range(N)]\nfor _ in range(M):\n    a,b=map(int,input().split())\n    graph[a-1].append(b-1)\n    graph[b-1].append(a-1)\n\nvisited=[False]*N\nvisited[0]=True\n\ndef dfs(v,N,visited):\n    if all(visited):\n        return 1\n    \n    ret=0\n    for new_v in graph[v]:\n        if visited[new_v]:\n            continue\n        \n        visited[new_v]=True\n        ret+=dfs(new_v,N,visited)\n        visited[new_v]=False\n    \n    return ret\n\nprint(dfs(0,N,visited))", "label": 0, "name1": "s905380406.py", "name2": "s866159978.py"}, {"id": 998, "code1": "S = input()\nlen_S = len(S)\n\nfor i in range(2, len_S+1, 2):\n    check_S = S[:-i]\n    len_check_S = len(check_S)\n    half = len_check_S//2\n    if check_S[:half] == check_S[half:]:\n        print(len_check_S)\n        break\n", "code2": "N = int(input())\nT, A = map(int, input().split())\nH = list(map(int, input().split()))\n\nans = []\n\nfor H in H:\n    ans.append(abs(T - H * 0.006 - A))\n    \nprint(ans.index(min(ans)) + 1)\n", "label": 0, "name1": "s421296451.py", "name2": "s554526166.py"}, {"id": 733, "code1": "# ABC068C - Cat Snuke and a Voyage (ARC079C)\ndef main():\n    N, M, *AB = map(int, open(0).read().split())\n    from_1, to_N = set(), set()\n    for a, b in zip(*[iter(AB)] * 2):\n        if a == 1:\n            from_1.add(b)\n        if b == N:\n            to_N.add(a)\n    flg = from_1 & to_N  # intermediate point of both 1, N exists?\n    print(\"POSSIBLE\" if flg else \"IMPOSSIBLE\")\n\n\nif __name__ == \"__main__\":\n    main()", "code2": "'''\n????????\u00a3????????????1??????????????????\n??\\???C++??\u00a7????????????????\u00a7\u00a3?\u00b1???????????????????????????????????????\u00a7???\n??????python??\u00a7??????????????????Accept??\u00a7??????????????????\n????????\u00a3??\u00a8optimization??????????????\u00a7??????\n??\u00a7????????????Wrong Answer??\u00a7?????????\n???????????????????????????????????????????????????\nOnline Judge???????????????Public Solutions??\u00a7????????????nanae?????????python3????????????????????????\n????????\u00a3??\u00a8?????????????????????\n???????????????????????????0.06?\u00a7????????????\u00a7??????\n'''\n\nimport queue\nv,e,s=map(int,input().split())\nedge=[]\ninf =1000000100\nfor i in range(v):\n    edge.append([])\n\nfor i in range(e):\n    vs,vt,d=map(int,input().split())\n    edge[vs].append((vt,d))\n    \ndis=[]\nfor i in range(v):\n    dis.append(inf)\n\ndis[s]=0\n\nq = queue.PriorityQueue()\nq.put((0,s))\n\n'''\nwhile(not q.empty()):\n    now=q.get()\n    nowv=now[1]\n    for (vt,d) in edge[nowv]:\n        if dis[vt]>dis[nowv]+d:\n            dis[vt]=dis[nowv]+d\n            q.put((dis[vt],vt))\n'''\n\nfinished=0\nwhile(finished<v and not q.empty()):\n    now=q.get()\n    nowv=now[1]\n    if now[0]>dis[nowv]: continue\n    for (vt,d) in edge[nowv]:\n        if dis[vt]>dis[nowv]+d:\n            dis[vt]=dis[nowv]+d\n            q.put((dis[vt],vt))\n    finished+=1       \n\nfor i in range(v):\n    if dis[i]>=inf:\n        print(\"INF\")\n    else:\n        print(dis[i])", "label": 0, "name1": "s726342129.py", "name2": "s256416940.py"}, {"id": 234, "code1": "# -*- coding: utf-8 -*-\nimport sys\nfrom sys import stdin\nimport math\n\nn, k = map(int, stdin.readline().split())\nw = list([int(stdin.readline().rstrip()) for i in range(n)])\n\ndef main2():\n  def is_ok():\n    cnt_track = w_tmp = 0\n    for w_i in w:\n      w_tmp += w_i\n      if w_tmp > m:\n        w_tmp = w_i\n        cnt_track += 1\n        if cnt_track >= k:\n          return 0\n    return 1\n\n  r = sum(w)\n  l = max(math.ceil(r/k),max(w))\n  while l < r:\n    m = (l + r) // 2\n    # print(\"%d %d %d \" % (l, r, m))\n    if is_ok():\n      r = m\n    else:\n      l = m + 1\n  print(r)\n\nif __name__ == '__main__':\n  main2()\n\n", "code2": "import math, sys\n\ndef loadable(w, n, k, p, wsum):\n    wait = 0\n    for i in range(n):\n        wait += w[i]\n        wsum -= w[i]\n        if wait > p:\n            k -= 1\n            wait = w[i]\n            if k == 0 or p < wsum / k:\n                return False\n    return True\n\nn, k = map(int, sys.stdin.readline().split())\nw = [int(sys.stdin.readline()) for _ in range(n)]\n\nwsum = sum(w)\n\np = max(int(math.ceil(wsum / k)), max(w))\npre_f = p -1\npre_s = None\n\nwhile True:\n    if loadable(w, n, k, p, wsum):\n        pre_s = p\n    else:\n        pre_f = p\n\n    if pre_s != None and pre_s - pre_f == 1:\n            break\n    \n    if pre_s:\n        p = int((pre_s + pre_f) / 2)\n    else:\n        p = math.ceil(p * 1.01)\n    \nprint(pre_s)", "label": 1, "name1": "s518389793.py", "name2": "s671645015.py"}, {"id": 79, "code1": "def main():\n    n=int(input())\n    m=int((2*n)**0.5)\n    if m*(m+1)==n*2:\n        print(\"Yes\")\n        m+=1\n        print(m)\n    else:\n        print(\"No\")\n        exit()\n    \n    ans=[[m-1] for i in range(m)]\n    c=1\n    for i in range(m):\n        for j in range(i+1,m):\n            ans[i].append(c)\n            ans[j].append(c)\n            c+=1\n    for i in ans:\n        print(\" \".join(map(str,i)))\n\n\nif __name__ == '__main__':\n    main()\n\n\n\n\n\n\n", "code2": "from itertools import combinations\n\nn = int(input())\nyes = [i*(i-1)//2 for i in range(2, 448)]\nif n in yes:\n    print('Yes')\n    len_s = yes.index(n) + 1\n    print(len_s+1)\n    res = [[] for _ in range(len_s+1)]\n    for i, v in enumerate(combinations(range(len_s+1), 2)):\n        res[v[0]].append(str(i+1))\n        res[v[1]].append(str(i+1))\n    for r in res:\n        print(' '.join([str(len_s)] + r))        \nelse:\n    print('No')", "label": 1, "name1": "s694753497.py", "name2": "s486613754.py"}, {"id": 200, "code1": "#coding=UTF-8\n\nN=int(input())\nmozir=input()\nhyo=mozir.split(' ')\n\nRec_LTR=[int(mono) for mono in hyo]\n\nmozir=input()\nhyo=mozir.split(' ')\n\nRec_RTL=[int(mono) for mono in hyo]\n\nLTR_hani=[]\nhighest=0\nfor idx in range(0,N,1):\n    if Rec_LTR[idx]>highest:\n        highest=Rec_LTR[idx]\n        LTR_hani.append([highest,highest])\n    else:\n        LTR_hani.append([highest,1])\n\nRTL_hani=[None]*N\nhighest=0\nfor idx in range(N-1,-1,-1):\n    if Rec_RTL[idx]>highest:\n        highest=Rec_RTL[idx]\n        RTL_hani[idx]=[highest,highest]\n    else:\n        RTL_hani[idx]=[highest,1]\n\n#concat\nans=1\nhou=1000000007\nfor idx in range(0,N,1):\n    # prod set\n    ue=min(RTL_hani[idx][0],LTR_hani[idx][0])\n    shita=max(RTL_hani[idx][1],LTR_hani[idx][1])\n    ans=(ans*max((ue-shita+1),0))%hou\n\nprint(ans)\n", "code2": "# \u5165\u529b\nimport sys\nstdin = sys.stdin\n\ndef li(): return [int(x) for x in stdin.readline().split()]\ndef li_(): return [int(x)-1 for x in stdin.readline().split()]\ndef lf(): return [float(x) for x in stdin.readline().split()]\ndef ls(): return stdin.readline().split()\ndef ns(): return stdin.readline().rstrip()\ndef lc(): return list(ns())\ndef ni(): return int(ns())\ndef nf(): return float(ns())\n\nn = ni()\nt = li()\na = li()\n\nMOD = 10**9 + 7\n\n# T,A \u306e\u66f4\u65b0\u3068\u77db\u76fe\u3092\u78ba\u8a8d\nt_modified = [0]*n\na_modified = [0]*n\nt_modified[0] = 1\na_modified[-1] = 1\nconsistent = True\n\nif max(a) != max(t):\n    consistent = False\n\nfor i in range(n-1):\n    if t[i+1] != t[i]:\n        t_modified[i+1] = 1\n        \n        if t[i+1] > a[i+1]:\n            consistent = False\n            \n    if a[i] != a[i+1]:\n        a_modified[i] = 1\n        \n        if a[i] > t[i]:\n            consistent = False\n\n# \u66f4\u65b0\u304c\u3042\u3063\u305f\u70b9\u306f1\u901a\u308a\u3001\u7121\u304b\u3063\u305f\u70b9\u306fmin(ti,ai)\u901a\u308a\u306e\u9ad8\u3055\u304c\u8003\u3048\u3089\u308c\u308b      \nans = 1\nfor i in range(n):\n    if t_modified[i] == 0 and a_modified[i] == 0:\n        ans = (ans * min(t[i], a[i])) % MOD\n\nif consistent:\n    print(ans)\nelse:\n    print(0)", "label": 1, "name1": "s271635856.py", "name2": "s440436566.py"}, {"id": 339, "code1": "import sys\nif sys.platform =='ios':\n\tsys.stdin=open('Untitled.txt')\ninput = sys.stdin.readline\n\n# \u53c2\u7167URL:https://qiita.com/gogotealove/items/11f9e83218926211083a\n\n# n = [int(x) for x in input().rstrip()]\n# op_cnt = len(n) - 1  # \u3059\u304d\u9593\u306e\u500b\u6570\n# ans2 = []\n# for i in range(2 ** op_cnt):\n#     op = [\"\"] * op_cnt  # \u3042\u3089\u304b\u3058\u3081 [\"-\", \"-\", \"-\"] \u3068\u3044\u3046\u30ea\u30b9\u30c8\u3092\u4f5c\u3063\u3066\u304a\u304f\n#     for j in range(op_cnt):\n#         if ((i >> j) & 1):\n#             op[op_cnt - 1 - j] = \"+\"  # \u30d5\u30e9\u30b0\u304c\u7acb\u3063\u3066\u3044\u305f\u7b87\u6240\u3092 \"+\" \u3067\u4e0a\u66f8\u304d\n#     ans2.append(op)\n# for a in ans2:\n# \tprint(a)\n\nS = input().rstrip() # \u5165\u529b\u5024 \"1234\\n\" \u3092 \"1234\"\u306b\nn = len(S)-1 # \u30aa\u30da\u30ec\u30fc\u30bf\u304c\u5165\u308a\u3046\u308b\u9699\u9593\u306flen(S)-1\n\nops = []\nfor i in range(2**n): # \u5404\u9699\u9593\u306b\u5bfe\u3057\u3066\u3001 +\u3059\u308b\u3057\u306a\u3044\u306e2\u901a\u308a\u304c\u3042\u308b\u306e\u3067\u30012^n \u56de\u30eb\u30fc\u30d7\n\top = [\"\"] * n # \u3042\u3089\u304b\u3058\u3081\u30ea\u30b9\u30c8\u3092\u4f5c\u6210\n\tfor j in range(n):\n\t\tif((i>>j) & 1) == 1:  # \u9806\u306b\u53f3\u306b\u30b7\u30d5\u30c8\u3055\u305b\u6700\u4e0b\u4f4dbit\u306e\u30c1\u30a7\u30c3\u30af\u3092\u884c\u3046\n\t\t\top[n-1-j] = \"+\" # \u30d5\u30e9\u30b0\u304c\u7acb\u3063\u3066\u3044\u305f\u3089op\u306e\u5024\u3092\u66f8\u304d\u63db\u3048\u308b\n\tops.append(op)\n\n# \u3053\u3053\u307e\u3067\u3067 ops \u306e\u4e2d\u306b\u3042\u308a\u3046\u308b\u7d44\u307f\u5408\u308f\u305b\u304c\u5217\u6319\u3055\u308c\u308b\uff08\u4ee5\u4e0b\u306flen(S)-1==3\u306e\u4f8b\uff09\n# ['', '', '']\n# ['', '', '+']\n# ['', '+', '']\n# ['', '+', '+']\n# ['+', '', '']\n# ['+', '', '+']\n# ['+', '+', '']\n# ['+', '+', '+']\n\nans = 0\nfor o in ops:\n\ts = [s for s in S]\n\tfor k in range(len(o)):\n\t\ts.insert(2*k+1, o[k])\n\tans += eval(''.join(s)) # eval \u3092\u5229\u7528\u3059\u308b\u3053\u3068\u3067\u6587\u5b57\u5217\u3092\u5f0f\u3068\u3057\u3066\u8a55\u4fa1\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u308b\n\nprint(ans)", "code2": "s = input()\nans = 0\nn = len(s)\nfor i in range(2 ** (n-1)):\n    tmp = s[0]\n    for j in range(n-1):\n        if i & (1<<j):tmp+=\"+\"\n        tmp+=s[j+1]\n    ans += eval(tmp)\nprint(ans)", "label": 1, "name1": "s854607235.py", "name2": "s622648113.py"}, {"id": 819, "code1": "import itertools\n\ndef is_edge_exists(node1, node2, edges):\n\tfor edge in edges:\n\t\tif node1 in edge and node2 in edge:\n\t\t\treturn True\n\treturn False\n\ndef route_count(route, edges):\n\tif route[0]!=1:\n\t\treturn 0\n\tfor i in range(len(route)-1):\n\t\tif not is_edge_exists(route[i], route[i+1], edges):\n\t\t\treturn 0\n\treturn 1\n\nN, M = map(int, input().split())\nedges = [list(map(int, input().split())) for i in range(M)]\nnodes = [i+1 for i in range(N)]\nroutes = list(itertools.permutations(nodes))\n\nans = 0\nfor route in routes:\n\tans += route_count(route, edges)\nprint(ans)", "code2": "l = len(set(list(map(int, input().split()))))\nif l == 2:\n  print(\"Yes\")\nelse:\n  print(\"No\")", "label": 0, "name1": "s952388313.py", "name2": "s571170465.py"}, {"id": 460, "code1": "N = int(input())\nimport sys\nsys.setrecursionlimit(N+10)\n\nes = [[] for _ in range(N)]\nfor i in range(N-1):\n    a,b = map(int, input().split())\n    a,b = a-1, b-1\n    es[a].append(b)\n    es[b].append(a)\n\n\"\"\"\n\u76f8\u624b\u306e\u53d6\u308c\u308b\u30de\u30b9\u76ee\u3092\u6e1b\u3089\u3059\u3088\u3046\u306b\u3068\u308b\u3068\u3088\u3044\n\u76f8\u624b\u3088\u308a\u305d\u306e\u30de\u30b9\u306b\u8fd1\u3051\u308c\u3070\u305d\u306e\u30de\u30b9\u3092\u53d6\u5f97\u3067\u304d\u308b\n\u30d5\u30a7\u30cd\u30c3\u30af\u304f\u3093\u3001\u3059\u306c\u3051\u541b\u306b\u3064\u3044\u3066\u521d\u671f\u5730\u70b9\u304b\u3089\u305d\u308c\u305e\u308c\u3078\u306e\u8ddd\u96e2\u304c\u5fc5\u8981\n\"\"\"\ndef solve(now, depth, depth_list, es, visited):\n    visited[now] = True\n    depth_list[now] = depth\n    for next in es[now]:\n        if visited[next] == False:            \n            solve(next, depth+1, depth_list, es, visited)\n\ndepth_list_F = [0] * N\nvisited_F = [False] * N\nsolve(0, 0, depth_list_F, es, visited_F)\n\ndepth_list_S = [0] * N\nvisited_S = [False] * N\nsolve(N-1, 0, depth_list_S, es, visited_S)\n\ncnt_F = cnt_S = 0\nfor f,s in zip(depth_list_F, depth_list_S):\n    if f <= s:\n        cnt_F += 1 # \u30d5\u30a7\u30cd\u30c3\u30af\u541b\u304b\u3089\u59cb\u3081\u308b\u306e\u3067\u540c\u3058\u8ddd\u96e2\u306a\u3089\u30d5\u30a7\u30cd\u30c3\u30af\u541b\u304c\u3068\u308b\n    else:\n        cnt_S += 1\n\nif cnt_F > cnt_S:\n    print(\"Fennec\")\nelse:\n    print(\"Snuke\")", "code2": "n=int(input())\n\nL=[[] for i in range(n+1)]\n\nfor i in range(n-1):\n    a,b=map(int,input().split())\n    L[a].append(b)\n    L[b].append(a)\n\nfe=[0 for i in range(n+1)]\nque=[(1,0)]\nvisited=[0 for i in range(n+1)]\nvisited[1]=1\nhead=0\n\nwhile len(que)>head:\n    now=que[head]\n    head+=1\n    fe[now[0]]=now[1]\n    for nex in L[now[0]]:\n        if visited[nex]==0:\n            visited[nex]=1\n            que.append((nex,now[1]+1))\n            \nsn=[0 for i in range(n+1)]\nque=[(n,0)]\nvisited=[0 for i in range(n+1)]\nvisited[-1]=1\nhead=0\n\nwhile len(que)>head:\n    now=que[head]\n    head+=1\n    sn[now[0]]=now[1]\n    for nex in L[now[0]]:\n        if visited[nex]==0:\n            visited[nex]=1\n            que.append((nex,now[1]+1))\n\nkaname=[]\nfor i in range(1,n+1):\n    ck=fe[i]-sn[i]\n    if ck==1 or ck==2:\n        kaname.append(i)\n\ncnt=0\nque=[(1,0)]\nvisited=[0 for i in range(n+1)]\nvisited[1]=1\nhead=0\n\nwhile len(que)>head:\n    now=que[head]\n    head+=1\n    cnt+=1\n    for nex in L[now[0]]:\n        if visited[nex]==0 and not nex in kaname:\n            visited[nex]=1\n            que.append((nex,now[1]+1))\n\nif cnt*2>n:\n    print(\"Fennec\")\nelse:\n    print(\"Snuke\")", "label": 1, "name1": "s940891501.py", "name2": "s845599163.py"}, {"id": 959, "code1": "n, m, k = map(int, input().split())\n \nans = \"No\"\nfor i in range(n + 1):\n    for j in range(m + 1):\n        if i * (m - j) + j * (n - i) == k:\n            ans = \"Yes\"\nprint(ans)", "code2": "# ABC099D - Good Grid\nimport sys\ninput = sys.stdin.readline\n\nfrom collections import defaultdict\nfrom itertools import product\n\n\ndef main():\n    N, C = map(int, input().split())\n    D = [0] + list([0] + list(map(int, input().split())) for _ in range(C))\n    grid = tuple(tuple(map(int, input().split())) for _ in range(N))\n    cost = {i: defaultdict(int) for i in range(3)}\n    for i, g in enumerate(grid):\n        for j, x in enumerate(g):\n            cost[(i + j) % 3][x] += 1\n    dist = [[] for _ in range(3)]\n    for i, tgt in product(range(3), range(1, C + 1)):\n        cur = sum(D[src][tgt] * cnt for src, cnt in cost[i].items())\n        dist[i].append(cur)\n    ans = 1 << 60\n    for i, j in product(range(C), repeat=2):\n        if i == j:\n            continue\n        cur = dist[0][i] + dist[1][j]\n        cur += min(x for k, x in enumerate(dist[2]) if k not in (i, j))\n        ans = min(ans, cur)\n    print(ans)\n\n\nif __name__ == \"__main__\":\n    main()", "label": 0, "name1": "s425111362.py", "name2": "s120577952.py"}, {"id": 932, "code1": "N = int(input())\nMOD = 10**9 + 7\n\nfact = [1]*(N+1)\n\nfor i in range(1, N+1):\n    fact[i] = r = i*fact[i-1] % MOD\n\ncnts = [0]*(N+1)\nrev = 1\nfor K in range(N-1, (N+1)//2-1, -1):\n    cnts[K] = fact[K]*fact[K-1]*rev % MOD\n    rev = rev * (2*K-N) * (2*K-N-1) % MOD\n\nans = 0\nfor K in range((N+1)//2, N):\n    ans += (cnts[K] - cnts[K-1]) * K % MOD\n    ans %= MOD\nans = (ans * pow(fact[N-2], MOD-2, MOD)) % MOD\nprint(ans)", "code2": "n = int(input())\nA = list(map(int, input().split()))\nl = 1\nr = 2*n\nwhile l < r-1:\n    mid = (l+r)//2\n    B = []\n    C = []\n    for i in range(0,2*n-1):\n        B.append(A[i] >= mid)\n        C.append(0)\n    for i in range(1,2*n-1):\n        if B[i-1] == B[i]:\n            C[i] = 1\n    for i in range(0,2*n-2):\n        if B[i+1] == B[i]:\n            C[i] = 1\n    mi = 2*n\n    ans = False\n    for i in range(0,2*n-1):\n        if C[i] == 1:\n            if abs(i-n+1) < mi:\n                mi = abs(i-n+1)\n                ans = B[i]\n    if mi == 2*n:   #specialfall\n        ans = ((n+1)%2)^B[n-1]\n    if ans == True:\n        l = mid\n    else:\n        r = mid\nprint(l)\n        \n", "label": 0, "name1": "s911857403.py", "name2": "s087982630.py"}, {"id": 492, "code1": "import sys\nfrom collections import defaultdict, Counter, deque\nfrom itertools import accumulate, permutations, combinations\nfrom operator import itemgetter\nfrom bisect import bisect_left, bisect_right, bisect\nfrom heapq import heappop, heappush\nfrom fractions import gcd\nfrom math import ceil, floor, sqrt, cos, sin, pi\nfrom copy import deepcopy\n\n# If you use recursive call, uncomment this code\n#sys.setrecursionlimit(10**6)\n\ndef main():\n    nums = set(map(int, input().split()))\n    if len(nums) == 2:\n        print(\"Yes\")\n    else:\n        print(\"No\")\n\n\nif __name__ == '__main__':\n    main()\n", "code2": "A=[int(i) for i in input().split()]\nA.sort()\n\nif (A[0] == A[1]) and (A[1] != A[2]) or (A[1] == A[2]) and (A[0] != A[1]):\n  print(\"Yes\")\nelse:\n  print(\"No\")", "label": 1, "name1": "s765543700.py", "name2": "s220353071.py"}, {"id": 308, "code1": "A, B, C = map(int, input().split())\n\n\nH = C-(A-B)\n\nif H < 0:\n    print(\"0\")\nelse:\n    print(H)\n\n\n", "code2": "A, B, C = map(int, input().split())\nX = C - (A - B)\nif X >= 0:\n    print(X)\nelse:\n    print(0)", "label": 1, "name1": "s336832003.py", "name2": "s835397152.py"}, {"id": 683, "code1": "while True:\n    n,x = map(int,raw_input().split())\n    count = 0;\n    if n == 0 and x == 0:break\n    for i in range(1,n + 1):\n        for j in range(1,n + 1):\n            if i == j:break\n            for k in range(1,n + 1):\n                if j == k:break\n                if i + j + k == x:\n                    count+=1\n                    break\n    print count", "code2": "tree = [ [] for _ in range(4) ]\n\nfor i in range(3):\n    a, b = map(int, input().split())\n    a -= 1; b -= 1;\n    tree[a].append(b)\n    tree[b].append(a)\n\nfor i in range(4):\n    visited = [ False for _ in range(4) ]\n    cur = i\n    visited[cur] = True\n    for j in range(3):\n        for v in tree[cur]:\n            if not visited[v]:\n                next_v = v\n                break\n        visited[next_v] = True\n        cur = next_v\n\nprint ( \"YES\" if all(visited) else \"NO\" )\n", "label": 0, "name1": "s748079428.py", "name2": "s679343249.py"}, {"id": 973, "code1": "from bisect import bisect_left\nfrom bisect import bisect_right\nN = int(input())\nA = sorted(list(map(int,input().split())))\nB = sorted(list(map(int,input().split())))\nC = sorted(list(map(int,input().split())))\n\nans = 0\nfor i in range(N):\n  ans += bisect_left(A, B[i]) * (N - bisect_right(C, B[i]))\n  \nprint(ans)", "code2": "MAX = 1000001\nprimes = list()\nfor i in range(MAX):\n    primes.append(True)\nprimes[0] = False\nprimes[1] = False\n\nfor i in range(2, MAX):\n    j = i + i\n    while j < MAX:\n        primes[j] = False\n        j = j + i\n\nwhile True:\n    n = int(input())\n    if n == 0:\n        break\n\n    ans = 0\n    for i in range(1, n // 2 + 1):\n        if primes[i] and primes[n-i]:\n            ans += 1\n    print(ans)\n", "label": 0, "name1": "s313857544.py", "name2": "s246285393.py"}, {"id": 279, "code1": "deg = [0] * 4\nfor _ in range(3):\n    a, b = map(int, input().split())\n    deg[a - 1] += 1\n    deg[b - 1] += 1\nif all(x <= 2 for x in deg):\n    print(\"YES\")\nelse:\n    print(\"NO\")\n", "code2": "a, b = [], []\nappear_count = [0] * 4\nfor _ in range(3):\n    _a, _b = map(int, raw_input().split())\n    appear_count[_a - 1] += 1\n    appear_count[_b - 1] += 1\nif max(appear_count) == 3:\n    print \"NO\"\nelse:\n    print \"YES\"", "label": 1, "name1": "s546079663.py", "name2": "s562629657.py"}, {"id": 713, "code1": "####################\n#  AC:     ms (PyPy)\n####################\n\ndef main():\n    MOD = 10**6+3\n    # preprocess\n    fac = [None] * (MOD+1)\n    fac[0] = fac[1] = 1\n    for i in range(2, MOD+1):\n        fac[i] = (fac[i-1] * i) % MOD\n\n    Q = int(input())\n    for i in range(Q):\n        x, d, n = map(int, input().split())\n\n        if d == 0:\n            print(pow(x, n, MOD))\n            continue\n        \n        xd = (x * pow(d, MOD-2, MOD)) % MOD\n        if xd == 0 or xd + (n-1) >= MOD:\n            print(0)\n            continue\n\n        print(pow(d, n, MOD) * fac[xd+(n-1)] * pow(fac[xd-1], MOD-2, MOD) % MOD)\n\n\nif __name__ == \"__main__\":\n    main()", "code2": "a,b,c=map(int,input().split())\nprint(min(a+b,b+c,c+a))\n", "label": 0, "name1": "s606450603.py", "name2": "s997903196.py"}, {"id": 32, "code1": "n,a,b = map(int, input().split())\nXs = list(map(int, input().split()))\n\nds = [0] * (n+10)\nfor i in range(n-1):\n    cost1 = a*(Xs[i+1] - Xs[i])\n    cost2 = b\n    ds[i+1] = ds[i] + min(cost1, cost2)\nprint(ds[n-1])", "code2": "n,a,b=map(int,input().split())\nlst=list(map(int,input().split()))\n\npin=lst[0]\nans=0\n\nfor i in range(1,n):\n  ans+=min((lst[i]-lst[i-1])*a,b)\n  \nprint(ans)", "label": 1, "name1": "s039990138.py", "name2": "s504779236.py"}, {"id": 748, "code1": "AI, AO, _, AJ, AL, _, _ = map(int, input().split())\n\nodd = AI % 2 + AJ % 2 + AL % 2\nif odd == 0 or odd == 3:\n    print(AI + AO + AJ + AL)\nelif odd == 1:\n    print(AI + AO + AJ + AL - 1)\nelse:\n    if AI + AJ + AL == 2:\n        print(AO)\n    else:\n        print(AI + AO + AJ + AL - 1)\n", "code2": "H,W = list(map(int,input().split()))\n\na = [input() for i in range(H)]\n\nb = [[] for i in range(H)]\nr = [[] for i in range(H)]\nfor i in range(H):\n    for j in range(W):\n        if i==0:\n            b[i].append(\"#\")\n            r[i].append(\".\")\n        elif i==H-1:\n            b[i].append(\".\")\n            r[i].append(\"#\")\n        elif a[i][j]==\"#\":\n            b[i].append(\"#\")\n            r[i].append(\"#\")\n        elif j%2==0:\n            b[i].append(\".\")\n            r[i].append(\"#\")\n        elif j%2==1:\n            b[i].append(\"#\")\n            r[i].append(\".\")\n\nfor i in range(H):\n    ans = \"\"\n    for j in range(W):\n        ans = ans+b[i][j]\n\n    print(ans)\nprint(\"\")\n\nfor i in range(H):\n    ans = \"\"\n    for j in range(W):\n        ans = ans+r[i][j]\n\n    print(ans)\n", "label": 0, "name1": "s383965736.py", "name2": "s413122754.py"}, {"id": 152, "code1": "y = [True for i in range(250001)]\ny[0] = y[1] = False\nfor i in range(2, 500):\n    if y[i]:\n        for j in range(2, 250000 // i + 1):\n            y[i * j] = False\nwhile True:\n    n = int(input())\n    if n == 0:\n        break\n    print(y[n + 1 : n * 2 + 1].count(True))\n", "code2": "import math\ndef sosu(n):\n    if n == 1:\n        return 1\n    for k in range(2,int(math.floor(math.sqrt(n)))+1):\n        if n%k == 0:\n            return 1\n    return 0\n    \nwhile True:\n    n = int(input())\n    \n    if n == 0:\n        break\n    \n    a = 0\n    for i in range(n+1,2*n+1):\n        if sosu(i) == 0:\n            a += 1\n    print(a)\n", "label": 1, "name1": "s889149636.py", "name2": "s847200596.py"}, {"id": 1000, "code1": "while True:\n    t = int(input())\n    if t==0:\n        break\n    n = int(input())\n    hour = 0\n    for i in range(n):\n        s,f = map(int,input().split())\n        hour += (f-s)\n        \n    if hour >= t:\n        print(\"OK\")\n    else:\n        print(t-hour)\n\n", "code2": "N = int(input())\nT, A = map(int, input().split())\nH = list(map(int, input().split()))\n\nmin_i = 0\nmin_temp = 100000000000000\n\nfor i, h in enumerate(H):\n\n    temp = T - h * 0.006\n\n    if abs(A - temp) < min_temp:\n        min_i = i\n        min_temp = abs(A - temp)\n\nprint(min_i + 1)\n", "label": 0, "name1": "s816516481.py", "name2": "s942055979.py"}, {"id": 335, "code1": "s=input()\nn=len(s)\nl=[[] for _ in range(2**(n-1))]\nfor b in range(2**(n-1)):\n    x=b\n    for i in range(n-1):\n        if x%2==1:\n            l[b].append(1)\n        else:\n            l[b].append(0)\n        x//=2\n#print(l)\nindexes=[[] for _ in range(2**(n-1))]\nfor k in range(2**(n-1)):\n    indexes[k]=[i for i, x in enumerate(l[k]) if x == 1]\n#print(indexes)\nSUM=0\nfor j in range(2**(n-1)):\n    L=len(indexes[j])\n    if L==0:\n        SUM+=int(s)\n        #print(SUM)\n    else:\n        SUM+=int(s[:indexes[j][0]+1])\n        #print(SUM)\n        SUM+=int(s[indexes[j][L-1]+1:])\n        #print(SUM)\n        if L>1:\n            for h in range(L-1):\n                SUM+=int(s[indexes[j][h]+1:indexes[j][h+1]+1])\n                #print(SUM)\nprint(SUM)", "code2": "s = input()\nans = 0\nn = len(s)\nfor i in range(2 ** (n-1)):\n    tmp = s[0]\n    for j in range(n-1):\n        if i & (1<<j):tmp+=\"+\"\n        tmp+=s[j+1]\n    ans += eval(tmp)\nprint(ans)", "label": 1, "name1": "s307853353.py", "name2": "s622648113.py"}, {"id": 2, "code1": "n = int(input())\nif n%9 == 0:\n    print(\"Yes\")\nelse:\n    print(\"No\")", "code2": "n = input()\n\nnum = 0\nfor e in n:\n    num += int(e)\n    num %= 9\n\nif num:\n    ans = \"No\"\nelse:\n    ans = \"Yes\"\n\nprint(ans)\n", "label": 1, "name1": "s507543676.py", "name2": "s399175995.py"}, {"id": 768, "code1": "input()\ns = sorted(map(int, raw_input().split()))\nfor i in s:\n    print i,", "code2": "import sys\nimport fractions\nfrom collections import Counter, deque, defaultdict\nfrom math import factorial\nimport heapq, bisect\nimport math\nimport itertools\nsys.setrecursionlimit(10 ** 5 + 10)\nINF = 10**15 +5\ndef input(): return sys.stdin.readline().strip()\ndef INT(): return int(input())\ndef MAP(): return map(int, input().split())\ndef LIST(): return list(map(int, input().split()))\n\nn = INT()\nt = [0]*n\nfor i in range(n):\n    t[i] = INT()\n\ndef lcm(a,b):\n    gcd = fractions.gcd(a,b)\n    a//=gcd\n    b//=gcd\n    return a*b*gcd\n    \nif n == 1:\n    print(t[0])\n    sys.exit()\n\nres = lcm(t[0],t[1])\nfor i in range(1,n-1):\n    res = lcm(res, t[i+1])\n\nprint(res)\n\n\n", "label": 0, "name1": "s503541745.py", "name2": "s491119021.py"}, {"id": 662, "code1": "N, K = map(int, input().split())\nW = [int(input()) for w in range(N)]\n\ndef check(p):\n    i = 0\n    for _ in range(K):\n        s = 0\n        while s + W[i] <= p:\n            s += W[i]\n            i += 1\n            if i == N:\n                return N\n    return i\n\nleft = 0\nright = 100000 * 10000\nmid = 0\nwhile 1 < right - left:\n    mid = (left + right) / 2\n    v = check(mid)\n    if v >= N:\n        right = mid\n    else:\n        left = mid\n\nprint(int(right))\n", "code2": "import re\n\ns = input().replace('?', '.')\nt = input()\n\nif len(t)>len(s):\n  print('UNRESTORABLE')\nelif len(t)==len(s):\n  if re.match(s, t):\n    print(t)\n  else:\n    print('UNRESTORABLE')\nelse:\n  for i in range(len(s)-len(t)+1):\n    check_str = s[len(s)-len(t)-i:len(s)-i]\n    if re.match(check_str, t):\n      break\n\n  if i==len(s)-len(t):\n    print('UNRESTORABLE')\n  else:\n    ans = s[:len(s)-len(t)-i] + t + s[len(s)-i:]\n    ans = ans.replace('.', 'a')\n    print(ans)", "label": 0, "name1": "s152551733.py", "name2": "s389752250.py"}, {"id": 727, "code1": "S = input()\n\nl = len(S)\nS_list = list(map(int, S))\n\nans = 0\n\nfor i in range(l):\n    num = int(S_list[-i-1])\n\n    for j in range(i+1):\n        ans += num * (10 ** (j)) * (2 ** (max(l-1-j-1, l-1-i)))\n\nprint(ans)\n", "code2": "from sys import stdin, setrecursionlimit\n\n\ndef main():\n    input = stdin.buffer.readline\n    x, y = map(int, input().split())\n    count = 0\n    tmp = x\n    while tmp <= y:\n        tmp *= 2\n        count += 1\n    print(count)\n\n\nif __name__ == \"__main__\":\n    setrecursionlimit(10000)\n    main()\n", "label": 0, "name1": "s174681493.py", "name2": "s379690682.py"}, {"id": 395, "code1": "start, end, div = list(map(int, input().strip().split()))\n\ncount = end // div - start //div\n\nif start % div == 0:\n  count += 1\nprint(count)", "code2": "import sys\n\ninput = sys.stdin.readline\n\n\ndef main():\n    a, b, x = map(int, input().split())\n\n    q, r = divmod(a, x)\n    A = x * q + x * (r != 0)\n    q, r = divmod(b, x)\n    B = x * q\n\n    if B < A:\n        print(0)\n    else:\n        print((B - A) // x + 1)\n\n\nif __name__ == \"__main__\":\n    main()\n", "label": 1, "name1": "s009071418.py", "name2": "s273000716.py"}, {"id": 127, "code1": "from collections import defaultdict, deque, Counter\nfrom heapq import heappush, heappop, heapify\nfrom bisect import bisect_right, bisect_left\nimport random\nfrom itertools import permutations, accumulate, combinations, product\nimport sys\nimport string\nfrom bisect import bisect_left, bisect_right\nfrom math import factorial, ceil, floor, gamma, log\nfrom operator import mul\nfrom functools import reduce\nfrom copy import deepcopy\n\nsys.setrecursionlimit(2147483647)\nINF = 10 ** 20\ndef LI(): return list(map(int, sys.stdin.readline().split()))\ndef I(): return int(sys.stdin.readline())\ndef LS(): return sys.stdin.buffer.readline().rstrip().split()\ndef S(): return sys.stdin.buffer.readline().rstrip().decode('utf-8')\ndef IR(n): return [I() for i in range(n)]\ndef LIR(n): return [LI() for i in range(n)]\ndef SR(n): pass\ndef LSR(n): return [LS() for i in range(n)]\ndef SRL(n): return [list(S()) for i in range(n)]\ndef MSRL(n): return [[int(j) for j in list(S())] for i in range(n)]\nmod = 10 ** 9 + 7\n\nn = I()\n\nfac = [1] * (n + 1)\ninv = [1] * (n + 1)\nfor j in range(1, n + 1):\n    fac[j] = fac[j-1] * j % mod\n\n\ninv[n] = pow(fac[n], mod-2, mod)\nfor j in range(n-1, -1, -1):\n    inv[j] = inv[j+1] * (j+1) % mod\n\n\ndef comb(n, r):\n    if r > n or n < 0 or r < 0:\n        return 0\n    return fac[n] * inv[n - r] * inv[r] % mod\n\ns = input()\ndp = [[0] * n for _ in range(n)]\ndp[0][0] = 1\nfor i in range(1, n):\n    ret = 0\n    if s[i - 1] == \"<\":\n        for j in range(i - 1, -1, -1):\n            ret += dp[i - 1][j]\n            ret %= mod\n            dp[i][j] = ret\n    else:\n        for j in range(i):\n            ret += dp[i - 1][j]\n            dp[i][j + 1] = ret\n        dp[i][i] = ret\n\nprint(sum(dp[-1]) % mod)\n", "code2": "import sys\nread = sys.stdin.buffer.read\nreadline = sys.stdin.buffer.readline\nreadlines = sys.stdin.buffer.readlines\n\nimport numpy as np\n\nN = int(readline())\nS = read().rstrip().decode('utf-8')\n\nMOD = 10**9 + 7\n\n\"\"\"\n\u30fb\u6700\u5f8c\u306b\u4f7f\u3063\u305f\u6570\u306b\u5bfe\u3057\u3066\u3001\u4e0b\u5074\u306b\u6b8b\u3063\u3066\u3044\u308b\u500b\u6570 -> \u6570\u3048\u4e0a\u3052\n\"\"\"\n\ndp = np.ones(N,np.int64) # \u5de6\u7aef\n\nfor s in S:\n    prev = dp\n    if s == '<':\n        # 0,1,...,n\u304cdp[n]\u306b\u9077\u79fb\u3059\u308b\n        dp = prev[:-1].cumsum()\n    else:\n        # n+1,n+2,...\u304cdp[n]\u306b\u9077\u79fb\u3059\u308b\n        dp = prev[1:][::-1].cumsum()[::-1]\n    dp %= MOD\n\nanswer = dp[0]\nprint(answer)", "label": 1, "name1": "s321259797.py", "name2": "s898339720.py"}, {"id": 776, "code1": "n = int(input())\na = list(map(int, input().split()))\na.insert(n,0)\na.insert(0,0)\nsum = 0\nfor i in range(n+1):\n    sum += abs(a[i+1] -a[i])\nfor i in range(n):\n    print(sum - abs(a[i+1] - a[i]) - abs(a[i+2] - a[i+1]) + abs(a[i+2] - a[i]))", "code2": "# coding: utf-8\ndef addset(args):\n    global a\n    for m in args:\n        if dic[m]==1:\n            a.add(m)\n        else:\n            if m not in used:\n                used.add(m)\n                addset(dc[m])\n \nwhile True:\n    n=int(input())\n    if n==0:\n        break\n    dic={}\n    first=[]\n    dc={}\n    for i in range(n):\n        g,m=input().split(':')\n        m=m.rstrip('.').split(',')\n        dc[g]=m\n        if i==0:\n            first.append(g)\n            first+=m\n        dic[g]=2\n        for mem in m:\n            if mem not in dic:\n                dic[mem]=1\n    a=set()\n    used=set()\n    addset(first[1:])\n    print(len(a))\n", "label": 0, "name1": "s465741499.py", "name2": "s673127686.py"}, {"id": 744, "code1": "from heapq import heappush, heappop\nimport sys\nfrom typing import List, Tuple\n\n\nif __name__ == \"__main__\":\n    V, E, r = map(lambda x: int(x), input().split())\n\n    edges: List[List[Tuple[int, int]]] = [[] for _ in range(V)]\n    dists = [sys.maxsize for _ in range(V)]\n    dists[r] = 0\n\n    for _ in range(E):\n        s, t, dist = map(lambda x: int(x), input().split())\n        edges[s].append((t, dist))\n\n    que: List[Tuple[int, int]] = []  # (dist, vertex)\n    heappush(que, (0, r))\n\n    while que:\n        dist, vertex = heappop(que)\n        for to, cost in edges[vertex]:\n            if cost + dist < dists[to]:\n                dists[to] = cost + dist\n                heappush(que, (cost + dist, to))\n\n    for dist in dists:\n        if sys.maxsize == dist:\n            print(\"INF\")\n        else:\n            print(dist)\n\n", "code2": "h, w = map(int, input().split())\na = [list(input()) for _ in range(h)]\nu = [[\".\"] * w for _ in range(h)]\nv = [[\".\"] * w for _ in range(h)]\nfor i in range(h):\n    for j in range(w):\n        if a[i][j] == \"#\":\n            u[i][j], v[i][j] = \"#\", \"#\"\n        else:\n            if i == 0:\n                u[i][j] = \"#\"\n            elif i == h - 1:\n                v[i][j] = \"#\"\n            else:\n                if j % 2 == 0:\n                    u[i][j] = \"#\"\n                else:\n                    v[i][j] = \"#\"\nfor s in u:\n    print(\"\".join(s))\nprint()\nfor t in v:\n    print(\"\".join(t))", "label": 0, "name1": "s404691730.py", "name2": "s080897842.py"}, {"id": 154, "code1": "import sys\ninput = sys.stdin.readline\nQ = int(input())\n\ndef check(x, a, b):\n  y = (a <= -(-x // 2)) or (b <= -(-x // 2))\n  z = (a <= (x // 2 + 1)) and (b <= (x // 2 + 1))\n  return (-(-x // 2) + y) * ((x // 2 + 1) + z) < a * b\n\nfor _ in range(Q):\n  a, b = map(int, input().split())\n\n  ok = 0\n  ng = a * b\n  while ng - ok > 1:\n    m = (ok + ng) // 2\n    if check(m, a, b): ok = m\n    else: ng = m\n  print(ok)", "code2": "q = int(input())\nquest = [tuple(map(int, input().split())) for _ in range(q)]\nfor a, b in quest:\n    m = a*b\n    l = int((m - 1) ** (1/2))\n    # check float\n    if l * l >= m:\n        l -= 1\n    elif (l+1) * (l+1) < m:\n        l += 1\n    if a == b:\n        print((a-1) * 2)\n    elif (l+1) * l < m:\n        print(l*2 - 1)\n    else:\n        print(l*2 - 2)\n", "label": 1, "name1": "s809561228.py", "name2": "s200942919.py"}, {"id": 534, "code1": "def solve():\n    N = int(input())\n    A = list(map(int, input().split()))\n    b = 0\n    c = 0\n    d = 0\n    for a in A:\n        if a == b:\n            c += 1\n        if a != b:\n            d += c//2\n            b = a\n            c = 1\n    d += c//2\n    b = a\n    c = 0\n    print(d)\n    \n\nif __name__ == '__main__':\n    solve()", "code2": "while(True):\n    n = int(input())\n    if not n: break\n    maxind = 0\n    maxnum = 0\n    for _ in range(n):\n        a,b,c = map(int,input().split())\n        if maxnum < b+c: maxind=a; maxnum=b+c\n    print(maxind,maxnum)\n", "label": 0, "name1": "s237957783.py", "name2": "s695355783.py"}, {"id": 140, "code1": "A,B,C=map(int,input().split())\nans = 1\nif (A%2 != B%2) and (A%2 == C%2):\n  A += 1\n  C += 1\nelif (A%2 == B%2) and (A%2 != C%2):\n  A += 1\n  B += 1\nelif (A%2 != B%2) and (B%2 == C%2):\n  C += 1\n  B += 1\nelse:\n  ans = 0\nL = [A,B,C]\nL.sort()\nans += (L[2]-L[1])//2 + (L[2]-L[0])//2\nprint( ans )\n", "code2": "def main():\n    A, B, C = map(int, input().split())\n    max_num = max(A, B, C)\n    t = 3 * max_num - A - B - C\n    ans = 0\n\n    if t % 2 == 0:\n        ans = int(t / 2)\n    else:\n        ans = int((t + 3) / 2)\n\n    print(ans)\n\n\nif __name__ == \"__main__\":\n    main()\n", "label": 1, "name1": "s612094036.py", "name2": "s458798923.py"}, {"id": 431, "code1": "# coding: utf-8\ndef addset(args):\n    global a\n    for m in args:\n        if dic[m]==1:\n            a.add(m)\n        else:\n            if m not in used:\n                used.add(m)\n                addset(dc[m])\n \nwhile True:\n    n=int(input())\n    if n==0:\n        break\n    dic={}\n    first=[]\n    dc={}\n    for i in range(n):\n        g,m=input().split(':')\n        m=m.rstrip('.').split(',')\n        dc[g]=m\n        if i==0:\n            first.append(g)\n            first+=m\n        dic[g]=2\n        for mem in m:\n            if mem not in dic:\n                dic[mem]=1\n    a=set()\n    used=set()\n    addset(first[1:])\n    print(len(a))\n", "code2": "while True:\n    n = int(input())\n    if n == 0:\n        break\n    group = dict()\n    ls = set()\n    for i in range(n):\n        g,s = input().split(':')\n        group[g] = set(s[:-1].split(','))\n        if i == 0:\n            ls.add(g)\n    ans = set()\n    while len(ls) > 0:\n        s = ls.pop()\n        if s in group.keys():\n            ls |= group[s]\n        else:\n            ans.add(s)\n    print(len(ans))\n        \n\n", "label": 1, "name1": "s673127686.py", "name2": "s693679701.py"}, {"id": 682, "code1": "while 1:\n\tn , x = map(int , raw_input().split())\n\tif n == x == 0:\n\t\tbreak\n\telse :\n\t\tcnt = 0\n\t\tfor i in range(1,n - 1):\n\t\t\tfor j in range(i + 1 , n):\n\t\t\t\tfor k in range(j + 1, n + 1):\n#\t\t\t\t\tprint i,j,k\n\t\t\t\t\tif i + j + k == x:\n#\t\t\t\t\t\tprint i,j,k\n\t\t\t\t\t\tcnt += 1\n\t\tprint cnt", "code2": "a, b = [], []\nappear_count = [0] * 4\nfor _ in range(3):\n    _a, _b = map(int, raw_input().split())\n    appear_count[_a - 1] += 1\n    appear_count[_b - 1] += 1\nif max(appear_count) == 3:\n    print \"NO\"\nelse:\n    print \"YES\"", "label": 0, "name1": "s558630368.py", "name2": "s562629657.py"}, {"id": 526, "code1": "while(1):\n    n = int(input())\n    if n == 0:\n        break\n    s = [float(i) for i in input().split()]\n    m = sum(s)/n\n    a = (sum([(i- m)**2 for i in s])/n)**0.5\n    print(\"{:.8f}\".format(a))\n", "code2": "n=int(input())\na=list(map(int,input().split()))\nans=0\nfor i in range(n-1):\n    if a[i]==a[i+1]:\n        a[i+1]=-1\n        ans+=1\nprint(ans)", "label": 0, "name1": "s123853064.py", "name2": "s300532690.py"}, {"id": 758, "code1": "h, w = map(int, input().split())\na = [list(input()) for i in range(h)]\nta = [[\".\"] * w for i in range(h)]\nao = [[\".\"] * w for i in range(h)]\nfor i in range(h):\n    if i % 2 == 0:\n        for j in range(w - 1):\n            ta[i][j] = \"#\"\n        ao[i][-1] = \"#\"\n    else:\n        for j in range(1, w):\n            ao[i][j] = \"#\"\n        ta[i][0] = \"#\"\nfor i in range(h):\n    for j in range(w):\n        if a[i][j] == \"#\":\n            ta[i][j] = \"#\"\n            ao[i][j] = \"#\"\nfor i in range(h):\n    print(*ta[i], sep=\"\")\nprint()\nfor i in range(h):\n    print(*ao[i], sep=\"\")", "code2": "#coding:utf-8\n\nn = input()\nl = map(int, raw_input(). split())\nl.sort()\nfor i in xrange(n):\n    print(l[i]),", "label": 0, "name1": "s319820171.py", "name2": "s666694142.py"}, {"id": 751, "code1": "AI, AO, _, AJ, AL, _, _ = map(int, input().split())\n\nodd = AI % 2 + AJ % 2 + AL % 2\nif odd == 0 or odd == 3:\n    print(AI + AO + AJ + AL)\nelif odd == 1:\n    print(AI + AO + AJ + AL - 1)\nelse:\n    if AI + AJ + AL == 2:\n        print(AO)\n    else:\n        print(AI + AO + AJ + AL - 1)\n", "code2": "a,b,x=map(int,input().split())\n\nq1,r1=divmod(a,x)\nq2,_=divmod(b,x)\n\nprint(q2-q1+(r1==0))", "label": 0, "name1": "s383965736.py", "name2": "s935190491.py"}, {"id": 164, "code1": "a=b=0\nfor i in input():c=i==\"T\";d=a>0;a+=1-c-c*d;b+=c*(1-d)\nprint(a+b)", "code2": "X = input()\n\nresult = 0\nt = 0\nfor i in range(len(X)):\n    if X[i] == 'S':\n        t += 1\n    else:\n        if t != 0:\n            result += 2\n            t -= 1\nprint(len(X) - result)\n", "label": 1, "name1": "s373261912.py", "name2": "s863773109.py"}, {"id": 881, "code1": "a, b = input().split()\nif a == 'H':\n    print(b)\nelse:\n    if b == 'H':\n        print('D')\n    else:\n        print('H')", "code2": "#!/usr/bin/env python3\nimport sys\nsys.setrecursionlimit(10**8)\nINF = float(\"inf\")\n\n\ndef solve(K: int, A: int, B: int):\n    for s in range(A, B+1):\n        if s % K == 0:\n            print(\"OK\")\n            return\n    print(\"NG\")\n    return\n\n\ndef main():\n\n    def iterate_tokens():\n        for line in sys.stdin:\n            for word in line.split():\n                yield word\n    tokens = iterate_tokens()\n    K = int(next(tokens))  # type: int\n    A = int(next(tokens))  # type: int\n    B = int(next(tokens))  # type: int\n    solve(K, A, B)\n\n\nif __name__ == '__main__':\n    main()\n", "label": 0, "name1": "s562716029.py", "name2": "s658779563.py"}, {"id": 991, "code1": "N=int(input())\n\nD=list(map(int,input().split()))\nflg =False\nA = [0 for i in range(13)]\nA[0]=1\nfor i in range(N):\n    j = min(D[i],24-D[i])\n    if j==0:\n        flg=True\n        break\n    elif j==12:\n        if A[j]==1:\n            flg=True\n            break\n        else:\n            A[j]+=1\n    else:\n        if A[j]==2:\n            flg=True\n            break\n        else:\n            A[j]+=1\n\nimport copy\n\nif flg:\n    print(0)\nelse:\n    count=0\n    one_times=[]\n    times=[0]\n    for i in range(1,12): \n        if A[i]==1:\n            count+=1\n            one_times.append(i)\n        if A[i]==2:\n            times.append(i)\n            times.append(24-i)\n    if A[12]==1:\n        times.append(12)\n    score_max=0\n    for i in range(2**count):\n        t=copy.copy(times)\n        for j in range(count):\n            if (i//(2**j))%2==0:\n                t.append(one_times[j])\n            else:\n                t.append(24-one_times[j])\n        t.sort()\n        \n        score_min=24\n        for j in range(len(t)):\n            if j==len(t)-1:\n                score_min=min(t[0]+24-t[len(t)-1],score_min)\n            else:\n                score_min=min(t[j+1]-t[j],score_min)\n        score_max=max(score_min,score_max)\n    print(score_max)", "code2": "while True:\n    t = int(input())\n    if t==0:\n        break\n    n = int(input())\n    hour = 0\n    for i in range(n):\n        s,f = map(int,input().split())\n        hour += (f-s)\n        \n    if hour >= t:\n        print(\"OK\")\n    else:\n        print(t-hour)\n\n", "label": 0, "name1": "s868602829.py", "name2": "s816516481.py"}, {"id": 93, "code1": "n,k = map(int, input().split())\namari=n%k\nn=min(amari, k-amari)\nprint(n)", "code2": "n,k=map(int,input().split())\nx=n%k\nprint(min(x,abs(x-k)))", "label": 1, "name1": "s328388206.py", "name2": "s584027827.py"}, {"id": 516, "code1": "h, w = map(int, input().split())\n\neven_rows = h // 2\nodd_rows = (h+1) // 2\n\nif w > 1 and h > 1:\n    ans = 0\n    ans += w // 2 * even_rows\n    ans += (w+1) // 2 * odd_rows\n\n    print(ans)\nelse:\n    print(1)", "code2": "import math\nimport statistics\n\nwhile(1):\n    n=int(input())\n    if(not n):\n        break\n    S=list(map(int,input().split(\" \")))\n    mean=statistics.mean(S)\n    #print(mean)\n    S=list(map(lambda x: (x-mean)**2, S))\n    #print(S)\n    print(math.sqrt(sum(S)/n))\n\n", "label": 0, "name1": "s554703184.py", "name2": "s513646243.py"}, {"id": 702, "code1": "class UnionFind():\n  def __init__(self, n):\n    self.n = n\n    self.parents = [-1] * n\n\n  def find(self, x):\n    if self.parents[x] < 0:\n      return x\n    else:\n      self.parents[x] = self.find(self.parents[x])\n      return self.parents[x]\n\n  def union(self, x, y):\n    x = self.find(x)\n    y = self.find(y)\n\n    if x == y:\n      return\n\n    if self.parents[x] > self.parents[y]:\n      x, y = y, x\n\n    self.parents[x] += self.parents[y]\n    self.parents[y] = x\n\n  def size(self, x):\n    return -self.parents[self.find(x)]\n\n  def same(self, x, y):\n    return self.find(x) == self.find(y)\n\n  def members(self, x):\n    root = self.find(x)\n    return [i for i in range(self.n) if self.find(i) == root]\n\n  def roots(self):\n    return [i for i, x in enumerate(self.parents) if x < 0]\n\n  def group_count(self):\n    return len(self.roots())\n\n  def all_group_members(self):\n    return {r: self.members(r) for r in self.roots()}\n\n  def __str__(self):\n    return '\\n'.join('{}: {}'.format(r, self.members(r)) for r in self.roots())\n\nn, m = map(int, input().split())\nuf = UnionFind(n)\n\nfor _ in range(m):\n  a, b = map(int, input().split())\n  uf.union(a-1,b-1)\n  \nprint(uf.group_count() - 1)\n\n", "code2": "import sys\n\n\n#\u4e92\u3044\u306b\u7d20\u306aa,b\u306b\u3064\u3044\u3066\u3001a*x+b*y=1\u306e\u4e00\u3064\u306e\u89e3\ndef extgcd(a, b):\n    r = [1, 0, a]\n    w = [0, 1, b]\n    while w[2] != 1:\n        q = r[2] // w[2]\n        r2 = w\n        w2 = [r[0] - q * w[0], r[1] - q * w[1], r[2] - q * w[2]]\n        r = r2\n        w = w2\n    #[x,y]\n    return [w[0], w[1]]\n\n\n# a\u306e\u9006\u5143(mod m)\u3092\u6c42\u3081\u308b\u3002(a\u3068m\u306f\u4e92\u3044\u306b\u7d20\u3067\u3042\u308b\u3053\u3068\u304c\u524d\u63d0)\ndef mod_inv(a, m):\n    x = extgcd(a, m)[0]\n    return (m + x % m) % m\n\n\nreadline = sys.stdin.readline\nMOD_NUM = 10**6 + 3\n\nQ = int(readline())\nq_array = [list(map(int, readline().split())) for i in range(Q)]\nans_array = []\n\nfactorial = [1] * MOD_NUM\nfactorial_inv = [1] * MOD_NUM\n\ntmp = 1\nfor i in range(2, MOD_NUM):\n    tmp = tmp * i % MOD_NUM\n    factorial[i] = tmp\n    factorial_inv[i] = mod_inv(tmp, MOD_NUM)\n\nfor q in q_array:\n    x, d, n = q\n    # print(x, d, n)\n    if x == 0:\n        ans_array.append(\"0\\n\")\n        continue\n    if d == 0:\n        ans = pow(x, n, MOD_NUM)\n        ans_array.append(str(ans) + \"\\n\")\n    else:\n        x_start = x * mod_inv(d, MOD_NUM) % MOD_NUM\n        if x_start + n > MOD_NUM:\n            ans_array.append(\"0\\n\")\n        else:\n            ans = factorial[x_start + n - 1] * factorial_inv[\n                x_start - 1] * pow(d, n, MOD_NUM) % MOD_NUM\n            ans_array.append(str(ans) + \"\\n\")\n\nsys.stdout.writelines(ans_array)", "label": 0, "name1": "s813737955.py", "name2": "s261991889.py"}, {"id": 926, "code1": "# ARC075C - Bugged (ABC063C)\ndef main():\n    n = int(input())\n    lst = list(map(int, [input().rstrip() for _ in range(n)]))\n    total = sum(lst)\n    if total % 10 != 0:\n        print(total)\n    else:\n        ans = 0\n        for i in set(lst):\n            if (total - i) % 10 != 0:\n                ans = max(ans, total - i)\n        print(ans)\n\n\nif __name__ == \"__main__\":\n    main()", "code2": "import sys\n# import math, string, itertools, fractions, heapq, collections, re, array, bisect, copy, functools, random\nfrom collections import deque, defaultdict, Counter; from heapq import heappush, heappop\n# from itertools import permutations, combinations, product, accumulate, groupby\n# from bisect import bisect_left, bisect_right, insort_left, insort_right\n# from operator import itemgetter as ig\nsys.setrecursionlimit(10 ** 7)\ninf = 10 ** 20; INF = float(\"INF\"); ans = 0; tmp = 0; ansli = []; tmpli = []; candili = []; mod = 10 ** 9 + 7\ndd = [(-1, 0), (0, 1), (1, 0), (0, -1)]; ddn = dd + [(-1, 1), (1, 1), (1, -1), (-1, -1)]; ddn9 = ddn + [(0, 0)]\n\"\"\"for dx, dy in dd:\n        nx = j + dx; ny = i + dy\n            if 0 <= nx < w and 0 <= ny < h:\"\"\"\ndef wi(): return list(map(int, sys.stdin.readline().split()))\ndef wip(): return [int(x) - 1 for x in sys.stdin.readline().split()]#WideIntPoint\ndef ws(): return sys.stdin.readline().split()\ndef i(): return int(sys.stdin.readline())\ndef s(): return input()\ndef hi(n): return [i() for _ in range(n)]\ndef hs(n): return [s() for _ in range(n)]#HeightString\ndef mi(n): return [wi() for _ in range(n)]#MatrixInt\ndef mip(n): return [wip() for _ in range(n)]\ndef ms(n): return [ws() for _ in range(n)]\n\n\nif __name__ == '__main__':\n    h, w = wi()\n    s = hs(h)\n    flagli = [[0] * w for i in range(h)]\n    stack = deque()\n    black = 0\n    white = 0\n    for i in range(h):\n        for j in range(w):\n            if flagli[i][j] == 0:\n                flagli[i][j] = 1\n                white = 1 if s[i][j] == \".\" else 0\n                black = 1 if s[i][j] == \"#\" else 0\n                stack.append([i, j])\n                while stack != deque():\n                    p, q = stack.pop()\n                    k = 0 if s[p][q] == \".\" else 1\n                    for dx, dy in dd:\n                        nx = q + dx;\n                        ny = p + dy\n                        if 0 <= nx < w and 0 <= ny < h:\n                            if flagli[ny][nx] == 0:\n                                if k == 0 and s[ny][nx] == \"#\":\n                                    flagli[ny][nx] = 1\n                                    stack.append([ny, nx])\n                                    black += 1\n                                elif k == 1 and s[ny][nx] == \".\":\n                                    flagli[ny][nx] = 1\n                                    stack.append([ny, nx])\n                                    white += 1\n                ans += black * white\n                black = 0\n                white = 0\nprint(ans)", "label": 0, "name1": "s165497353.py", "name2": "s005060405.py"}, {"id": 938, "code1": "import sys\n# import math, string, itertools, fractions, heapq, collections, re, array, bisect, copy, functools, random\nfrom collections import deque, defaultdict, Counter; from heapq import heappush, heappop\n# from itertools import permutations, combinations, product, accumulate, groupby\n# from bisect import bisect_left, bisect_right, insort_left, insort_right\n# from operator import itemgetter as ig\nsys.setrecursionlimit(10 ** 7)\ninf = 10 ** 20; INF = float(\"INF\"); ans = 0; tmp = 0; ansli = []; tmpli = []; candili = []; mod = 10 ** 9 + 7\ndd = [(-1, 0), (0, 1), (1, 0), (0, -1)]; ddn = dd + [(-1, 1), (1, 1), (1, -1), (-1, -1)]; ddn9 = ddn + [(0, 0)]\n\"\"\"for dx, dy in dd:\n        nx = j + dx; ny = i + dy\n            if 0 <= nx < w and 0 <= ny < h:\"\"\"\ndef wi(): return list(map(int, sys.stdin.readline().split()))\ndef wip(): return [int(x) - 1 for x in sys.stdin.readline().split()]#WideIntPoint\ndef ws(): return sys.stdin.readline().split()\ndef i(): return int(sys.stdin.readline())\ndef s(): return input()\ndef hi(n): return [i() for _ in range(n)]\ndef hs(n): return [s() for _ in range(n)]#HeightString\ndef mi(n): return [wi() for _ in range(n)]#MatrixInt\ndef mip(n): return [wip() for _ in range(n)]\ndef ms(n): return [ws() for _ in range(n)]\n\n\nif __name__ == '__main__':\n    h, w = wi()\n    s = hs(h)\n    flagli = [[0] * w for i in range(h)]\n    stack = deque()\n    black = 0\n    white = 0\n    for i in range(h):\n        for j in range(w):\n            if flagli[i][j] == 0:\n                flagli[i][j] = 1\n                white = 1 if s[i][j] == \".\" else 0\n                black = 1 if s[i][j] == \"#\" else 0\n                stack.append([i, j])\n                while stack != deque():\n                    p, q = stack.pop()\n                    k = 0 if s[p][q] == \".\" else 1\n                    for dx, dy in dd:\n                        nx = q + dx;\n                        ny = p + dy\n                        if 0 <= nx < w and 0 <= ny < h:\n                            if flagli[ny][nx] == 0:\n                                if k == 0 and s[ny][nx] == \"#\":\n                                    flagli[ny][nx] = 1\n                                    stack.append([ny, nx])\n                                    black += 1\n                                elif k == 1 and s[ny][nx] == \".\":\n                                    flagli[ny][nx] = 1\n                                    stack.append([ny, nx])\n                                    white += 1\n                ans += black * white\n                black = 0\n                white = 0\nprint(ans)", "code2": "ans = [1]*365\nfor i in range(365):\n    ans[i]=i%25 + 1\nfor i in range(365):\n    print(ans[i])", "label": 0, "name1": "s005060405.py", "name2": "s964378808.py"}, {"id": 946, "code1": "import  numpy as np\nD = int(input())\nc = np.array(list(map(int, input().split())))\ns = [list(map(int, input().split())) for _ in range(D)]\nlast_d = np.array([0]*len(c))\n\nans = 0\nfor i in range(D):\n  cc = c*(last_d+i+1)\n  max_c = max(cc)\n  index = np.argmax(cc)\n  print(index + 1)\n  last_d[index] = -(i+1)\n  ans += s[i][index]\n  cc[index] = 0\n  for j in cc:\n    ans -= j\n", "code2": "n = input()\ncnt = 0\nfor i in range(len(n)):\n    if n[i] == '2':\n        cnt += 1\nprint(cnt)", "label": 0, "name1": "s137637436.py", "name2": "s798013515.py"}, {"id": 99, "code1": "from enum import Enum\nimport sys\nimport math\n\n\nA,B,DEGREE = map(int,input().split())\n\nrad = math.radians(DEGREE)\n\nS = A*B*math.sin(rad)/2.0\nC = math.sqrt(A*A+B*B-2*A*B*math.cos(rad))\nh = 2*S/A\n\nprint(\"%.10f %.10f %.10f\"%(S,A+B+C,h))\n\n", "code2": "import math\na, b, C = map(float, input().split())\nC = C / 180 * math.pi\nprint('%.06f' % (a * b * math.sin(C) / 2))\nprint('%.06f' % ((a**2 + b**2 -2*a*b*math.cos(C))**(1/2) + a + b))\nprint('%.06f' % (b*math.sin(C)))", "label": 1, "name1": "s944812786.py", "name2": "s950542255.py"}, {"id": 553, "code1": "#coding:utf-8\nimport numpy as np\nn = int(input())\n\n\na = np.ones((2,1)).astype(np.int)\na[-1][-1]+len(a)\ni = 1\nwhile(1):\n    if len(a)>=500:\n        break\n    if n==a[-1][-1]:\n        print (\"Yes\")\n        print (len(a))\n        for line in a:\n            print (i,\" \".join(line.astype(np.str).tolist()))\n        exit()\n    i+=1\n    temp = int((1/2)*i*(i+1))\n    add = np.array((list(range(temp-i+1,temp+1))))\n\n    a = np.c_[a,add]\n    a = np.r_[a,add.reshape(1,-1)]\nprint (\"No\")\n", "code2": "n,k = map(int, input().split())\namari=n%k\nn=min(amari, k-amari)\nprint(n)", "label": 0, "name1": "s037954477.py", "name2": "s328388206.py"}, {"id": 190, "code1": "n = int(input())\nS = list(map(int, input().split()))\ns = sorted(S, reverse=True)\n\nif n %2 ==0:\n  l = n/2\n  m = s[0]\n  s = s[1:int(l)]\n  p = sum(s)\n  o = p*2 + m \n  print(o)\nelse:\n  l = (n+1)/2\n  m = s[0]\n  q = s[int(l)-1]\n  s = s[1:int(l-1)]\n  p = sum(s)\n  o = p*2 + m +q\n  print(o)\n  ", "code2": "import math\nN = int(input())\nA = list(map(int,input().split()))\nA.sort(reverse = True)\n\nans = 0\nfor i in range(1,N):\n  a = math.floor(i/2)\n  ans += A[a]\n    \nprint(ans)", "label": 1, "name1": "s142787879.py", "name2": "s069304778.py"}, {"id": 8, "code1": "N = int(input())\n\ntotal = sum(list(map(int, str(N))))\n\nif total % 9 == 0:\n  print('Yes')\nelse:\n  print('No')\n", "code2": "print(\"Yes\") if int(input())%9 == 0 else print(\"No\")", "label": 1, "name1": "s525082295.py", "name2": "s624208818.py"}, {"id": 39, "code1": "while(1):\n    n = int(input())\n    if n == 0:\n        break\n    s = [float(i) for i in input().split()]\n    m = sum(s)/n\n    a = (sum([(i- m)**2 for i in s])/n)**0.5\n    print(\"{:.8f}\".format(a))\n", "code2": "while True:\n    n = int(input())\n    if n == 0:\n        break\n    scores = list(map(int, input().split()))\n    m = sum(scores) / n\n    dev = list((i - m) for i in scores)\n    var = sum((i ** 2) for i in dev) / n\n    stdev = var ** 0.5\n    print(stdev)\n\n", "label": 1, "name1": "s123853064.py", "name2": "s320188133.py"}, {"id": 988, "code1": "N=int(input())\n\nD=list(map(int,input().split()))\nflg =False\nA = [0 for i in range(13)]\nA[0]=1\nfor i in range(N):\n    j = min(D[i],24-D[i])\n    if j==0:\n        flg=True\n        break\n    elif j==12:\n        if A[j]==1:\n            flg=True\n            break\n        else:\n            A[j]+=1\n    else:\n        if A[j]==2:\n            flg=True\n            break\n        else:\n            A[j]+=1\n\nimport copy\n\nif flg:\n    print(0)\nelse:\n    count=0\n    one_times=[]\n    times=[0]\n    for i in range(1,12): \n        if A[i]==1:\n            count+=1\n            one_times.append(i)\n        if A[i]==2:\n            times.append(i)\n            times.append(24-i)\n    if A[12]==1:\n        times.append(12)\n    score_max=0\n    for i in range(2**count):\n        t=copy.copy(times)\n        for j in range(count):\n            if (i//(2**j))%2==0:\n                t.append(one_times[j])\n            else:\n                t.append(24-one_times[j])\n        t.sort()\n        \n        score_min=24\n        for j in range(len(t)):\n            if j==len(t)-1:\n                score_min=min(t[0]+24-t[len(t)-1],score_min)\n            else:\n                score_min=min(t[j+1]-t[j],score_min)\n        score_max=max(score_min,score_max)\n    print(score_max)", "code2": "S = input()\nl = len(S)\n\nfor i in range(1, l//2):\n  if S[:l//2-i] == S[l//2-i:l-2*i]:\n    print(l-2*i)\n    break", "label": 0, "name1": "s868602829.py", "name2": "s423959382.py"}, {"id": 802, "code1": "from datetime import date\nwhile 1:\n\tm,d=map(int,raw_input().split())\n\tif m==0:break\n\tprint date(2004,m,d).strftime(\"%A\")", "code2": "import sys,queue,math,copy,itertools,bisect,collections\nfrom heapq import *\n\ndef main():\n    sys.setrecursionlimit(10**7)\n    INF = 10**18\n    MOD = 10**9 + 7\n    LI = lambda : [int(x) for x in sys.stdin.readline().split()]\n    NI = lambda : int(sys.stdin.readline())\n\n    N = NI()\n    root = [[] for _ in range(N)]\n    for _ in range(N-1):\n        a,b = LI()\n        root[a-1].append(b-1)\n        root[b-1].append(a-1)\n\n    node = [-1 for _ in range(N)]\n    q = []\n    q.append((0,0))\n    node[0] = 0\n    while q:\n        u,num = q.pop()\n        for v in root[u]:\n            if node[v] < 0:\n                node[v] = num+1\n                if v == N-1:\n                    q = []\n                    break\n                q.append((v,num+1))\n    c = node[N-1]\n    u = N-1\n    pu = 0\n    while c > (node[N-1])//2:\n        for v in root[u]:\n            if node[v] != c-1: continue\n            pu = u\n            u = v\n            c -= 1\n            break\n\n    p = u\n    node = [-1 for _ in range(N)]\n    node[p] = 0\n    node[pu] = 1\n    cnt = [0,0]\n    for i in range(2):\n        if i == 0:\n            q.append(p)\n        else:\n            q.append(pu)\n        while q:\n            u = q.pop()\n            for v in root[u]:\n                if node[v] < 0:\n                    node[v] = i\n                    q.append(v)\n                    cnt[i] += 1\n    if cnt[0] > cnt[1]:\n        print('Fennec')\n    else:\n        print('Snuke')\n\nif __name__ == '__main__':\n    main()", "label": 0, "name1": "s074010277.py", "name2": "s905380406.py"}, {"id": 557, "code1": "import sys\nimport collections as col\nnum = []\nfor line in sys.stdin:\n\ttako = line[:-1].split(\",\")\n\tnum.append(tako[1])\ntako = col.Counter(num)\na = tako[\"O\"]\ntako[\"O\"] = tako[\"AB\"]\ntako[\"AB\"] = a\nfor i in tako.items():\n\tprint i[1]", "code2": "n,k=map(int,input().split())\nx=n%k\nprint(min(x,abs(x-k)))", "label": 0, "name1": "s223119670.py", "name2": "s584027827.py"}, {"id": 961, "code1": "n,m,k=map(int,input().split())\nn,m=min(n,m),max(n,m)\nfor i in range(n//2+n%2):\n  num,dem=k-i*m,n-2*i\n  if num%dem or not(0<=num//dem<=m):continue\n  print(\"Yes\");exit()\nprint(\"No\")", "code2": "from bisect import bisect_left\nfrom bisect import bisect_right\nN = int(input())\nA = sorted(list(map(int,input().split())))\nB = sorted(list(map(int,input().split())))\nC = sorted(list(map(int,input().split())))\n\nans = 0\nfor i in range(N):\n  ans += bisect_left(A, B[i]) * (N - bisect_right(C, B[i]))\n  \nprint(ans)", "label": 0, "name1": "s659941727.py", "name2": "s313857544.py"}, {"id": 199, "code1": "#coding=UTF-8\n\nN=int(input())\nmozir=input()\nhyo=mozir.split(' ')\n\nRec_LTR=[int(mono) for mono in hyo]\n\nmozir=input()\nhyo=mozir.split(' ')\n\nRec_RTL=[int(mono) for mono in hyo]\n\nLTR_hani=[]\nhighest=0\nfor idx in range(0,N,1):\n    if Rec_LTR[idx]>highest:\n        highest=Rec_LTR[idx]\n        LTR_hani.append([highest,highest])\n    else:\n        LTR_hani.append([highest,1])\n\nRTL_hani=[None]*N\nhighest=0\nfor idx in range(N-1,-1,-1):\n    if Rec_RTL[idx]>highest:\n        highest=Rec_RTL[idx]\n        RTL_hani[idx]=[highest,highest]\n    else:\n        RTL_hani[idx]=[highest,1]\n\n#concat\nans=1\nhou=1000000007\nfor idx in range(0,N,1):\n    # prod set\n    ue=min(RTL_hani[idx][0],LTR_hani[idx][0])\n    shita=max(RTL_hani[idx][1],LTR_hani[idx][1])\n    ans=(ans*max((ue-shita+1),0))%hou\n\nprint(ans)\n", "code2": "N = int(raw_input())\nT_list = map(int, raw_input().split())\nA_list = map(int, raw_input().split())\n\nlow_list = [1]*N\nhigh_list = [1]*N\n\nt_now = 0\nfor i in range(N):\n    if T_list[i] > t_now:\n        t_now = T_list[i]\n        low_list[i] = T_list[i]\n        high_list[i] = T_list[i]\n    else:\n        high_list[i] = T_list[i]\na_now = 0\nfor j in range(N):\n    i = N - 1 - j\n    if A_list[i] > a_now:\n        a_now = A_list[i]\n        low_list[i] = max(A_list[i], low_list[i])\n        high_list[i] = min(A_list[i], high_list[i])\n    else:\n        high_list[i] = min(A_list[i], high_list[i])\n    \nres = 1\nfor i in range(N):\n    if high_list[i] < low_list[i]:\n        res = 0\n        break\n    else:\n        res = res*(high_list[i] - low_list[i] + 1) % 1000000007\n\nprint res", "label": 1, "name1": "s271635856.py", "name2": "s251140241.py"}, {"id": 841, "code1": "N = int(input())\narray = list(map(int, input().split()))\ncnt = 0 \nfor i in range(N):\n\tminij = i \n\tfor j in range(i, N):\n\t\tif array[j] < array[minij]:\n\t\t\tminij = j \n\tif minij != i:\n\t\tarray[i], array[minij] = array[minij], array[i]\n\t\tcnt += 1\n\nprint(' '.join(map(str, array)))\nprint( \"%d\" % (cnt))\n\n", "code2": "# -*- coding: utf-8 -*-\n\"\"\"\nhttp://judge.u-aizu.ac.jp/onlinejudge/description.jsp?id=0138\n\n\"\"\"\nimport sys\nfrom sys import stdin\nfrom operator import itemgetter\ninput = stdin.readline\n\ndef solve(data):\n    data.sort(key=itemgetter(1))\n    top2 = data[:2]\n    others = data[2:]\n    return top2, others         #  ??????2?????\u00a8????????\\??????id??\u00a8?????????????????????\n\n\ndef main(args):\n    others_results = []\n    for _ in range(3):\n        round_results = []\n        for _ in range(8):\n            id, time = input().split()\n            round_results.append([int(id), float(time)])\n        top2, others = solve(round_results)\n        others_results.extend(others)\n\n        # ????????????2???????????\u00b1\n        for id, time in top2:\n            print('{} {}'.format(id, time))\n\n    # ????????????3?????\\?????????????????????2???????????\u00b1\n    top2, others = solve(others_results)\n    for id, time in top2:\n        print('{} {}'.format(id, time))\n\n\nif __name__ == '__main__':\n    main(sys.argv[1:])", "label": 0, "name1": "s260667176.py", "name2": "s481502029.py"}, {"id": 272, "code1": "l=[]\nwhile True:\n    tmp=map(int,raw_input().split())\n    if sum(tmp)==0:\n        break\n    l.append(tmp)\n\nfor n,x in l:\n    c=0\n    for i in range(1,n):\n        for j in range(i+1,n):\n            k=x-i-j\n            if j<k<=n:\n                c+=1\n    print c", "code2": "while True:\n\tn,x = map(int,raw_input().split())\n\tif n==x==0:\n\t\tbreak\n\tans=0\n\tfor i in xrange(1,n+1):\n\t\tfor j in xrange(i+1,n+1):\n\t\t\tfor k in xrange(j+1,n+1):\n\t\t\t\tif i+j+k==x:\n\t\t\t\t\tans+=1\n\tprint ans", "label": 1, "name1": "s427641012.py", "name2": "s718411118.py"}, {"id": 111, "code1": "a,b,c = map(int, input().split())\n\nprint(\"Yes\" if a<c<b or b<c<a else \"No\")", "code2": "a,b,c=map(int,input().split())\nif (a>c and b<c) or (a<c and b>c):\n  print(\"Yes\")\nelse:\n  print(\"No\")", "label": 1, "name1": "s135661044.py", "name2": "s473634907.py"}, {"id": 176, "code1": "while 1:\n\tW, H = map(int,raw_input().split(\" \"))\n\tif W == H == 0: \n\t\tbreak\n\tfield = [[c for c in raw_input()] for _ in range(H)]\n\tsecret = [0, \"\"]\n\tfor j in range(H):\n\t\tfor i in range(W):\n\t\t\tif not field[j][i].isdigit():\n\t\t\t\tcontinue\n\t\t\tleft = top = \"\"\n\t\t\tif i > 0 and field[j][i-1].isdigit() and field[j][i-1] != \"0\":\n\t\t\t\tleft = field[j][i-1]\n\t\t\tif j > 0 and field[j-1][i].isdigit() and field[j-1][i] != \"0\":\n\t\t\t\ttop = field[j-1][i]\n\t\t\tif len(left) == len(top):\n\t\t\t\tfield[j][i] = (left if left > top else top) + field[j][i]\n\t\t\telse :\n\t\t\t\tfield[j][i] = (left if len(left) > len(top) else top) + field[j][i]\n\t\t\tlength = len(field[j][i])\n\t\t\tif length > secret[0]:\n\t\t\t\tsecret[1] = field[j][i]\n\t\t\t\tsecret[0] = length\n\t\t\telif length == secret[0] and field[j][i] > secret[1]:\n\t\t\t\tsecret[1] = field[j][i]\n\tprint secret[1]", "code2": "import math,string,itertools,fractions,heapq,collections,re,array,bisect,sys,random,time,copy,functools\n\nsys.setrecursionlimit(10**7)\ninf = 10**20\neps = 1.0 / 10**10\nmod = 998244353\n\ndef LI(): return [int(x) for x in sys.stdin.readline().split()]\ndef LI_(): return [int(x)-1 for x in sys.stdin.readline().split()]\ndef LF(): return [float(x) for x in sys.stdin.readline().split()]\ndef LS(): return sys.stdin.readline().split()\ndef I(): return int(sys.stdin.readline())\ndef F(): return float(sys.stdin.readline())\ndef S(): return input()\ndef pf(s): return print(s, flush=True)\n\n\ndef main():\n    rr = []\n\n    while True:\n        w,h = LI()\n        if w == 0 and h == 0:\n            break\n        a = [[c for c in S()] for _ in range(h)]\n        t = [[0]*w for i in range(h)]\n        r = 0\n        for i in range(h):\n            for j in range(w):\n                c = a[i][j]\n                if not ('0' <= c <= '9'):\n                    continue\n                d = int(c) + t[i][j] * 10\n                if r < d:\n                    r = d\n                if i < h-1 and t[i+1][j] < d:\n                    t[i+1][j] = d\n                if j < w-1 and t[i][j+1] < d:\n                    t[i][j+1] = d\n        rr.append(r)\n\n    return '\\n'.join(map(str, rr))\n\n\nprint(main())\n\n\n", "label": 1, "name1": "s782922064.py", "name2": "s100075082.py"}, {"id": 902, "code1": "#https://drken1215.hatenablog.com/entry/2019/03/23/175300\nN,M = map(int,input().split())\n\nonce_time = 1900 * M + 100 * (N - M)\ne = pow(2,M)\nprint(once_time * e)\n", "code2": "from collections import defaultdict\n\nH,W = map(int,input().split())\na = [[] for _ in range(H)]\nfor i in range(H):\n    a[i] = list(input())\n\nd = defaultdict(int)\nfor i in range(H):\n    for j in range(W):\n        d[a[i][j]] += 1\n\nc4,c2 = 0,0\nfor k in d.keys():\n    c4 += d[k]//4\n    c2 += (d[k]%4)//2\n\nif H%2 + W%2 == 0:\n    if c4 == H*W//4:\n        print(\"Yes\")\n    else:\n        print(\"No\")\nelif H%2 + W%2 == 1:\n    if H%2 == 1:\n        if c4 < (H-1)*W//4:\n            print(\"No\")\n        else:\n            c4 -= (H-1)*W//4\n            c2 += c4*2\n            if c2 == W//2:\n                print(\"Yes\")\n            else:\n                print(\"No\")\n    if W%2 == 1:\n        if c4 < H*(W-1)//4:\n            print(\"No\")\n        else:\n            c4 -= H*(W-1)//4\n            c2 += c4*2\n            if c2 == H//2:\n                print(\"Yes\")\n            else:\n                print(\"No\")\nelse:\n    if c4 < (H-1)*(W-1)//4:\n        print(\"No\")\n    else:\n        c4 -= (H-1)*(W-1)//4\n        c2 += c4*2\n        if c2 == (H-1)//2+(W-1)//2:\n            print(\"Yes\")\n        else:\n            print(\"No\")", "label": 0, "name1": "s596326690.py", "name2": "s520771694.py"}, {"id": 447, "code1": "m=10**9+7\ni=s=r=0\nf=1\ninput()\na=input().split()\nfor x in a:i+=1;s+=pow(i,m-2,m);r+=int(x)*~-s+int(a[-i])*s;f=f*i%m\nprint(r*f%m)", "code2": "import sys\ninput = sys.stdin.readline\nN = int(input())\na = list(map(int, input().split()))\nmod = 10 ** 9 + 7\n\nclass Factorial:\n  def __init__(self, n, mod):\n    self.f = [1]\n    for i in range(1, n + 1):\n      self.f.append(self.f[-1] * i % mod)\n    self.i = [pow(self.f[-1], mod - 2, mod)]\n    for i in range(1, n + 1)[: : -1]:\n      self.i.append(self.i[-1] * i % mod)\n    self.i.reverse()\n  def factorial(self, i):\n    return self.f[i]\n  def ifactorial(self, i):\n    return self.i[i]\n  def combi(self, n, k):\n    return self.f[n] * self.i[n - k] % mod * self.i[k] % mod\n\nf = Factorial(N, mod)\nrevs = [0] * (N + 1)\nfor i in range(N): revs[i + 1] = (revs[i] + pow(i + 1, mod - 2, mod)) % mod\ndp = [0] * N\nfor i in range(N):\n  l = i + 1\n  r = N - i\n  dp[i] = f.factorial(N) * (revs[l] + revs[r] - revs[1]) % mod * a[i] % mod\nres = 0\nfor i in range(N):\n  res += dp[i]\n  res %= mod\nprint(res)", "label": 1, "name1": "s072063122.py", "name2": "s759175616.py"}, {"id": 270, "code1": "l=[]\nwhile True:\n    tmp=map(int,raw_input().split())\n    if sum(tmp)==0:\n        break\n    l.append(tmp)\n\nfor n,x in l:\n    c=0\n    for i in range(1,n):\n        for j in range(i+1,n):\n            k=x-i-j\n            if j<k<=n:\n                c+=1\n    print c", "code2": "while 1:\n\tn , x = map(int , raw_input().split())\n\tif n == x == 0:\n\t\tbreak\n\telse :\n\t\tcnt = 0\n\t\tfor i in range(1,n - 1):\n\t\t\tfor j in range(i + 1 , n):\n\t\t\t\tfor k in range(j + 1, n + 1):\n#\t\t\t\t\tprint i,j,k\n\t\t\t\t\tif i + j + k == x:\n#\t\t\t\t\t\tprint i,j,k\n\t\t\t\t\t\tcnt += 1\n\t\tprint cnt", "label": 1, "name1": "s427641012.py", "name2": "s558630368.py"}, {"id": 268, "code1": "a,b,c,k=map(int,input().split())\nc_=max(0,k-a-b)\na_=min(a,k)\nprint(a_-c_)", "code2": "a, b, c, k = map(int, input().split())\nif a>=k:\n  print(k)\nelif a+b>=k>a:\n  print(a)\nelif k>a+b:\n  print(a-(k-a-b))", "label": 1, "name1": "s535747622.py", "name2": "s714812452.py"}, {"id": 594, "code1": "int_list = list(map(int, input().split(' ')))\n\nmax_int = max(int_list)\n\ncnt = 0\nfor i in range(3):\n    if i < max_int:\n        cnt_tmp = (max_int - int_list[i]) // 2\n        int_list[i] += 2 * cnt_tmp\n        cnt += cnt_tmp\n\nmin_int = min(int_list)\nint_list2 = sorted([i - min_int for i in int_list])\n\nif int_list2 == [0, 0, 0]:\n    print(cnt)\nelif int_list2 == [0, 0, 1]:\n    print(cnt + 1)\nelse:\n    print(cnt + 2)", "code2": "import sys\ninput = sys.stdin.readline\nQ = int(input())\n\ndef check(x, a, b):\n  y = (a <= -(-x // 2)) or (b <= -(-x // 2))\n  z = (a <= (x // 2 + 1)) and (b <= (x // 2 + 1))\n  return (-(-x // 2) + y) * ((x // 2 + 1) + z) < a * b\n\nfor _ in range(Q):\n  a, b = map(int, input().split())\n\n  ok = 0\n  ng = a * b\n  while ng - ok > 1:\n    m = (ok + ng) // 2\n    if check(m, a, b): ok = m\n    else: ng = m\n  print(ok)", "label": 0, "name1": "s608249305.py", "name2": "s809561228.py"}, {"id": 389, "code1": "import sys\ninput = sys.stdin.readline\na, b, x = [int(x) for x in input().split()]\nB = 1 + b // x\nif a == 0:\n    print(B)\nelif a % x == 0:\n    A = 1 + a // x\n    print(B - A + 1)\nelse:\n    A = 1 + a // x\n    print(B - A)\n", "code2": "a, b, x = map(int, input().split()) \n\nn = b // x\nm = (a-1) // x\n\nprint(n-m)", "label": 1, "name1": "s444272977.py", "name2": "s514746443.py"}, {"id": 209, "code1": "def main():\n    n = int(input())\n    x,y = 1,1\n    for _ in range(n):\n        t,a = map(int,input().split())\n        z = -1*min(-x//t,-y//a)\n        x = z*t\n        y = z*a\n        # print(x,y)\n    print(x+y)\n\nmain()", "code2": "# WA math.ceil\u306f\u6d6e\u52d5\u5c0f\u6570\u70b9\u6f14\u7b97\u306e\u5f71\u97ff\u3092\u53d7\u3051\u308b\u306e\u3067\u3001\u6b63\u3057\u304f\u5207\u308a\u4e0a\u3052\u3067\u304d\u306a\u3044\u3068\u304d\u304c\u3042\u308b\n# >>> math.ceil((12345678901234*456+0.1)/12345678901234)\n# 456\n# >>> math.ceil((12345678901234*456+1)/12345678901234)\n# 457\n\nimport math\n\nn = int(input())\nvote_ratio = [ list(map(int, input().split())) for _ in range(n)]\n# print(vote_ratio)\n\n# ans = vote_ratio[0] \u306f\u540c\u3058\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u3092\u53c2\u7167\u3057\u3066\u3057\u307e\u3046\u306e\u3067\u907f\u3051\u308b\nans = [vote_ratio[0][0], vote_ratio[0][1]]\n\nfor i in range(1,n):\n\tbairitsu = max(ans[0] // vote_ratio[i][0], ans[1] // vote_ratio[i][1])\n\tif vote_ratio[i][0] * bairitsu < ans[0] \\\n\tor vote_ratio[i][1] * bairitsu < ans[1]:\n\t\tbairitsu += 1\n\tans = [vote_ratio[i][0] * bairitsu, vote_ratio[i][1] * bairitsu]\n\nprint(sum(ans))\n", "label": 1, "name1": "s902948767.py", "name2": "s651516806.py"}, {"id": 800, "code1": "m=10**9+7\ni=s=r=0\nf=1\ninput()\na=input().split()\nfor x in a:i+=1;s+=pow(i,m-2,m);r+=int(x)*~-s+int(a[-i])*s;f=f*i%m\nprint(r*f%m)", "code2": "n=int(input())\n\nL=[[] for i in range(n+1)]\n\nfor i in range(n-1):\n    a,b=map(int,input().split())\n    L[a].append(b)\n    L[b].append(a)\n\nfe=[0 for i in range(n+1)]\nque=[(1,0)]\nvisited=[0 for i in range(n+1)]\nvisited[1]=1\nhead=0\n\nwhile len(que)>head:\n    now=que[head]\n    head+=1\n    fe[now[0]]=now[1]\n    for nex in L[now[0]]:\n        if visited[nex]==0:\n            visited[nex]=1\n            que.append((nex,now[1]+1))\n            \nsn=[0 for i in range(n+1)]\nque=[(n,0)]\nvisited=[0 for i in range(n+1)]\nvisited[-1]=1\nhead=0\n\nwhile len(que)>head:\n    now=que[head]\n    head+=1\n    sn[now[0]]=now[1]\n    for nex in L[now[0]]:\n        if visited[nex]==0:\n            visited[nex]=1\n            que.append((nex,now[1]+1))\n\nkaname=[]\nfor i in range(1,n+1):\n    ck=fe[i]-sn[i]\n    if ck==1 or ck==2:\n        kaname.append(i)\n\ncnt=0\nque=[(1,0)]\nvisited=[0 for i in range(n+1)]\nvisited[1]=1\nhead=0\n\nwhile len(que)>head:\n    now=que[head]\n    head+=1\n    cnt+=1\n    for nex in L[now[0]]:\n        if visited[nex]==0 and not nex in kaname:\n            visited[nex]=1\n            que.append((nex,now[1]+1))\n\nif cnt*2>n:\n    print(\"Fennec\")\nelse:\n    print(\"Snuke\")", "label": 0, "name1": "s072063122.py", "name2": "s845599163.py"}, {"id": 644, "code1": "n = input()\np, q = [-1, -1]\nfor i in xrange(n):\n    t, a = map(int, raw_input().split())\n    if p == -1 or q == -1:\n        p = t\n        q = a\n        continue\n    if t >= p and a >= q:\n        p = t\n        q = a\n    else:\n        z = max(p / t + (p % t != 0), q / a + (q % a != 0))\n        p = t * z\n        q = a * z\nprint p + q\n\n", "code2": "# AOJ 0144 Packet Transportation\n# Python3 2018.6.23 bal4u\n\nINF = 0x7fffffff\nn = int(input())\narr = [[INF for j in range(n)] for i in range(n)]\nfor i in range(n):\n\ta = list(map(int, input().split()))\n\tx, k = a[0]-1, a[1]\n\tfor j in range(k):\n\t\ty = a[j+2]-1\n\t\tarr[x][y] = 1\nfor k in range(n):\n\tarr[k][k] = 0\n\tfor i in range(n):\n\t\tif arr[i][k] >= INF: continue\n\t\tfor j in range(n):\n\t\t\tif arr[k][j] >= INF: continue\n\t\t\tarr[i][j] = min(arr[i][j], arr[i][k] + arr[k][j])\np = int(input())\nfor i in range(p):\n\ts, d, v = map(int, input().split())\n\ts,d = s-1, d-1\n\tprint(arr[s][d]+1 if arr[s][d] < v else \"NA\")\n", "label": 0, "name1": "s412403305.py", "name2": "s881383078.py"}, {"id": 67, "code1": "while True:\n    data = {}\n    n = input()\n    if n == 0:\n        break\n    for i in range(n):\n        tmp = raw_input()\n        tmp_data = tmp.split(\" \")\n        if i == 0:\n            data.update({tmp_data[0] : int(tmp_data[1]) + int(tmp_data[2])})\n        else:\n            flag = False\n            for j in data.iterkeys():\n                if data[j] < int(tmp_data[1]) + int(tmp_data[2]):\n                    flag = True\n                if flag:\n                    data.clear()\n                    data.update({tmp_data[0] : int(tmp_data[1]) + int(tmp_data[2])})\n\n    for key in data.iterkeys():\n        print \"%s %d\" % (key, data[key])", "code2": "while 1:\n    n = int(input())\n    if n == 0:\n        break\n\n    large = 0\n    for _ in range(n):\n        p, d1, d2 = map(int, input().split())\n        if large < d1 + d2:\n            large = d1 + d2\n            number = p\n\n    print(number, large)\n\n", "label": 1, "name1": "s667605741.py", "name2": "s338851959.py"}, {"id": 541, "code1": "# -*- coding: utf-8 -*-\n'import sys'\n'import math'\ni=int(4)\nt=0\nwhile i:\n    t+=int(input())\n    i-=1\nprint(int(t/60))\nprint(t%60)", "code2": "#coding:utf-8\nimport numpy as np\nn = int(input())\n\n\na = np.ones((2,1)).astype(np.int)\na[-1][-1]+len(a)\ni = 1\nwhile(1):\n    if len(a)>=500:\n        break\n    if n==a[-1][-1]:\n        print (\"Yes\")\n        print (len(a))\n        for line in a:\n            print (i,\" \".join(line.astype(np.str).tolist()))\n        exit()\n    i+=1\n    temp = int((1/2)*i*(i+1))\n    add = np.array((list(range(temp-i+1,temp+1))))\n\n    a = np.c_[a,add]\n    a = np.r_[a,add.reshape(1,-1)]\nprint (\"No\")\n", "label": 0, "name1": "s417833494.py", "name2": "s037954477.py"}, {"id": 180, "code1": "a, b = map(int, input().split())\n\nprint(a - int(a > b))\n\n", "code2": "a, b = map(int, input().split())\nif a > b:\n    print(a-1)\nelse:\n    print(a)", "label": 1, "name1": "s523849066.py", "name2": "s737717931.py"}, {"id": 501, "code1": "n = int(input())\nif n%9 == 0:\n    print(\"Yes\")\nelse:\n    print(\"No\")", "code2": "import sys\n\ns = list(input())\n\nfor i in range(len(s)):\n  if i % 2 == 1:\n    if s[i] == \"L\" or s[i] == \"U\"or s[i] == \"D\":\n      continue\n    else:\n      print(\"No\")\n      sys.exit()\n  else:\n    if s[i] == \"R\" or s[i] == \"U\"or s[i] == \"D\":\n      continue\n    else:\n      print(\"No\")\n      sys.exit()\n\nprint(\"Yes\")", "label": 0, "name1": "s507543676.py", "name2": "s904714457.py"}, {"id": 162, "code1": "a=b=0\nfor i in input():c=i==\"T\";d=a>0;a+=1-c-c*d;b+=c*(1-d)\nprint(a+b)", "code2": "X = input()\ns_cnt = 0\nans = 0\nfor s in X:\n    if s=='S':\n        s_cnt += 1\n    else:\n        if s_cnt > 0:\n            ans += 1\n            s_cnt -= 1\n\nprint(len(X) - 2*ans)", "label": 1, "name1": "s373261912.py", "name2": "s514074837.py"}, {"id": 489, "code1": "A, B, C = map(int, input().split())\nprint('Yes' if len(set([A, B, C])) == 2 else 'No')", "code2": "import sys\nfrom collections import defaultdict, Counter, deque\nfrom itertools import accumulate, permutations, combinations\nfrom operator import itemgetter\nfrom bisect import bisect_left, bisect_right, bisect\nfrom heapq import heappop, heappush\nfrom fractions import gcd\nfrom math import ceil, floor, sqrt, cos, sin, pi\nfrom copy import deepcopy\n\n# If you use recursive call, uncomment this code\n#sys.setrecursionlimit(10**6)\n\ndef main():\n    nums = set(map(int, input().split()))\n    if len(nums) == 2:\n        print(\"Yes\")\n    else:\n        print(\"No\")\n\n\nif __name__ == '__main__':\n    main()\n", "label": 1, "name1": "s278209661.py", "name2": "s765543700.py"}, {"id": 814, "code1": "n=int(input())\nA=[int(i) for i in input().split()]\nB=[int(i) for i in input().split()]\nct1,ct2,ct3=0,0,0\nfor i in range(n):\n  ct1+=(B[i]-A[i])\n  ct2+=max(A[i]-B[i],0)\n  if B[i]>A[i]:\n    ct3+=(B[i]-A[i]-1)//2+1\nprint(\"Yes\" if max(ct2,ct3)<=ct1 else \"No\")", "code2": "N,M=map(int,input().split())\ngraph=[[] for _ in range(N)]\nfor _ in range(M):\n    a,b=map(int,input().split())\n    graph[a-1].append(b-1)\n    graph[b-1].append(a-1)\n\nvisited=[False]*N\nvisited[0]=True\n\ndef dfs(v,N,visited):\n    if all(visited):\n        return 1\n    \n    ret=0\n    for new_v in graph[v]:\n        if visited[new_v]:\n            continue\n        \n        visited[new_v]=True\n        ret+=dfs(new_v,N,visited)\n        visited[new_v]=False\n    \n    return ret\n\nprint(dfs(0,N,visited))", "label": 0, "name1": "s862908490.py", "name2": "s866159978.py"}, {"id": 554, "code1": "def main():\n    n=int(input())\n    m=int((2*n)**0.5)\n    if m*(m+1)==n*2:\n        print(\"Yes\")\n        m+=1\n        print(m)\n    else:\n        print(\"No\")\n        exit()\n    \n    ans=[[m-1] for i in range(m)]\n    c=1\n    for i in range(m):\n        for j in range(i+1,m):\n            ans[i].append(c)\n            ans[j].append(c)\n            c+=1\n    for i in ans:\n        print(\" \".join(map(str,i)))\n\n\nif __name__ == '__main__':\n    main()\n\n\n\n\n\n\n", "code2": "n,k=map(int,input().split())\nx=n%k\nprint(min(x,abs(x-k)))", "label": 0, "name1": "s694753497.py", "name2": "s584027827.py"}, {"id": 331, "code1": "a,b,c=map(int,input().split())\nprint(min(a+b,b+c,c+a))\n", "code2": "a,b,c = map(int,input().split())\nprint(a+b+c-max(a,b,c))", "label": 1, "name1": "s997903196.py", "name2": "s819277031.py"}, {"id": 955, "code1": "n = input()\ncnt = 0\nfor i in range(len(n)):\n    if n[i] == '2':\n        cnt += 1\nprint(cnt)", "code2": "n,c=map(int,input().split())\nd=[list(map(int,input().split()))for _ in range(c)]\ncc=[list(map(int,input().split()))for _ in range(n)]\nans=10**15\ncnt=[[0]*c for _ in range(3)]\nfor i in range(n):\n\tfor j in range(n):\n\t\tcnt[(i+j)%3][cc[i][j]-1]+=1\nfor i in range(c):\n\tfor j in range(c):\n\t\tfor k in range(c):\n\t\t\tpre_ans=0\n\t\t\tif i==j or j==k or k==i:\n\t\t\t\tcontinue\n\t\t\tfor l in range(3):\n\t\t\t\tfor m in range(c):\n\t\t\t\t\tif l%3==0 and m!=i:\n\t\t\t\t\t\tpre_ans+=cnt[l][m]*d[m][i]\n\t\t\t\t\telif l%3==1 and m!=j:\n\t\t\t\t\t\tpre_ans+=cnt[l][m]*d[m][j]\n\t\t\t\t\telif l%3==2 and m!=k:\n\t\t\t\t\t\tpre_ans+=cnt[l][m]*d[m][k]\n\t\t\tans=min(ans,pre_ans)\nprint(ans)", "label": 0, "name1": "s798013515.py", "name2": "s044679078.py"}, {"id": 452, "code1": "nm = [0,31,29,31,30,31,30,31,31,30,31,30]\nwhile True:\n\n    m,d = map(int,raw_input().split(\" \"))\n\n    if m == 0:\n        break\n    else:\n        nd = 0\n        for i in range(m):\n           nd += nm[i]\n\n        nd += d\n        n = nd%7\n        if n == 1:\n            print \"Thursday\"\n        elif n == 2:\n            print \"Friday\"\n        elif n == 3:\n            print \"Saturday\"\n        elif n == 4:\n            print \"Sunday\"\n        elif n == 5:\n            print \"Monday\"\n        elif n == 6:\n            print \"Tuesday\"\n        else:                                                                                                                                                                                                \n            print \"Wednesday\"", "code2": "import datetime\n\ntry:\n\twhile 1:\n\t\ts = raw_input().split()\n\t\ts[0] = int(s[0])\n\t\ts[1] = int(s[1])\n\t\t\n\t\tif s[0] + s[1] == 0:\n\t\t\texit()\n\t\t\n\t\tn = datetime.date(2004, s[0], s[1]).weekday()\n\t\t\n\t\tif n == 0:\n\t\t\tprint(\"Monday\")\n\t\telif n == 1:\n\t\t\tprint(\"Tuesday\")\n\t\telif n == 2:\n\t\t\tprint(\"Wednesday\")\n\t\telif n == 3:\n\t\t\tprint(\"Thursday\")\n\t\telif n == 4:\n\t\t\tprint(\"Friday\")\n\t\telif n == 5:\n\t\t\tprint(\"Saturday\")\n\t\telif n == 6:\n\t\t\tprint(\"Sunday\")\nexcept:\n\tpass", "label": 1, "name1": "s504491910.py", "name2": "s693168692.py"}, {"id": 623, "code1": "a,b=map(int,input().split())\nif b >= a:\n  print(a)\nelse:\n  print(a-1)", "code2": "import math\nN = int(input())\nA = list(map(int,input().split()))\nA.sort(reverse = True)\n\nans = 0\nfor i in range(1,N):\n  a = math.floor(i/2)\n  ans += A[a]\n    \nprint(ans)", "label": 0, "name1": "s714654685.py", "name2": "s069304778.py"}, {"id": 810, "code1": "N = int(input())\nimport sys\nsys.setrecursionlimit(N+10)\n\nes = [[] for _ in range(N)]\nfor i in range(N-1):\n    a,b = map(int, input().split())\n    a,b = a-1, b-1\n    es[a].append(b)\n    es[b].append(a)\n\n\"\"\"\n\u76f8\u624b\u306e\u53d6\u308c\u308b\u30de\u30b9\u76ee\u3092\u6e1b\u3089\u3059\u3088\u3046\u306b\u3068\u308b\u3068\u3088\u3044\n\u76f8\u624b\u3088\u308a\u305d\u306e\u30de\u30b9\u306b\u8fd1\u3051\u308c\u3070\u305d\u306e\u30de\u30b9\u3092\u53d6\u5f97\u3067\u304d\u308b\n\u30d5\u30a7\u30cd\u30c3\u30af\u304f\u3093\u3001\u3059\u306c\u3051\u541b\u306b\u3064\u3044\u3066\u521d\u671f\u5730\u70b9\u304b\u3089\u305d\u308c\u305e\u308c\u3078\u306e\u8ddd\u96e2\u304c\u5fc5\u8981\n\"\"\"\ndef solve(now, depth, depth_list, es, visited):\n    visited[now] = True\n    depth_list[now] = depth\n    for next in es[now]:\n        if visited[next] == False:            \n            solve(next, depth+1, depth_list, es, visited)\n\ndepth_list_F = [0] * N\nvisited_F = [False] * N\nsolve(0, 0, depth_list_F, es, visited_F)\n\ndepth_list_S = [0] * N\nvisited_S = [False] * N\nsolve(N-1, 0, depth_list_S, es, visited_S)\n\ncnt_F = cnt_S = 0\nfor f,s in zip(depth_list_F, depth_list_S):\n    if f <= s:\n        cnt_F += 1 # \u30d5\u30a7\u30cd\u30c3\u30af\u541b\u304b\u3089\u59cb\u3081\u308b\u306e\u3067\u540c\u3058\u8ddd\u96e2\u306a\u3089\u30d5\u30a7\u30cd\u30c3\u30af\u541b\u304c\u3068\u308b\n    else:\n        cnt_S += 1\n\nif cnt_F > cnt_S:\n    print(\"Fennec\")\nelse:\n    print(\"Snuke\")", "code2": "import itertools\n\ndef is_edge_exists(node1, node2, edges):\n\tfor edge in edges:\n\t\tif node1 in edge and node2 in edge:\n\t\t\treturn True\n\treturn False\n\ndef route_count(route, edges):\n\tif route[0]!=1:\n\t\treturn 0\n\tfor i in range(len(route)-1):\n\t\tif not is_edge_exists(route[i], route[i+1], edges):\n\t\t\treturn 0\n\treturn 1\n\nN, M = map(int, input().split())\nedges = [list(map(int, input().split())) for i in range(M)]\nnodes = [i+1 for i in range(N)]\nroutes = list(itertools.permutations(nodes))\n\nans = 0\nfor route in routes:\n\tans += route_count(route, edges)\nprint(ans)", "label": 0, "name1": "s940891501.py", "name2": "s952388313.py"}, {"id": 642, "code1": "def main():\n    n = int(input())\n    x,y = 1,1\n    for _ in range(n):\n        t,a = map(int,input().split())\n        z = -1*min(-x//t,-y//a)\n        x = z*t\n        y = z*a\n        # print(x,y)\n    print(x+y)\n\nmain()", "code2": "inf = 2**31\n\nn = int(raw_input())\nG = [[inf]*n for _ in range(n)]\nref = {}\ninputs = [map(int,raw_input().split()) for _ in range(n)]\nfor i in range(n): ref[inputs[i][0]] = i\nfor i in range(n):\n    for j in inputs[i][2:]:\n        G[i][ref[j]] = 1\n        \nfor k in range(n):\n    for i in range(n):\n        for j in range(n):\n            G[i][j] = min(G[i][j],G[i][k]+G[k][j])\n            \np = int(raw_input())\nfor loop in range(p):\n    s,d,v = map(int,raw_input().split())\n    dist = G[ref[s]][ref[d]]\n    print dist+1 if dist+1 <= v else \"NA\"", "label": 0, "name1": "s902948767.py", "name2": "s378122232.py"}, {"id": 785, "code1": "# coding: utf-8\ndef addset(args):\n    global a\n    for m in args:\n        if dic[m]==1:\n            a.add(m)\n        else:\n            if m not in used:\n                used.add(m)\n                addset(dc[m])\n \nwhile True:\n    n=int(input())\n    if n==0:\n        break\n    dic={}\n    first=[]\n    dc={}\n    for i in range(n):\n        g,m=input().split(':')\n        m=m.rstrip('.').split(',')\n        dc[g]=m\n        if i==0:\n            first.append(g)\n            first+=m\n        dic[g]=2\n        for mem in m:\n            if mem not in dic:\n                dic[mem]=1\n    a=set()\n    used=set()\n    addset(first[1:])\n    print(len(a))\n", "code2": "from collections import defaultdict\n\nclass Unionfind:\n\n    __slots__ = ['parents','sizes']\n\n    def __init__(self, n):\n        self.parents = list(range(n))\n        self.sizes = [1]*n\n\n    def root(self, x):\n        if self.parents[x] == x:\n            return x\n        else:\n            root_x = self.root(self.parents[x])\n            self.parents[x] = root_x\n            return root_x\n\n    def unite(self, x, y):\n        x = self.root(x); y = self.root(y)\n        if x == y:\n            return\n        if self.sizes[x] < self.sizes[y]:\n            x, y = y, x\n        self.sizes[x] += self.sizes[y]\n        self.parents[y] = x\n\n    def same(self, x, y):\n        return self.root(x) == self.root(y)\n\n    # \u96c6\u5408\u81ea\u4f53\u306e\u6570 ({1,2}, {3}, {4} : kind -> 3)\n    def kind(self):\n        for v in range(N):\n            self.root(v)\n        return len(list(set(self.parents)))\n\n    # x\u304c\u5c5e\u3059\u308b\u96c6\u5408\u306e\u8981\u7d20\u306e\u6570\u3000({1,2,3} : size(2) -> 3)\n    def size(self, x):\n        self.sizes[x] = self.sizes[self.root(x)]\n        return self.sizes[x]\n\nN, K, L = map(int,input().split())\nroad = Unionfind(N)\ntrain = Unionfind(N)\n\nfor _ in range(K):\n    p, q = map(int,input().split())\n    p -= 1; q -= 1\n    road.unite(p, q)\n\nfor _ in range(L):\n    r, s = map(int,input().split())\n    r -= 1; s -= 1\n    train.unite(r, s)\n\ncnt = defaultdict(int)\n\nfor i in range(N):\n    key = (road.root(i), train.root(i))\n    cnt[key] += 1\n\nans_list = []\nfor i in range(N):\n    key = (road.root(i), train.root(i))\n    ans = cnt[key]\n    ans_list.append(ans)\n\nprint(*ans_list)", "label": 0, "name1": "s673127686.py", "name2": "s028456939.py"}, {"id": 171, "code1": "# AOJ 1126: The Secret Number\n# Python3 2018.7.16 bal4u\n\nwhile True:\n\tW, H = map(int, input().split())\n\tif W == 0: break\n\td = [list(input()) for r in range(H)]\n\ta = [[0 for c in range(W)] for r in range(H)]\n\tans = 0\n\tfor r in range(H):\n\t\tfor c in range(W):\n\t\t\tif not d[r][c].isdigit(): continue\n\t\t\ta[r][c] = k = int(d[r][c])\n\t\t\tif c > 0 and d[r][c-1].isdigit():\n\t\t\t\ta[r][c] = a[r][c-1]*10 + k\n\t\t\tif r > 0 and d[r-1][c].isdigit():\n\t\t\t\tt = a[r-1][c]*10 + k\n\t\t\t\ta[r][c] = max(a[r][c], t)\n\t\t\tans = max(ans, a[r][c])\n\tprint(ans);\n\n", "code2": "while 1:\n\tW, H = map(int,raw_input().split(\" \"))\n\tif W == H == 0: \n\t\tbreak\n\tfield = [[c for c in raw_input()] for _ in range(H)]\n\tsecret = [0, \"\"]\n\tfor j in range(H):\n\t\tfor i in range(W):\n\t\t\tif not field[j][i].isdigit():\n\t\t\t\tcontinue\n\t\t\tleft = top = \"\"\n\t\t\tif i > 0 and field[j][i-1].isdigit() and field[j][i-1] != \"0\":\n\t\t\t\tleft = field[j][i-1]\n\t\t\tif j > 0 and field[j-1][i].isdigit() and field[j-1][i] != \"0\":\n\t\t\t\ttop = field[j-1][i]\n\t\t\tif len(left) == len(top):\n\t\t\t\tfield[j][i] = (left if left > top else top) + field[j][i]\n\t\t\telse :\n\t\t\t\tfield[j][i] = (left if len(left) > len(top) else top) + field[j][i]\n\t\t\tlength = len(field[j][i])\n\t\t\tif length > secret[0]:\n\t\t\t\tsecret[1] = field[j][i]\n\t\t\t\tsecret[0] = length\n\t\t\telif length == secret[0] and field[j][i] > secret[1]:\n\t\t\t\tsecret[1] = field[j][i]\n\tprint secret[1]", "label": 1, "name1": "s855726623.py", "name2": "s782922064.py"}, {"id": 598, "code1": "#!/usr/bin/env python\n# -*- coding: utf-8 -*-\nimport math\n\ndef sieve_of_erastosthenes(num):\n    input_list = [False if i % 2 == 0 or i % 3 == 0 or i % 5 == 0 else True for i in range(num)]\n    input_list[0] = input_list[1] = False\n    input_list[2] = input_list[3] = input_list[5] = True\n    sqrt = math.sqrt(num)\n\n    for serial in range(3, num, 2):\n        if serial >= sqrt:\n            return input_list\n        for s in range(serial ** 2, num, serial): \n            input_list[s] = False\n\nprimeTable = sieve_of_erastosthenes((10**6))\n\nwhile True:\n    n = int(input())\n    if n == 0:\n        break\n    print(sum([1 if primeTable[i] == True else 0 for i in range(n+1,2*n+1)]))", "code2": "import sys\n\nimport bisect\n\n# from collections import Counter, deque, defaultdict\n\n# import copy\n# from heapq import heappush, heappop, heapify\n# from fractions import gcd\n# import itertools\n# from operator import attrgetter, itemgetter\nimport math\n\n# import numpy as np\n\nreadline = sys.stdin.readline\nMOD = 10 ** 9 + 7\nINF = float('INF')\nsys.setrecursionlimit(10 ** 5)\n\n\ndef main():\n    q = int(input())\n\n    for i in range(q):\n        a, b = list(map(int, readline().split()))\n\n        if a > b:\n            a, b = b, a\n\n        if a == b or a + 1 == b:\n            print(2 * a - 2)\n        else:\n            ab = a * b\n            ok = 0\n            ng = int(ab ** 0.5) + 1000000\n            while abs(ng - ok) > 1:\n                mid = (ok + ng) // 2\n                if mid ** 2 < ab:\n                    ok = mid\n                else:\n                    ng = mid\n            c = ok\n\n            if c * (c + 1) < ab:\n                print(2 * c - 1)\n            else:\n                print(2 * c - 2)\n\n\nif __name__ == '__main__':\n    main()\n", "label": 0, "name1": "s839739261.py", "name2": "s587240804.py"}, {"id": 504, "code1": "n = int(input())\nif n%9 == 0:\n    print(\"Yes\")\nelse:\n    print(\"No\")", "code2": "h, w = map(int, input().split())\n\neven_rows = h // 2\nodd_rows = (h+1) // 2\n\nif w > 1 and h > 1:\n    ans = 0\n    ans += w // 2 * even_rows\n    ans += (w+1) // 2 * odd_rows\n\n    print(ans)\nelse:\n    print(1)", "label": 0, "name1": "s507543676.py", "name2": "s554703184.py"}, {"id": 20, "code1": "h, w = map(int, input().split())\n\neven_rows = h // 2\nodd_rows = (h+1) // 2\n\nif w > 1 and h > 1:\n    ans = 0\n    ans += w // 2 * even_rows\n    ans += (w+1) // 2 * odd_rows\n\n    print(ans)\nelse:\n    print(1)", "code2": "h,w= map(int, input().split())\n\nif h==1 or w==1:\n    print(1)\n    exit()\n\nif w%2==0:\n    print((w//2)*h)\n\nelse:\n    if h%2==0:\n        print((h//2)*w)\n    else:\n        print((h//2)*w+(w//2)+1)", "label": 1, "name1": "s554703184.py", "name2": "s773266940.py"}, {"id": 368, "code1": "from heapq import heappush,heappop\nINF=10**18\nn,m,r=map(int,input().split())\ne=[[] for _ in range(n)]\nd=[INF]*n\nfor i in range(m):\n  a,b,c=map(int,input().split())\n  e[a].append((b,c))\nq=[]\nheappush(q,(0,r))\nd[r]=0\nwhile q:\n  dist,node=heappop(q)\n  for to,cost in e[node]:\n    if d[to]>cost+dist:\n      d[to]=cost+dist\n      heappush(q,(d[to],to))\nfor i in d:\n  if i!=INF:print(i)\n  else:print('INF')\n", "code2": "from sys import stdin\nimport math\nimport heapq\n#V:num of vertices\n#E: num of edges\n#r: start vertex\nV, E, r = map(lambda x: int(x), stdin.readline().split(' '))\n\n#create adjacency_list\nadjacency_list = [[] for x in range(V)] #size V\nfor i in range(E):\n    s, t, d = map(lambda x: int(x), stdin.readline().split(' '))\n    adjacency_list[s].append([t, d])\n\ndistance = [(math.inf, id) for id in range(V)]\noutput_distance = [math.inf for id in range(V)]\nchecked_set = set()\ndistance[r] = (0, r)\n\ndistance.sort()\nwhile len(checked_set) < V:\n    target = heapq.heappop(distance)\n    target_id = target[1]\n    if target_id in checked_set:\n        continue\n    target_dis = target[0]\n    output_distance[target_id] = target_dis\n    for i in adjacency_list[target_id]:\n        if i[1] + target_dis < output_distance[i[0]]:\n            heapq.heappush(distance, ((i[1] + target_dis, i[0])))\n    checked_set.add(target_id)\n    \nfor dis in output_distance:\n    if dis == math.inf:\n        print('INF')\n    else:\n        print(dis)\n", "label": 1, "name1": "s737089154.py", "name2": "s517294684.py"}, {"id": 773, "code1": "n = int(input())\na = list(map(int, input().split()))\na.insert(n,0)\na.insert(0,0)\nsum = 0\nfor i in range(n+1):\n    sum += abs(a[i+1] -a[i])\nfor i in range(n):\n    print(sum - abs(a[i+1] - a[i]) - abs(a[i+2] - a[i+1]) + abs(a[i+2] - a[i]))", "code2": "N = int(input())\n\ndef gcd(a, b):\n    while b:\n        a, b = b, a % b\n    return a\n\ndef lcm(a, b):\n    return a * b // gcd(a, b)\n\ns = int(input())\nfor i in range(N - 1):\n    tmp = int(input())\n    s = lcm(s, tmp)\n\nprint(s)\n", "label": 0, "name1": "s465741499.py", "name2": "s550486741.py"}, {"id": 277, "code1": "while True:\n    n,x = map(int,raw_input().split())\n    count = 0;\n    if n == 0 and x == 0:break\n    for i in range(1,n + 1):\n        for j in range(1,n + 1):\n            if i == j:break\n            for k in range(1,n + 1):\n                if j == k:break\n                if i + j + k == x:\n                    count+=1\n                    break\n    print count", "code2": "while True:\n    n,x = map(int, raw_input().split())\n    if n == 0 and x == 0: break\n    c = 0\n    for i in range(1, min(n-1,x/3)):\n        for j in range(i+1, min(n,x/2)):\n            for k in range(j+1, n+1):\n                ijk = i + j + k\n                if ijk == x:\n                    c += 1\n                    break\n                elif ijk > x: break\n    print c    ", "label": 1, "name1": "s748079428.py", "name2": "s024615011.py"}, {"id": 483, "code1": "#\n# abc054 c\n#\n\nimport sys\nfrom io import StringIO\nimport unittest\nimport itertools\n\n\nclass TestClass(unittest.TestCase):\n    def assertIO(self, input, output):\n        stdout, stdin = sys.stdout, sys.stdin\n        sys.stdout, sys.stdin = StringIO(), StringIO(input)\n        resolve()\n        sys.stdout.seek(0)\n        out = sys.stdout.read()[:-1]\n        sys.stdout, sys.stdin = stdout, stdin\n        self.assertEqual(out, output)\n\n    def test_\u5165\u529b\u4f8b_1(self):\n        input = \"\"\"3 3\n1 2\n1 3\n2 3\"\"\"\n        output = \"\"\"2\"\"\"\n        self.assertIO(input, output)\n\n    def test_\u5165\u529b\u4f8b_2(self):\n        input = \"\"\"7 7\n1 3\n2 7\n3 4\n4 5\n4 6\n5 6\n6 7\"\"\"\n        output = \"\"\"1\"\"\"\n        self.assertIO(input, output)\n\n\ndef resolve():\n    N, M = map(int, input().split())\n    P = [list(map(int, input().split())) for _ in range(M)]\n\n    R = itertools.permutations(range(1, N+1))\n\n    ans = 0\n    for r in R:\n        flag = True\n        r = list(r)\n        if r[0] != 1:\n            break\n        for i in range(1, N):\n            for p in P:\n                if (r[i-1] == p[0] and r[i] == p[1]) or (r[i-1] == p[1] and r[i] == p[0]):\n                    break\n            else:\n                flag = False\n        if flag == True:\n            ans += 1\n\n    print(ans)\n\n\nif __name__ == \"__main__\":\n    # unittest.main()\n    resolve()\n", "code2": "# -*- coding: utf-8 -*-\nn,m = list(map(int,input().split()))\nab = [list(map(int,input().split())) for i in range(m)]\n\n#\u9006\u9806\u306b\u3057\u305f\u3082\u306e\u8ffd\u52a0\nab += [[b,a] for a,b in ab]\n\n#\u8fbaid\u4ed8\u304d\u3067\u3001id\u304cfrom,abi[from]=[to1,to2,...] \u306e\u30ea\u30b9\u30c8\nabi = [[] for _ in range(n+1)]\nfor i,(a,b) in enumerate(ab):\n    abi[a].append(b)\n\n\n\n#\u518d\u8d77\u306elimit\u3092\u4e0a\u3052\u308b\nimport sys\nsys.setrecursionlimit(4100000)\n\ndef dfs(idx=1,visitted=[1],cnt=1):\n    ret = 0\n    if cnt==n:\n        return 1\n    for to in abi[idx]:\n        if to not in visitted:\n            ret += dfs(to,visitted+[to],cnt+1)\n    return ret\nprint(dfs())", "label": 1, "name1": "s851959667.py", "name2": "s912005528.py"}, {"id": 960, "code1": "#!/usr/bin/env pypy\n\nimport sys\nfrom typing import Any, Callable, Deque, Dict, List, Mapping, Optional, Sequence, Set, Tuple, TypeVar, Union\n# import time\n# import math\n# import numpy as np\n# import scipy.sparse.csgraph as cs            # csgraph_from_dense(ndarray, null_value=inf), bellman_ford(G, return_predecessors=True), dijkstra, floyd_warshall\n# import random                                # random, uniform, randint, randrange, shuffle, sample\n# import string                                # ascii_lowercase, ascii_uppercase, ascii_letters, digits, hexdigits\n# import re                                    # re.compile(pattern) => ptn obj; p.search(s), p.match(s), p.finditer(s) => match obj; p.sub(after, s)\n# from bisect import bisect_left, bisect_right # bisect_left(a, x, lo=0, hi=len(a)) returns i such that all(val<x for val in a[lo:i]) and all(val>-=x for val in a[i:hi]).\n# from collections import deque                # deque class. deque(L): dq.append(x), dq.appendleft(x), dq.pop(), dq.popleft(), dq.rotate()\n# from collections import defaultdict          # subclass of dict. defaultdict(facroty)\n# from collections import Counter              # subclass of dict. Counter(iter): c.elements(), c.most_common(n), c.subtract(iter)\n# from datetime import date, datetime          # date.today(), date(year,month,day) => date obj; datetime.now(), datetime(year,month,day,hour,second,microsecond) => datetime obj; subtraction => timedelta obj\n# from datetime.datetime import strptime       # strptime('2019/01/01 10:05:20', '%Y/%m/%d/ %H:%M:%S') returns datetime obj\n# from datetime import timedelta               # td.days, td.seconds, td.microseconds, td.total_seconds(). abs function is also available.\n# from copy import copy, deepcopy              # use deepcopy to copy multi-dimentional matrix without reference\n# from functools import reduce                 # reduce(f, iter[, init])\n# from functools import lru_cache              # @lrucache ...arguments of functions should be able to be keys of dict (e.g. list is not allowed)\n# from heapq import heapify, heappush, heappop # built-in list. heapify(L) changes list in-place to min-heap in O(n), heappush(heapL, x) and heappop(heapL) in O(lgn).\n# from heapq import nlargest, nsmallest        # nlargest(n, iter[, key]) returns k-largest-list in O(n+klgn).\n# from itertools import count, cycle, repeat   # count(start[,step]), cycle(iter), repeat(elm[,n])\n# from itertools import groupby                # [(k, list(g)) for k, g in groupby('000112')] returns [('0',['0','0','0']), ('1',['1','1']), ('2',['2'])]\n# from itertools import starmap                # starmap(pow, [[2,5], [3,2]]) returns [32, 9]\n# from itertools import product, permutations  # product(iter, repeat=n), permutations(iter[,r])\n# from itertools import combinations, combinations_with_replacement\n# from itertools import accumulate             # accumulate(iter[, f])\n# from operator import itemgetter              # itemgetter(1), itemgetter('key')\n# from fractions import Fraction               # Fraction(a, b) => a / b \u2208 Q. note: Fraction(0.1) do not returns Fraciton(1, 10). Fraction('0.1') returns Fraction(1, 10)\n\n\n\ndef main():\n    Num = Union[int, float]\n    mod = 1000000007                # 10^9+7\n    inf = float('inf')              # sys.float_info.max = 1.79e+308\n    # inf = 2 ** 63 - 1             # (for fast JIT compile in PyPy) 9.22e+18\n    sys.setrecursionlimit(10**6)    # 1000 -> 1000000\n    def input(): return sys.stdin.readline().rstrip()\n    def ii():    return int(input())\n    def isp():   return input().split()\n    def mi():    return map(int, input().split())\n    def mi_0():  return map(lambda x: int(x)-1, input().split())\n    def lmi():   return list(map(int, input().split()))\n    def lmi_0(): return list(map(lambda x: int(x)-1, input().split()))\n    def li():    return list(input())\n\n\n    def check(n, m, k):\n        for i in range(n + 1):\n            for j in range(m + 1):\n                if i * j + (n - i) * (m - j) == k:\n                    return True\n        return False\n    \n    \n    n, m, k = mi()\n    print('Yes') if check(n, m, k) else print('No')\n        \n\n\nif __name__ == \"__main__\":\n    main()\n", "code2": "import bisect\nn = int(input())\na = list(map(int, input().split()))\nb = list(map(int, input().split()))\nc = list(map(int, input().split()))\nbsort = sorted(b)\ncsort = sorted(c)\nres = 0\nasum = [0] * n\nbsum = [0] * n\nfor i in range(n):\n    asum[i] = n - bisect.bisect_right(bsort, a[i])\nfor i in range(n):\n    bsum[i] = n - bisect.bisect_right(csort, b[i])\nbsum.sort()\ntotal = 0\nfor i in range(n):\n    total += bsum[i]\n    bsum[i] = total\nres = 0\nfor i in range(n):\n    if asum[i] != 0:\n        res += bsum[asum[i] -1]\nprint(res)", "label": 0, "name1": "s894514161.py", "name2": "s514022897.py"}, {"id": 508, "code1": "S = input()\nodd = S[0::2]\neven = S[1::2]\nans = 'No'\n\nif 'L' not in odd:\n    if 'R' not in even:\n        ans = 'Yes'\n\nprint(ans)", "code2": "H,W = map(int,input().split())\n#print(H)\nans = 1\n \n \nif H*W%2 == 0:\n    ans = int(H*W/2)\nelse:\n    ans = int(H*W//2 + 1)\n#output\nif H == 1:\n    ans = 1\nif W == 1:\n    ans = 1\nprint(ans)", "label": 0, "name1": "s134920706.py", "name2": "s137900528.py"}, {"id": 564, "code1": "n,k = map(int,input().split())\nprint(min(n%k,-((n%k)-k)))", "code2": "A,B,C = map(int, input().split())\ncount = 0\nlist1 = [A,B]\n\nfor i in range(min(list1),max(list1)):\n    if C == i:\n        count = 1\n \nif count == 1:\n    print(\"Yes\")\nelse:\n    print(\"No\")", "label": 0, "name1": "s413819466.py", "name2": "s230128846.py"}, {"id": 15, "code1": "S = input()\n\nflag = 'Yes'\nfor i in range(len(S)):\n    if i%2 == 0:\n        if S[i] == 'R' or S[i] == 'U' or S[i] == 'D':\n            pass\n        else:\n            flag = 'No'\n            break\n    if i%2 == 1:\n        if S[i] == 'L' or S[i] == 'U' or S[i] == 'D':\n            pass\n        else:\n            flag = 'No'\n            break\n\nprint(flag)\n", "code2": "steps = input()\n\nodd_steps = [x for i, x in enumerate(steps) if i % 2 == 0]\neven_steps = [x for i, x in enumerate(steps) if i % 2 == 1]\n\nif \"L\" in odd_steps or \"R\" in even_steps:\n  print(\"No\")\nelse:\n  print(\"Yes\")", "label": 1, "name1": "s961835833.py", "name2": "s237740005.py"}, {"id": 182, "code1": "a, b = map(int, input().split())\n\nprint(a - int(a > b))\n\n", "code2": "a, b = map(int, input().split())\n\nif a <= b:\n    print(a)\nelse:\n    print(a - 1)\n", "label": 1, "name1": "s523849066.py", "name2": "s988021824.py"}, {"id": 333, "code1": "s=input()\nn=len(s)\nl=[[] for _ in range(2**(n-1))]\nfor b in range(2**(n-1)):\n    x=b\n    for i in range(n-1):\n        if x%2==1:\n            l[b].append(1)\n        else:\n            l[b].append(0)\n        x//=2\n#print(l)\nindexes=[[] for _ in range(2**(n-1))]\nfor k in range(2**(n-1)):\n    indexes[k]=[i for i, x in enumerate(l[k]) if x == 1]\n#print(indexes)\nSUM=0\nfor j in range(2**(n-1)):\n    L=len(indexes[j])\n    if L==0:\n        SUM+=int(s)\n        #print(SUM)\n    else:\n        SUM+=int(s[:indexes[j][0]+1])\n        #print(SUM)\n        SUM+=int(s[indexes[j][L-1]+1:])\n        #print(SUM)\n        if L>1:\n            for h in range(L-1):\n                SUM+=int(s[indexes[j][h]+1:indexes[j][h+1]+1])\n                #print(SUM)\nprint(SUM)", "code2": "S = input()\n\nl = len(S)\nS_list = list(map(int, S))\n\nans = 0\n\nfor i in range(l):\n    num = int(S_list[-i-1])\n\n    for j in range(i+1):\n        ans += num * (10 ** (j)) * (2 ** (max(l-1-j-1, l-1-i)))\n\nprint(ans)\n", "label": 1, "name1": "s307853353.py", "name2": "s174681493.py"}, {"id": 451, "code1": "nm = [0,31,29,31,30,31,30,31,31,30,31,30]\nwhile True:\n\n    m,d = map(int,raw_input().split(\" \"))\n\n    if m == 0:\n        break\n    else:\n        nd = 0\n        for i in range(m):\n           nd += nm[i]\n\n        nd += d\n        n = nd%7\n        if n == 1:\n            print \"Thursday\"\n        elif n == 2:\n            print \"Friday\"\n        elif n == 3:\n            print \"Saturday\"\n        elif n == 4:\n            print \"Sunday\"\n        elif n == 5:\n            print \"Monday\"\n        elif n == 6:\n            print \"Tuesday\"\n        else:                                                                                                                                                                                                \n            print \"Wednesday\"", "code2": "a=['Wednesday','Thursday','Friday','Saturday','Sunday','Monday','Tuesday',0]\nwhile True:\n    q=map(int,raw_input().split())\n    if sum(q) == 0: break\n    print a[(sum([0,31,29,31,30,31,30,31,31,30,31,30,31][:q[0]])+q[1])%7]", "label": 1, "name1": "s504491910.py", "name2": "s388074654.py"}, {"id": 377, "code1": "I,O,R,J,L,S,Z=map(int,input().split())\na=(I//2+J//2+L//2)*2\nb=0\nif I*J*L!=0:b=(2*((I-1)//2+(J-1)//2+(L-1)//2)+3)\nprint(max(a,b)+O)", "code2": "#c\n#ignore t,s,z\na = [int(i) for i in input().split()]\nans = a[1]\nb = [a[0],a[3],a[4]] #select\n\nfor i,v in enumerate(b):\n    if v>2:\n        if v%2==1: #odd\n            ans += v-1\n            b[i] = 1\n        else:\n            ans += v-2\n            b[i] = 2\n\ns = sum(b)\nif s==6:\n    ans += 6\nelif s==5:\n    ans += 4\nelif s==4:\n    if min(b)==0:\n        ans += 4\n    else:\n        ans += 3\nelif s==3:\n    if max(b)==2:\n        ans += 2\n    else:\n        ans += 3\nelif s==2:\n    if max(b)==2:\n        ans += 2\n\nprint(ans)\n        \n", "label": 1, "name1": "s966423542.py", "name2": "s771624865.py"}, {"id": 515, "code1": "from math import *\nn,m=map(int,input().split())\nif(n==1 or m==1):\n    print(1)\nelse:\n    print(ceil((n*m)/2))\n", "code2": "def main():\n    N, A, B = map(int, input().split())\n    X = map(int, input().split())\n\n    ret = 0\n    curr = next(X)\n    for x in X:\n        ret += min((x - curr) * A, B)\n        curr = x\n    print(ret)\n\n\nif __name__ == '__main__':\n    main()\n", "label": 0, "name1": "s965203099.py", "name2": "s627561056.py"}, {"id": 4, "code1": "num = input()\n\nnum = str(num)\n\nlist_num = list(num)\n\nlist_num = [int(s) for s in list_num]\n\nans = 0\n\nfor n in list_num:\n    ans += n\n    ans  = ans%9\n\nif ans==0:\n    print(\"Yes\")\nelse:\n    print(\"No\")\n", "code2": "n = input()\n\nnum = 0\nfor e in n:\n    num += int(e)\n    num %= 9\n\nif num:\n    ans = \"No\"\nelse:\n    ans = \"Yes\"\n\nprint(ans)\n", "label": 1, "name1": "s383833581.py", "name2": "s399175995.py"}, {"id": 669, "code1": "S = list(input())\nT = list(input())\n\nS.reverse()\nT.reverse()\nflag = False\n\nfor i in range(len(S)-len(T)+1):\n    for j in range(len(T)):\n        if S[j+i] == T[j] or S[j+i] == '?':\n            pass\n        else:\n            break\n\n        if j == len(T)-1:\n            flag = True\n            for k in range(len(T)):\n                if S[k+i] == '?':\n                    S[k+i] = T[k]\n            break\n    if flag:\n        break\n\nif flag:\n    for i in range(len(S)):\n        if S[i] == '?':\n            S[i] = 'a'\n    S.reverse()\n    print(''.join(S))\n\nelse:\n    print('UNRESTORABLE')\n\n\n\n", "code2": "A, B, C, K = list(map(int,input().split()))\nif K <= A:\n  print(K)\nelif K <= (A + B):\n  print(A)\nelif K <= (A + B + C):\n  print(2*A + B - K)\nelse:\n  print(A + B - C)", "label": 0, "name1": "s456382222.py", "name2": "s098797347.py"}, {"id": 399, "code1": "n = input()\nfor i in sorted(map(int, raw_input().split())):\n print i ,", "code2": "#coding:utf-8\n\nn = input()\nl = map(int, raw_input(). split())\nl.sort()\nfor i in xrange(n):\n    print(l[i]),", "label": 1, "name1": "s740416119.py", "name2": "s666694142.py"}, {"id": 96, "code1": "n,k=map(int,input().split())\nx=n%k\nprint(min(x,abs(x-k)))", "code2": "a,b =  list(map(int,input().split()))\nprint(min(a%b,b-a%b))", "label": 1, "name1": "s584027827.py", "name2": "s156730538.py"}, {"id": 865, "code1": "from sys import stdin\ninput = stdin.readline\n\n\ndef main():\n  N, M = list(map(int, input().split()))\n  PS = []\n  for i in range(M):\n    p, s = input().split()\n    PS.append((int(p)-1, s))\n\n  penas = [0]*(N)\n  is_ac = [0]*(N)\n  for i in range(M):\n    p, s = PS[i]\n    if s == 'AC':\n      is_ac[p] = True\n    elif not is_ac[p]:\n      penas[p] += 1\n\n  num_ac = sum(is_ac)\n  num_pe = 0\n\n  for i in range(N):\n    if is_ac[i]:\n      num_pe += penas[i]\n\n  print(num_ac, num_pe)\n\n\nif(__name__ == '__main__'):\n  main()\n", "code2": "A,B,C,X,Y=map(int,input().split())\n\nif A+B<=2*C:\n    ans=A*X+B*Y\n\nelif X<=Y:\n    ans=2*X*C\n    Y-=X\n    ans+=min(2*Y*C,Y*B)\n\nelif X>Y:\n    ans=2*Y*C\n    X-=Y\n    ans+=min(2*X*C,X*A)\n\nprint(ans)", "label": 0, "name1": "s655608530.py", "name2": "s332388641.py"}, {"id": 490, "code1": "A, B, C = map(int, input().split())\nprint('Yes' if len(set([A, B, C])) == 2 else 'No')", "code2": "A=[int(i) for i in input().split()]\nA.sort()\n\nif (A[0] == A[1]) and (A[1] != A[2]) or (A[1] == A[2]) and (A[0] != A[1]):\n  print(\"Yes\")\nelse:\n  print(\"No\")", "label": 1, "name1": "s278209661.py", "name2": "s220353071.py"}, {"id": 26, "code1": "from math import *\nn,m=map(int,input().split())\nif(n==1 or m==1):\n    print(1)\nelse:\n    print(ceil((n*m)/2))\n", "code2": "H, W = list(map(int, input().split(' ')))\nif H > 1 and W > 1:\n    cell_num = (int(H / 2) * 2) * (int(W / 2) * 2) / 2\n    if H % 2 == 1:\n        cell_num += int((W + 1) / 2)\n    if W % 2 == 1:\n        cell_num += int(H / 2)\nelse:\n    cell_num = 1\nprint(int(cell_num))\n", "label": 1, "name1": "s965203099.py", "name2": "s772122570.py"}, {"id": 934, "code1": "import itertools\nimport itertools\nimport os\nimport sys\nfrom collections import deque\n\nimport numpy as np\n\nif os.getenv(\"LOCAL\"):\n    sys.stdin = open(\"_in.txt\", \"r\")\n\nsys.setrecursionlimit(2147483647)\nINF = float(\"inf\")\nIINF = 10 ** 18\nMOD = 10 ** 9 + 7\n\nH, W = list(map(int, sys.stdin.readline().split()))\nS = [list(sys.stdin.readline().rstrip()) for _ in range(H)]\nseen = np.zeros((H, W), dtype=bool)\n\nans = 0\nfor h, w in itertools.product(range(H), range(W)):\n    if seen[h][w]:\n        continue\n    que = deque()\n    que.append((h, w))\n    black = white = 0\n    while que:\n        h, w = que.popleft()\n        if seen[h][w]:\n            continue\n        seen[h][w] = True\n        if S[h][w] == '#':\n            black += 1\n        else:\n            white += 1\n        for dh, dw in zip((h + 1, h - 1, h, h), (w, w, w + 1, w - 1)):\n            if 0 <= dh < H and 0 <= dw < W and not seen[dh][dw]:\n                if S[h][w] != S[dh][dw]:\n                    que.append((dh, dw))\n    ans += black * white\nprint(ans)\n", "code2": "N=int(input())\na=list(map(int,input().split()))\ndef cond(n):\n    L=(0,-1)\n    for i in range(1,N):\n        if a[i]>=n and a[i-1]>=n:\n            L=(i,1)\n        elif a[i]<n and a[i-1]<n:\n            L=(i,0)\n\n    R=(2*N-1,-1)\n    for i in range(2*N-3,N-2,-1):\n        if a[i]>=n and a[i+1]>=n:\n            R=(i,1)\n        elif a[i]<n and a[i+1]<n:\n            R=(i,0)\n\n    if L[1]==-1 and R[1]==-1:\n        return a[0]>=n\n    elif L[1]==-1:\n        return R[1]==1\n    elif R[1]==-1:\n        return L[1]==1\n    elif L[1]==R[1]:\n        return R[1]==1\n    else:\n        if L[1]==0:\n            return N-1-L[0]>R[0]-(N-1)\n        else:\n            return N-1-L[0]<R[0]-(N-1)\n\n\nstart=1\nend=2*N-1\nwhile end-start>1:\n    test=(end+start)//2\n    if cond(test):\n        start=test\n    else:\n        end=test\nif cond(end):\n    print(end)\nelse:\n    print(start)", "label": 0, "name1": "s726328939.py", "name2": "s882473833.py"}, {"id": 411, "code1": "n = int(input())\na = list(map(int, input().split()))\na.insert(n,0)\na.insert(0,0)\nsum = 0\nfor i in range(n+1):\n    sum += abs(a[i+1] -a[i])\nfor i in range(n):\n    print(sum - abs(a[i+1] - a[i]) - abs(a[i+2] - a[i+1]) + abs(a[i+2] - a[i]))", "code2": "# your code goes here\nN = int(input())\npoint = [0]\npoint.extend(list(map(int,input().split())))\npoint.append(0)\n\ntotal = 0\nfor i in range(1,N+2):\n\ttotal += abs(point[i] - point[i-1])\n\nfor i in range(1,N+1):\n\tans = total - abs(point[i]-point[i-1]) - abs(point[i+1]-point[i]) + abs(point[i+1]-point[i-1])\n\tprint(ans)", "label": 1, "name1": "s465741499.py", "name2": "s443227148.py"}, {"id": 726, "code1": "s=input()\nn=len(s)\nl=[[] for _ in range(2**(n-1))]\nfor b in range(2**(n-1)):\n    x=b\n    for i in range(n-1):\n        if x%2==1:\n            l[b].append(1)\n        else:\n            l[b].append(0)\n        x//=2\n#print(l)\nindexes=[[] for _ in range(2**(n-1))]\nfor k in range(2**(n-1)):\n    indexes[k]=[i for i, x in enumerate(l[k]) if x == 1]\n#print(indexes)\nSUM=0\nfor j in range(2**(n-1)):\n    L=len(indexes[j])\n    if L==0:\n        SUM+=int(s)\n        #print(SUM)\n    else:\n        SUM+=int(s[:indexes[j][0]+1])\n        #print(SUM)\n        SUM+=int(s[indexes[j][L-1]+1:])\n        #print(SUM)\n        if L>1:\n            for h in range(L-1):\n                SUM+=int(s[indexes[j][h]+1:indexes[j][h+1]+1])\n                #print(SUM)\nprint(SUM)", "code2": "x, y = map(int, input().split())\ncnt = 1\nwhile True:\n    if x > y:\n        print(cnt - 1)\n        exit()\n    else:\n        x *= 2\n        cnt += 1\n", "label": 0, "name1": "s307853353.py", "name2": "s788055694.py"}, {"id": 812, "code1": "n=int(input())\n\nL=[[] for i in range(n+1)]\n\nfor i in range(n-1):\n    a,b=map(int,input().split())\n    L[a].append(b)\n    L[b].append(a)\n\nfe=[0 for i in range(n+1)]\nque=[(1,0)]\nvisited=[0 for i in range(n+1)]\nvisited[1]=1\nhead=0\n\nwhile len(que)>head:\n    now=que[head]\n    head+=1\n    fe[now[0]]=now[1]\n    for nex in L[now[0]]:\n        if visited[nex]==0:\n            visited[nex]=1\n            que.append((nex,now[1]+1))\n            \nsn=[0 for i in range(n+1)]\nque=[(n,0)]\nvisited=[0 for i in range(n+1)]\nvisited[-1]=1\nhead=0\n\nwhile len(que)>head:\n    now=que[head]\n    head+=1\n    sn[now[0]]=now[1]\n    for nex in L[now[0]]:\n        if visited[nex]==0:\n            visited[nex]=1\n            que.append((nex,now[1]+1))\n\nkaname=[]\nfor i in range(1,n+1):\n    ck=fe[i]-sn[i]\n    if ck==1 or ck==2:\n        kaname.append(i)\n\ncnt=0\nque=[(1,0)]\nvisited=[0 for i in range(n+1)]\nvisited[1]=1\nhead=0\n\nwhile len(que)>head:\n    now=que[head]\n    head+=1\n    cnt+=1\n    for nex in L[now[0]]:\n        if visited[nex]==0 and not nex in kaname:\n            visited[nex]=1\n            que.append((nex,now[1]+1))\n\nif cnt*2>n:\n    print(\"Fennec\")\nelse:\n    print(\"Snuke\")", "code2": "#\n# abc054 c\n#\n\nimport sys\nfrom io import StringIO\nimport unittest\nimport itertools\n\n\nclass TestClass(unittest.TestCase):\n    def assertIO(self, input, output):\n        stdout, stdin = sys.stdout, sys.stdin\n        sys.stdout, sys.stdin = StringIO(), StringIO(input)\n        resolve()\n        sys.stdout.seek(0)\n        out = sys.stdout.read()[:-1]\n        sys.stdout, sys.stdin = stdout, stdin\n        self.assertEqual(out, output)\n\n    def test_\u5165\u529b\u4f8b_1(self):\n        input = \"\"\"3 3\n1 2\n1 3\n2 3\"\"\"\n        output = \"\"\"2\"\"\"\n        self.assertIO(input, output)\n\n    def test_\u5165\u529b\u4f8b_2(self):\n        input = \"\"\"7 7\n1 3\n2 7\n3 4\n4 5\n4 6\n5 6\n6 7\"\"\"\n        output = \"\"\"1\"\"\"\n        self.assertIO(input, output)\n\n\ndef resolve():\n    N, M = map(int, input().split())\n    P = [list(map(int, input().split())) for _ in range(M)]\n\n    R = itertools.permutations(range(1, N+1))\n\n    ans = 0\n    for r in R:\n        flag = True\n        r = list(r)\n        if r[0] != 1:\n            break\n        for i in range(1, N):\n            for p in P:\n                if (r[i-1] == p[0] and r[i] == p[1]) or (r[i-1] == p[1] and r[i] == p[0]):\n                    break\n            else:\n                flag = False\n        if flag == True:\n            ans += 1\n\n    print(ans)\n\n\nif __name__ == \"__main__\":\n    # unittest.main()\n    resolve()\n", "label": 0, "name1": "s845599163.py", "name2": "s851959667.py"}, {"id": 427, "code1": "#!/usr/bin/env python3\nfrom collections import defaultdict,deque\nfrom heapq import heappush, heappop\nfrom bisect import bisect_left, bisect_right\nimport sys, random, itertools, math\nsys.setrecursionlimit(10**5)\ninput = sys.stdin.readline\nsqrt = math.sqrt\ndef LI(): return list(map(int, input().split()))\ndef LF(): return list(map(float, input().split()))\ndef LI_(): return list(map(lambda x: int(x)-1, input().split()))\ndef II(): return int(input())\ndef IF(): return float(input())\ndef LS(): return list(map(list, input().split()))\ndef S(): return list(input().rstrip())\ndef IR(n): return [II() for _ in range(n)]\ndef LIR(n): return [LI() for _ in range(n)]\ndef FR(n): return [IF() for _ in range(n)]\ndef LFR(n): return [LI() for _ in range(n)]\ndef LIR_(n): return [LI_() for _ in range(n)]\ndef SR(n): return [input().rstrip()[:-1] for _ in range(n)]\ndef LSR(n): return [LS() for _ in range(n)]\nmod = 1000000007\ninf = 1e10\n\n#solve\ndef solve():\n    n = II()\n    if n == 0:\n        return False\n    group = set()\n    go_group = set()\n    member = set()\n    d = defaultdict(int)\n    g = SR(n)\n    for gi in g:\n        group.add(gi.split(\":\")[0])\n        d[gi.split(\":\")[0]] = gi.split(\":\")[1].split(\",\")\n    C = defaultdict(int)\n    def s(g):\n        for gi in g:\n            if gi in group:\n                if C[gi]:\n                    continue\n                C[gi] = 1\n                s(d[gi])\n            else:\n                member.add(gi)\n    s(d[g[0].split(\":\")[0]])\n    print(len(member))\n    return True\n\n#main\nif __name__ == '__main__':\n    while solve():\n        pass\n\n", "code2": "#!/usr/bin/env python3\n\nimport sys\nimport math\nimport re\nfrom bisect import bisect_right as br\nfrom bisect import bisect_left as bl\nsys.setrecursionlimit(1000000)\nfrom heapq import heappush, heappop,heappushpop\nfrom collections import defaultdict\nfrom itertools import accumulate\nfrom collections import Counter\nfrom collections import deque\nfrom operator import itemgetter\nfrom itertools import permutations\nmod = 10**9 + 7\ninf = float('inf')\ndef I(): return int(sys.stdin.readline())\ndef LI(): return list(map(int,sys.stdin.readline().split()))\n\nwhile 1:\n    n = I()\n    if n == 0:\n        quit()\n    f = defaultdict(dict)\n    t = defaultdict(lambda : False)\n    ch = defaultdict(lambda : False)\n    stack = []\n    for i in range(n):\n        x = input()[:-1].split(':')\n        y = x[1].split(',')\n        x = x[0]\n        for j in y:\n            f[x][j] = 1\n            if i != 0:\n                continue\n            stack.append(j)\n    ans = 0\n    while stack:\n        x = stack.pop()\n        if ch[x]:\n            continue\n        ch[x] = True\n        if len(f[x]) == 0 and not t[x]:\n            ans += 1\n            t[x] = True\n            continue\n        for i,j in f[x].items():\n            stack.append(i)\n    print(ans)\n", "label": 1, "name1": "s728275108.py", "name2": "s732192628.py"}, {"id": 787, "code1": "#!/usr/bin/env python3\nfrom collections import defaultdict,deque\nfrom heapq import heappush, heappop\nfrom bisect import bisect_left, bisect_right\nimport sys, random, itertools, math\nsys.setrecursionlimit(10**5)\ninput = sys.stdin.readline\nsqrt = math.sqrt\ndef LI(): return list(map(int, input().split()))\ndef LF(): return list(map(float, input().split()))\ndef LI_(): return list(map(lambda x: int(x)-1, input().split()))\ndef II(): return int(input())\ndef IF(): return float(input())\ndef LS(): return list(map(list, input().split()))\ndef S(): return list(input().rstrip())\ndef IR(n): return [II() for _ in range(n)]\ndef LIR(n): return [LI() for _ in range(n)]\ndef FR(n): return [IF() for _ in range(n)]\ndef LFR(n): return [LI() for _ in range(n)]\ndef LIR_(n): return [LI_() for _ in range(n)]\ndef SR(n): return [input().rstrip()[:-1] for _ in range(n)]\ndef LSR(n): return [LS() for _ in range(n)]\nmod = 1000000007\ninf = 1e10\n\n#solve\ndef solve():\n    n = II()\n    if n == 0:\n        return False\n    group = set()\n    go_group = set()\n    member = set()\n    d = defaultdict(int)\n    g = SR(n)\n    for gi in g:\n        group.add(gi.split(\":\")[0])\n        d[gi.split(\":\")[0]] = gi.split(\":\")[1].split(\",\")\n    C = defaultdict(int)\n    def s(g):\n        for gi in g:\n            if gi in group:\n                if C[gi]:\n                    continue\n                C[gi] = 1\n                s(d[gi])\n            else:\n                member.add(gi)\n    s(d[g[0].split(\":\")[0]])\n    print(len(member))\n    return True\n\n#main\nif __name__ == '__main__':\n    while solve():\n        pass\n\n", "code2": "mod=1000000007\nn=input()\na=map(int, raw_input().split())\nfac=[1]\nfor i in range(1, 100001):\n\tfac.append(fac[-1]*i%mod)\ninv=[0, 1]\nfor i in range(2, 100001):\n\tinv.append(-(mod/i)*inv[mod%i]%mod)\ninv_sum=[0]\nfor i in range(1, 100000):\n\tinv_sum.append((inv_sum[-1]+inv[i+1])%mod)\nresult=0\nfor i in range(n):\n\tresult+=(inv_sum[i]+1+inv_sum[n-i-1])*a[i]%mod\n\tresult%=mod\nprint result*fac[n]%mod\n", "label": 0, "name1": "s728275108.py", "name2": "s393644468.py"}, {"id": 540, "code1": "t =0\nfor a in range(4):\n  y = int(input())\n  t += y\nc = t\ng=0\nwhile True:\n if c <0: break\n else:\n  c-=60\n  g+=1\ng-=1\nprint g\nprint t%60", "code2": "# https://atcoder.jp/contests/tenka1-2018-beginner/tasks/tenka1_2018_d\n\nfrom itertools import combinations\n\nn = int(input())\nk = -1\nfor i in range(10**3):\n    if i*i - i - 2 * n == 0:\n        k = i\n\nif k == -1:\n    print('No')\n    exit()\n\n# print('Yes')\n# print(k)\n\nnum = 0\nV = [[] for _ in range(k)]\nfor cmb in combinations(range(k), r=2):\n    num += 1\n    a, b = cmb\n    V[a].append(num)\n    V[b].append(num)\nprint('Yes')\nprint(k)\nfor v in V:\n    print(len(v), end=\" \")\n    print(*v)\n", "label": 0, "name1": "s359341708.py", "name2": "s366576461.py"}, {"id": 928, "code1": "P=10**9+7\ndef egcd(a, b):\n    (x, lastx) = (0, 1)\n    (y, lasty) = (1, 0)\n    while b != 0:\n        q = a // b\n        (a, b) = (b, a % b)\n        (x, lastx) = (lastx - q * x, x)\n        (y, lasty) = (lasty - q * y, y)\n    return (lastx, lasty, a)\ndef inv(x):\n    return egcd(x,P)[0]\nN=int(input())\nFact=[0 for i in range(N+1)]\nFinv=[0 for i in range(N+1)]\nFact[0]=1\nFinv[0]=1\nfor i in range(N):\n    Fact[i+1]=((i+1)*Fact[i])%P\n    Finv[i+1]=(Finv[i]*inv(i+1))%P\nSGN=[0 for i in range(N)]\nans=0\nfor k in range(N):\n    if 2*k-N>=0:\n        SGN[k]=(((Fact[k-1]*Fact[k])%P)*Finv[2*k-N])%P\n        ans=(ans+k*(SGN[k]-SGN[k-1]))%P\nprint(ans)\n", "code2": "import itertools\nimport itertools\nimport os\nimport sys\nfrom collections import deque\n\nimport numpy as np\n\nif os.getenv(\"LOCAL\"):\n    sys.stdin = open(\"_in.txt\", \"r\")\n\nsys.setrecursionlimit(2147483647)\nINF = float(\"inf\")\nIINF = 10 ** 18\nMOD = 10 ** 9 + 7\n\nH, W = list(map(int, sys.stdin.readline().split()))\nS = [list(sys.stdin.readline().rstrip()) for _ in range(H)]\nseen = np.zeros((H, W), dtype=bool)\n\nans = 0\nfor h, w in itertools.product(range(H), range(W)):\n    if seen[h][w]:\n        continue\n    que = deque()\n    que.append((h, w))\n    black = white = 0\n    while que:\n        h, w = que.popleft()\n        if seen[h][w]:\n            continue\n        seen[h][w] = True\n        if S[h][w] == '#':\n            black += 1\n        else:\n            white += 1\n        for dh, dw in zip((h + 1, h - 1, h, h), (w, w, w + 1, w - 1)):\n            if 0 <= dh < H and 0 <= dw < W and not seen[dh][dw]:\n                if S[h][w] != S[dh][dw]:\n                    que.append((dh, dw))\n    ans += black * white\nprint(ans)\n", "label": 0, "name1": "s436731704.py", "name2": "s726328939.py"}, {"id": 568, "code1": "import math\na, b, C = map(float, input().split())\nC = C / 180 * math.pi\nprint('%.06f' % (a * b * math.sin(C) / 2))\nprint('%.06f' % ((a**2 + b**2 -2*a*b*math.cos(C))**(1/2) + a + b))\nprint('%.06f' % (b*math.sin(C)))", "code2": "a,b,c = map(int, input().split())\n\nprint(\"Yes\" if a<c<b or b<c<a else \"No\")", "label": 0, "name1": "s950542255.py", "name2": "s135661044.py"}, {"id": 856, "code1": "import sys\nfrom fractions import gcd\ninput = sys.stdin.readline\n\nN = int(input())\nA = list(map(int,input().split()))\n\nf = A[0]\nfor i in range(1,N):\n  f = gcd(f,A[i])\n  \nprint(f)", "code2": "from sys import stdin\ninput = stdin.readline\n\n\ndef main():\n  N, M = list(map(int, input().split()))\n  PS = []\n  for i in range(M):\n    p, s = input().split()\n    PS.append((int(p)-1, s))\n\n  penas = [0]*(N)\n  is_ac = [0]*(N)\n  for i in range(M):\n    p, s = PS[i]\n    if s == 'AC':\n      is_ac[p] = True\n    elif not is_ac[p]:\n      penas[p] += 1\n\n  num_ac = sum(is_ac)\n  num_pe = 0\n\n  for i in range(N):\n    if is_ac[i]:\n      num_pe += penas[i]\n\n  print(num_ac, num_pe)\n\n\nif(__name__ == '__main__'):\n  main()\n", "label": 0, "name1": "s433540614.py", "name2": "s655608530.py"}, {"id": 453, "code1": "from datetime import date\nwhile 1:\n\tm,d=map(int,raw_input().split())\n\tif m==0:break\n\tprint date(2004,m,d).strftime(\"%A\")", "code2": "a=['Wednesday','Thursday','Friday','Saturday','Sunday','Monday','Tuesday',0]\nwhile True:\n    q=map(int,raw_input().split())\n    if sum(q) == 0: break\n    print a[(sum([0,31,29,31,30,31,30,31,31,30,31,30,31][:q[0]])+q[1])%7]", "label": 1, "name1": "s074010277.py", "name2": "s388074654.py"}, {"id": 458, "code1": "a=['Wednesday','Thursday','Friday','Saturday','Sunday','Monday','Tuesday',0]\nwhile True:\n    q=map(int,raw_input().split())\n    if sum(q) == 0: break\n    print a[(sum([0,31,29,31,30,31,30,31,31,30,31,30,31][:q[0]])+q[1])%7]", "code2": "from datetime import date\n\ndic = {0:\"Monday\", 1:\"Tuesday\", 2:\"Wednesday\", 3:\"Thursday\", 4:\"Friday\", 5:\"Saturday\", 6:\"Sunday\"}\n\nwhile True:\n  month, day = map(int, input().split())\n  \n  if not month:\n    break\n\n  print(dic[date(2004, month, day).weekday()])\n", "label": 1, "name1": "s388074654.py", "name2": "s029712187.py"}, {"id": 788, "code1": "# coding: utf-8\ndef addset(args):\n    global a\n    for m in args:\n        if dic[m]==1:\n            a.add(m)\n        else:\n            if m not in used:\n                used.add(m)\n                addset(dc[m])\n \nwhile True:\n    n=int(input())\n    if n==0:\n        break\n    dic={}\n    first=[]\n    dc={}\n    for i in range(n):\n        g,m=input().split(':')\n        m=m.rstrip('.').split(',')\n        dc[g]=m\n        if i==0:\n            first.append(g)\n            first+=m\n        dic[g]=2\n        for mem in m:\n            if mem not in dic:\n                dic[mem]=1\n    a=set()\n    used=set()\n    addset(first[1:])\n    print(len(a))\n", "code2": "m=10**9+7\ni=s=r=0\nf=1\ninput()\na=input().split()\nfor x in a:i+=1;s+=pow(i,m-2,m);r+=int(x)*~-s+int(a[-i])*s;f=f*i%m\nprint(r*f%m)", "label": 0, "name1": "s673127686.py", "name2": "s072063122.py"}, {"id": 853, "code1": "# -*- coding: utf-8 -*-\n\"\"\"\nhttp://judge.u-aizu.ac.jp/onlinejudge/description.jsp?id=0138\n\n\"\"\"\nimport sys\nfrom sys import stdin\nfrom operator import itemgetter\ninput = stdin.readline\n\ndef solve(data):\n    data.sort(key=itemgetter(1))\n    top2 = data[:2]\n    others = data[2:]\n    return top2, others         #  ??????2?????\u00a8????????\\??????id??\u00a8?????????????????????\n\n\ndef main(args):\n    others_results = []\n    for _ in range(3):\n        round_results = []\n        for _ in range(8):\n            id, time = input().split()\n            round_results.append([int(id), float(time)])\n        top2, others = solve(round_results)\n        others_results.extend(others)\n\n        # ????????????2???????????\u00b1\n        for id, time in top2:\n            print('{} {}'.format(id, time))\n\n    # ????????????3?????\\?????????????????????2???????????\u00b1\n    top2, others = solve(others_results)\n    for id, time in top2:\n        print('{} {}'.format(id, time))\n\n\nif __name__ == '__main__':\n    main(sys.argv[1:])", "code2": "from sys import stdin\ninput = stdin.readline\n\n\ndef main():\n  N, M = list(map(int, input().split()))\n  PS = []\n  for i in range(M):\n    p, s = input().split()\n    PS.append((int(p)-1, s))\n\n  penas = [0]*(N)\n  is_ac = [0]*(N)\n  for i in range(M):\n    p, s = PS[i]\n    if s == 'AC':\n      is_ac[p] = True\n    elif not is_ac[p]:\n      penas[p] += 1\n\n  num_ac = sum(is_ac)\n  num_pe = 0\n\n  for i in range(N):\n    if is_ac[i]:\n      num_pe += penas[i]\n\n  print(num_ac, num_pe)\n\n\nif(__name__ == '__main__'):\n  main()\n", "label": 0, "name1": "s481502029.py", "name2": "s655608530.py"}, {"id": 319, "code1": "import sys\n#input = sys.stdin.readline\n\ndef inpl(): return list(map(int, input().split()))\nQ = int(input())\n \nMOD = 10**6 + 3\ndef cmb(n, r, mod):\n    if ( r<0 or r>n ):\n        return 0\n    \n    r = min(r, n-r)\n    return g1[n] * g2[r] * g2[n-r] % mod\n \nsize = MOD + 1\ng1, g2, inverse = [0]*size, [0]*size, [0]*size\n \ng1[:2] = [1, 1] # \u5143\u30c6\u30fc\u30d6\u30eb\ng2[:2] = [1, 1] #\u9006\u5143\u30c6\u30fc\u30d6\u30eb\ninverse[:2] = [0, 1] #\u9006\u5143\u30c6\u30fc\u30d6\u30eb\u8a08\u7b97\u7528\u30c6\u30fc\u30d6\u30eb\n\nfor i in range(2, size):\n    g1[i] =  ( g1[i-1] * i ) % MOD \n    inverse[i] = (-inverse[MOD % i] * (MOD//i) ) % MOD \n    g2[i] =  (g2[i-1] * inverse[i]) % MOD\n\nfor _ in range(Q):\n    x, d, n = inpl()\n    xd = x*inverse[d]%MOD\n    if d != 0:\n        if n < ((MOD-x)*inverse[d] + 1)%MOD:\n            n = n%MOD\n            print((g1[(xd + n - 1)%MOD] * g2[(xd-1)%MOD] * pow(d, n, MOD))%MOD)\n        else:\n            print(0)\n    else:\n        print(pow(x, n, MOD))", "code2": "# https://atcoder.jp/contests/m-solutions2019/submissions/5741430\nimport sys\n\ninput = sys.stdin.readline\n\nMOD = 10 ** 6 + 3\n\n\ndef inv(n):\n    return pow(n, MOD - 2, MOD)\n\n\nfact = [1]\nfor n in range(1, MOD):\n    fact.append((fact[-1] * n) % MOD)\n    # d>1 \u306e\u6570\u5217\u3092 d=1 \u3068\u306a\u308b\u6570\u5217\u306b\u5909\u63db\u3059\u308b\n    # MOD\u306e\u500d\u6570\u3092\u542b\u3080\u6570\u5217\u306e\u7a4d\u306f0\u306b\u306a\u308b\u306e\u3067,\n    # MOD\u306e\u500d\u6570\u3092\u542b\u307e\u306a\u3044\u533a\u9593\u306e\u7a4d\u304c\u8a08\u7b97\u3067\u304d\u308c\u3070\u3088\u3044\n    # \u305d\u306e\u3088\u3046\u306a\u533a\u9593\u306e\u53f3\u7aef\u306fMOD-1\u3067\u3042\u308a,fact[MOD-1]\u304c\u8a08\u7b97\u3067\u304d\u308c\u3070\u3088\u3044\n\ninv_fact = [-1] * MOD\ninv_fact[MOD - 1] = inv(fact[-1])\nfor n in range(MOD - 2, -1, -1):\n    inv_fact[n] = ((inv_fact[n + 1] * (n + 1)) % MOD)\n    # inv_fact\u306f,inv(n!)\u306bn,n-1,...\u3092\u639b\u3051\u308b\u30a4\u30e1\u30fc\u30b8\n\nQ = int(input())\nfor _ in range(Q):\n    x, d, n = map(int, input().split())\n\n    if x == 0:\n        print(0)\n        continue\n\n    if d == 0:\n        print(pow(x, n, MOD))\n        continue\n\n    xd = (x * inv(d)) % MOD\n    if xd == 0:\n        print(0)\n        continue\n\n    if MOD - xd < n:\n        print(0)\n        continue\n\n    dn = pow(d, n, MOD)\n    print((((fact[xd + n - 1] * inv_fact[xd - 1]) % MOD) * dn) % MOD)\n", "label": 1, "name1": "s890996219.py", "name2": "s847761585.py"}, {"id": 445, "code1": "mod=1000000007\nn=input()\na=map(int, raw_input().split())\nfac=[1]\nfor i in range(1, 100001):\n\tfac.append(fac[-1]*i%mod)\ninv=[0, 1]\nfor i in range(2, 100001):\n\tinv.append(-(mod/i)*inv[mod%i]%mod)\ninv_sum=[0]\nfor i in range(1, 100000):\n\tinv_sum.append((inv_sum[-1]+inv[i+1])%mod)\nresult=0\nfor i in range(n):\n\tresult+=(inv_sum[i]+1+inv_sum[n-i-1])*a[i]%mod\n\tresult%=mod\nprint result*fac[n]%mod\n", "code2": "import sys\ninput = sys.stdin.readline\nN = int(input())\na = list(map(int, input().split()))\nmod = 10 ** 9 + 7\n\nclass Factorial:\n  def __init__(self, n, mod):\n    self.f = [1]\n    for i in range(1, n + 1):\n      self.f.append(self.f[-1] * i % mod)\n    self.i = [pow(self.f[-1], mod - 2, mod)]\n    for i in range(1, n + 1)[: : -1]:\n      self.i.append(self.i[-1] * i % mod)\n    self.i.reverse()\n  def factorial(self, i):\n    return self.f[i]\n  def ifactorial(self, i):\n    return self.i[i]\n  def combi(self, n, k):\n    return self.f[n] * self.i[n - k] % mod * self.i[k] % mod\n\nf = Factorial(N, mod)\nrevs = [0] * (N + 1)\nfor i in range(N): revs[i + 1] = (revs[i] + pow(i + 1, mod - 2, mod)) % mod\ndp = [0] * N\nfor i in range(N):\n  l = i + 1\n  r = N - i\n  dp[i] = f.factorial(N) * (revs[l] + revs[r] - revs[1]) % mod * a[i] % mod\nres = 0\nfor i in range(N):\n  res += dp[i]\n  res %= mod\nprint(res)", "label": 1, "name1": "s393644468.py", "name2": "s759175616.py"}, {"id": 539, "code1": "a = int(input())\nb = int(input())\nc = int(input())\nd = int(input())\n\nt = a+b+c+d\nx = t // 60\ny = t - (x*60)\nprint(x)\nprint(y)\n", "code2": "# AOJ 0217 Walking in the Hospital\n# Python3 2018.6.23 bal4u\n\nwhile 1:\n\tn = int(input())\n\tif n == 0: break\n\tdmax = 0\n\tfor i in range(n):\n\t\tp, d1, d2 = map(int, input().split())\n\t\tif d1+d2 > dmax: id, dmax = p, d1+d2\n\tprint(id, dmax)\n", "label": 0, "name1": "s681424325.py", "name2": "s876770513.py"}, {"id": 890, "code1": "#!/usr/bin/env python3\nimport sys\nsys.setrecursionlimit(10**8)\nINF = float(\"inf\")\n\n\ndef solve(K: int, A: int, B: int):\n    for s in range(A, B+1):\n        if s % K == 0:\n            print(\"OK\")\n            return\n    print(\"NG\")\n    return\n\n\ndef main():\n\n    def iterate_tokens():\n        for line in sys.stdin:\n            for word in line.split():\n                yield word\n    tokens = iterate_tokens()\n    K = int(next(tokens))  # type: int\n    A = int(next(tokens))  # type: int\n    B = int(next(tokens))  # type: int\n    solve(K, A, B)\n\n\nif __name__ == '__main__':\n    main()\n", "code2": "#https://drken1215.hatenablog.com/entry/2019/03/23/175300\nN,M = map(int,input().split())\n\nonce_time = 1900 * M + 100 * (N - M)\ne = pow(2,M)\nprint(once_time * e)\n", "label": 0, "name1": "s658779563.py", "name2": "s596326690.py"}, {"id": 473, "code1": "n=int(input())\nA=[int(i) for i in input().split()]\nB=[int(i) for i in input().split()]\nct1,ct2,ct3=0,0,0\nfor i in range(n):\n  ct1+=(B[i]-A[i])\n  ct2+=max(A[i]-B[i],0)\n  if B[i]>A[i]:\n    ct3+=(B[i]-A[i]-1)//2+1\nprint(\"Yes\" if max(ct2,ct3)<=ct1 else \"No\")", "code2": "N = int(input())\na = list(map(int, input().split(\" \")))\nb = list(map(int, input().split(\" \")))\na_cnt, b_cnt = 0, 0\n\nfor i in range(N):\n    # ai\u3092bi\u306b\u8fd1\u3065\u3051\u308b\n    if a[i] < b[i]:\n        num = (b[i] - a[i] + 1) // 2\n        a_cnt += num\n        a[i] += 2 * num\n\nfor i in range(N):\n    # bi\u3092ai\u306b\u8fd1\u3065\u3051\u308b\n    if b[i] < a[i]:\n        b_cnt += (a[i] - b[i])\n\nif a_cnt >= b_cnt:\n    print(\"Yes\")\nelse:\n    print('No')", "label": 1, "name1": "s862908490.py", "name2": "s391693807.py"}]